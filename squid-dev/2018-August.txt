From manjunath.mp at gmail.com  Thu Aug  2 06:32:46 2018
From: manjunath.mp at gmail.com (Manju Prabhu)
Date: Wed, 1 Aug 2018 23:32:46 -0700
Subject: [squid-dev] Converting squid to library
Message-ID: <CACpmGevO_Yxht3GJGSCf+umyZ2qCc47tA-xF_wKZhVniBxfzLw@mail.gmail.com>

Hi,
I plan to use Squid for ssl-proxy in my project. However, I have my own
data-path and TCP stack I want to try it out with for performance reasons.
The TCP stack could be in user-space for example, if I use DPDK.

* Is there any potential pitfalls if I embark on this task?
* Is it better to convert squid to a library and link it to my process
along with DPDK (Option A)? Or is it better to try to link DPDK to squid
(Option B)?
* With squid I see that separate threads are created to manage certificate
mimicking etc. Do all of that get complicated with Option A?

I apologize in advance for some open ended questions. Please point me to
the right forum if these questions are not valid here.

Thanks,
Manju
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20180801/773633f1/attachment.html>

From squid3 at treenet.co.nz  Thu Aug  2 10:16:12 2018
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Thu, 2 Aug 2018 22:16:12 +1200
Subject: [squid-dev] Converting squid to library
In-Reply-To: <CACpmGevO_Yxht3GJGSCf+umyZ2qCc47tA-xF_wKZhVniBxfzLw@mail.gmail.com>
References: <CACpmGevO_Yxht3GJGSCf+umyZ2qCc47tA-xF_wKZhVniBxfzLw@mail.gmail.com>
Message-ID: <d30c84a0-15bb-0078-cd25-0db6f2113f2e@treenet.co.nz>

On 02/08/18 18:32, Manju Prabhu wrote:
> Hi,
> I plan to use Squid for ssl-proxy in my project. However, I have my own
> data-path and TCP stack I want to try it out with for performance
> reasons. The TCP stack could be in user-space for example, if I use DPDK.
> 
> * Is there any potential pitfalls if I embark on this task?

The first one is that Squid is is a collection of binaries and processes
working together to process traffic. Not suitable for being a library.


> * Is it better to convert squid to a library and link it to my process
> along with DPDK (Option A)? Or is it better to try to link DPDK to squid
> (Option B)?

Neither if you can avoid it. Option B only if you have to.

Squid uses POSIX API for I/O. So if you are providing POSIX API from
your TCP stack it should be as simple as building Squid with the
appropriate ./configure CXXFLAGS, CFLAGS, and LDADD build options to
link your stacks library/objects.

If you have done some non-standard API you will have to write a mapping
between it and POSIX functions. Doing that in your own code simplifies
things considerably - especially for your codes prospects being used
widely, but it can be patched into Squid if necessary.

Also, many TLS/SSL I/O operations are done through the system TLS/SSL
library. Not by Squid at all. So there is additional complication
rebuilding that library against your stack before Squid can use it.
Having the standard POSIX API which both can access is much easier and
better than any custom API.



> * With squid I see that separate threads are created to manage
> certificate mimicking etc. Do all of that get complicated with Option A? 

Not threads. Processes. Squid is running independent
binaries/interpreters, and forking itself sometimes as well. Thus your
Option A is not an option.


> 
> I apologize in advance for some open ended questions. Please point me to
> the right forum if these questions are not valid here.
> 

This is the right place.

Amos

From squid3 at treenet.co.nz  Thu Aug  2 10:43:59 2018
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Thu, 2 Aug 2018 22:43:59 +1200
Subject: [squid-dev] How to rewrite URL in squid proxy server according
 to client's custom request header?
In-Reply-To: <CAPDDJgGju5yPgqcrh8hme5wiRasFdg8fCG5nnLt8U1v9w_FNYQ@mail.gmail.com>
References: <CAPDDJgGju5yPgqcrh8hme5wiRasFdg8fCG5nnLt8U1v9w_FNYQ@mail.gmail.com>
Message-ID: <d7f4ece6-760e-ae24-6263-8d49ae028154@treenet.co.nz>

On 01/08/18 08:27, Abu Noman wrote:
> How can I rewrite the destination in Squid proxy server according to the
> client's request header?
> 

This is a usage question. Please followup in squid-users mailing list.

The answer is yes and no.

No - Squid does not do any re-writing. It calls a helper process or
script to determine if, when, and how re-writing is done.

see <http://www.squid-cache.org/Doc/config/url_rewrite_program/>


> *Details:*
> If I call an API like |GET www.google.com <http://www.google.com/>
> HTTP/1.0\r\nGo:www.google.com.bd <http://www.google.com.bd/>| 

That request is invalid, even in HTTP/1.0. Any HTTP agent receiving the
request should reject, or at minimum reformat it to:

 GET / HTTP/1.0
 Host: www.google.com
 Go: www.google.com.bd


As you should see, no need to bother with this "Go" header. Just send
the correct Host header. The client intention will be clear and do the
correct thing regardless of which HTTP agent(s) are processing the
message. The message does not even have to reach the mentioned "API" to
be delivered to the correct server. An intermediary closer to the client
may perform the delivery via a more efficient route.

This valid message being used is _important_ since most HTTP messages go
through between 2 and 8 layers of proxying in the modern Internet.
Whether you can see those layers or not they are there.

Amos

From vishali.somaskanthan at viptela.com  Sat Aug  4 00:15:33 2018
From: vishali.somaskanthan at viptela.com (Vishali Somaskanthan)
Date: Fri, 3 Aug 2018 17:15:33 -0700
Subject: [squid-dev] TLS proxy-server connection optimization
In-Reply-To: <211c4e40-1ce6-24ca-7446-9ad5e317d441@measurement-factory.com>
References: <CABfsTT4a8ePKF7BRHkJ5940FT7-mMJ=yRpQFk6H-WDSAG+Gskw@mail.gmail.com>
 <211c4e40-1ce6-24ca-7446-9ad5e317d441@measurement-factory.com>
Message-ID: <CABfsTT6rfA=5S+XrYdim5zHR2FGT170PwF4qjsUbX0T0Of4CaA@mail.gmail.com>

Hey Alex,

Thank you for mentioning about specific details. Here is the point.

[Alex] Why does Squid close the (not pinned) Squid-to-server connection in
this
case? What code/condition triggers that closure in your tests?

When the SSL-bump steps are
1. *peek-splice and peek-peek-splice*,
we observe the behavior that squid does tunneling and presume that SSL
proxying is not happening in this case.
Hence, after the series of writes, *keepGoingAfterRead()* is called where
the following snippet triggers the closure from squid to server.

*/* Only close the remote end if we've finished queueing data to it */*
*        if (from.len == 0 && Comm::IsConnOpen(to.conn) ) {*
*            to.conn->close();*

Here, we would to like to do the optimization where instead of closing
them, we want to Push the connection to Pconn pool which can be used later
for a second request. So that TCP persistence is achieved.

2. *peek-bump*

As we have discussed already in the general forum (http://squid-web-pro
xy-cache.1019090.n4.nabble.com/server-persistent-connections
-and-cache-td4685973.html), the table contains the cases where pinning
happens and where not, we would like to achieve the SSL persistence here
from squid to-server connection. When we unpin the connection it gets
closed, and we would like to retain them up in the pool. Please let me know
what information is required in this case for further validation.


Thank you,
Vishali


On Tue, Jul 31, 2018 at 4:29 PM, Alex Rousskov <
rousskov at measurement-factory.com> wrote:

> On 07/31/2018 05:00 PM, Vishali Somaskanthan wrote:
> > If I peek @step1 and splice@ step2 -> The connections are **not** pinned
> > as such. However, Client-squid SSL+TCP termination results in
> > squid-server SSL+TCP termination.
>
> Why does Squid close the (not pinned) Squid-to-server connection in this
> case? What code/condition triggers that closure in your tests?
>
>
> > Please provide any insights on whether this is going to be a valid
> > optimization and if we can come up with a set of rules where this
> > could apply.
>
> With enough information/analysis, we should be able to correctly
> evaluate your proposal, but that proposal will have to be a lot more
> specific than "We want to optimize TLS and evaluate if squid to-server
> TLS connection can be reused for consecutive requests from multiple
> clients". My question above is a (small) step towards formulating a
> specific "We want to change Squid to do X instead of Y" proposal.
>
>
> Thank you,
>
> Alex.
>



-- 
Regards,
Vishali Somaskanthan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20180803/b07c9247/attachment.html>

From rousskov at measurement-factory.com  Sat Aug  4 02:45:03 2018
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Fri, 3 Aug 2018 20:45:03 -0600
Subject: [squid-dev] TLS proxy-server connection optimization
In-Reply-To: <CABfsTT6rfA=5S+XrYdim5zHR2FGT170PwF4qjsUbX0T0Of4CaA@mail.gmail.com>
References: <CABfsTT4a8ePKF7BRHkJ5940FT7-mMJ=yRpQFk6H-WDSAG+Gskw@mail.gmail.com>
 <211c4e40-1ce6-24ca-7446-9ad5e317d441@measurement-factory.com>
 <CABfsTT6rfA=5S+XrYdim5zHR2FGT170PwF4qjsUbX0T0Of4CaA@mail.gmail.com>
Message-ID: <2995e24b-676b-64fa-ca9a-58b0c84b60d0@measurement-factory.com>

On 08/03/2018 06:15 PM, Vishali Somaskanthan wrote:

> [Alex] Why does Squid close the (not pinned) Squid-to-server connection
> in this case? What code/condition triggers that closure in your tests?
> 
> When the SSL-bump steps are
> 1. *peek-splice and peek-peek-splice*, 

Ah, I see. This is a tunneled connection. It is equivalent to pinning
for most purposes, but the pinning methods are not used because
tunnel.cc code operates on both connections at once. Pinning methods are
mostly needed to associate the to-server connection with the future
from-client request, but tunnel.cc does not have future requests. It
only shovels bytes.

> we observe the behavior that squid does tunneling and presume that SSL
> proxying is not happening in this case. 
> Hence, after the series of writes, /keepGoingAfterRead()/ is called
> where the following snippet triggers the closure from squid to server.
> 
> //* Only close the remote end if we've finished queueing data to it *//
> /        if (from.len == 0 && Comm::IsConnOpen(to.conn) ) {/
> /            to.conn->close();/
> 
> Here, we would to like to do the optimization where instead of closing
> them, we want to Push the connection to Pconn pool which can be used
> later for a second request.

Let's assume you did that. How would Squid know which clients can reuse
that old to-server connection? Would any client requesting a tunnel to
the same server name be eligible? Any client requesting a tunnel to the
same server IP? A client with some specific TLS Hello properties? A
client from the same IP address as the disconnected client? A client
that is authorized by some new directive? Etc.

Would the to-server connection be reusable only when the client
connection was closed with a zero-length read? Or in some other cases?

Many of the above choices would break clients and/or servers. Some may
be safe in the hands of capable sysadmins. Your proposal has to document
your choice(s), explain why they are the best (or at least good), and
analyze the associated risks/problems.


> 2. *peek-bump*
> *
> As we have discussed already in the general forum
> (http://squid-web-proxy-cache.1019090.n4.nabble.com/server-persistent-connections-and-cache-td4685973.html
> <http://squid-web-proxy-cache.1019090.n4.nabble.com/server-persistent-connections-and-cache-td4685973.html>),
> the table contains the cases where pinning happens and where not, we
> would like to achieve the SSL persistence here from squid to-server
> connection. When we unpin the connection it gets closed, and we would
> like to retain them up in the pool. Please let me know what information
> is required in this case for further validation. 

The bumping cases have pretty much the same unanswered questions as
splicing cases (and more). Bumping cases have access to HTTP-level
information (of bumped messages), but I do not know whether you need
that information to restrict reuse.

Please note that this is not so much about the code right now. It is
about deciding and documenting what you want Squid to do (differently)
at the level of detail sufficient for others to review your proposal and
make correct, informed recommendations.

Today, we do not know why you want to reuse some connections, and how
you want to map your needs to Squid configuration/functionality changes.
Thus, it is impossible to predict whether your future changes will be
accepted even if those changes are implemented correctly and beautifully.


HTH,

Alex.


> On Tue, Jul 31, 2018 at 4:29 PM, Alex Rousskov wrote:
> 
>     On 07/31/2018 05:00 PM, Vishali Somaskanthan wrote:
>     > If I peek @step1 and splice@ step2 -> The connections are **not**
>     pinned
>     > as such. However, Client-squid SSL+TCP termination results in
>     > squid-server SSL+TCP termination.
> 
>     Why does Squid close the (not pinned) Squid-to-server connection in this
>     case? What code/condition triggers that closure in your tests?
> 
> 
>     > Please provide any insights on whether this is going to be a valid
>     > optimization and if we can come up with a set of rules where this
>     > could apply.
> 
>     With enough information/analysis, we should be able to correctly
>     evaluate your proposal, but that proposal will have to be a lot more
>     specific than "We want to optimize TLS and evaluate if squid to-server
>     TLS connection can be reused for consecutive requests from multiple
>     clients". My question above is a (small) step towards formulating a
>     specific "We want to change Squid to do X instead of Y" proposal.
> 
> 
>     Thank you,
> 
>     Alex.
> 
> 
> 
> 
> -- 
> Regards,
> Vishali Somaskanthan
> 
> 
> _______________________________________________
> squid-dev mailing list
> squid-dev at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-dev
> 


From manjunath.mp at gmail.com  Sun Aug  5 06:57:53 2018
From: manjunath.mp at gmail.com (Manju Prabhu)
Date: Sat, 4 Aug 2018 23:57:53 -0700
Subject: [squid-dev] Converting squid to library
In-Reply-To: <d30c84a0-15bb-0078-cd25-0db6f2113f2e@treenet.co.nz>
References: <CACpmGevO_Yxht3GJGSCf+umyZ2qCc47tA-xF_wKZhVniBxfzLw@mail.gmail.com>
 <d30c84a0-15bb-0078-cd25-0db6f2113f2e@treenet.co.nz>
Message-ID: <CACpmGevB7OKmKAV+S14VoCi8nAwc2tRL7ZGXUY91+tjuLK89Jg@mail.gmail.com>

Hi Amos,
Sure, thanks.

Initially, I am planning to try to use f-stack. Something, similar to
https://github.com/F-Stack/f-stack/blob/master/doc/F-Stack_Nginx_APP_Guide.md
F-stack provides wrappers around POSIX APIs.
So, apart from squid and open-ssl, would I need to re-build anything else?

Thanks,
Manju

On Thu, Aug 2, 2018 at 3:16 AM, Amos Jeffries <squid3 at treenet.co.nz> wrote:

> On 02/08/18 18:32, Manju Prabhu wrote:
> > Hi,
> > I plan to use Squid for ssl-proxy in my project. However, I have my own
> > data-path and TCP stack I want to try it out with for performance
> > reasons. The TCP stack could be in user-space for example, if I use DPDK.
> >
> > * Is there any potential pitfalls if I embark on this task?
>
> The first one is that Squid is is a collection of binaries and processes
> working together to process traffic. Not suitable for being a library.
>
>
> > * Is it better to convert squid to a library and link it to my process
> > along with DPDK (Option A)? Or is it better to try to link DPDK to squid
> > (Option B)?
>
> Neither if you can avoid it. Option B only if you have to.
>
> Squid uses POSIX API for I/O. So if you are providing POSIX API from
> your TCP stack it should be as simple as building Squid with the
> appropriate ./configure CXXFLAGS, CFLAGS, and LDADD build options to
> link your stacks library/objects.
>
> If you have done some non-standard API you will have to write a mapping
> between it and POSIX functions. Doing that in your own code simplifies
> things considerably - especially for your codes prospects being used
> widely, but it can be patched into Squid if necessary.
>
> Also, many TLS/SSL I/O operations are done through the system TLS/SSL
> library. Not by Squid at all. So there is additional complication
> rebuilding that library against your stack before Squid can use it.
> Having the standard POSIX API which both can access is much easier and
> better than any custom API.
>
>
>
> > * With squid I see that separate threads are created to manage
> > certificate mimicking etc. Do all of that get complicated with Option A?
>
> Not threads. Processes. Squid is running independent
> binaries/interpreters, and forking itself sometimes as well. Thus your
> Option A is not an option.
>
>
> >
> > I apologize in advance for some open ended questions. Please point me to
> > the right forum if these questions are not valid here.
> >
>
> This is the right place.
>
> Amos
> _______________________________________________
> squid-dev mailing list
> squid-dev at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20180804/b7251a2a/attachment.html>

From squid3 at treenet.co.nz  Sun Aug  5 08:31:33 2018
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Sun, 5 Aug 2018 20:31:33 +1200
Subject: [squid-dev] Converting squid to library
In-Reply-To: <CACpmGevB7OKmKAV+S14VoCi8nAwc2tRL7ZGXUY91+tjuLK89Jg@mail.gmail.com>
References: <CACpmGevO_Yxht3GJGSCf+umyZ2qCc47tA-xF_wKZhVniBxfzLw@mail.gmail.com>
 <d30c84a0-15bb-0078-cd25-0db6f2113f2e@treenet.co.nz>
 <CACpmGevB7OKmKAV+S14VoCi8nAwc2tRL7ZGXUY91+tjuLK89Jg@mail.gmail.com>
Message-ID: <42bfb121-07dd-dbe8-3b8b-90702f3ee3e7@treenet.co.nz>

On 05/08/18 18:57, Manju Prabhu wrote:
> Hi Amos,
> Sure, thanks. 
> 
> Initially, I am planning to try to use f-stack. Something, similar
> to https://github.com/F-Stack/f-stack/blob/master/doc/F-Stack_Nginx_APP_Guide.md
> F-stack provides wrappers around POSIX APIs.\
> So, apart from squid and open-ssl, would I need to re-build anything else?
> 

AFAIK that is all. Assuming that what you asked for is actually what you
need.

Reading that f-stack reference and the root f-stack documentation I am
getting the distinct idea that what it is referring to as "networking"
is a series of WebSocket or HTTP messages to deliver custom application
data around with transfer protocols compression (eg HTTP/2 HPACK)
pretending to be faster "packet speed".
 Is that correct? and you are actually needing Squid as the agent to
relay those messages (er, "packets") ?


Amos

From arrahmanever at gmail.com  Fri Aug 10 17:02:51 2018
From: arrahmanever at gmail.com (rahman)
Date: Fri, 10 Aug 2018 12:02:51 -0500 (CDT)
Subject: [squid-dev] Squid supports two-ssl auth as mated squid proxy
Message-ID: <1533920571410-0.post@n4.nabble.com>

Hi ,Please let me know squid supports two way ssl authentication.Please
confirm if we can have an application server connection to remote server via
NATed squid proxy. The remote server requires client authentication
(SSLMutual Auth)? If yes, please guide on how to set it up.




--
Sent from: http://squid-web-proxy-cache.1019090.n4.nabble.com/Squid-Development-f1042840.html

From squid3 at treenet.co.nz  Sun Aug 12 18:31:05 2018
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Mon, 13 Aug 2018 06:31:05 +1200
Subject: [squid-dev] Squid supports two-ssl auth as mated squid proxy
In-Reply-To: <1533920571410-0.post@n4.nabble.com>
References: <1533920571410-0.post@n4.nabble.com>
Message-ID: <ab12b76f-c2d5-03db-b5fa-618d0d9a0c39@treenet.co.nz>

On 11/08/18 05:02, rahman wrote:
> Hi ,Please let me know squid supports two way ssl authentication.Please
> confirm if we can have an application server connection to remote server via
> NATed squid proxy. The remote server requires client authentication
> (SSLMutual Auth)? If yes, please guide on how to set it up.


No.

Squid does/should support two-way TLS authentication.

However, when NAT is involved the clients very likely do not permit it
to happen for all the exact same reasons that NAT breaks all types of
authentication:

 * the client does not know that it is talking to the proxy.

NAT is interception and TLS is explicitly designed to prevent
interception. Two-way authentication is even more strictly forbidding
than regular one-way authentication in TLS.


Any client worth using *will not* send security credentials at any level
to a upstream proxy which is not supposed to be there. The client
connected to origin server and will only send credentials appropriate
for that origin.
 The proxy does not have access to private key(s) of the origin. So
cannot generate nor verify any authentication token (ie client
certificate) which requires that private key.

The best a proxy can do is replace the origin keys with proxy keys and
hope the client is a) not verifying properly, or b) trusts the proxy
based on those new keys alone. (This what SSL-Bump does).

Amos

