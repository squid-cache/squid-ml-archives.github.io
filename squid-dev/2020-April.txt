From gkinkie at gmail.com  Fri Apr  3 11:25:55 2020
From: gkinkie at gmail.com (Francesco Chemolli)
Date: Fri, 3 Apr 2020 12:25:55 +0100
Subject: [squid-dev] RFC: cacheMatchAcl
Message-ID: <CA+Y8hcMe-o6-CHvHaS9rq_p7s+msdV-JOSm8jFTNa5jRJUgZ3g@mail.gmail.com>

Hi all,
  I'm looking at places where to improve things a bit, and I stumbled
across cacheMatchAcl . It tries hard to be generic, but it is only ever
used in ACLProxyAuth::matchProxyAuth . Would it make sense to just have a
specialised cache for proxyauth?

-- 
    Francesco
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20200403/f1cfa686/attachment.html>

From rousskov at measurement-factory.com  Fri Apr  3 14:34:05 2020
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Fri, 3 Apr 2020 10:34:05 -0400
Subject: [squid-dev] RFC: cacheMatchAcl
In-Reply-To: <CA+Y8hcMe-o6-CHvHaS9rq_p7s+msdV-JOSm8jFTNa5jRJUgZ3g@mail.gmail.com>
References: <CA+Y8hcMe-o6-CHvHaS9rq_p7s+msdV-JOSm8jFTNa5jRJUgZ3g@mail.gmail.com>
Message-ID: <7378b117-ca67-e791-9802-97ea1d3554aa@measurement-factory.com>

On 4/3/20 7:25 AM, Francesco Chemolli wrote:

>   I'm looking at places where to improve things a bit, and I stumbled
> across cacheMatchAcl . It tries hard to be generic, but it is only ever
> used in ACLProxyAuth::matchProxyAuth . Would it make sense to just have
> a specialised cache for proxyauth?

I wonder whether proxy_auth is special in this context:

1. Is proxy_auth cache radically different from other ACL caches such as
external ACL cache? Or did we just not bother unifying the code
supporting these two caches?

2. Do some other ACLs cache nothing just because we did not have enough
time to add the corresponding caching support? Or do proxy_auth and
external ACL poses some unique properties that no other ACL already has
or likely to have in the foreseeable future?

The result of this analysis is likely to lead us towards the correct
answer to your question.


Cheers,

Alex.

From squid3 at treenet.co.nz  Sat Apr  4 06:41:16 2020
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Sat, 4 Apr 2020 19:41:16 +1300
Subject: [squid-dev] RFC: cacheMatchAcl
In-Reply-To: <7378b117-ca67-e791-9802-97ea1d3554aa@measurement-factory.com>
References: <CA+Y8hcMe-o6-CHvHaS9rq_p7s+msdV-JOSm8jFTNa5jRJUgZ3g@mail.gmail.com>
 <7378b117-ca67-e791-9802-97ea1d3554aa@measurement-factory.com>
Message-ID: <7a429978-f8c0-069f-fbab-14d8aea80fbc@treenet.co.nz>

On 4/04/20 3:34 am, Alex Rousskov wrote:
> On 4/3/20 7:25 AM, Francesco Chemolli wrote:
> 
>>   I'm looking at places where to improve things a bit, and I stumbled
>> across cacheMatchAcl . It tries hard to be generic, but it is only ever
>> used in ACLProxyAuth::matchProxyAuth . Would it make sense to just have
>> a specialised cache for proxyauth?
> 
> I wonder whether proxy_auth is special in this context:
> 
> 1. Is proxy_auth cache radically different from other ACL caches such as
> external ACL cache? Or did we just not bother unifying the code
> supporting these two caches?
> 

Pretty much yes, we have not done the legwork. Almost every component in
Squid which deals with externally provided state has some form of ad-hoc
cache. If we are lucky the use a hash or dlink. One at least uses splay
(ouch).


One of my background projects in the effort to empty the PR queue this
year is to implement a proper CLP Map - specifically for PR 30 instead
of the LruMap disagreement blocking it. That would be a good container
to use for all these small state data caches all over Squid - keyed
access with a dual TTL and LFU (fading) removal mechanism.

If this ACL cache is not causing issues already we can wait until that
gets submitted for review.


> 2. Do some other ACLs cache nothing just because we did not have enough
> time to add the corresponding caching support? Or do proxy_auth and
> external ACL poses some unique properties that no other ACL already has
> or likely to have in the foreseeable future?

The only thing special is that cache they use is exclusively accessed by
them.

IDENT, ASN, DNS based ACLs also use caches. But those are a bit detached
from the ACL code itself (eg fqdncache) since other code sometimes
accesses the cache directly for other uses.


Amos

From gkinkie at gmail.com  Sat Apr  4 06:49:36 2020
From: gkinkie at gmail.com (Francesco Chemolli)
Date: Sat, 4 Apr 2020 07:49:36 +0100
Subject: [squid-dev] RFC: cacheMatchAcl
In-Reply-To: <7a429978-f8c0-069f-fbab-14d8aea80fbc@treenet.co.nz>
References: <CA+Y8hcMe-o6-CHvHaS9rq_p7s+msdV-JOSm8jFTNa5jRJUgZ3g@mail.gmail.com>
 <7378b117-ca67-e791-9802-97ea1d3554aa@measurement-factory.com>
 <7a429978-f8c0-069f-fbab-14d8aea80fbc@treenet.co.nz>
Message-ID: <CA+Y8hcOm=L+hdtB8aadm50eXgghfo3=Vp1jWaagSfPZnS34==g@mail.gmail.com>

I am not sure about what you recommend to do here.
This cache is IMO over complicated and it breaks layering.
I’m mostly done in a PR replacing the dlink with a std::list but without
changing the overall design. It does kill a few tens of lines of code and
is clearer to read tho.

On Sat, 4 Apr 2020 at 07:41, Amos Jeffries <squid3 at treenet.co.nz> wrote:

> On 4/04/20 3:34 am, Alex Rousskov wrote:
> > On 4/3/20 7:25 AM, Francesco Chemolli wrote:
> >
> >>   I'm looking at places where to improve things a bit, and I stumbled
> >> across cacheMatchAcl . It tries hard to be generic, but it is only ever
> >> used in ACLProxyAuth::matchProxyAuth . Would it make sense to just have
> >> a specialised cache for proxyauth?
> >
> > I wonder whether proxy_auth is special in this context:
> >
> > 1. Is proxy_auth cache radically different from other ACL caches such as
> > external ACL cache? Or did we just not bother unifying the code
> > supporting these two caches?
> >
>
> Pretty much yes, we have not done the legwork. Almost every component in
> Squid which deals with externally provided state has some form of ad-hoc
> cache. If we are lucky the use a hash or dlink. One at least uses splay
> (ouch).
>
>
> One of my background projects in the effort to empty the PR queue this
> year is to implement a proper CLP Map - specifically for PR 30 instead
> of the LruMap disagreement blocking it. That would be a good container
> to use for all these small state data caches all over Squid - keyed
> access with a dual TTL and LFU (fading) removal mechanism.
>
> If this ACL cache is not causing issues already we can wait until that
> gets submitted for review.
>
>
> > 2. Do some other ACLs cache nothing just because we did not have enough
> > time to add the corresponding caching support? Or do proxy_auth and
> > external ACL poses some unique properties that no other ACL already has
> > or likely to have in the foreseeable future?
>
> The only thing special is that cache they use is exclusively accessed by
> them.
>
> IDENT, ASN, DNS based ACLs also use caches. But those are a bit detached
> from the ACL code itself (eg fqdncache) since other code sometimes
> accesses the cache directly for other uses.
>
>
> Amos
> _______________________________________________
> squid-dev mailing list
> squid-dev at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-dev
>
-- 
@mobile
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20200404/a02ffda9/attachment.html>

From squid3 at treenet.co.nz  Sat Apr  4 07:15:03 2020
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Sat, 4 Apr 2020 20:15:03 +1300
Subject: [squid-dev] RFC: cacheMatchAcl
In-Reply-To: <CA+Y8hcOm=L+hdtB8aadm50eXgghfo3=Vp1jWaagSfPZnS34==g@mail.gmail.com>
References: <CA+Y8hcMe-o6-CHvHaS9rq_p7s+msdV-JOSm8jFTNa5jRJUgZ3g@mail.gmail.com>
 <7378b117-ca67-e791-9802-97ea1d3554aa@measurement-factory.com>
 <7a429978-f8c0-069f-fbab-14d8aea80fbc@treenet.co.nz>
 <CA+Y8hcOm=L+hdtB8aadm50eXgghfo3=Vp1jWaagSfPZnS34==g@mail.gmail.com>
Message-ID: <445f0baf-2c02-7968-a8ed-2c4c2ad5e834@treenet.co.nz>

On 4/04/20 7:49 pm, Francesco Chemolli wrote:
> I am not sure about what you recommend to do here.
> This cache is IMO over complicated and it breaks layering.
> I’m mostly done in a PR replacing the dlink with a std::list but without
> changing the overall design. It does kill a few tens of lines of code
> and is clearer to read tho.
> 

Well, if you have already done the work it migth as well finish up. I
was thinking you had just done the investigation and not started
refactoring yet.

Amos

From gkinkie at gmail.com  Sat Apr  4 07:53:42 2020
From: gkinkie at gmail.com (Francesco Chemolli)
Date: Sat, 4 Apr 2020 08:53:42 +0100
Subject: [squid-dev] RFC: cacheMatchAcl
In-Reply-To: <445f0baf-2c02-7968-a8ed-2c4c2ad5e834@treenet.co.nz>
References: <CA+Y8hcMe-o6-CHvHaS9rq_p7s+msdV-JOSm8jFTNa5jRJUgZ3g@mail.gmail.com>
 <7378b117-ca67-e791-9802-97ea1d3554aa@measurement-factory.com>
 <7a429978-f8c0-069f-fbab-14d8aea80fbc@treenet.co.nz>
 <CA+Y8hcOm=L+hdtB8aadm50eXgghfo3=Vp1jWaagSfPZnS34==g@mail.gmail.com>
 <445f0baf-2c02-7968-a8ed-2c4c2ad5e834@treenet.co.nz>
Message-ID: <CA+Y8hcPvqO-NVFbUMH-hQSku69hQ1=SGCtcX=uWew=9HZLRZSw@mail.gmail.com>

It was quite fast really as my PR doesn’t address the fundamental design
issues nor much of the coding style. A quick win could be to move from a
list to an unordered_map, it’s a quite trivial cache in the end. There’s a
lot of machinery in there for such a simple data structure :/

On Sat, 4 Apr 2020 at 08:15, Amos Jeffries <squid3 at treenet.co.nz> wrote:

> On 4/04/20 7:49 pm, Francesco Chemolli wrote:
> > I am not sure about what you recommend to do here.
> > This cache is IMO over complicated and it breaks layering.
> > I’m mostly done in a PR replacing the dlink with a std::list but without
> > changing the overall design. It does kill a few tens of lines of code
> > and is clearer to read tho.
> >
>
> Well, if you have already done the work it migth as well finish up. I
> was thinking you had just done the investigation and not started
> refactoring yet.
>
> Amos
>
-- 
@mobile
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20200404/f9494dfc/attachment-0001.html>

From gkinkie at gmail.com  Sat Apr  4 08:54:49 2020
From: gkinkie at gmail.com (Francesco Chemolli)
Date: Sat, 4 Apr 2020 09:54:49 +0100
Subject: [squid-dev] RFC: use clang-format?
Message-ID: <CA+Y8hcMx7tdjENSB5vA9YqLfd=UEtaA-x8U9kdxc5vSW=CAVBA@mail.gmail.com>

Hi all,
   astyle is a bit of PITA, maybe we can replace it with clang-format?
It seems to me it has more power and flexibility, and its config could be
stored in the source tree itself.
What do you think?

-- 
    Francesco
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20200404/0245ddd7/attachment.html>

From rousskov at measurement-factory.com  Sat Apr  4 15:10:51 2020
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Sat, 4 Apr 2020 11:10:51 -0400
Subject: [squid-dev] RFC: cacheMatchAcl
In-Reply-To: <CA+Y8hcOm=L+hdtB8aadm50eXgghfo3=Vp1jWaagSfPZnS34==g@mail.gmail.com>
References: <CA+Y8hcMe-o6-CHvHaS9rq_p7s+msdV-JOSm8jFTNa5jRJUgZ3g@mail.gmail.com>
 <7378b117-ca67-e791-9802-97ea1d3554aa@measurement-factory.com>
 <7a429978-f8c0-069f-fbab-14d8aea80fbc@treenet.co.nz>
 <CA+Y8hcOm=L+hdtB8aadm50eXgghfo3=Vp1jWaagSfPZnS34==g@mail.gmail.com>
Message-ID: <4e5ba83c-58e5-6232-813c-62135640e683@measurement-factory.com>

On 4/4/20 2:49 AM, Francesco Chemolli wrote:

> I’m mostly done in a PR replacing the dlink with a std::list but without
> changing the overall design. It does kill a few tens of lines of code
> and is clearer to read tho.

Please note that std::list is usually a lot more expensive than dlink
(i.e., an invasive list) as far as performance is concerned because
std::list does one extra memory allocation for every list element. In
performance-sensitive cases, we should not replace dlink with std::list.


HTH,

Alex.


> On Sat, 4 Apr 2020 at 07:41, Amos Jeffries wrote:
> 
>     On 4/04/20 3:34 am, Alex Rousskov wrote:
>     > On 4/3/20 7:25 AM, Francesco Chemolli wrote:
>     >
>     >>   I'm looking at places where to improve things a bit, and I stumbled
>     >> across cacheMatchAcl . It tries hard to be generic, but it is
>     only ever
>     >> used in ACLProxyAuth::matchProxyAuth . Would it make sense to
>     just have
>     >> a specialised cache for proxyauth?
>     >
>     > I wonder whether proxy_auth is special in this context:
>     >
>     > 1. Is proxy_auth cache radically different from other ACL caches
>     such as
>     > external ACL cache? Or did we just not bother unifying the code
>     > supporting these two caches?
>     >
> 
>     Pretty much yes, we have not done the legwork. Almost every component in
>     Squid which deals with externally provided state has some form of ad-hoc
>     cache. If we are lucky the use a hash or dlink. One at least uses splay
>     (ouch).
> 
> 
>     One of my background projects in the effort to empty the PR queue this
>     year is to implement a proper CLP Map - specifically for PR 30 instead
>     of the LruMap disagreement blocking it. That would be a good container
>     to use for all these small state data caches all over Squid - keyed
>     access with a dual TTL and LFU (fading) removal mechanism.
> 
>     If this ACL cache is not causing issues already we can wait until that
>     gets submitted for review.
> 
> 
>     > 2. Do some other ACLs cache nothing just because we did not have
>     enough
>     > time to add the corresponding caching support? Or do proxy_auth and
>     > external ACL poses some unique properties that no other ACL
>     already has
>     > or likely to have in the foreseeable future?
> 
>     The only thing special is that cache they use is exclusively accessed by
>     them.
> 
>     IDENT, ASN, DNS based ACLs also use caches. But those are a bit detached
>     from the ACL code itself (eg fqdncache) since other code sometimes
>     accesses the cache directly for other uses.
> 
> 
>     Amos
>     _______________________________________________
>     squid-dev mailing list
>     squid-dev at lists.squid-cache.org <mailto:squid-dev at lists.squid-cache.org>
>     http://lists.squid-cache.org/listinfo/squid-dev
> 
> -- 
> @mobile
> 
> _______________________________________________
> squid-dev mailing list
> squid-dev at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-dev
> 


From rousskov at measurement-factory.com  Sat Apr  4 15:25:35 2020
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Sat, 4 Apr 2020 11:25:35 -0400
Subject: [squid-dev] RFC: use clang-format?
In-Reply-To: <CA+Y8hcMx7tdjENSB5vA9YqLfd=UEtaA-x8U9kdxc5vSW=CAVBA@mail.gmail.com>
References: <CA+Y8hcMx7tdjENSB5vA9YqLfd=UEtaA-x8U9kdxc5vSW=CAVBA@mail.gmail.com>
Message-ID: <6690ecbc-56d8-0449-206f-253f21cfb5cc@measurement-factory.com>

On 4/4/20 4:54 AM, Francesco Chemolli wrote:

>    astyle is a bit of PITA, maybe we can replace it with clang-format?
> It seems to me it has more power and flexibility, and its config could
> be stored in the source tree itself.

I would expect clang-format to be overall better than astyle, but
somebody would need to reformat Squid using a reasonable clang
configuration, share the diff, and honestly analyze specific advantages
and disadvantages of using clang before an informed decision can be made.

BTW, astyle configuration can also be stored in the repository AFAICT:
http://astyle.sourceforge.net/astyle.html#_Option_Files

Alex.

From gkinkie at gmail.com  Mon Apr  6 21:00:33 2020
From: gkinkie at gmail.com (Francesco Chemolli)
Date: Mon, 6 Apr 2020 22:00:33 +0100
Subject: [squid-dev] removing cache_diff?
Message-ID: <CA+Y8hcOxoXRBTuP83fufE+pELufdkcnSa9uQNnte9Aw=xscREw@mail.gmail.com>

Hi all,
  has anybody used the cache_diff program in the last 10 years?
I've used squid for 20 years now, and I never even noticed it.
It's not even installed as part of the build process...

-- 
    Francesco
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20200406/ad93145d/attachment.html>

From rousskov at measurement-factory.com  Tue Apr  7 13:47:35 2020
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Tue, 7 Apr 2020 09:47:35 -0400
Subject: [squid-dev] removing cache_diff?
In-Reply-To: <CA+Y8hcOxoXRBTuP83fufE+pELufdkcnSa9uQNnte9Aw=xscREw@mail.gmail.com>
References: <CA+Y8hcOxoXRBTuP83fufE+pELufdkcnSa9uQNnte9Aw=xscREw@mail.gmail.com>
Message-ID: <0c309b7a-f2b6-8d0d-a058-de4c2a93f28f@measurement-factory.com>

On 4/6/20 5:00 PM, Francesco Chemolli wrote:

> has anybody used the cache_diff program in the last 10 years?

Not me. If you are going to remove it, I recommend asking on squid-users
as well and giving folks a week to respond.

Thank you,

Alex.

From gkinkie at gmail.com  Tue Apr  7 14:29:04 2020
From: gkinkie at gmail.com (Francesco Chemolli)
Date: Tue, 7 Apr 2020 15:29:04 +0100
Subject: [squid-dev] removing cache_diff?
In-Reply-To: <0c309b7a-f2b6-8d0d-a058-de4c2a93f28f@measurement-factory.com>
References: <CA+Y8hcOxoXRBTuP83fufE+pELufdkcnSa9uQNnte9Aw=xscREw@mail.gmail.com>
 <0c309b7a-f2b6-8d0d-a058-de4c2a93f28f@measurement-factory.com>
Message-ID: <CA+Y8hcNbHDnLCPOUinPpO4YTTUyB6Sbg31j1xTRjcjxMn7J7yg@mail.gmail.com>

doing that today.

On Tue, Apr 7, 2020 at 2:47 PM Alex Rousskov <
rousskov at measurement-factory.com> wrote:

> On 4/6/20 5:00 PM, Francesco Chemolli wrote:
>
> > has anybody used the cache_diff program in the last 10 years?
>
> Not me. If you are going to remove it, I recommend asking on squid-users
> as well and giving folks a week to respond.
>
> Thank you,
>
> Alex.
>


-- 
    Francesco
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20200407/24321b6d/attachment.html>

From gkinkie at gmail.com  Sat Apr 11 22:26:51 2020
From: gkinkie at gmail.com (Francesco Chemolli)
Date: Sat, 11 Apr 2020 23:26:51 +0100
Subject: [squid-dev] RFC: clang-format
Message-ID: <CA+Y8hcOgi1DzpKB4Pr2E6jtnvcAzJVLJ=sfNbGfL37OX2-hr3Q@mail.gmail.com>

Hi all,
  I have made an attempt at running clang-format on the squid sources,
after applying a configuration which follows as closely as possible
the project's coding guidelines.

You can find the output of the exercise at
https://github.com/kinkie/squid/tree/clang-format ; the configuration
is at https://github.com/kinkie/squid/blob/clang-format/.clang-format
.

Most of the changes are shifting comments and realigning macro blocks.
What do you think? Is it worthwhile to make this or same variant of
this an official guideline?

-- 
    Francesco

From rousskov at measurement-factory.com  Mon Apr 13 01:36:05 2020
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Sun, 12 Apr 2020 21:36:05 -0400
Subject: [squid-dev] RFC: clang-format
In-Reply-To: <CA+Y8hcOgi1DzpKB4Pr2E6jtnvcAzJVLJ=sfNbGfL37OX2-hr3Q@mail.gmail.com>
References: <CA+Y8hcOgi1DzpKB4Pr2E6jtnvcAzJVLJ=sfNbGfL37OX2-hr3Q@mail.gmail.com>
Message-ID: <f17fe744-87df-1000-96a1-15ec49e80f06@measurement-factory.com>

On 4/11/20 6:26 PM, Francesco Chemolli wrote:
>   I have made an attempt at running clang-format on the squid sources,
> after applying a configuration which follows as closely as possible
> the project's coding guidelines.
> 
> You can find the output of the exercise at
> https://github.com/kinkie/squid/tree/clang-format ; the configuration
> is at https://github.com/kinkie/squid/blob/clang-format/.clang-format
> .
> 
> Most of the changes are shifting comments and realigning macro blocks.
> What do you think? Is it worthwhile to make this or same variant of
> this an official guideline?


Hi Francesco,

    Most likely, you have spent more time researching this issue than
anybody reading your email; your recommendations and especially
justifications behind those recommendations could be the most valuable!
Do _you_ think clang-format advantages are worth the large amount of
conflicts the switch will create across branches? If yes, what are those
advantages, and why are they worth the cost? Can clang-format do much
better than mimicking our current (very limited) Code Style? Etc. Please
try to convert this thread from an opinion poll into a true RFC that it
is supposed to be...


I only looked at a small portion of the diff, but, FWIW, I saw:

* many small improvements (e.g., [1]),
* some small regressions (e.g., [2,3]),
* more complex #include ordering rules (e.g., [4]),
* numerous bad comment movements (e.g., [5]),
* numerous pointless(?) last empty line removals (e.g., [6]).

I suspect some of the problems mentioned above can be reduced via
clang-format configuration adjustments, but I did not study this issue.


Thank you,

Alex.

[1] better tertiary operator spacing near
https://github.com/squid-cache/squid/compare/master...kinkie:clang-format#diff-94b81725fceba313922066c3ce6071a7R19

[2] broken xgetnameinfo() formatting near
https://github.com/squid-cache/squid/compare/master...kinkie:clang-format#diff-31086c4678ad7442b4024e422f6e4351R318

[3] extra ip6_parsenumeric() function name indent near
https://github.com/squid-cache/squid/compare/master...kinkie:clang-format#diff-31086c4678ad7442b4024e422f6e4351R337

[4]
https://github.com/squid-cache/squid/compare/master...kinkie:clang-format#diff-2b432472575e0b46de13556740f65a1aR10

[5] manual comment alignment for related code lines is a Bad Idea, but
even if we do automate all such alignments, Squid code is not written to
help clang identify _related_ lines correctly as illustrated by the
jobs_ member declaration changes near
https://github.com/squid-cache/squid/compare/master...kinkie:clang-format#diff-57b6a8db44fb379395f9be80a4c44c5aR82

[6] Virtually any modified source file can be used as an example, but
here is one (compat/inet_pton.h) where nothing else has changed:
https://github.com/squid-cache/squid/compare/master...kinkie:clang-format#diff-563683e32b22291b9d5622652ec544d9L33

Alex.

From rousskov at measurement-factory.com  Mon Apr 20 02:02:35 2020
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Sun, 19 Apr 2020 22:02:35 -0400
Subject: [squid-dev] RFC: Modernizing sources using clang-tidy
Message-ID: <a6773a16-2342-0c29-e21d-e8d602d10999@measurement-factory.com>

Hello,

    Squid sources contain a lot of poorly written, obsolete, and
inconsistent code that (objectively) complicates development and
(unfortunately) increases tensions among developers during review.

Some of those problems can be solved using tools that modify sources.
Clang-tidy is one such tool: https://clang.llvm.org/extra/clang-tidy/
It contains 150+ "checks" that can automatically fix some common
problems by studying the syntax tree produced by the clang compiler.
Understanding the code at that level allows clang-tidy to attack
problems that simple scripts cannot touch.

I have not studied most of the clang-tidy checks, but did try a few
listed at the end of this email. You can see the whole list of checks at
https://clang.llvm.org/extra/clang-tidy/checks/list.html


Here are a few pros and cons of using clang-tidy compared to our own
custom scripts:

Pros:

* maintained and improved by others
* can fix problems that our scripts cannot see
* covers a few rules from C++ Core Guidelines and popular Style Guides
* arguably less likely to accidentally screw things up than our scripts

Cons:

* Requires installation of clang, clang-tidy-10, bear. It is not
difficult in a CI environment, but may be too much for occasional
contributors.

* Clang-tidy misses files that do not participate in a specific build
(e.g., misses many compat/ files that are not needed for an actual
build). Applying clang-tidy to all sources will be difficult.

* Clang-tidy misses code lines that do not participate in a specific
build (e.g., lines inside `#if HEADERS_LOG` where HEADERS_LOG was not
defined). Applying clang-tidy to all lines will be impractical.

* Clang-tidy would be difficult to customize or adjust (probably
requires building clang from scratch and writing low-level AST
manipulation code).

* Clang-tidy is relatively slow -- the whole repository scan takes
approximately 15-30 minutes per rule in my limited tests. Combining
rules speeds things up, but it may still be too slow to run during every
PR check on the current CI hardware.

* We do not have any clang-tidy experts on the development team (AFAIK).


I will itemize a few checks that I tried. The "diff" links below show
unpolished and partial changes introduced by the corresponding checks.
If we decide to use clang-tidy in principle, we will need to fine-tune
each check options (at least) to get the most out of the tool.

* modernize-use-override

Adds "override" (and removes "virtual") keywords from class declarations.

This check is very useful not just because "override" helps prevent
difficult-to-detect bugs but because it is very difficult to transition
to using "override" _gradually_ -- some compilers reject class
declarations that have a mixture of with-override and without-override
methods. Moreover, adding override keywords to old class declarations is
rather time-consuming because it is often not obvious (to a human)
whether the class introduces a new interface or overrides and old one.

Diff: https://github.com/measurement-factory/squid/commit/d00d0a8


* performance-...

Clang-tidy has a few checks focusing on performance optimizations. The
following commit shows a combination of the following four checks:
performance-trivially-destructible, performance-unnecessary-value-param,
performance-for-range-copy, performance-move-const-arg

Diff: https://github.com/measurement-factory/squid/commit/1ae5d7c


* modernize-use-nullptr

Replaces NULL and 0 constants with C++11 nullptr:
https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-nullptr.html

While replacing most NULLs is possible with a simple script, this check
may be a better solution because it can safely cover more NULL uses and
also converts bare 0s which would be impossible using a script.

Diff: https://github.com/measurement-factory/squid/commit/4242604


In summary, I think investing in clang-tidy would be worth it because
the tool can address several important problems that we would otherwise
have to leave untreated. It would take some time to agree on a set of
checks and then properly configure/tune each one, but I think it is
doable. I am not sure whether these checks should be applied on each PR
check or periodically, but we can figure it out as we go.

I am not aware of any viable alternatives.

What do you think?


Thank you,

Alex.


