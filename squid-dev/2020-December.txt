From alexey.sergin at gmail.com  Thu Dec 10 20:33:12 2020
From: alexey.sergin at gmail.com (Alexey Sergin)
Date: Thu, 10 Dec 2020 23:33:12 +0300
Subject: [squid-dev] File descriptor leak at ICAP reqmod rewrites of CONNECT
 requests
Message-ID: <CAHMdmWGESdHQ=AymwQ_MmaK4Jc8OEodNRu=oiXobQ+noVkbNLA@mail.gmail.com>

Hello Squid Developers.

I'm a software engineer.

My team uses Squid with an ICAP server. We have noticed that Squid leaks
file descriptor and memory when (reqmod) ICAP server replies with http "403
Forbidden" on http CONNECT request.

Here is a step-by-step description of the problematic scenario:
- An http client connects to Squid and sends CONNECT request (for example,
"curl -q -x http://127.0.0.1:3128 https://example.com");
- Squid sends CONNECT request to the (reqmod) ICAP server;
- ICAP server sends back a "403 Forbidden" http response;
- Squid sends "403 Forbidden" http response to the http client (in the
example above, curl reports "Received HTTP code 403 from proxy after
CONNECT");
- Squid writes to cache.log a message like "kick abandoning <....>";
- Squid does not close the file descriptor used for http client connection.

Those file descriptors and associated memory do pile up. For instance,
after 200.000 forbidden requests squid (built from git master) has ~200.000
open descriptors and consumes ~4 Gb RAM. On production deployment with
1000+ users it takes less than a day for Squid to eat out all available RAM.

It seems that the same problem was previously reported here:
http://www.squid-cache.org/mail-archive/squid-users/201301/0096.html

Message "kick abandoning <....>" comes from ConnStateData::kick() in
client_side.cc. Closing clientConnection right after
"debugs(<....>abandoning<....>)" fixes the leak.

Is it ok to always close() clientConnection when "abandoning" thing
happens? Are there any known scenarios where this close() would be
inappropriate?

Could you please give me some advice on a better/proper fix, if close() at
"abandoning" time is wrong?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20201210/5b492a6a/attachment.htm>

From ngtech1ltd at gmail.com  Thu Dec 10 21:11:54 2020
From: ngtech1ltd at gmail.com (Eliezer Croitor)
Date: Thu, 10 Dec 2020 23:11:54 +0200
Subject: [squid-dev] File descriptor leak at ICAP reqmod rewrites of
 CONNECT requests
In-Reply-To: <CAHMdmWGESdHQ=AymwQ_MmaK4Jc8OEodNRu=oiXobQ+noVkbNLA@mail.gmail.com>
References: <CAHMdmWGESdHQ=AymwQ_MmaK4Jc8OEodNRu=oiXobQ+noVkbNLA@mail.gmail.com>
Message-ID: <023601d6cf39$17596b70$460c4250$@gmail.com>

Hey Alexey,

 

What version of Squid are you using?

Can you provide a setup example for re-production?

I can write the relevant ICAP service however I am missing pcap file to understand the ICAP sessions.

If you can supply couple(2-3 or more) ICAP connections pcap I can try to see what happens in the connection level.

 

>From my experience there is much differences between holding the ICAP session open or closed after once request.

The reason for this is that like HTTP/1.0 ICAP is a “blocking”(don’t remember the exact word, Alex might remember).

There for if the proxy has 800 requests per seconds it’s better for the setup to open new connection per request to match the load.

It will const memory and CPU in the short term but in the long term the clients requests will bock less and..

It will probably consume less then the ICAP connections memory leak.

 

Waiting,

Eliezer

 

----

Eliezer Croitoru

Tech Support

Mobile: +972-5-28704261

Email: ngtech1ltd at gmail.com <mailto:ngtech1ltd at gmail.com> 

 

From: squid-dev <squid-dev-bounces at lists.squid-cache.org> On Behalf Of Alexey Sergin
Sent: Thursday, December 10, 2020 10:33 PM
To: squid-dev at lists.squid-cache.org
Subject: [squid-dev] File descriptor leak at ICAP reqmod rewrites of CONNECT requests

 

Hello Squid Developers.

I'm a software engineer.

My team uses Squid with an ICAP server. We have noticed that Squid leaks file descriptor and memory when (reqmod) ICAP server replies with http "403 Forbidden" on http CONNECT request.

Here is a step-by-step description of the problematic scenario:
- An http client connects to Squid and sends CONNECT request (for example, "curl -q -x http://127.0.0.1:3128 https://example.com");
- Squid sends CONNECT request to the (reqmod) ICAP server;
- ICAP server sends back a "403 Forbidden" http response;
- Squid sends "403 Forbidden" http response to the http client (in the example above, curl reports "Received HTTP code 403 from proxy after CONNECT");
- Squid writes to cache.log a message like "kick abandoning <....>";
- Squid does not close the file descriptor used for http client connection.

Those file descriptors and associated memory do pile up. For instance, after 200.000 forbidden requests squid (built from git master) has ~200.000 open descriptors and consumes ~4 Gb RAM. On production deployment with 1000+ users it takes less than a day for Squid to eat out all available RAM.

It seems that the same problem was previously reported here: http://www.squid-cache.org/mail-archive/squid-users/201301/0096.html

Message "kick abandoning <....>" comes from ConnStateData::kick() in client_side.cc. Closing clientConnection right after "debugs(<....>abandoning<....>)" fixes the leak.

Is it ok to always close() clientConnection when "abandoning" thing happens? Are there any known scenarios where this close() would be inappropriate?

Could you please give me some advice on a better/proper fix, if close() at "abandoning" time is wrong?

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20201210/355e1ff6/attachment.htm>

From rousskov at measurement-factory.com  Fri Dec 11 15:40:01 2020
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Fri, 11 Dec 2020 10:40:01 -0500
Subject: [squid-dev] File descriptor leak at ICAP reqmod rewrites of
 CONNECT requests
In-Reply-To: <CAHMdmWGESdHQ=AymwQ_MmaK4Jc8OEodNRu=oiXobQ+noVkbNLA@mail.gmail.com>
References: <CAHMdmWGESdHQ=AymwQ_MmaK4Jc8OEodNRu=oiXobQ+noVkbNLA@mail.gmail.com>
Message-ID: <58fe752f-5143-1924-1b24-d69fae806ce9@measurement-factory.com>

On 12/10/20 3:33 PM, Alexey Sergin wrote:

> - Squid writes to cache.log a message like "kick abandoning <....>";

These messages indicate a Squid bug, most likely in REQMOD request
satisfaction implementation specific to CONNECT use cases. The messages
are not prefixed with a "BUG" label, but they should be.


> - Squid does not close the file descriptor used for http client connection.

Yes, that is a likely side effect of the above-mentioned bug.


> client_side.cc. Closing clientConnection right after
> "debugs(<....>abandoning<....>)" fixes the leak.

> Is it ok to always close() clientConnection when "abandoning" thing
> happens? 

> Are there any known scenarios where this close() would be
> inappropriate?

Unknown. Such a closure (alone) is not a proper fix. If well-tested, it
may be considered to be a good-enough workaround, but no more than that.

What is currently missing (at least) is understanding of what is going
on. The correct fix, whatever it is, would be determined by that
understanding.

In general, responding with a 403 does not invalidate the client
connection, so it does not have to be closed. Said that, I am sure there
are use cases where such closure would be a good idea. I would not be
surprised if Squid closes the connection after denying regular requests.


> Could you please give me some advice on a better/proper fix, if close()
> at "abandoning" time is wrong?

Unfortunately, I cannot. Somebody needs to investigate the problem and
identify the bug in ConnStateData::kick() logic (or elsewhere).

Alex.

From alexey.sergin at gmail.com  Fri Dec 11 17:21:41 2020
From: alexey.sergin at gmail.com (Alexey Sergin)
Date: Fri, 11 Dec 2020 20:21:41 +0300
Subject: [squid-dev] File descriptor leak at ICAP reqmod rewrites of
 CONNECT requests
In-Reply-To: <023601d6cf39$17596b70$460c4250$@gmail.com>
References: <CAHMdmWGESdHQ=AymwQ_MmaK4Jc8OEodNRu=oiXobQ+noVkbNLA@mail.gmail.com>
 <023601d6cf39$17596b70$460c4250$@gmail.com>
Message-ID: <CAHMdmWH9eU80-oTYycNJikHJ3R3r0OQ8EbTxqoR7A5VjGEzoyA@mail.gmail.com>

Hi Eliezer!


> What version of Squid are you using?

I have reproduced the leak on squid versions: 4.8, 5.0.4, git master
38da9c24e.
In production deployment we use squid 4.x


> Can you provide a setup example for re-production?

Blow are the steps to reproduce the problem on the CentOS 7 system.

Test icap server is based on Example3 from
https://github.com/Peoplecantfly/icapserver/blob/master/TUTORIAL.md
The only difference is that implementations of example_REQMOD and
example_RESPMOD methods are swapped.

1. Put the following code to file server.py:
# vvvvvvvvvvvvvvvv
# vvv cut here vvv
# vvvvvvvvvvvvvvvv
import time
import threading

from icapserver import *

class ExampleICAPHandler(BaseICAPRequestHandler):

    def example_OPTIONS(self):
        self.set_icap_response(200)
        self.set_icap_header('Methods', 'RESPMOD, REQMOD')
        self.set_icap_header('Service',
            'ICAP Server' + ' ' + self._server_version)
        self.set_icap_header('Options-TTL', '3600')
        self.set_icap_header('Preview', '0')
        self.send_headers(False)

    def example_RESPMOD(self):
        self.no_adaptation_required()

    def example_REQMOD(self):
        if self.has_body:
            while True:
                if self.read_chunk() == '':
                    break
        self.set_icap_response(200)
        self.set_enc_status('HTTP/1.1 451 Unavailable For Legal Reasons')
        self.send_headers(False)

class ExampleICAPServer():

    def __init__(self, addr='', port=13440):
        self.addr = addr
        self.port = port

    def start(self):
        self.server = ICAPServer((self.addr, self.port), ExampleICAPHandler)
        self.thread = threading.Thread(target=self.server.serve_forever)
        self.thread.start()
        return True

    def stop(self):
        self.server.shutdown()
        self.server.server_close()
        self.thread.join(2)
        return True


try:
    server = ExampleICAPServer()
    server.start()
    print 'Use Control-C to exit'
    while True:
        time.sleep(1)
except KeyboardInterrupt:
    server.stop()
    print "Finished"
# ^^^^^^^^^^^^^^^^
# ^^^ cut here ^^^
# ^^^^^^^^^^^^^^^^

2. Prepare environment for test icap server:
# yum install -y python2-virtualenv
# virtualenv-2 icapserver
# source icapserver/bin/activate
# pip install icapserver

3. Run the test icap server:
# source icapserver/bin/activate
# python server.py &

4. Install squid version 4 or above (built with --enable-icap-client).

5. Rewrite /etc/squid/squid.conf:
cache deny all
cache_mem 0
shutdown_lifetime 5 seconds
http_port 3128
acl localnet src 127.0.0.1
http_access deny !localnet
http_access allow all
icap_enable on
icap_service example_req reqmod_precache icap://127.0.0.1:13440/example
adaptation_access example_req allow all
icap_service_failure_limit -1

6. Apply squid configuration changes:
# systemctl restart squid

7. Initiate http request:
# curl -q -x http://127.0.0.1:3128 https://example.com

8. Output of curl should look like:
curl: (56) Received HTTP code 451 from proxy after CONNECT

9. Leaked descriptor is in a CLOSE-WAIT state:
# ss -natpo | grep CLOSE-WAIT


> If you can supply couple(2-3 or more) ICAP connections pcap I can try to
see what happens in the connection level.

Pcap file with 3 connections attached.


> >From my experience there is much differences between holding the ICAP
session open or closed after once request.
> The reason for this is that like HTTP/1.0 ICAP is a “blocking”(don’t
remember the exact word, Alex might remember).
> There for if the proxy has 800 requests per seconds it’s better for the
setup to open new connection per request to match the load.
> It will const memory and CPU in the short term but in the long term the
clients requests will bock less and..
> It will probably consume less then the ICAP connections memory leak.

Leak happens both with and without the load.
Http client connections do leak, but ICAP connections do not.


> There for if the proxy has 800 requests per seconds it’s better for the
setup to open new connection per request to match the load.

Production ICAP server reports "Max-Connections: 5000" in response to ICAP
OPTIONS request.
Is in sufficient? If not, what should ICAP server do, and what should be
done squid (and in squid.conf), to achieve the "open new connection per
request" behaviour?


Thanks!

On Fri, Dec 11, 2020 at 12:11 AM Eliezer Croitor <ngtech1ltd at gmail.com>
wrote:

> Hey Alexey,
>
>
>
> What version of Squid are you using?
>
> Can you provide a setup example for re-production?
>
> I can write the relevant ICAP service however I am missing pcap file to
> understand the ICAP sessions.
>
> If you can supply couple(2-3 or more) ICAP connections pcap I can try to
> see what happens in the connection level.
>
>
>
> From my experience there is much differences between holding the ICAP
> session open or closed after once request.
>
> The reason for this is that like HTTP/1.0 ICAP is a “blocking”(don’t
> remember the exact word, Alex might remember).
>
> There for if the proxy has 800 requests per seconds it’s better for the
> setup to open new connection per request to match the load.
>
> It will const memory and CPU in the short term but in the long term the
> clients requests will bock less and..
>
> It will probably consume less then the ICAP connections memory leak.
>
>
>
> Waiting,
>
> Eliezer
>
>
>
> ----
>
> Eliezer Croitoru
>
> Tech Support
>
> Mobile: +972-5-28704261
>
> Email: ngtech1ltd at gmail.com
>
>
>
> *From:* squid-dev <squid-dev-bounces at lists.squid-cache.org> *On Behalf Of
> *Alexey Sergin
> *Sent:* Thursday, December 10, 2020 10:33 PM
> *To:* squid-dev at lists.squid-cache.org
> *Subject:* [squid-dev] File descriptor leak at ICAP reqmod rewrites of
> CONNECT requests
>
>
>
> Hello Squid Developers.
>
> I'm a software engineer.
>
> My team uses Squid with an ICAP server. We have noticed that Squid leaks
> file descriptor and memory when (reqmod) ICAP server replies with http "403
> Forbidden" on http CONNECT request.
>
> Here is a step-by-step description of the problematic scenario:
> - An http client connects to Squid and sends CONNECT request (for example,
> "curl -q -x http://127.0.0.1:3128 https://example.com");
> - Squid sends CONNECT request to the (reqmod) ICAP server;
> - ICAP server sends back a "403 Forbidden" http response;
> - Squid sends "403 Forbidden" http response to the http client (in the
> example above, curl reports "Received HTTP code 403 from proxy after
> CONNECT");
> - Squid writes to cache.log a message like "kick abandoning <....>";
> - Squid does not close the file descriptor used for http client connection.
>
> Those file descriptors and associated memory do pile up. For instance,
> after 200.000 forbidden requests squid (built from git master) has ~200.000
> open descriptors and consumes ~4 Gb RAM. On production deployment with
> 1000+ users it takes less than a day for Squid to eat out all available RAM.
>
> It seems that the same problem was previously reported here:
> http://www.squid-cache.org/mail-archive/squid-users/201301/0096.html
>
> Message "kick abandoning <....>" comes from ConnStateData::kick() in
> client_side.cc. Closing clientConnection right after
> "debugs(<....>abandoning<....>)" fixes the leak.
>
> Is it ok to always close() clientConnection when "abandoning" thing
> happens? Are there any known scenarios where this close() would be
> inappropriate?
>
> Could you please give me some advice on a better/proper fix, if close() at
> "abandoning" time is wrong?
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20201211/a8fc9610/attachment-0001.htm>
-------------- next part --------------
cache deny all
cache_mem 0
shutdown_lifetime 5 seconds
http_port 3128
acl localnet src 127.0.0.1
http_access deny !localnet
http_access allow all
icap_enable on
icap_service example_req reqmod_precache icap://127.0.0.1:13440/example
adaptation_access example_req allow all
icap_service_failure_limit -1
-------------- next part --------------
A non-text attachment was scrubbed...
Name: example.pcap
Type: application/vnd.tcpdump.pcap
Size: 6416 bytes
Desc: not available
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20201211/a8fc9610/attachment-0001.pcap>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: server.py
Type: text/x-python
Size: 1498 bytes
Desc: not available
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20201211/a8fc9610/attachment-0001.py>

From ngtech1ltd at gmail.com  Sat Dec 12 22:04:52 2020
From: ngtech1ltd at gmail.com (Eliezer Croitor)
Date: Sun, 13 Dec 2020 00:04:52 +0200
Subject: [squid-dev] File descriptor leak at ICAP reqmod rewrites of
 CONNECT requests
In-Reply-To: <58fe752f-5143-1924-1b24-d69fae806ce9@measurement-factory.com>
References: <CAHMdmWGESdHQ=AymwQ_MmaK4Jc8OEodNRu=oiXobQ+noVkbNLA@mail.gmail.com>
 <58fe752f-5143-1924-1b24-d69fae806ce9@measurement-factory.com>
Message-ID: <008f01d6d0d2$d22c3370$76849a50$@gmail.com>

Seems like above my paygrade..


----
Eliezer Croitoru
Tech Support
Mobile: +972-5-28704261
Email: ngtech1ltd at gmail.com

-----Original Message-----
From: squid-dev <squid-dev-bounces at lists.squid-cache.org> On Behalf Of Alex Rousskov
Sent: Friday, December 11, 2020 5:40 PM
To: Alexey Sergin <alexey.sergin at gmail.com>; squid-dev at lists.squid-cache.org
Subject: Re: [squid-dev] File descriptor leak at ICAP reqmod rewrites of CONNECT requests

On 12/10/20 3:33 PM, Alexey Sergin wrote:

> - Squid writes to cache.log a message like "kick abandoning <....>";

These messages indicate a Squid bug, most likely in REQMOD request
satisfaction implementation specific to CONNECT use cases. The messages
are not prefixed with a "BUG" label, but they should be.


> - Squid does not close the file descriptor used for http client connection.

Yes, that is a likely side effect of the above-mentioned bug.


> client_side.cc. Closing clientConnection right after
> "debugs(<....>abandoning<....>)" fixes the leak.

> Is it ok to always close() clientConnection when "abandoning" thing
> happens? 

> Are there any known scenarios where this close() would be
> inappropriate?

Unknown. Such a closure (alone) is not a proper fix. If well-tested, it
may be considered to be a good-enough workaround, but no more than that.

What is currently missing (at least) is understanding of what is going
on. The correct fix, whatever it is, would be determined by that
understanding.

In general, responding with a 403 does not invalidate the client
connection, so it does not have to be closed. Said that, I am sure there
are use cases where such closure would be a good idea. I would not be
surprised if Squid closes the connection after denying regular requests.


> Could you please give me some advice on a better/proper fix, if close()
> at "abandoning" time is wrong?

Unfortunately, I cannot. Somebody needs to investigate the problem and
identify the bug in ConnStateData::kick() logic (or elsewhere).

Alex.
_______________________________________________
squid-dev mailing list
squid-dev at lists.squid-cache.org
http://lists.squid-cache.org/listinfo/squid-dev


From alexey.sergin at gmail.com  Thu Dec 24 22:05:11 2020
From: alexey.sergin at gmail.com (Alexey Sergin)
Date: Fri, 25 Dec 2020 01:05:11 +0300
Subject: [squid-dev] File descriptor leak at ICAP reqmod rewrites of
 CONNECT requests
In-Reply-To: <58fe752f-5143-1924-1b24-d69fae806ce9@measurement-factory.com>
References: <CAHMdmWGESdHQ=AymwQ_MmaK4Jc8OEodNRu=oiXobQ+noVkbNLA@mail.gmail.com>
 <58fe752f-5143-1924-1b24-d69fae806ce9@measurement-factory.com>
Message-ID: <CAHMdmWGyPZ=nJR90HR1duFS4QGcSzyiFV4aE4G2TTv4u3HvzWA@mail.gmail.com>

>> Could you please give me some advice on a better/proper fix, if close()
>> at "abandoning" time is wrong?
>
> Unfortunately, I cannot.

In fact, your message was very helpful! Thank you.


> In general, responding with a 403 does not invalidate the client
> connection, so it does not have to be closed. Said that, I am sure there
> are use cases where such closure would be a good idea. I would not be
> surprised if Squid closes the connection after denying regular requests.

Yes, rfc7231 states that:
   Any 2xx (Successful) response indicates that the sender (and all
   inbound proxies) will switch to tunnel mode immediately after the
   blank line that concludes the successful response's header section;
   data received after that blank line is from the server identified by
   the request-target.  Any response other than a successful response
   indicates that the tunnel has not yet been formed and that the
   connection remains governed by HTTP.

In case of non-2xx http response from icap reqmod, the client connection
should continue to function in http mode, so there is no need to close it.

In case of 2xx http response from icap reqmod, Squid will not do any
tunneling stuff for this CONNECT request, and thus it would be better to
close the client connection. However I am not aware of any reasonable
scenario where icap (reqmod) server would rewrite a CONNECT request with
2xx http response.


> What is currently missing (at least) is understanding of what is going
> on. The correct fix, whatever it is, would be determined by that
> understanding.

The reason ConnStateData::kick() gets into the "abandoning" branch is due
to a combination of the following circumstances:

1. Function clientProcessRequest() executes this code:
    // Let tunneling code be fully responsible for CONNECT requests
    if (http->request->method == Http::METHOD_CONNECT) {
        context->mayUseConnection(true);
        conn->flags.readMore = false;
    }

2. No tunneling is actually set up in case of icap reqmod rewrite of
CONNECT request with http response;

3. Conditions for ConnStateData::kick() "abandoning" branch are satisfied
after the processing of CONNECT request finishes.


ACL deny of CONNECT request could trigger the same "abandoning" conditions,
but it does not, because:

1. ClientRequestContext::clientAccessCheckDone(ACCESS_DENIED) sets
ClientRequestContext::readNextRequest and ClientRequestContext::error
variables;

2. ClientHttpRequest::doCallouts() checks those variables and executes:
    getConn()->flags.readMore = true; // resume any pipeline reads.


I tried to apply the same approach (as in the ACL) for the case of ICAP
REQMOD, please see attached patch.
I've done limited testing and the patch seems to fix the problem.

Is ClientHttpRequest::handleAdaptedHeader() time suitable for re-enabling
connection readMore flag and for connection stopReceiving()?
Would it be better to postpone the re-enabling /  to a later stage
stopReceiving()?
Maybe to ClientHttpRequest::endRequestSatisfaction() ?


Thanks!


On Fri, Dec 11, 2020 at 6:40 PM Alex Rousskov <
rousskov at measurement-factory.com> wrote:

> On 12/10/20 3:33 PM, Alexey Sergin wrote:
>
> > - Squid writes to cache.log a message like "kick abandoning <....>";
>
> These messages indicate a Squid bug, most likely in REQMOD request
> satisfaction implementation specific to CONNECT use cases. The messages
> are not prefixed with a "BUG" label, but they should be.
>
>
> > - Squid does not close the file descriptor used for http client
> connection.
>
> Yes, that is a likely side effect of the above-mentioned bug.
>
>
> > client_side.cc. Closing clientConnection right after
> > "debugs(<....>abandoning<....>)" fixes the leak.
>
> > Is it ok to always close() clientConnection when "abandoning" thing
> > happens?
>
> > Are there any known scenarios where this close() would be
> > inappropriate?
>
> Unknown. Such a closure (alone) is not a proper fix. If well-tested, it
> may be considered to be a good-enough workaround, but no more than that.
>
> What is currently missing (at least) is understanding of what is going
> on. The correct fix, whatever it is, would be determined by that
> understanding.
>
> In general, responding with a 403 does not invalidate the client
> connection, so it does not have to be closed. Said that, I am sure there
> are use cases where such closure would be a good idea. I would not be
> surprised if Squid closes the connection after denying regular requests.
>
>
> > Could you please give me some advice on a better/proper fix, if close()
> > at "abandoning" time is wrong?
>
> Unfortunately, I cannot. Somebody needs to investigate the problem and
> identify the bug in ConnStateData::kick() logic (or elsewhere).
>
> Alex.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20201225/f56bb97f/attachment.htm>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: reqmod_connect.patch
Type: text/x-patch
Size: 1788 bytes
Desc: not available
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20201225/f56bb97f/attachment.bin>

From alexey.sergin at gmail.com  Thu Dec 24 22:13:19 2020
From: alexey.sergin at gmail.com (Alexey Sergin)
Date: Fri, 25 Dec 2020 01:13:19 +0300
Subject: [squid-dev] File descriptor leak at ICAP reqmod rewrites of
 CONNECT requests
In-Reply-To: <CAHMdmWGyPZ=nJR90HR1duFS4QGcSzyiFV4aE4G2TTv4u3HvzWA@mail.gmail.com>
References: <CAHMdmWGESdHQ=AymwQ_MmaK4Jc8OEodNRu=oiXobQ+noVkbNLA@mail.gmail.com>
 <58fe752f-5143-1924-1b24-d69fae806ce9@measurement-factory.com>
 <CAHMdmWGyPZ=nJR90HR1duFS4QGcSzyiFV4aE4G2TTv4u3HvzWA@mail.gmail.com>
Message-ID: <CAHMdmWEiGV7roXRDxXsD3s=hgpgtuKNa-0BB8oBYpUenjN0TtQ@mail.gmail.com>

> Would it be better to postpone the re-enabling /  to a later stage
> stopReceiving()?
>
>
That was meant to be:
"Would it be better to postpone the re-enabling / stopReceiving() to a
later stage?"

Sorry for the typo.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20201225/355acc1a/attachment.htm>

