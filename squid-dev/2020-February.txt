From gkinkie at gmail.com  Tue Feb 18 08:40:52 2020
From: gkinkie at gmail.com (Francesco Chemolli)
Date: Tue, 18 Feb 2020 08:40:52 +0000
Subject: [squid-dev] handling spaces in path to sources
Message-ID: <CA+Y8hcM6zV+65aBWmimMvkx=tsoimf46OEsgAjL56OurKGtdSg@mail.gmail.com>

Hi all,
  as a followup to discussion on PR 555, I was looking into safely handling
source code paths with spaces.

Turns out worrying is pointless: after doing the needed changes, doing a
test build with
builddir = "/Users/kinkie/src/test build with space"
srcdir = "/Users/kinkie/src/squid dir with space"
on MacOS catalina with homebrew

resulted in configure failing with error:
checking whether build environment is sane... configure: error: unsafe
srcdir value: '/Users/kinkie/src/squid dir with space/test-suite/..'

If there is no regression with my changes, I'll submit the PR anyway, but
its benefits will be limited.

-- 
    Francesco
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20200218/16f10bd1/attachment.html>

From gkinkie at gmail.com  Tue Feb 18 09:46:10 2020
From: gkinkie at gmail.com (Francesco Chemolli)
Date: Tue, 18 Feb 2020 09:46:10 +0000
Subject: [squid-dev] handling spaces in path to sources
In-Reply-To: <CA+Y8hcM6zV+65aBWmimMvkx=tsoimf46OEsgAjL56OurKGtdSg@mail.gmail.com>
References: <CA+Y8hcM6zV+65aBWmimMvkx=tsoimf46OEsgAjL56OurKGtdSg@mail.gmail.com>
Message-ID: <CA+Y8hcPwawZmp8tpoLQJSyYFrbb6bTVJV17TW1Zx8Se39rWDyg@mail.gmail.com>

Following up.

TL;DR: it's pointless. Spaces in paths are not safe and do not work. Even
if we were to make our own scripts safe - which the feature tree above does
- configure will barf if there are spaces in the source tree path, and
libtool will fail assembling a safe compile command if there are spaces in
the build path.

The feature branch is at
https://github.com/kinkie/squid/tree/securify-test-builds

This was tested on MacOS Catalina with
- autoconf 2.69
- libtool 2.4.6
- gmake 3.81
- clang 11


On Tue, Feb 18, 2020 at 8:40 AM Francesco Chemolli <gkinkie at gmail.com>
wrote:

> Hi all,
>   as a followup to discussion on PR 555, I was looking into safely
> handling source code paths with spaces.
>
> Turns out worrying is pointless: after doing the needed changes, doing a
> test build with
> builddir = "/Users/kinkie/src/test build with space"
> srcdir = "/Users/kinkie/src/squid dir with space"
> on MacOS catalina with homebrew
>
> resulted in configure failing with error:
> checking whether build environment is sane... configure: error: unsafe
> srcdir value: '/Users/kinkie/src/squid dir with space/test-suite/..'
>
> If there is no regression with my changes, I'll submit the PR anyway, but
> its benefits will be limited.
>
> --
>     Francesco
>


-- 
    Francesco
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20200218/1435bd67/attachment.html>

From rousskov at measurement-factory.com  Tue Feb 18 16:53:08 2020
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Tue, 18 Feb 2020 11:53:08 -0500
Subject: [squid-dev] handling spaces in path to sources
In-Reply-To: <CA+Y8hcPwawZmp8tpoLQJSyYFrbb6bTVJV17TW1Zx8Se39rWDyg@mail.gmail.com>
References: <CA+Y8hcM6zV+65aBWmimMvkx=tsoimf46OEsgAjL56OurKGtdSg@mail.gmail.com>
 <CA+Y8hcPwawZmp8tpoLQJSyYFrbb6bTVJV17TW1Zx8Se39rWDyg@mail.gmail.com>
Message-ID: <4089b2d6-5c3f-2bac-a690-795941df6c1b@measurement-factory.com>

On 2/18/20 4:46 AM, Francesco Chemolli wrote:

> TL;DR: it's pointless. Spaces in paths are not safe and do not work.

A single failure on MacOS does not prove much, but, AFAICT, we should
indeed avoid spending time on supporting spaces in bootstrap.sh because
autoconf explicitly prohibits file names with spaces[1]:

```
Autoconf uses shell-script processing extensively, so the file names
that it processes should not contain characters that are special to the
shell. Special characters include space, tab, ...
```

[1]
https://www.gnu.org/savannah-checkouts/gnu/autoconf/manual/autoconf-2.69/html_node/File-System-Conventions.html#File-System-Conventions


Since regular users do not bootstrap, we do not need to make
bootstrap.sh space-safe at least until autoconf/configure becomes
space-safe (or we stop using autoconf and similar space-unsafe tools).


Thank you,

Alex.

> On Tue, Feb 18, 2020 at 8:40 AM Francesco Chemolli wrote:
> 
>     Hi all,
>     Â  as a followup to discussion on PR 555, I was looking into safely
>     handling source code paths with spaces.
> 
>     Turns out worrying is pointless: after doing the needed changes,
>     doing a test build with
>     builddir = "/Users/kinkie/src/test build with space"
>     srcdir = "/Users/kinkie/src/squid dir with space"
>     on MacOS catalina with homebrew
> 
>     resulted in configure failing with error:
>     checking whether build environment is sane... configure: error:
>     unsafe srcdir value: '/Users/kinkie/src/squid dir with
>     space/test-suite/..'
> 
>     If there is no regression with my changes, I'll submit the PR
>     anyway, but its benefits will be limited.
> 

From rklemme at klemmeconsulting.com  Tue Feb 18 21:19:00 2020
From: rklemme at klemmeconsulting.com (Robert Klemme)
Date: Tue, 18 Feb 2020 15:19:00 -0600
Subject: [squid-dev] SSL inspection recommendations
Message-ID: <CABBjzH4hr_-nLbJz_uAXpFU2Z_YPjn_mSMt5eU3xpoPoJbzA+w@mail.gmail.com>

 Greetings,

First, thanks for the great work on Squid. It has been our go to caching
proxy server for a LONG time.
I apologize for hijacking your dev forum but Alex R gave me the go ahead
about a year or so ago to post this here, he thought I would get some good
responses.

My name is Robert Klemme and I am an advocate for the FOSS called Privoxy (
https://www.privoxy.org).

You have probably heard of Privoxy before, many users bundle Tor+Privoxy+
Squid for ultimate privacy. We have finally raised enough money (we hope)
to hire a developer /company to integrate SSL inspection into Privoxy.

We are leaning towards GnuTLS but we are open to recommendations.

We are also looking for any contacts of freelancers or companies who can
help us with this project and provide ongoing support.

Any advice, leads, feedback would be greatly appreciated!


Best Regards,

Robert


-- 
Robert Klemme Jr.
President, Klemme Consulting LLC.
RKlemme at Klemmeconsulting.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20200218/6dddd94c/attachment.html>

From squid3 at treenet.co.nz  Mon Feb 24 08:11:28 2020
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Mon, 24 Feb 2020 21:11:28 +1300
Subject: [squid-dev] squid.conf future
Message-ID: <37420541-3842-d8b6-7dc0-a6990513b065@treenet.co.nz>

Hi all,

While doing some polish to cf_gen tool (PR #558) I am faced with some
large code edits to get that tool any more compliant with our current
guidelines. With that comes the question of whether that more detailed
work is worth doing at all ...


For the future I am considering a switch of cf.data.pre to a format like
SGML or XML which we can better generate the website contents from.

The main point in favour of these is that we already have infrastructure
in place for ESI and release notes. It would be less work to re-use one
of those than integrate a new library or tooling for some other format.


Amos

From rousskov at measurement-factory.com  Mon Feb 24 17:11:38 2020
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Mon, 24 Feb 2020 12:11:38 -0500
Subject: [squid-dev] squid.conf future
In-Reply-To: <37420541-3842-d8b6-7dc0-a6990513b065@treenet.co.nz>
References: <37420541-3842-d8b6-7dc0-a6990513b065@treenet.co.nz>
Message-ID: <db2501ba-6676-a2d8-325c-903fd2ed9d2c@measurement-factory.com>

On 2/24/20 3:11 AM, Amos Jeffries wrote:

> While doing some polish to cf_gen tool (PR #558) I am faced with some
> large code edits to get that tool any more compliant with our current
> guidelines. With that comes the question of whether that more detailed
> work is worth doing at all ...

Probably not. Even PR #558 changes might be going a bit too far (or not
far enough). Ideally, we should agree on key code cleanup principles
before doing such cleanup, to minimize tensions in every such PR.
Cleanup for the sake of cleanup should be done under a general
agreement/consent rather than ad-hoc. I am working on the corresponding
suggestions but need another week or so to post a specific proposal.


> For the future I am considering a switch of cf.data.pre to a format like
> SGML or XML which we can better generate the website contents from.

I do support fixing cf.data.pre-related issues -- they are a well-known
constant (albeit moderate) pain for developers and users alike. However,
using writer-unfriendly formats such as XML is not the best solution
IMO. SGML may be a good fit, but that concept covers such a wide variety
of languages that it is difficult to say anything specific about it in
this context (e.g., both raw XML and wiki-like markups can be valid
SGML!). If you meant something specific by "SGML", please clarify.

Automated rendering of squid.conf sources, including web site content
generation, should be straightforward with any good source format,
including writer-friendly formats. Thus, web site generation is not an
important deciding criteria here AFAICT.

IMO, an ideal markup language for cf.data.pre (or its replacements)
would satisfy these draft high-level criteria:

1. Writer-friendly. Proper whitespace, indentation, and other
presentation features of the _rendered_ output are the responsibility of
renderes, not content writers. Decent _sources_ formatting should be
automatically handled by popular modern text editors that developers
already use. No torturing humans with counting tags or brackets.

2. Expressive enough to define all the squid.conf concepts that we want
to keep/support, so that they can be rendered beautifully without hacks.
For example, if we agree that those sections are a good idea, then this
item includes support for introduction sections that define no
configuration options themselves.

3. Supports documentation duplication avoidance so that we do not have
to duplicate a lot of text or refer the reader to directive X for
details of directive Y functionality.

4. Allows for automated validation of internal cross-references (and
possibly other internal concepts that can be validated). Specification
of these cross-references is covered by item 2.

5. Allows for automated spellchecking without dangerous exceptions.

6. Git-friendly: Adding two new unrelated directives does not lead to
conflicting pull requests.

7. Either already well-known or easy to learn by example (as far as
major used concepts are concerned).

8. Can be easily parsed using programming languages that our renderers
are (going to be) written in (e.g., using existing parser libraries). We
should probably discuss whether these renderers should be (re)written in
some specific languages.

9. Translation-friendly. (I do not know what that entails, but I am sure
that others can detail this reqiurement.)

It is unlikely that we can find a language that fully satisfies all the
criteria, but I hope that we can come close. It is not a new/unusual
problem. Let's not rush into rewrites until we agree on this.


> The main point in favour of these is that we already have infrastructure
> in place for ESI and release notes. It would be less work to re-use one
> of those than integrate a new library or tooling for some other format.

Reusing existing infrastructure is a nice bonus, of course, but I think
that any major format rework should be focusing on optimizing for the
long-term. Any infrastructure changes required to render static content
on a web site seem relatively small to me. (And does not ESI support
injection of any content, not just XML-based?)


Thank you,

Alex.

From squid3 at treenet.co.nz  Tue Feb 25 06:31:14 2020
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Tue, 25 Feb 2020 19:31:14 +1300
Subject: [squid-dev] squid.conf future
In-Reply-To: <db2501ba-6676-a2d8-325c-903fd2ed9d2c@measurement-factory.com>
References: <37420541-3842-d8b6-7dc0-a6990513b065@treenet.co.nz>
 <db2501ba-6676-a2d8-325c-903fd2ed9d2c@measurement-factory.com>
Message-ID: <7bd2bdda-3fcc-275c-f988-435760ebbbde@treenet.co.nz>

On 25/02/20 6:11 am, Alex Rousskov wrote:
> On 2/24/20 3:11 AM, Amos Jeffries wrote:
> 
>> While doing some polish to cf_gen tool (PR #558) I am faced with some
>> large code edits to get that tool any more compliant with our current
>> guidelines. With that comes the question of whether that more detailed
>> work is worth doing at all ...
> 
> Probably not. Even PR #558 changes might be going a bit too far (or not
> far enough). Ideally, we should agree on key code cleanup principles
> before doing such cleanup, to minimize tensions in every such PR.
> Cleanup for the sake of cleanup should be done under a general
> agreement/consent rather than ad-hoc. I am working on the corresponding
> suggestions but need another week or so to post a specific proposal.
> 
> 
>> For the future I am considering a switch of cf.data.pre to a format like
>> SGML or XML which we can better generate the website contents from.
> 
> I do support fixing cf.data.pre-related issues -- they are a well-known
> constant (albeit moderate) pain for developers and users alike. However,
> using writer-unfriendly formats such as XML is not the best solution
> IMO. SGML may be a good fit, but that concept covers such a wide variety
> of languages that it is difficult to say anything specific about it in
> this context (e.g., both raw XML and wiki-like markups can be valid
> SGML!). If you meant something specific by "SGML", please clarify.

Exactly. We have the Linuxdoc toolchain already used for release notes
etc. so long as we have a simple set of rules about the markup used for
bits that cf_gen needs to pull out for code generation we can use any of
the more powerful markup in the documentation comment parts.


> 
> Automated rendering of squid.conf sources, including web site content
> generation, should be straightforward with any good source format,
> including writer-friendly formats. Thus, web site generation is not an
> important deciding criteria here AFAICT.

It is an existing use-case for documentation output we need to maintain.
We can still decide to forego adding nice-to-have outputs that do not exist.


> 
> IMO, an ideal markup language for cf.data.pre (or its replacements)
> would satisfy these draft high-level criteria:
> 
> 1. Writer-friendly. Proper whitespace, indentation, and other
> presentation features of the _rendered_ output are the responsibility of
> renderes, not content writers. Decent _sources_ formatting should be
> automatically handled by popular modern text editors that developers
> already use. No torturing humans with counting tags or brackets.

This nullifies the argument that XML is torturous. Good editing tools
can handle XML easily.

For writers dealing with the tags directly a simple SGML markup is
better. But not a huge amount.


> 
> 2. Expressive enough to define all the squid.conf concepts that we want
> to keep/support, so that they can be rendered beautifully without hacks.
> For example, if we agree that those sections are a good idea, then this
> item includes support for introduction sections that define no
> configuration options themselves.

What are you calling squid.conf concepts here?


> 
> 3. Supports documentation duplication avoidance so that we do not have
> to duplicate a lot of text or refer the reader to directive X for
> details of directive Y functionality.
> 

The XML idea supports that. I am not sure about SGML.

All the other text syntax I'm aware of do not have nice writer-friendly
referencing. The YAML-like one we currently have is a case in point.



> 4. Allows for automated validation of internal cross-references (and
> possibly other internal concepts that can be validated). Specification
> of these cross-references is covered by item 2.
> 
> 5. Allows for automated spellchecking without dangerous exceptions.
> 

Any syntax we choose with good tooling should support that. If not the
requirement to translate between formats will at least involve moving
the text parts into a format that can be spell-checked (HTML).


> 6. Git-friendly: Adding two new unrelated directives does not lead to
> conflicting pull requests.

This is unrealistic so long as the source code remains in one file. Only
edits to independent files are guaranteed not to conflict.

What I am considering is a change to the internal syntax within
cf.data.pre. At most a filename/extension change to match. It remains a
source code file like any other.


> 
> 7. Either already well-known or easy to learn by example (as far as
> major used concepts are concerned).
> 

AFAIK, that effectively means SGML or XML.


> 8. Can be easily parsed using programming languages that our renderers
> are (going to be) written in (e.g., using existing parser libraries). We
> should probably discuss whether these renderers should be (re)written in
> some specific languages.

This is where XML has the the advantage over wider SGML. Both are
parseable, but XML end-tags and libxml make is a bit more simple for the
cf_gen implementation.


> 
> 9. Translation-friendly. (I do not know what that entails, but I am sure
> that others can detail this reqiurement.)

Human language translation requires one of the formats which
translate-toolkit can use as input, OR being easily converted into one
of those with machine translation.

Machine translation only requires a toolchain that knows both formats.
Translation of cf.data.pre into HTML for the web and man pages for
distro documentation of using SGML.


> 
> It is unlikely that we can find a language that fully satisfies all the
> criteria, but I hope that we can come close. It is not a new/unusual
> problem. Let's not rush into rewrites until we agree on this.
> 

XML stand out in front IMO. Including with the writer-friendly criteria
- it can be as simple as what we have now, or as complicated as one
wants to make it.

A few lines of awk and we could auto-convert a XML file for input to
cf_gen from the existing cf.data.pre with no change to what writers deal
with beyond suddenly gaining the ability to use XML references in the
DOC_* sections.


> 
>> The main point in favour of these is that we already have infrastructure
>> in place for ESI and release notes. It would be less work to re-use one
>> of those than integrate a new library or tooling for some other format.
> 
> Reusing existing infrastructure is a nice bonus, of course, but I think
> that any major format rework should be focusing on optimizing for the
> long-term. Any infrastructure changes required to render static content
> on a web site seem relatively small to me. (And does not ESI support
> injection of any content, not just XML-based?)
> 

Any suggestions of formats I should look at then?

Amos

From rousskov at measurement-factory.com  Tue Feb 25 17:41:12 2020
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Tue, 25 Feb 2020 12:41:12 -0500
Subject: [squid-dev] squid.conf future
In-Reply-To: <7bd2bdda-3fcc-275c-f988-435760ebbbde@treenet.co.nz>
References: <37420541-3842-d8b6-7dc0-a6990513b065@treenet.co.nz>
 <db2501ba-6676-a2d8-325c-903fd2ed9d2c@measurement-factory.com>
 <7bd2bdda-3fcc-275c-f988-435760ebbbde@treenet.co.nz>
Message-ID: <c62ae383-353e-b66d-9bb3-a345eae192cd@measurement-factory.com>

On 2/25/20 1:31 AM, Amos Jeffries wrote:
> On 25/02/20 6:11 am, Alex Rousskov wrote:
>> On 2/24/20 3:11 AM, Amos Jeffries wrote:
>>> For the future I am considering a switch of cf.data.pre to a format like
>>> SGML or XML which we can better generate the website contents from.

>> If you meant something specific by "SGML", please clarify.

> We have the Linuxdoc toolchain already used for release notes
> etc. so long as we have a simple set of rules about the markup used for
> bits that cf_gen needs to pull out for code generation we can use any of
> the more powerful markup in the documentation comment parts.

With all due respect to LDP, LinuxDoc feels like is a dying project
these days -- not a lot of activity and a lot of stale sites. The
current(?) toolchain maintainer said[1] that modern (at the time)
developers prefer DocBook: "DocBook DTD [...] is now a more popular DTD
than LinuxDoc in writing technical software documentation".

That was ... 11 years ago.

[1] https://gitlab.com/agmartin/linuxdoc-tools



>> Automated rendering of squid.conf sources, including web site content
>> generation, should be straightforward with any good source format,
>> including writer-friendly formats. Thus, web site generation is not an
>> important deciding criteria here AFAICT.

> It is an existing use-case for documentation output we need to maintain.

Agreed. My point is _not_ that we do not need to support web site
generation. My point is that any decent tool, including custom scripts,
can generate web sites these days (and, in most cases, do a better job
than what we have today). Thus, we should decide based on other, more
selective factors first.


>> IMO, an ideal markup language for cf.data.pre (or its replacements)
>> would satisfy these draft high-level criteria:
>>
>> 1. Writer-friendly. Proper whitespace, indentation, and other
>> presentation features of the _rendered_ output are the responsibility of
>> renderes, not content writers. Decent _sources_ formatting should be
>> automatically handled by popular modern text editors that developers
>> already use. No torturing humans with counting tags or brackets.

> This nullifies the argument that XML is torturous. Good editing tools
> can handle XML easily.

Good editors can close the current tag for you, but closing tags and
dealing with all the other machine noise is still tedious for most
humans. XML is just not designed to be friendly to human writers (and
readers!). It is like JSON: Yes, one can edit JSON by hand, especially
with a good editor, but that does not make it human-friendly. Both
formats are meant for exchanging information between programs.


>> 2. Expressive enough to define all the squid.conf concepts that we want
>> to keep/support, so that they can be rendered beautifully without hacks.
>> For example, if we agree that those sections are a good idea, then this
>> item includes support for introduction sections that define no
>> configuration options themselves.

> What are you calling squid.conf concepts here?

Everything that may need to be referenced or rendered specially. For
example, directive names, directive parameter lists, individual
parameter documentation, parameter defaults, default parameter
documentation, configuration examples, C++ macro guards, AND prose
elements such as sections, paragraphs, lists, emphasized phrases,
verbatim text, hyperlinks, etc.



>> 3. Supports documentation duplication avoidance so that we do not have
>> to duplicate a lot of text or refer the reader to directive X for
>> details of directive Y functionality.

> The XML idea supports that. I am not sure about SGML.

With XML (and many SGML DTDs), the question is not so much whether it is
_possible_ to support Foo or Bar, but how difficult that support is
going to be (for documentation writers, readers, and tool
developers/admins). I suspect that reusing XML snippets is going to
require custom tooling unless those snippets are isolated into
entities/macros. We can live with that isolation, but a more flexible
"foo.faz documentation is the same as bar.baz documentation (after
replacing baz with faz)" may work a lot better.

N.B. If by "SGML" you mean Linuxdoc DTD, then I am not sure whether it
supports quoting. SGML itself, being a meta-language (compared to XML),
can "support" anything XML can support and a lot more.


> All the other text syntax I'm aware of do not have nice writer-friendly
> referencing. The YAML-like one we currently have is a case in point.

I am not aware of _nice_ referencing in XML either. FWIW, Markdown
referencing is OK. Certainly not nice, just OK. We have no referencing
today in cf.data.pre AFAIK.

Please note that referencing and quoting/reusing content are different
beasts: Item 3 is about the latter (which is more difficult to find good
support for compared to the more prevailing referencing).


>> 6. Git-friendly: Adding two new unrelated directives does not lead to
>> conflicting pull requests.
> 
> This is unrealistic so long as the source code remains in one file. Only
> edits to independent files are guaranteed not to conflict.

Yes, I know. Some formats support individual files better than others.
And, if we decide to go this way, each individual file should be
validatable and renderable on its own (ideally). Splitting itself is
easy, but nice split support is difficult. Again, we may never find a
format that satisfies all the criteria, but it is a valid criteria to
consider.


> What I am considering is a change to the internal syntax within
> cf.data.pre. 

Yes, I understand and support evaluating other grammars. Splitting
cf.data.pre in the process is a fair consideration IMO. I am not saying
the split is required, of course. I am only saying it should be
considered because it reduces merge conflicts (at least).


> At most a filename/extension change to match. It remains a
> source code file like any other.

Not sure what you mean by the "source code file" in this context. The
fact that we currently extract pieces of cf.data.pre to build Squid
executable is unimportant for this discussion AFAICT. Do you assign some
other special properties/implications to "source code" that I should be
aware of in this context?


>> 7. Either already well-known or easy to learn by example (as far as
>> major used concepts are concerned).

> AFAIK, that effectively means SGML or XML.

If "SGML" is "Linuxdoc", then I would agree with your conclusion ... ~20
years ago. Today, most kids use markdown and such for most text-centric
tasks, probably because the latter are much more human-friendly (and
were designed to be that way). Again, markdown can be expressed in an
SGML DTD.


>> 8. Can be easily parsed using programming languages that our renderers
>> are (going to be) written in (e.g., using existing parser libraries). We
>> should probably discuss whether these renderers should be (re)written in
>> some specific languages.
> 
> This is where XML has the the advantage over wider SGML. Both are
> parseable, but XML end-tags and libxml make is a bit more simple for the
> cf_gen implementation.

To simplify, I suggest excluding XML from consideration. The more I
think about it, the more I am convinced that it would be a big mistake
to go to a machine-centric format that "nobody" uses these days.

As for SGML DTDs, I think we should rule out LinuxDoc for similar
reasons. It is possible that I can be convinced to change my mind on
LinuxDoc, but I am pretty sure there are much better options out there.


>> 9. Translation-friendly. (I do not know what that entails, but I am sure
>> that others can detail this reqiurement.)
> 
> Human language translation requires one of the formats which
> translate-toolkit can use as input, OR being easily converted into one
> of those with machine translation.

I suspect that with tools like https://pandoc.org/, we can convert
virtually any standard format to any modern format if needed, but it may
be good to know what translate-toolkit can use as input.


> Machine translation only requires a toolchain that knows both formats.
> Translation of cf.data.pre into HTML for the web and man pages for
> distro documentation of using SGML.

I do not think we should worry about machine translation -- readers can
do that on their own.


> Any suggestions of formats I should look at then?

I will need to research that. I will get back to you.


Thank you,

Alex.

From rousskov at measurement-factory.com  Wed Feb 26 20:43:29 2020
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Wed, 26 Feb 2020 15:43:29 -0500
Subject: [squid-dev] squid.conf future
In-Reply-To: <7bd2bdda-3fcc-275c-f988-435760ebbbde@treenet.co.nz>
References: <37420541-3842-d8b6-7dc0-a6990513b065@treenet.co.nz>
 <db2501ba-6676-a2d8-325c-903fd2ed9d2c@measurement-factory.com>
 <7bd2bdda-3fcc-275c-f988-435760ebbbde@treenet.co.nz>
Message-ID: <f7c9ec02-100a-2c7b-353e-e9937cc90d28@measurement-factory.com>

On 2/25/20 1:31 AM, Amos Jeffries wrote:

> Any suggestions of formats I should look at then?

I believe cf.data.pre should use two primary formats, each optimized
specifically for the content it is applied to. The secondary details of
each format will evolve, but here is where I would start today:

1. YAML-like metadata to supply formal details about each directive. We
already use this today, and I expect no significant changes in the
immediate future (even though many improvements are possible in this area!).

2. Markdown for informal documentation inside DOC_START...DOC_END,
DEFAULT_DOC, and similar text blocks. Preprocessing includes validation
of internal references (for sure), generation of internal anchors
(probably), and removal of minimal common indentation (not sure; need to
experiment/discuss). Other preprocessing actions may be desirable as
well, of course. An agreement on the lower-level details and a
non-trivial conversion effort would be required. We can discuss whether
to do it incrementally or once-and-for-all.


HTH,

Alex.

From gkinkie at gmail.com  Sat Feb 29 11:07:07 2020
From: gkinkie at gmail.com (Francesco Chemolli)
Date: Sat, 29 Feb 2020 11:07:07 +0000
Subject: [squid-dev] squid.conf future
In-Reply-To: <f7c9ec02-100a-2c7b-353e-e9937cc90d28@measurement-factory.com>
References: <37420541-3842-d8b6-7dc0-a6990513b065@treenet.co.nz>
 <db2501ba-6676-a2d8-325c-903fd2ed9d2c@measurement-factory.com>
 <7bd2bdda-3fcc-275c-f988-435760ebbbde@treenet.co.nz>
 <f7c9ec02-100a-2c7b-353e-e9937cc90d28@measurement-factory.com>
Message-ID: <CA+Y8hcOpcegRgUomSHqso8Du3puT4ut9XbQBAcEQ3yGngeUZbQ@mail.gmail.com>

I like the idea of markdown, if possible.
It is simple and gets the job done.
Would processing it be more cumbersome than the alternatives?

On Wed, Feb 26, 2020 at 8:43 PM Alex Rousskov <
rousskov at measurement-factory.com> wrote:

> On 2/25/20 1:31 AM, Amos Jeffries wrote:
>
> > Any suggestions of formats I should look at then?
>
> I believe cf.data.pre should use two primary formats, each optimized
> specifically for the content it is applied to. The secondary details of
> each format will evolve, but here is where I would start today:
>
> 1. YAML-like metadata to supply formal details about each directive. We
> already use this today, and I expect no significant changes in the
> immediate future (even though many improvements are possible in this
> area!).
>
> 2. Markdown for informal documentation inside DOC_START...DOC_END,
> DEFAULT_DOC, and similar text blocks. Preprocessing includes validation
> of internal references (for sure), generation of internal anchors
> (probably), and removal of minimal common indentation (not sure; need to
> experiment/discuss). Other preprocessing actions may be desirable as
> well, of course. An agreement on the lower-level details and a
> non-trivial conversion effort would be required. We can discuss whether
> to do it incrementally or once-and-for-all.
>
>
> HTH,
>
> Alex.
> _______________________________________________
> squid-dev mailing list
> squid-dev at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-dev
>


-- 
    Francesco
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20200229/66a1f8d5/attachment.html>

From rousskov at measurement-factory.com  Sat Feb 29 16:51:56 2020
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Sat, 29 Feb 2020 11:51:56 -0500
Subject: [squid-dev] squid.conf future
In-Reply-To: <CA+Y8hcOpcegRgUomSHqso8Du3puT4ut9XbQBAcEQ3yGngeUZbQ@mail.gmail.com>
References: <37420541-3842-d8b6-7dc0-a6990513b065@treenet.co.nz>
 <db2501ba-6676-a2d8-325c-903fd2ed9d2c@measurement-factory.com>
 <7bd2bdda-3fcc-275c-f988-435760ebbbde@treenet.co.nz>
 <f7c9ec02-100a-2c7b-353e-e9937cc90d28@measurement-factory.com>
 <CA+Y8hcOpcegRgUomSHqso8Du3puT4ut9XbQBAcEQ3yGngeUZbQ@mail.gmail.com>
Message-ID: <233a5003-8a32-c63a-f872-fbee947baca4@measurement-factory.com>

On 2/29/20 6:07 AM, Francesco Chemolli wrote:
> I like the idea of markdown, if possible.
> It is simple and gets theÂ job done.
> Would processing it be moreÂ cumbersome than the alternatives?

If we look at the big picture rather then the next step, then the
answer, IMO, is "no". Many modern projects use markdown. I suspect there
are more modern/supported/quality tools processing markdown than
modern/supported/quality tools processing linuxdoc or similar XML-like
markup.

Moreover, _if_ we want that, we can avoid doing any mardown-to-HTML
conversion ourselves! Services like Github Pages do it for you
automatically. I am not (yet) saying that we should use such a service,
but I think we should at least _consider_ it because such services have
some serious advantages over the current web site integration approach.


Cheers,

Alex.


> On Wed, Feb 26, 2020 at 8:43 PM Alex Rousskov wrote:
> 
>     On 2/25/20 1:31 AM, Amos Jeffries wrote:
> 
>     > Any suggestions of formats I should look at then?
> 
>     I believe cf.data.pre should use two primary formats, each optimized
>     specifically for the content it is applied to. The secondary details of
>     each format will evolve, but here is where I would start today:
> 
>     1. YAML-like metadata to supply formal details about each directive. We
>     already use this today, and I expect no significant changes in the
>     immediate future (even though many improvements are possible in this
>     area!).
> 
>     2. Markdown for informal documentation inside DOC_START...DOC_END,
>     DEFAULT_DOC, and similar text blocks. Preprocessing includes validation
>     of internal references (for sure), generation of internal anchors
>     (probably), and removal of minimal common indentation (not sure; need to
>     experiment/discuss). Other preprocessing actions may be desirable as
>     well, of course. An agreement on the lower-level details and a
>     non-trivial conversion effort would be required. We can discuss whether
>     to do it incrementally or once-and-for-all.
> 
> 
>     HTH,
> 
>     Alex.
>     _______________________________________________
>     squid-dev mailing list
>     squid-dev at lists.squid-cache.org <mailto:squid-dev at lists.squid-cache.org>
>     http://lists.squid-cache.org/listinfo/squid-dev
> 
> 
> 
> -- 
> Â  Â  Francesco


