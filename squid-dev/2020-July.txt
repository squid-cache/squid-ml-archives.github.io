From rousskov at measurement-factory.com  Wed Jul  1 18:09:50 2020
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Wed, 1 Jul 2020 14:09:50 -0400
Subject: [squid-dev] Proposed focus for Squid-6
In-Reply-To: <d83895a1-c3e9-48b3-5d18-c7584dea07b1@treenet.co.nz>
References: <d83895a1-c3e9-48b3-5d18-c7584dea07b1@treenet.co.nz>
Message-ID: <04ace528-e122-3ba7-7777-a6332d129814@measurement-factory.com>

On 6/30/20 6:59 PM, Amos Jeffries wrote:
> I have been asked a few weeks ago about what the "goal for Squid-6" is
> going to be.

What does it mean to claim that "Squid v6 goal is X"? Does "reaching X"
become a precondition for the v6 release? Something else? Our RoadMap
page talks of _features_ (with specific properties) driving release
process, not goals. I assume the two concepts are different, but I do
not know what the term "goal" really means here.

Does the paragraph quoted below represent a complete answer to my
question or just a partial description of what we are trying to define here?

> It just gives people some rough direction to
> consider when struggling with selecting of new work to start.

IMHO, Squid work selection should be primarily driven by
developer-specific factors that usually have little to do with
Project-declared release goals, whatever they are.

Until the meaning of "release goal" is clear to me, I can only comment
on the validity of the proposed goals from a general "What is a good
goal in a software development project?" point of view. Please do not
misinterpret my responses below as an agreement (or disagreement)
regarding adding those items as v6 release goals.

As of now, I see no reason to have release goals other than the already
established practice of tracking TODO features on the RoadMap. I am very
open to changing my position, but that change would require developing a
shared definition of the term "release goal". Hence my question above...


> The last few version we have focused on C++11 optimizations and code
> upgrades. 

I do not think this summary is meaningful or accurate, but it is a
matter of opinion/perspective.


> 0) the ongoing project to clarify OS support and testing.

I would support that project if you replace "clarify" with "define" or
something similarly meaningful/measurable.


> 1) remove features that have been deprecated since Squid-3 days.

This goal needs polishing: All such features? Some features we agree on
(e.g., the two you listed explicitly -- WAIS and ICP)? What determines
that feature F has been deprecated "since v3 days"?


> 2) proposing some next features to be removed ASAP, possibly removing
> them this release.
>  - send-announce removal
>  - SMB_LM helper removal

This needs to be rephrased as a meaningful goal. Perhaps you meant
"Removal of the following features: ..."? If yes, we need to make a
decision for each feature. It is not clear (to me) whether the two
specific examples have something in common here.


> 3) drop (all?) bitrotten code

Even with "all" in place, this is not a valid goal due to the vagueness
of the term "bitrotten code".


> 4) statistic addition to measure feature use. To improve admin ability
> to answer our "are you using this feature" requests.

I think Squid usage reporting would be a very nice feature (at virtually
any granularity) _if_ we have enough admin support to enable such
reporting by default. Perhaps we should ask on squid-users first?


HTH,

Alex.

From rousskov at measurement-factory.com  Wed Jul  1 18:20:06 2020
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Wed, 1 Jul 2020 14:20:06 -0400
Subject: [squid-dev] RFC: making TrieNode less memory-hungry
In-Reply-To: <CA+Y8hcNpFipqkYBkMyALo9Mw8mPjT6X=e1fLidK+VnWouaWXZg@mail.gmail.com>
References: <CA+Y8hcNpFipqkYBkMyALo9Mw8mPjT6X=e1fLidK+VnWouaWXZg@mail.gmail.com>
Message-ID: <a41f494b-be80-2937-0dda-4bcefa2ac524@measurement-factory.com>

On 6/19/20 5:13 PM, Francesco Chemolli wrote:

>   I'm looking at the TrieNode code, and while it's super fast, it's
> quite memory-hungry: each node uses 2kb of RAM for the children index
> and any moderately-sized Trie has plenty of nodes. On the upside, it's
> blazing fast.

In Squid, TrieNode is only used be ESI, right? IIRC, ESI code quality is
rather poor, but I do not know whether it ESI was written to optimize
performance. If it was not, then is it a good idea to tune performance
of a library used exclusively by poorly written slowish code?


> How about changing it so that each node only havs as many children as
> the [min_char, max_char] range, using a std::vector and a min_char
> offset? Lookups would still be O(length of key), insertions may require
> shifting the vector if the char being inserted is lower than the current
> min_char, but the memory savings sound promising.

Do ESI users want to trade speed for memory savings? What memory savings
and speed reduction do you anticipate for a typical use case or two?


Thank you,

Alex.

From gkinkie at gmail.com  Wed Jul  1 18:51:49 2020
From: gkinkie at gmail.com (Francesco Chemolli)
Date: Wed, 1 Jul 2020 20:51:49 +0200
Subject: [squid-dev] RFC: making TrieNode less memory-hungry
In-Reply-To: <a41f494b-be80-2937-0dda-4bcefa2ac524@measurement-factory.com>
References: <CA+Y8hcNpFipqkYBkMyALo9Mw8mPjT6X=e1fLidK+VnWouaWXZg@mail.gmail.com>
 <a41f494b-be80-2937-0dda-4bcefa2ac524@measurement-factory.com>
Message-ID: <CA+Y8hcPk9KukYHBNPWFJU2Rut+xapz5TQTVa1SRTPZHh=tf98g@mail.gmail.com>

>
> Do ESI users want to trade speed for memory savings? What memory savings
> and speed reduction do you anticipate for a typical use case or two?
>
> In light of the fact that it's only used by ESI, I think it's not
worthwhile investing in it.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20200701/44f92422/attachment.html>

From ngtech1ltd at gmail.com  Sat Jul  4 21:33:44 2020
From: ngtech1ltd at gmail.com (Eliezer Croitor)
Date: Sun, 5 Jul 2020 00:33:44 +0300
Subject: [squid-dev] Non TLS connections to HTTP and SSL_BUMP ports
Message-ID: <!&!AAAAAAAAAAAYAAAAAAAAAEGQtNYT0SBEjroouRDlGygigQAAEAAAADWKHUhsR3tOh+/1VrdEd9IBAAAAAA==@gmail.com>

Hey Dev Team,

 

Long before SSL-BUMP got to what it is now I had a question in my mind:

What about connections on intercepted port which are either non TLS/SSL or 
when squid had some server or client negotiation issues?

 

The first issue with TLS connections is that if for any reason the proxy 
didn't managed to negotiate and establish a TLS connection with the server,
the client is STUCK.

 

I cannot touch TLS related code due to obviates reasons but I believe it's
trivial to have:

-          Proxy side "retries" toward the TLS server

-          A hook point for an ACL to decide what to do in such a scenario
ie in case of an error in the negotiation with the server

 

I have seen Golang code that does something about it and it works based on
the assumption that the client will always send something before the server.

The sketch of such a function can be like the PROXY protocol parsing(in a
way.).

-          If TLS handshake exists, try to parse

-          If parse is OK try to connect the remote server else throw the
connection into some ACL

-          If the remote server responds well to a TLS handshare, bump else
spice

 

I understand that it overlaps some of the bump-first in a way.

 

With this issue the resolution for other scenarios: which a client really
doesn't speak RFC TLS or something similar, might be possible?

I have seen couple times a situation which port 443 is used for customized
protocols such as VPN and others.

 

The risk I can see is that the proxy admins (which we know that do weird
stuff when allowed) will allow any TLS error to be bypassed.

 

If we will leave the error logs into cache.log in debug level 1 like today
but still allow to bypass, would it change anything?

 

I will really appreciate feedback about this specific issue.

 

Eliezer

 

----

Eliezer Croitoru

Tech Support

Mobile: +972-5-28704261

Email:  <mailto:ngtech1ltd at gmail.com> ngtech1ltd at gmail.com

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20200705/7679b546/attachment.html>

From rousskov at measurement-factory.com  Sun Jul  5 14:10:07 2020
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Sun, 5 Jul 2020 10:10:07 -0400
Subject: [squid-dev] Non TLS connections to HTTP and SSL_BUMP ports
In-Reply-To: <!&!AAAAAAAAAAAYAAAAAAAAAEGQtNYT0SBEjroouRDlGygigQAAEAAAADWKHUhsR3tOh+/1VrdEd9IBAAAAAA==@gmail.com>
References: <!&!AAAAAAAAAAAYAAAAAAAAAEGQtNYT0SBEjroouRDlGygigQAAEAAAADWKHUhsR3tOh+/1VrdEd9IBAAAAAA==@gmail.com>
Message-ID: <a9b0c452-4c0f-75af-e8bc-628b5bfbe888@measurement-factory.com>

On 7/4/20 5:33 PM, Eliezer Croitor wrote:

> What about connections on intercepted port which are either non TLS/SSL

Non TLS/SSL connections intercepted on https_port are handled according
to on_unsupported_protocol settings.


> or when squid had some server or client negotiation issues?

There are many nuances here, but "Squid negotiation" usually implies
that the bump decision has been made, and Squid is sending its own TLS
secrets instead of forwarding client ones. Bumping errors are,
essentially, transport errors. The connection(s) will probably be
closed. If Squid-server negotiation fails, then the client will be
bumped, and a Squid error response will be sent to the client.


> The first issue with TLS connections is that if for any reason the proxy
> didn’t managed to negotiate and establish a TLS connection with the
> server, the client is STUCK.

I do not know what you mean by "stuck" exactly, but, bugs
notwithstanding, Squid-server negotiation failures do not lead to
stalled clients. In the worst case, Squid-server negotiation may
timeout, but even that should not result in a client waiting forever.


> - Proxy side “retries” toward the TLS server

Retries usually make sense if something is changed for the next attempt.
AFAICT, you propose that the second attempt will be done in splicing
mode (despite the previous decision to bump), increasing the chances of
"success" (for some definition of success). Please correct me if I
misunderstood.


> The sketch of such a function can be

> - If TLS handshake exists, try to parse

> - If parse is OK try to connect the remote server else throw
> the connection into some ACL

> - If the remote server responds well to a TLS handshare, bump
> else spice

All of the above is already supported except the very last bit -- Squid
does not splice on Squid-server TLS negotiation failures. Moreover,
splicing the client and the server after a TLS negotiation failure is
technically impossible -- the server already expects Squid secrets, not
client secrets.

It would be possible to establish another TLS connection with the server
and splice that new connection with the old client connection. One could
add some kind of on_tls_connect_failure directive to enable and control
that behavior. If that feature is needed to support some reasonable use
case, I think its quality implementation should be welcomed.


HTH,

Alex.

From ngtech1ltd at gmail.com  Sun Jul  5 16:56:45 2020
From: ngtech1ltd at gmail.com (Eliezer Croitor)
Date: Sun, 5 Jul 2020 19:56:45 +0300
Subject: [squid-dev] Non TLS connections to HTTP and SSL_BUMP ports
In-Reply-To: <a9b0c452-4c0f-75af-e8bc-628b5bfbe888@measurement-factory.com>
References: <!&!AAAAAAAAAAAYAAAAAAAAAEGQtNYT0SBEjroouRDlGygigQAAEAAAADWKHUhsR3tOh+/1VrdEd9IBAAAAAA==@gmail.com>
 <a9b0c452-4c0f-75af-e8bc-628b5bfbe888@measurement-factory.com>
Message-ID: <00d601d652ed$44b41e30$ce1c5a90$@gmail.com>

Alex,

Thanks for the reminding me "on_unsupported_protocol" I forgot it exists.
I am almost sure that some clients will want "on_tls_connect_failure" implementation.
I would wait for a client first for this implementation..

Thanks,
Eliezer

----
Eliezer Croitoru
Tech Support
Mobile: +972-5-28704261
Email: ngtech1ltd at gmail.com

-----Original Message-----
From: squid-dev [mailto:squid-dev-bounces at lists.squid-cache.org] On Behalf Of Alex Rousskov
Sent: Sunday, July 5, 2020 5:10 PM
To: squid-dev at lists.squid-cache.org
Subject: Re: [squid-dev] Non TLS connections to HTTP and SSL_BUMP ports

On 7/4/20 5:33 PM, Eliezer Croitor wrote:

> What about connections on intercepted port which are either non TLS/SSL

Non TLS/SSL connections intercepted on https_port are handled according
to on_unsupported_protocol settings.


> or when squid had some server or client negotiation issues?

There are many nuances here, but "Squid negotiation" usually implies
that the bump decision has been made, and Squid is sending its own TLS
secrets instead of forwarding client ones. Bumping errors are,
essentially, transport errors. The connection(s) will probably be
closed. If Squid-server negotiation fails, then the client will be
bumped, and a Squid error response will be sent to the client.


> The first issue with TLS connections is that if for any reason the proxy
> didn’t managed to negotiate and establish a TLS connection with the
> server, the client is STUCK.

I do not know what you mean by "stuck" exactly, but, bugs
notwithstanding, Squid-server negotiation failures do not lead to
stalled clients. In the worst case, Squid-server negotiation may
timeout, but even that should not result in a client waiting forever.


> - Proxy side “retries” toward the TLS server

Retries usually make sense if something is changed for the next attempt.
AFAICT, you propose that the second attempt will be done in splicing
mode (despite the previous decision to bump), increasing the chances of
"success" (for some definition of success). Please correct me if I
misunderstood.


> The sketch of such a function can be

> - If TLS handshake exists, try to parse

> - If parse is OK try to connect the remote server else throw
> the connection into some ACL

> - If the remote server responds well to a TLS handshare, bump
> else spice

All of the above is already supported except the very last bit -- Squid
does not splice on Squid-server TLS negotiation failures. Moreover,
splicing the client and the server after a TLS negotiation failure is
technically impossible -- the server already expects Squid secrets, not
client secrets.

It would be possible to establish another TLS connection with the server
and splice that new connection with the old client connection. One could
add some kind of on_tls_connect_failure directive to enable and control
that behavior. If that feature is needed to support some reasonable use
case, I think its quality implementation should be welcomed.


HTH,

Alex.
_______________________________________________
squid-dev mailing list
squid-dev at lists.squid-cache.org
http://lists.squid-cache.org/listinfo/squid-dev


From ngtech1ltd at gmail.com  Tue Jul  7 05:08:57 2020
From: ngtech1ltd at gmail.com (Eliezer Croitor)
Date: Tue, 7 Jul 2020 08:08:57 +0300
Subject: [squid-dev] External ACL Feed, helper?
Message-ID: <!&!AAAAAAAAAAAYAAAAAAAAAEGQtNYT0SBEjroouRDlGygigQAAEAAAAAym9di7hoNCib4Z2hyNq7ABAAAAAA==@gmail.com>

Hey Dev team,

 

What about adding a Dynamic ACLs lists update helper Script?

 

I have seen that the mainstream commercial GW products have some external
feed updates option.

I think that many proxy admins would like to have a script that will help
them to update their ACLs from a feed.

Ie they have a DB or a GIT repository that contains their ACLs data like IP
addresses, domain names, sni patterns etc.

 

These features are very simple scripts which either run as a cron tab.

For example it can run every 1/5/10/15/30/45/60/90 minutes.

 

Would it be possible to add such helper to the project sources?

If so, what are the requirements?

 

Thanks,

Eliezer

 

----

Eliezer Croitoru

Tech Support

Mobile: +972-5-28704261

Email:  <mailto:ngtech1ltd at gmail.com> ngtech1ltd at gmail.com

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20200707/9566a049/attachment.html>

From rousskov at measurement-factory.com  Tue Jul  7 13:54:08 2020
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Tue, 7 Jul 2020 09:54:08 -0400
Subject: [squid-dev] External ACL Feed, helper?
In-Reply-To: <!&!AAAAAAAAAAAYAAAAAAAAAEGQtNYT0SBEjroouRDlGygigQAAEAAAAAym9di7hoNCib4Z2hyNq7ABAAAAAA==@gmail.com>
References: <!&!AAAAAAAAAAAYAAAAAAAAAEGQtNYT0SBEjroouRDlGygigQAAEAAAAAym9di7hoNCib4Z2hyNq7ABAAAAAA==@gmail.com>
Message-ID: <e910e557-1d49-d7be-ead0-b2410db1fc4a@measurement-factory.com>

On 7/7/20 1:08 AM, Eliezer Croitor wrote:

> I think that many proxy admins would like to have a script that will
> help them to update their ACLs from a feed.
> 
> Ie they have a DB or a GIT repository that contains their ACLs data like
> IP addresses, domain names, sni patterns etc.

* External ACL updates without Squid reconfiguration is available today.

* Built-in ACL updates via Squid reconfiguration is available today.

* Built-in ACL updates without full Squid reconfiguration is planned,
but it is a relatively complex low-priority project with no ETA.
Sponsors welcome.


> Would it be possible to add such helper to the project sources?

If you are talking about a script that will automatically update an
external ACL helper configuration file based on DB/git/etc. interaction,
then I do not think it is a good idea to add such a script to the Squid
repository because such a script will have virtually no Squid-specific
code (and a lot of environment/business logic specifics that would be
impossible to properly support in a simple sample script).

If you are talking about built-in ACL updates without full Squid
reconfiguration (i.e. the last bullet above), then such a feature does
not need an external Squid helper. It needs Squid code enhancements.
Most likely, it will be triggered by a standard reconfiguration signal
(but will zero-in on changed ACL parameter files by comparing file
timestamps).


Thank you,

Alex.

From ngtech1ltd at gmail.com  Tue Jul  7 17:00:26 2020
From: ngtech1ltd at gmail.com (Eliezer Croitor)
Date: Tue, 7 Jul 2020 20:00:26 +0300
Subject: [squid-dev] External ACL Feed, helper?
In-Reply-To: <e910e557-1d49-d7be-ead0-b2410db1fc4a@measurement-factory.com>
References: <!&!AAAAAAAAAAAYAAAAAAAAAEGQtNYT0SBEjroouRDlGygigQAAEAAAAAym9di7hoNCib4Z2hyNq7ABAAAAAA==@gmail.com>
 <e910e557-1d49-d7be-ead0-b2410db1fc4a@measurement-factory.com>
Message-ID: <003901d65480$1d8375b0$588a6110$@gmail.com>

Hoo nooo a typo!!!

Alex I was talking about external lists automatic update and reconfigure.

The scenario I was talking about is the next:
An admin have a specific set of ACL's such as a regex or src/ds tip
addresses etc.

I do not know if a squid reconfiguration is faster or more efficient then
other pieces of software however,
it's usable enough to ignore partial reconfiguration for the next couple
years..

I am 100% sure and believe that there are proxy admins that would like to be
able to configure 
one squid.conf with specific ACLS and logic and later to only maintain the
content of these ACLs.
An ACL list content can be maintained by other vendors as well while the
Admin can move on to other more important tasks.

Ie let say I have a set of regex for sni which are bypassed or IP addresses
that are allowed etc...
Then with an automated update script that will validate that an update is
possible and required, an update and reconfiguration will be applied.

Does it makes more sense now?

Thanks,
Eliezer

----
Eliezer Croitoru
Tech Support
Mobile: +972-5-28704261
Email: ngtech1ltd at gmail.com

-----Original Message-----
From: Alex Rousskov [mailto:rousskov at measurement-factory.com] 
Sent: Tuesday, July 7, 2020 4:54 PM
To: Eliezer Croitor; squid-dev at lists.squid-cache.org
Subject: Re: [squid-dev] External ACL Feed, helper?

On 7/7/20 1:08 AM, Eliezer Croitor wrote:

> I think that many proxy admins would like to have a script that will
> help them to update their ACLs from a feed.
> 
> Ie they have a DB or a GIT repository that contains their ACLs data like
> IP addresses, domain names, sni patterns etc.

* External ACL updates without Squid reconfiguration is available today.

* Built-in ACL updates via Squid reconfiguration is available today.

* Built-in ACL updates without full Squid reconfiguration is planned,
but it is a relatively complex low-priority project with no ETA.
Sponsors welcome.


> Would it be possible to add such helper to the project sources?

If you are talking about a script that will automatically update an
external ACL helper configuration file based on DB/git/etc. interaction,
then I do not think it is a good idea to add such a script to the Squid
repository because such a script will have virtually no Squid-specific
code (and a lot of environment/business logic specifics that would be
impossible to properly support in a simple sample script).

If you are talking about built-in ACL updates without full Squid
reconfiguration (i.e. the last bullet above), then such a feature does
not need an external Squid helper. It needs Squid code enhancements.
Most likely, it will be triggered by a standard reconfiguration signal
(but will zero-in on changed ACL parameter files by comparing file
timestamps).


Thank you,

Alex.


From rousskov at measurement-factory.com  Tue Jul  7 18:15:06 2020
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Tue, 7 Jul 2020 14:15:06 -0400
Subject: [squid-dev] External ACL Feed, helper?
In-Reply-To: <003901d65480$1d8375b0$588a6110$@gmail.com>
References: <!&!AAAAAAAAAAAYAAAAAAAAAEGQtNYT0SBEjroouRDlGygigQAAEAAAAAym9di7hoNCib4Z2hyNq7ABAAAAAA==@gmail.com>
 <e910e557-1d49-d7be-ead0-b2410db1fc4a@measurement-factory.com>
 <003901d65480$1d8375b0$588a6110$@gmail.com>
Message-ID: <374482da-c23e-b3e9-f68f-3abe180fed9c@measurement-factory.com>

On 7/7/20 1:00 PM, Eliezer Croitor wrote:

> let say I have a set of regex for sni which are bypassed or IP addresses
> that are allowed etc...
> Then with an automated update script that will validate that an update is
> possible and required, an update and reconfiguration will be applied.

I do not think it is a good idea to add such a script to the Squid
repository because such a script will have virtually no Squid-specific
code (and a lot of environment/business logic specifics that would be
impossible to properly support in a simple sample script).

Admins can easily script the "git pull && squid -k reconfigure" idea.
There is no point in providing that kind of a sample. I can think of
dozens of enhancements to that idea, but most of them are not about
Squid, and most of them are environment-specific, making them poor
candidate for inclusion in the official Squid repository.


Cheers,

Alex.


> -----Original Message-----
> From: Alex Rousskov [mailto:rousskov at measurement-factory.com] 
> Sent: Tuesday, July 7, 2020 4:54 PM
> To: Eliezer Croitor; squid-dev at lists.squid-cache.org
> Subject: Re: [squid-dev] External ACL Feed, helper?
> 
> On 7/7/20 1:08 AM, Eliezer Croitor wrote:
> 
>> I think that many proxy admins would like to have a script that will
>> help them to update their ACLs from a feed.
>>
>> Ie they have a DB or a GIT repository that contains their ACLs data like
>> IP addresses, domain names, sni patterns etc.
> 
> * External ACL updates without Squid reconfiguration is available today.
> 
> * Built-in ACL updates via Squid reconfiguration is available today.
> 
> * Built-in ACL updates without full Squid reconfiguration is planned,
> but it is a relatively complex low-priority project with no ETA.
> Sponsors welcome.
> 
> 
>> Would it be possible to add such helper to the project sources?
> 
> If you are talking about a script that will automatically update an
> external ACL helper configuration file based on DB/git/etc. interaction,
> then I do not think it is a good idea to add such a script to the Squid
> repository because such a script will have virtually no Squid-specific
> code (and a lot of environment/business logic specifics that would be
> impossible to properly support in a simple sample script).
> 
> If you are talking about built-in ACL updates without full Squid
> reconfiguration (i.e. the last bullet above), then such a feature does
> not need an external Squid helper. It needs Squid code enhancements.
> Most likely, it will be triggered by a standard reconfiguration signal
> (but will zero-in on changed ACL parameter files by comparing file
> timestamps).
> 
> 
> Thank you,
> 
> Alex.
> 


From ngtech1ltd at gmail.com  Tue Jul  7 22:39:03 2020
From: ngtech1ltd at gmail.com (Eliezer Croitor)
Date: Wed, 8 Jul 2020 01:39:03 +0300
Subject: [squid-dev] External ACL Feed, helper?
In-Reply-To: <374482da-c23e-b3e9-f68f-3abe180fed9c@measurement-factory.com>
References: <!&!AAAAAAAAAAAYAAAAAAAAAEGQtNYT0SBEjroouRDlGygigQAAEAAAAAym9di7hoNCib4Z2hyNq7ABAAAAAA==@gmail.com>
 <e910e557-1d49-d7be-ead0-b2410db1fc4a@measurement-factory.com>
 <003901d65480$1d8375b0$588a6110$@gmail.com>
 <374482da-c23e-b3e9-f68f-3abe180fed9c@measurement-factory.com>
Message-ID: <000c01d654af$6b925350$42b6f9f0$@gmail.com>

Thanks Alex,

I do hope that most admins can do it themselves.

Eliezer

----
Eliezer Croitoru
Tech Support
Mobile: +972-5-28704261
Email: ngtech1ltd at gmail.com

-----Original Message-----
From: Alex Rousskov [mailto:rousskov at measurement-factory.com] 
Sent: Tuesday, July 7, 2020 9:15 PM
To: squid-dev at lists.squid-cache.org
Cc: Eliezer Croitor
Subject: Re: [squid-dev] External ACL Feed, helper?

On 7/7/20 1:00 PM, Eliezer Croitor wrote:

> let say I have a set of regex for sni which are bypassed or IP addresses
> that are allowed etc...
> Then with an automated update script that will validate that an update is
> possible and required, an update and reconfiguration will be applied.

I do not think it is a good idea to add such a script to the Squid
repository because such a script will have virtually no Squid-specific
code (and a lot of environment/business logic specifics that would be
impossible to properly support in a simple sample script).

Admins can easily script the "git pull && squid -k reconfigure" idea.
There is no point in providing that kind of a sample. I can think of
dozens of enhancements to that idea, but most of them are not about
Squid, and most of them are environment-specific, making them poor
candidate for inclusion in the official Squid repository.


Cheers,

Alex.


> -----Original Message-----
> From: Alex Rousskov [mailto:rousskov at measurement-factory.com] 
> Sent: Tuesday, July 7, 2020 4:54 PM
> To: Eliezer Croitor; squid-dev at lists.squid-cache.org
> Subject: Re: [squid-dev] External ACL Feed, helper?
> 
> On 7/7/20 1:08 AM, Eliezer Croitor wrote:
> 
>> I think that many proxy admins would like to have a script that will
>> help them to update their ACLs from a feed.
>>
>> Ie they have a DB or a GIT repository that contains their ACLs data like
>> IP addresses, domain names, sni patterns etc.
> 
> * External ACL updates without Squid reconfiguration is available today.
> 
> * Built-in ACL updates via Squid reconfiguration is available today.
> 
> * Built-in ACL updates without full Squid reconfiguration is planned,
> but it is a relatively complex low-priority project with no ETA.
> Sponsors welcome.
> 
> 
>> Would it be possible to add such helper to the project sources?
> 
> If you are talking about a script that will automatically update an
> external ACL helper configuration file based on DB/git/etc. interaction,
> then I do not think it is a good idea to add such a script to the Squid
> repository because such a script will have virtually no Squid-specific
> code (and a lot of environment/business logic specifics that would be
> impossible to properly support in a simple sample script).
> 
> If you are talking about built-in ACL updates without full Squid
> reconfiguration (i.e. the last bullet above), then such a feature does
> not need an external Squid helper. It needs Squid code enhancements.
> Most likely, it will be triggered by a standard reconfiguration signal
> (but will zero-in on changed ACL parameter files by comparing file
> timestamps).
> 
> 
> Thank you,
> 
> Alex.
> 



From rousskov at measurement-factory.com  Wed Jul 15 19:14:55 2020
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Wed, 15 Jul 2020 15:14:55 -0400
Subject: [squid-dev] RFC: tls_key_log: report TLS pre-master secrets,
	other key material
Message-ID: <bf2b356b-a392-4b2d-3f79-7ee9e9f40dd6@measurement-factory.com>

Hello,

    I propose to add a new tls_key_log directive to record TLS
pre-master secret (and related encryption details) for to- and
from-Squid TLS connections. This very useful triage feature is common
for browsers and some networking tools. Wireshark supports it[1]. You
might know it as SSLKEYLOGFILE. It has been requested by several Squid
admins. A draft documentation of the proposed directive is at the end of
this email.

[1] https://wiki.wireshark.org/TLS#Using_the_.28Pre.29-Master-Secret

If you have any feature scope adjustments, implementation wishes, or
objections to this feature going in, please let me know!


FTR, we have considered providing similar support by adding new
logformat %code(s) to the existing access_log. While doing so would
reduce and simplify code changes, we ultimately rejected that design
because the combination of the following factors renders it inferior and
insufficient on several levels:

1. Some TLS connections are reflected in access logs a long time
   after they are established (e.g., when the connection serves
   a long CONNECT tunnel). During triage, admins may need the
   ability to decipher a live connection much sooner.

2. Some TLS connections are never reflected in access logs at all
   (e.g., when Squid opens but does not use an outgoing TLS connection
   or crashes when parsing the first request on an incoming one). Info
   gaps often create triage suspicions: Did we drop something else?

3. A single access_log record may correspond to many from-Squid
   connections, especially when Squid retries peer failures. Logging
   keys for all these connections would require accumulating the keys in
   the master transaction and then dumping them as a part of a new
   %code. Adding (and dumping) repeated ALE fields is awkward.

4. Manually creating ACLs to limit access log records to the first
   transaction on a connection would be a must for most deployments
   using this feature. Doing so is far from trivial and related
   configuration errors are difficult to triage. We could add a new
   ACL type for this purpose, but even that is tricky because a
   single master transaction may have many associated connections.
   And logging secrets for every transaction creates too much noise.

5. Configuration flexibility offered by logformat is likely to
   remain largely unused by the new feature because tools like
   Wireshark _automatically_ find relevant records when deciphering
   captured traffic. Augmenting these logs with other transaction
   details (typical for access log uses) would be mostly useless.

6. New %codes would be awkward to use in a regular access log because
   they may expand into a variable number of lines, going against the
   traditional line-oriented, "fixed" format access log use.

While some of the above items have workarounds, a few do not, and the
whole combination looks rather grim/unfriendly. We should attack this
problem from the other end -- a new simple configuration dedicated to
this useful feature.

We propose to structure this new directive so that it is easy to add
advanced access_log-like features later if needed (while reusing the
corresponding access_log code). For example, if users find that they
want to maintain multiple TLS key logs or augment log records with
connection details, we can add that support by borrowing access_log
options and code without backward compatibility concerns. The new
required "if" keyword in front of the ACL list allows for seamless
addition of new directive options in the future.


Cheers,

Alex.
---------- draft squid.conf directive documentation ------------

tls_key_log

Configures whether and where Squid records pre-master secret and
related encryption details for TLS connections accepted or established
by Squid. These connections include connections accepted at
https_port, TLS connections opened to origin servers/cache_peers/ICAP
services, and TLS tunnels bumped by Squid using the SslBump feature.
This log (a.k.a. SSLKEYLOGFILE) is meant for triage with traffic
inspection tools like Wireshark.

    tls_key_log <filename> if <acl>...

WARNING: This log allows anybody to decrypt the corresponding
encrypted TLS connections, both in-flight and postmortem.

At most one log file is supported at this time. Repeated tls_key_log
directives are treated as fatal configuration errors. By default, no
log is created or updated.

If the log file does not exist, Squid creates it. Otherwise, Squid
appends an existing log file.

The directive is consulted whenever a TLS connection is accepted or
established by Squid. TLS connections that fail the handshake may be
logged if Squid got enough information to form a log record. A record
is logged only if all of the configured ACLs match.

Squid does not buffer these log records -- the worker blocks until
each record is written. File system buffering may speed things up, but
consider placing this triage log in a memory-based partition.

This log is rotated based on the logfile_rotate settings.

Logging errors are reported to cache.log but are otherwise ignored.

While transport-related ACLs like src and dst should work, Squid may
not have access to higher-level information. For example, when logging
accepted https_port connections, Squid does not yet have access to the
expected HTTPS request. Similarly, an HTTPS response is not available
when logging most TLS connections established by Squid.

The log record format is meant to be compatible with TLS deciphering
features of Wireshark which include support for TLS v1.3 fields such
as CLIENT_EARLY_TRAFFIC_SECRET and SERVER_TRAFFIC_SECRET_0. A single
log record usually spans multiple lines. Technical documentation for
that format is maintained inside the Wireshark code (e.g., see
tls_keylog_process_lines() comments as of Wireshark commit
e3d44136f0f0026c5e893fa249f458073f3b7328).

This clause only supports fast acl types.
See http://wiki.squid-cache.org/SquidFaq/SquidAcl for details.


From squid3 at treenet.co.nz  Thu Jul 23 04:08:34 2020
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Thu, 23 Jul 2020 16:08:34 +1200
Subject: [squid-dev] OpenSSL 3.0 support at last
Message-ID: <0626305a-34ae-d25f-8baf-88b527010ce0@treenet.co.nz>

Hi guys,

OpenSSL 3.0 with their new GPL compatible license is becoming available
now in Debian and that means we can finally auto-enable all OpenSSL
features when building against that version.

I am starting test build now to see how much breakage we have to work
through for a basic compile.

Is anyone interested and able to assist with the feature testing to see
if there are any behaviour problems we need to fix in Squid and/or
report upstream to get fixed before their stable release.


@Christos; have you done any work or research in this direction already
that I should be aware of?


Cheers
Amos

From christos at chtsanti.net  Thu Jul 23 15:24:50 2020
From: christos at chtsanti.net (Christos Tsantilas)
Date: Thu, 23 Jul 2020 18:24:50 +0300
Subject: [squid-dev] OpenSSL 3.0 support at last
In-Reply-To: <0626305a-34ae-d25f-8baf-88b527010ce0@treenet.co.nz>
References: <0626305a-34ae-d25f-8baf-88b527010ce0@treenet.co.nz>
Message-ID: <06b4493c-fb85-1cad-dca9-cd88b04c54ef@chtsanti.net>

On 23/7/20 7:08 π.μ., Amos Jeffries wrote:
> Hi guys,
> 
> OpenSSL 3.0 with their new GPL compatible license is becoming available
> now in Debian and that means we can finally auto-enable all OpenSSL
> features when building against that version.
> 
> I am starting test build now to see how much breakage we have to work
> through for a basic compile.

There are some deprecated functions and probably small API changes.

> 
> Is anyone interested and able to assist with the feature testing to see
> if there are any behaviour problems we need to fix in Squid and/or
> report upstream to get fixed before their stable release.
> 
> 
> @Christos; have you done any work or research in this direction already
> that I should be aware of?

Nope.



> 
> 
> Cheers
> Amos
> _______________________________________________
> squid-dev mailing list
> squid-dev at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-dev
> 


From squid3 at treenet.co.nz  Thu Jul 23 18:32:13 2020
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Fri, 24 Jul 2020 06:32:13 +1200
Subject: [squid-dev] OpenSSL 3.0 support at last
In-Reply-To: <06b4493c-fb85-1cad-dca9-cd88b04c54ef@chtsanti.net>
References: <0626305a-34ae-d25f-8baf-88b527010ce0@treenet.co.nz>
 <06b4493c-fb85-1cad-dca9-cd88b04c54ef@chtsanti.net>
Message-ID: <c642427d-202e-f8b7-5cde-b0bda38c9e86@treenet.co.nz>

On 24/07/20 3:24 am, Christos Tsantilas wrote:
> On 23/7/20 7:08 π.μ., Amos Jeffries wrote:
>> Hi guys,
>>
>> OpenSSL 3.0 with their new GPL compatible license is becoming available
>> now in Debian and that means we can finally auto-enable all OpenSSL
>> features when building against that version.
>>
>> I am starting test build now to see how much breakage we have to work
>> through for a basic compile.
> 
> There are some deprecated functions and probably small API changes.
> 

I have found 2 functions that need different implementation and one
small API change.

Making the changes I am currently getting a thread lock hanging the
squid process. So there is something more to be found.
I have opened <https://github.com/squid-cache/squid/pull/694> to track this.


>>
>> Is anyone interested and able to assist with the feature testing to see
>> if there are any behaviour problems we need to fix in Squid and/or
>> report upstream to get fixed before their stable release.
>>
>>
>> @Christos; have you done any work or research in this direction already
>> that I should be aware of?
> 
> Nope.
> 

Okay. Thanks.


Amos

From michael.ferdinand at tdf.fr  Mon Jul 27 13:26:56 2020
From: michael.ferdinand at tdf.fr (Ferdinand Michael)
Date: Mon, 27 Jul 2020 13:26:56 +0000
Subject: [squid-dev] TR: SQUID-4.12 build ACL_HELPER
In-Reply-To: <AM6PR04MB672813AD7F41467B871158FB86720@AM6PR04MB6728.eurprd04.prod.outlook.com>
References: <AM6PR04MB672813AD7F41467B871158FB86720@AM6PR04MB6728.eurprd04.prod.outlook.com>
Message-ID: <AM6PR04MB672878953EC6D205E9145D8486720@AM6PR04MB6728.eurprd04.prod.outlook.com>

Hello,

I have a problem with the compilation everything works except the ACL_helpers.

I don't understand why this does not want to build :

./configure --prefix=/usr/local/squid  --with-default-user=proxy --with-openssl --enable-icmp --enable-basic-auth-helpers=LDAP

configure: external acl helper AD_group ... found but cannot be built
checking for ldap.h... (cached) no
checking for winldap.h... (cached) no
configure: external acl helper LDAP_group ... found but cannot be built
checking for w32api/windows.h... (cached) no
checking for windows.h... (cached) no

do you know the reason ?

Regards,
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20200727/b6863375/attachment.htm>

From squid3 at treenet.co.nz  Tue Jul 28 12:53:09 2020
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Wed, 29 Jul 2020 00:53:09 +1200
Subject: [squid-dev] TR: SQUID-4.12 build ACL_HELPER
In-Reply-To: <AM6PR04MB672878953EC6D205E9145D8486720@AM6PR04MB6728.eurprd04.prod.outlook.com>
References: <AM6PR04MB672813AD7F41467B871158FB86720@AM6PR04MB6728.eurprd04.prod.outlook.com>
 <AM6PR04MB672878953EC6D205E9145D8486720@AM6PR04MB6728.eurprd04.prod.outlook.com>
Message-ID: <316fa3e3-f017-ce31-7841-696441b67ba7@treenet.co.nz>

On 28/07/20 1:26 am, Ferdinand Michael wrote:
> Hello,
> 
>  
> 
> I have a problem with the compilation everything works except the
> ACL_helpers.
> 

I doubt that statement is correct. This line:

   checking for ldap.h... (cached) no

Says that a previous test for LDAP library dev files (eg by Basic auth
helper build) indicated LDAP is not available at all. That means your
Basic auth helper cannot be built either.


> 
> I don't understand why this does not want to build :
> 
> ./configure --prefix=/usr/local/squid  --with-default-user=proxy
> --with-openssl --enable-icmp --enable-basic-auth-helpers=LDAP
> 
>  
> 
> configure: external acl helper AD_group ... found but cannot be built
> 
> checking for ldap.h... (cached) no
> 
> checking for winldap.h... (cached) no
> 
> configure: external acl helper LDAP_group ... found but cannot be built
> 
> checking for w32api/windows.h... (cached) no
> 
> checking for windows.h... (cached) no
> 
>  
> 
> do you know the reason ?
> 


Required ldap.h (for non-Windows) or winldap.h (for Windows) header file
not existing on your build machine is the reason LDAP_group not building.

You omitted the checks leading up to the declaration that AD_group could
not be built. So no idea about that.


Amos

From rousskov at measurement-factory.com  Wed Jul 29 18:41:05 2020
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Wed, 29 Jul 2020 14:41:05 -0400
Subject: [squid-dev] RFC: tls_key_log: report TLS pre-master secrets,
 other key material
In-Reply-To: <bf2b356b-a392-4b2d-3f79-7ee9e9f40dd6@measurement-factory.com>
References: <bf2b356b-a392-4b2d-3f79-7ee9e9f40dd6@measurement-factory.com>
Message-ID: <ac5cadd3-7e7b-7bde-d83b-6313a25c9b96@measurement-factory.com>

On 7/15/20 3:14 PM, Alex Rousskov wrote:

>     I propose to add a new tls_key_log directive to record TLS
> pre-master secret (and related encryption details) for to- and
> from-Squid TLS connections. This very useful triage feature is common
> for browsers and some networking tools. Wireshark supports it[1]. You
> might know it as SSLKEYLOGFILE. It has been requested by several Squid
> admins. A draft documentation of the proposed directive is at the end of
> this email.
> 
> [1] https://wiki.wireshark.org/TLS#Using_the_.28Pre.29-Master-Secret
> 
> If you have any feature scope adjustments, implementation wishes, or
> objections to this feature going in, please let me know!


FYI: Factory is starting to implement this feature.

Alex.


> FTR, we have considered providing similar support by adding new
> logformat %code(s) to the existing access_log. While doing so would
> reduce and simplify code changes, we ultimately rejected that design
> because the combination of the following factors renders it inferior and
> insufficient on several levels:
> 
> 1. Some TLS connections are reflected in access logs a long time
>    after they are established (e.g., when the connection serves
>    a long CONNECT tunnel). During triage, admins may need the
>    ability to decipher a live connection much sooner.
> 
> 2. Some TLS connections are never reflected in access logs at all
>    (e.g., when Squid opens but does not use an outgoing TLS connection
>    or crashes when parsing the first request on an incoming one). Info
>    gaps often create triage suspicions: Did we drop something else?
> 
> 3. A single access_log record may correspond to many from-Squid
>    connections, especially when Squid retries peer failures. Logging
>    keys for all these connections would require accumulating the keys in
>    the master transaction and then dumping them as a part of a new
>    %code. Adding (and dumping) repeated ALE fields is awkward.
> 
> 4. Manually creating ACLs to limit access log records to the first
>    transaction on a connection would be a must for most deployments
>    using this feature. Doing so is far from trivial and related
>    configuration errors are difficult to triage. We could add a new
>    ACL type for this purpose, but even that is tricky because a
>    single master transaction may have many associated connections.
>    And logging secrets for every transaction creates too much noise.
> 
> 5. Configuration flexibility offered by logformat is likely to
>    remain largely unused by the new feature because tools like
>    Wireshark _automatically_ find relevant records when deciphering
>    captured traffic. Augmenting these logs with other transaction
>    details (typical for access log uses) would be mostly useless.
> 
> 6. New %codes would be awkward to use in a regular access log because
>    they may expand into a variable number of lines, going against the
>    traditional line-oriented, "fixed" format access log use.
> 
> While some of the above items have workarounds, a few do not, and the
> whole combination looks rather grim/unfriendly. We should attack this
> problem from the other end -- a new simple configuration dedicated to
> this useful feature.
> 
> We propose to structure this new directive so that it is easy to add
> advanced access_log-like features later if needed (while reusing the
> corresponding access_log code). For example, if users find that they
> want to maintain multiple TLS key logs or augment log records with
> connection details, we can add that support by borrowing access_log
> options and code without backward compatibility concerns. The new
> required "if" keyword in front of the ACL list allows for seamless
> addition of new directive options in the future.
> 
> 
> Cheers,
> 
> Alex.
> ---------- draft squid.conf directive documentation ------------
> 
> tls_key_log
> 
> Configures whether and where Squid records pre-master secret and
> related encryption details for TLS connections accepted or established
> by Squid. These connections include connections accepted at
> https_port, TLS connections opened to origin servers/cache_peers/ICAP
> services, and TLS tunnels bumped by Squid using the SslBump feature.
> This log (a.k.a. SSLKEYLOGFILE) is meant for triage with traffic
> inspection tools like Wireshark.
> 
>     tls_key_log <filename> if <acl>...
> 
> WARNING: This log allows anybody to decrypt the corresponding
> encrypted TLS connections, both in-flight and postmortem.
> 
> At most one log file is supported at this time. Repeated tls_key_log
> directives are treated as fatal configuration errors. By default, no
> log is created or updated.
> 
> If the log file does not exist, Squid creates it. Otherwise, Squid
> appends an existing log file.
> 
> The directive is consulted whenever a TLS connection is accepted or
> established by Squid. TLS connections that fail the handshake may be
> logged if Squid got enough information to form a log record. A record
> is logged only if all of the configured ACLs match.
> 
> Squid does not buffer these log records -- the worker blocks until
> each record is written. File system buffering may speed things up, but
> consider placing this triage log in a memory-based partition.
> 
> This log is rotated based on the logfile_rotate settings.
> 
> Logging errors are reported to cache.log but are otherwise ignored.
> 
> While transport-related ACLs like src and dst should work, Squid may
> not have access to higher-level information. For example, when logging
> accepted https_port connections, Squid does not yet have access to the
> expected HTTPS request. Similarly, an HTTPS response is not available
> when logging most TLS connections established by Squid.
> 
> The log record format is meant to be compatible with TLS deciphering
> features of Wireshark which include support for TLS v1.3 fields such
> as CLIENT_EARLY_TRAFFIC_SECRET and SERVER_TRAFFIC_SECRET_0. A single
> log record usually spans multiple lines. Technical documentation for
> that format is maintained inside the Wireshark code (e.g., see
> tls_keylog_process_lines() comments as of Wireshark commit
> e3d44136f0f0026c5e893fa249f458073f3b7328).
> 
> This clause only supports fast acl types.
> See http://wiki.squid-cache.org/SquidFaq/SquidAcl for details.
> 


From squid3 at treenet.co.nz  Thu Jul 30 10:28:40 2020
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Thu, 30 Jul 2020 22:28:40 +1200
Subject: [squid-dev] RFC: tls_key_log: report TLS pre-master secrets,
 other key material
In-Reply-To: <ac5cadd3-7e7b-7bde-d83b-6313a25c9b96@measurement-factory.com>
References: <bf2b356b-a392-4b2d-3f79-7ee9e9f40dd6@measurement-factory.com>
 <ac5cadd3-7e7b-7bde-d83b-6313a25c9b96@measurement-factory.com>
Message-ID: <8f3b6a6a-00a6-6496-5558-2e9eb363950d@treenet.co.nz>

On 30/07/20 6:41 am, Alex Rousskov wrote:
> On 7/15/20 3:14 PM, Alex Rousskov wrote:
> 
>>     I propose to add a new tls_key_log directive to record TLS
>> pre-master secret (and related encryption details) for to- and
>> from-Squid TLS connections. This very useful triage feature is common
>> for browsers and some networking tools. Wireshark supports it[1]. You
>> might know it as SSLKEYLOGFILE. It has been requested by several Squid
>> admins. A draft documentation of the proposed directive is at the end of
>> this email.
>>
>> [1] https://wiki.wireshark.org/TLS#Using_the_.28Pre.29-Master-Secret
>>
>> If you have any feature scope adjustments, implementation wishes, or
>> objections to this feature going in, please let me know!
> 
> 
> FYI: Factory is starting to implement this feature.
> 

Sorry I forgot to reply to this earlier.

Two design points:

1) It seems to me these bits are part of the handshake. So would come in
either as members/args of the %handshake logformat macros (some not yet
implemented) or as secondary %handshake_foo macros in the style %cert_*
macros use.


2) Please do use the logging logic implemented for access_log, just with
the next directive as list of log outputs to write at the appropriate
logging trigger time.

I accept the reasoning for not using access_log directive. This will
need a new log directive with different times when it triggers output
written there. However (most of) the implementation logic of access_log
should be usable for this new output.



>> We propose to structure this new directive so that it is easy to add
>> advanced access_log-like features later if needed (while reusing the
>> corresponding access_log code). For example, if users find that they
>> want to maintain multiple TLS key logs or augment log records with
>> connection details, we can add that support by borrowing access_log
>> options and code without backward compatibility concerns. The new
>> required "if" keyword in front of the ACL list allows for seamless
>> addition of new directive options in the future.
>>


Accepted, provided the directive *does* support access_log feature
addition. The plan below does not meet that criteria. Some changes
inline below to make it do so.


>> ---------- draft squid.conf directive documentation ------------
>>
>> tls_key_log
>>
>> Configures whether and where Squid records pre-master secret and
>> related encryption details for TLS connections accepted or established
>> by Squid. These connections include connections accepted at
>> https_port, TLS connections opened to origin servers/cache_peers/ICAP
>> services, and TLS tunnels bumped by Squid using the SslBump feature.
>> This log (a.k.a. SSLKEYLOGFILE) is meant for triage with traffic
>> inspection tools like Wireshark.
>>
>>     tls_key_log <filename> if <acl>...
>>

Please allow extension points for options and modules:

  tls_key_log stdio:<filename> [options] if <acl>...


The "stdio:" module name is to allow for sharing the access_log config
parser and future expansion to logging modules like daemon: which we
will doubtless be asked for later.



>> WARNING: This log allows anybody to decrypt the corresponding
>> encrypted TLS connections, both in-flight and postmortem.
>>
>> At most one log file is supported at this time. Repeated tls_key_log
>> directives are treated as fatal configuration errors. By default, no
>> log is created or updated.

With ACL support it seems reasonable to support multiple logs. We should
be able to re-use (with minor change to pass the list of log outputs to
the function) the logic access_log has for writing to a list of outputs.


>>
>> If the log file does not exist, Squid creates it. Otherwise, Squid
>> appends an existing log file.
>>
>> The directive is consulted whenever a TLS connection is accepted or
>> established by Squid. TLS connections that fail the handshake may be
>> logged if Squid got enough information to form a log record. A record
>> is logged only if all of the configured ACLs match.
>>
>> Squid does not buffer these log records -- the worker blocks until
>> each record is written. File system buffering may speed things up, but
>> consider placing this triage log in a memory-based partition.
>>
>> This log is rotated based on the logfile_rotate settings.
>>

Please don't use solely that directive. The new directive should have a
rotate=N option of its own. Only using the global directive as a default
if that option is unset.


Amos

From rousskov at measurement-factory.com  Thu Jul 30 16:58:08 2020
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Thu, 30 Jul 2020 12:58:08 -0400
Subject: [squid-dev] RFC: tls_key_log: report TLS pre-master secrets,
 other key material
In-Reply-To: <8f3b6a6a-00a6-6496-5558-2e9eb363950d@treenet.co.nz>
References: <bf2b356b-a392-4b2d-3f79-7ee9e9f40dd6@measurement-factory.com>
 <ac5cadd3-7e7b-7bde-d83b-6313a25c9b96@measurement-factory.com>
 <8f3b6a6a-00a6-6496-5558-2e9eb363950d@treenet.co.nz>
Message-ID: <e23adc5a-5f5f-cb47-cdcd-e0caa651289a@measurement-factory.com>

On 7/30/20 6:28 AM, Amos Jeffries wrote:
>> On 7/15/20 3:14 PM, Alex Rousskov wrote:
>>>     I propose to add a new tls_key_log directive to record TLS
>>> pre-master secret (and related encryption details) for to- and
>>> from-Squid TLS connections. This very useful triage feature is common
>>> for browsers and some networking tools. Wireshark supports it[1]. You
>>> might know it as SSLKEYLOGFILE. It has been requested by several Squid
>>> admins. A draft documentation of the proposed directive is at the end of
>>> this email.
>>>
>>> [1] https://wiki.wireshark.org/TLS#Using_the_.28Pre.29-Master-Secret
>>>
>>> If you have any feature scope adjustments, implementation wishes, or
>>> objections to this feature going in, please let me know!


> Two design points:
> 
> 1) It seems to me these bits are part of the handshake. So would come in
> either as members/args of the %handshake logformat macros (some not yet
> implemented) or as secondary %handshake_foo macros in the style %cert_*
> macros use.

Sure, if somebody wants to add a new logformat %code to log secrets,
they should do that. It would not be a good solution for the problems
tls_key_log is solving, but it could be useful for other reasons, of
course. That addition will probably be able to reuse some of the
tls_key_log code as well.

As for reusing %handshake for such logging, I am not sure: Connection
secrets cannot be a part of the plain text handshake (for obvious
reasons). Logging encrypted secrets does not help. If somebody wants to
add plain text secrets logging via a new %handshake parameter, they
should double check whether all the secrets are truly a part of the
encrypted handshake -- I suspect that the handshake actually ends sooner
and/or contains secret _derivatives_.

At any rate, these details are all outside the tls_key_log scope. We do
not need to investigate or agree on them right now AFAICT. If I missed
your point, please clarify.


> 2) Please do use the logging logic implemented for access_log, just with
> the next directive as list of log outputs to write at the appropriate
> logging trigger time.

Sorry, I do not understand what the above paragraph means. The term
"logging logic implemented for access_log" is so broad that I cannot
tell what you are trying to subtract or add to the proposed tls_key_log
directive interface and/or its implementation. If this is already
covered by the specific discussion below, then just skip to that!


> I accept the reasoning for not using access_log directive. This will
> need a new log directive with different times when it triggers output
> written there. 

Yes.


> However (most of) the implementation logic of access_log
> should be usable for this new output.

I see no reason to repeat access_log interface mistakes (e.g., the
special "none" destination) and no need to support some of the
powerful/complex access_log features in tls_key_log (e.g., logformat),
but perhaps you are not asking for any of that. Please be more specific
if this is not covered by the discussion below.


>>>     tls_key_log <filename> if <acl>...

> Please allow extension points for options and modules:
> 
>   tls_key_log stdio:<filename> [options] if <acl>...

We will requite the ugly "stdio:" suffix to avoid arguing about it.

Future addition of optional parameters was already supported; there were
just no such options until you requested rotate=N below.


>>> At most one log file is supported at this time. Repeated tls_key_log
>>> directives are treated as fatal configuration errors. By default, no
>>> log is created or updated.

> With ACL support it seems reasonable to support multiple logs. We should
> be able to re-use (with minor change to pass the list of log outputs to
> the function) the logic access_log has for writing to a list of outputs.

I agree that supporting multiple tls_key_log is reasonable. I would
leave that feature for a future seamless improvement -- that is why
repeated tls_key_log directives are treated as a fatal configuration
error for now.

The existing multi-log logic for access_logs is confusing for admins and
has serious implementation bugs. I do not think we should model the new
feature on that interface or code. However, we do not need to agree on
this aspect. It can and should be decided later, driven, in part, by
real use cases for multilog support.


>>> This log is rotated based on the logfile_rotate settings.

> Please don't use solely that directive. The new directive should have a
> rotate=N option of its own. Only using the global directive as a default
> if that option is unset.

Will add to avoid arguing about it.


Thank you,

Alex.

