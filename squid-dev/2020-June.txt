From gkinkie at gmail.com  Mon Jun  1 07:21:07 2020
From: gkinkie at gmail.com (Francesco Chemolli)
Date: Mon, 1 Jun 2020 08:21:07 +0100
Subject: [squid-dev] RFC: Modernizing sources using clang-tidy
In-Reply-To: <1d7889b0-b32d-fdb3-bf9d-771c504efe4e@measurement-factory.com>
References: <a6773a16-2342-0c29-e21d-e8d602d10999@measurement-factory.com>
 <aae7e04a-8c08-fe19-59cd-0a396a227573@treenet.co.nz>
 <1d7889b0-b32d-fdb3-bf9d-771c504efe4e@measurement-factory.com>
Message-ID: <CA+Y8hcO4s354x0CMLGk37UmqOR3oWN=XFyHYxcK=kD1Q6wfa2Q@mail.gmail.com>

>
>
> > IMO we would be better off going the scripted way to remove the subset
> > of cases we can automate and catch the rest with manual edits and in
> review.
>
> I do not see a point of automating ourselves if there is an existing
> automation that works much better than anything we can do ourselves.
>

I agree. At least as a starting point. Poring over a patch is easier than
poring over the whole source


> > I like a few things the tool does. But so far it seems like something we
> > want to run across the code occasionally. eg as a Jenkins test job.
>
> Yes, or a Semaphore CI job, and/or on-demand. Please clarify regarding
> performance-* checks above. If we are in agreement regarding
> modernize-use-override and at least one more check, then I can start
> working on a polished proposal for those checks (at least) and the
> overall setup.
>

I'm also fine with running it manually every now and then. Our rate of
change is not such that we would introduce regressions all that often.

-- 
    Francesco
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20200601/83511c3f/attachment-0001.html>

From ngtech1ltd at gmail.com  Mon Jun  1 07:53:37 2020
From: ngtech1ltd at gmail.com (Eliezer Croitoru)
Date: Mon, 1 Jun 2020 10:53:37 +0300
Subject: [squid-dev] Squid command
In-Reply-To: <CAFoQnCr0mSeFqJgR_S2Kf69rkMXZDR=pYbbsMtrQyXkuWj--rg@mail.gmail.com>
References: <CAFoQnCr0mSeFqJgR_S2Kf69rkMXZDR=pYbbsMtrQyXkuWj--rg@mail.gmail.com>
Message-ID: <338E9F80-EFFD-41E3-AEF2-CB946765DCC1@hxcore.ol>

An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20200601/e970b379/attachment.html>

From pichetr03 at gmail.com  Mon Jun  1 23:46:55 2020
From: pichetr03 at gmail.com (pic rat rat)
Date: Tue, 2 Jun 2020 06:46:55 +0700
Subject: [squid-dev] Squid command
In-Reply-To: <338E9F80-EFFD-41E3-AEF2-CB946765DCC1@hxcore.ol>
References: <338E9F80-EFFD-41E3-AEF2-CB946765DCC1@hxcore.ol>
Message-ID: <5E1C456B-46F3-484C-8308-F5E0A0609D19@gmail.com>

Dear sir,

Thank you for your support,I will try to reconfig again.

Best Regards,
Pichet R.

> On 1 Jun BE 2563, at 14:53, Eliezer Croitoru <ngtech1ltd at gmail.com> wrote:
> 
> ﻿
> Hey Pic,
>  
> Leaving aside RHEL and their support, The setup is not well understood.
> My assumption is that RHEL support is not enough for all clients.
>  
> To reproduce this issue there are many details missing.
> OS installed packages
> Full squid -v output
> squid.conf
>  
> RHEL support is pretty expensive..
>  
> I can try to understand the scenario.
>  
> Eliezer
>  
> ----
> Eliezer Croitoru
> Tech Support
> Mobile: +972-5-28704261
> Email: ngtech1ltd at gmail.com
>  
> From: pic rat rat
> Sent: Wednesday, May 27, 2020 1:01 PM
> To: squid-dev at lists.squid-cache.org
> Subject: [squid-dev] Squid command
>  
> Dear sir,
>  
> We've found problem of squid program after config in squid.conf "ssl-bump generate-host-certificates=on,"
> service is not run, however I remove "generate-host-certificate=on" service is normally starting.
> Could you please advise?
>  
> squid -v
> Squid Cache: Version 3.5.20
>  
> OS 
> cat /etc/os-release
> NAME="Red Hat Enterprise Linux Server"
> VERSION="7.8 (Maipo)"
> ID="rhel"
> ID_LIKE="fedora"
> VARIANT="Server"
> VARIANT_ID="server"
> VERSION_ID="7.8"
> PRETTY_NAME="Red Hat Enterprise Linux"
> ANSI_COLOR="0;31"
> CPE_NAME="cpe:/o:redhat:enterprise_linux:7.8:GA:server"
> HOME_URL="https://www.redhat.com/"
> BUG_REPORT_URL="https://bugzilla.redhat.com/"
>  
> Best Regards,
> Pichet R.
>  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20200602/484ceb90/attachment.html>

From gkinkie at gmail.com  Fri Jun 19 21:13:09 2020
From: gkinkie at gmail.com (Francesco Chemolli)
Date: Fri, 19 Jun 2020 22:13:09 +0100
Subject: [squid-dev] RFC: making TrieNode less memory-hungry
Message-ID: <CA+Y8hcNpFipqkYBkMyALo9Mw8mPjT6X=e1fLidK+VnWouaWXZg@mail.gmail.com>

Hi all,
  I'm looking at the TrieNode code, and while it's super fast, it's quite
memory-hungry: each node uses 2kb of RAM for the children index and any
moderately-sized Trie has plenty of nodes. On the upside, it's blazing fast.

How about changing it so that each node only havs as many children as the
[min_char, max_char] range, using a std::vector and a min_char offset?
Lookups would still be O(length of key), insertions may require shifting
the vector if the char being inserted is lower than the current min_char,
but the memory savings sound promising.

What do you think?

-- 
    Francesco
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20200619/a2749dff/attachment.html>

From squid3 at treenet.co.nz  Tue Jun 30 22:59:13 2020
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Wed, 1 Jul 2020 10:59:13 +1200
Subject: [squid-dev] Proposed focus for Squid-6
Message-ID: <d83895a1-c3e9-48b3-5d18-c7584dea07b1@treenet.co.nz>

I have been asked a few weeks ago about what the "goal for Squid-6" is
going to be.

The last few version we have focused on C++11 optimizations and code
upgrades. While the code is not entirely C++11 (and may never be) new
additions are routinely using and upgrading code to the improved
language features.


NP: this is no way affects the policies of handling things as they come
and release when its ready. It just gives people some rough direction to
consider when struggling with selecting of new work to start.


I am thinking it is time for a slight change to at least add another
goal. They way held-back changes are going so far I am thinking we
should aim at code pruning this next release series. For that to be a
goal we need to start preparing for it and the user announcements early
(ie now) rather than in retrospective.


This would cover:

0) the ongoing project to clarify OS support and testing. Formally
removing some.

1) remove features that have been deprecated since Squid-3 days.
  - WAIS support
  - Replace ICP with HTCP

2) proposing some next features to be removed ASAP, possibly removing
them this release.
 - send-announce removal
 - SMB_LM helper removal

3) drop (all?) bitrotten code


4) statistic addition to measure feature use. To improve admin ability
to answer our "are you using this feature" requests.


Thoughts anyone?




Amos

From squid3 at treenet.co.nz  Tue Jun 30 23:21:33 2020
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Wed, 1 Jul 2020 11:21:33 +1200
Subject: [squid-dev] RFC: making TrieNode less memory-hungry
In-Reply-To: <CA+Y8hcNpFipqkYBkMyALo9Mw8mPjT6X=e1fLidK+VnWouaWXZg@mail.gmail.com>
References: <CA+Y8hcNpFipqkYBkMyALo9Mw8mPjT6X=e1fLidK+VnWouaWXZg@mail.gmail.com>
Message-ID: <d1f2e887-3ef2-81bb-b90e-3b8e7b2624ef@treenet.co.nz>

On 20/06/20 9:13 am, Francesco Chemolli wrote:
> Hi all,
>   I'm looking at the TrieNode code, and while it's super fast, it's
> quite memory-hungry: each node uses 2kb of RAM for the children index
> and any moderately-sized Trie has plenty of nodes. On the upside, it's
> blazing fast.
> 
> How about changing it so that each node only havs as many children as
> the [min_char, max_char] range, using a std::vector and a min_char
> offset? Lookups would still be O(length of key), insertions may require
> shifting the vector if the char being inserted is lower than the current
> min_char, but the memory savings sound promising.
> 
> What do you think?
> 

Before doing anything, please look at how trie is implemented for
rbldnsd. It is both super fast and memory efficient. A lot of the
optimization analysis and work has already been done by some super smart
people we can probably leverage.

Also, keep in mind that trie is only used by ESI. So it is not exactly a
high-usage feature.


Amos

