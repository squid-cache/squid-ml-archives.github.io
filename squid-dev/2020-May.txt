From christos at chtsanti.net  Fri May  8 14:12:34 2020
From: christos at chtsanti.net (Christos Tsantilas)
Date: Fri, 8 May 2020 17:12:34 +0300
Subject: [squid-dev] squid master build with alternate openssl fails
Message-ID: <8d7f50f5-7b88-9284-3417-5c98ecc77187@chtsanti.net>

Hi all,

Squid master 699ade2d fails to build with an alternate OpenSsl, when the 
"--with-openssl=/path/to/openssl" is used.

I think that the issue added with the commit 245314010.

Example build output:
g++ -DHAVE_CONFIG_H 
-DDEFAULT_CONFIG_FILE=\"/usr/local/squid3-cvs/etc/squid.conf\" 
-DDEFAULT_SQUID_DATA_DIR=\"/usr/local/squid3-cvs/share\" 
-DDEFAULT_SQUID_CONFIG_DIR=\"/usr/local/squid3-cvs/etc\"   -I.. 
-I../include -I../lib -I../src -I../include    -I../src 
-I/usr/include/libxml2 -Wall -Wpointer-arith -Wwrite-strings -Wcomments 
-Wshadow -Woverloaded-virtual -Werror -pipe -D_REENTRANT 
-I/usr/include/libxml2 -m64    -I/usr/include/p11-kit-1  -g -O2 
-march=native -MT CacheDigest.o -MD -MP -MF $depbase.Tpo -c -o 
CacheDigest.o CacheDigest.cc &&\
mv -f $depbase.Tpo $depbase.Po
In file included from cache_cf.cc:3427:0:
cf_parser.cci: In function ‘int parse_line(char*)’:
cf_parser.cci:1466:20: error: ‘Ssl’ has not been declared
          parse_eol(&Ssl::TheConfig.ssl_crtd);
...


My understanding is that squid enables ssl-crtd build (--with-ssl-crtd 
is given) but fails to detect OpenSsl correctly.

From squid3 at treenet.co.nz  Fri May  8 14:50:16 2020
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Sat, 9 May 2020 02:50:16 +1200
Subject: [squid-dev] squid master build with alternate openssl fails
In-Reply-To: <8d7f50f5-7b88-9284-3417-5c98ecc77187@chtsanti.net>
References: <8d7f50f5-7b88-9284-3417-5c98ecc77187@chtsanti.net>
Message-ID: <2d621622-49ba-1af1-cadd-8c183b011016@treenet.co.nz>

Does this change resolve the issue for you?

diff --git a/acinclude/squid-util.m4 b/acinclude/squid-util.m4
index 7f5a72e5b..5860b690e 100644
--- a/acinclude/squid-util.m4
+++ b/acinclude/squid-util.m4
@@ -188,9 +188,9 @@ AC_DEFUN([SQUID_OPTIONAL_LIB],[
   squid_auto_lib=`echo $1|tr "\-" "_"`
   set with_$squid_auto_lib = no
   AC_ARG_WITH([$1],AS_HELP_STRING([--with-$1],[Compile with the $2
library.]),[
-    AS_CASE(["$with_$1"],[yes|no],,[
-      AS_IF([test ! -d "$with_$1"],AC_MSG_ERROR([--with-$1 path does
not point to a directory]))
-      with_$squid_auto_lib=yes
+    AS_CASE(["$withval"],[yes|no],,[
+      AS_IF([test ! -d "$withval"],AC_MSG_ERROR([--with-$1 path does
not point to a directory]))
+      set with_$squid_auto_lib = yes
       AS_IF([test -d "$withval/lib64"],[$3_PATH += "-L$withval/lib64"])
       AS_IF([test -d "$withval/lib"],[$3_PATH += "-L$withval/lib"])
       $3_CFLAGS="-I$withval/include"


From rousskov at measurement-factory.com  Fri May  8 14:58:24 2020
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Fri, 8 May 2020 10:58:24 -0400
Subject: [squid-dev] squid master build with alternate openssl fails
In-Reply-To: <8d7f50f5-7b88-9284-3417-5c98ecc77187@chtsanti.net>
References: <8d7f50f5-7b88-9284-3417-5c98ecc77187@chtsanti.net>
Message-ID: <86f25476-ae6b-c14a-ce89-c6e92f473ffc@measurement-factory.com>

On 5/8/20 10:12 AM, Christos Tsantilas wrote:

> Squid master 699ade2d fails to build with an alternate OpenSsl, when the
> "--with-openssl=/path/to/openssl" is used.

Francesco, builds with custom OpenSSL paths are not that uncommon,
especially among SslBump admins. Would you be able to test that kind of
configuration in one of the Jenkins tests? It can be even combined with
other custom-path tests. Or is this too custom/special to warrant an
automated test in your opinion?


> I think that the issue added with the commit 245314010.

I speculate that the bug is related to the disappearance of the
LIBOPENSSL_PATH assignment in that commit. We still use that variable,
but we no longer set it.


Amos, would you be able to fix this?

Thank you,

Alex.



> Example build output:
> g++ -DHAVE_CONFIG_H
> -DDEFAULT_CONFIG_FILE=\"/usr/local/squid3-cvs/etc/squid.conf\"
> -DDEFAULT_SQUID_DATA_DIR=\"/usr/local/squid3-cvs/share\"
> -DDEFAULT_SQUID_CONFIG_DIR=\"/usr/local/squid3-cvs/etc\"   -I..
> -I../include -I../lib -I../src -I../include    -I../src
> -I/usr/include/libxml2 -Wall -Wpointer-arith -Wwrite-strings -Wcomments
> -Wshadow -Woverloaded-virtual -Werror -pipe -D_REENTRANT
> -I/usr/include/libxml2 -m64    -I/usr/include/p11-kit-1  -g -O2
> -march=native -MT CacheDigest.o -MD -MP -MF $depbase.Tpo -c -o
> CacheDigest.o CacheDigest.cc &&\
> mv -f $depbase.Tpo $depbase.Po
> In file included from cache_cf.cc:3427:0:
> cf_parser.cci: In function ‘int parse_line(char*)’:
> cf_parser.cci:1466:20: error: ‘Ssl’ has not been declared
>          parse_eol(&Ssl::TheConfig.ssl_crtd);
> ...
> 
> 
> My understanding is that squid enables ssl-crtd build (--with-ssl-crtd
> is given) but fails to detect OpenSsl correctly.

From squid3 at treenet.co.nz  Fri May  8 15:34:26 2020
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Sat, 9 May 2020 03:34:26 +1200
Subject: [squid-dev] squid master build with alternate openssl fails
In-Reply-To: <86f25476-ae6b-c14a-ce89-c6e92f473ffc@measurement-factory.com>
References: <8d7f50f5-7b88-9284-3417-5c98ecc77187@chtsanti.net>
 <86f25476-ae6b-c14a-ce89-c6e92f473ffc@measurement-factory.com>
Message-ID: <9f199267-5b3e-947d-87ec-61f96c115116@treenet.co.nz>

On 9/05/20 2:58 am, Alex Rousskov wrote:
> On 5/8/20 10:12 AM, Christos Tsantilas wrote:
> 
>> Squid master 699ade2d fails to build with an alternate OpenSsl, when the
>> "--with-openssl=/path/to/openssl" is used.
> 
> Francesco, builds with custom OpenSSL paths are not that uncommon,
> especially among SslBump admins. Would you be able to test that kind of
> configuration in one of the Jenkins tests? It can be even combined with
> other custom-path tests. Or is this too custom/special to warrant an
> automated test in your opinion?
> 
> 
>> I think that the issue added with the commit 245314010.
> 
> I speculate that the bug is related to the disappearance of the
> LIBOPENSSL_PATH assignment in that commit. We still use that variable,
> but we no longer set it.
> 
> 
> Amos, would you be able to fix this?

It is set by $3_PATH in the SQUID_OPTIONAL_LIB macro, then set into
SSLLIB when the files are confirmed.


Amos

From gkinkie at gmail.com  Fri May  8 21:11:44 2020
From: gkinkie at gmail.com (Francesco Chemolli)
Date: Fri, 8 May 2020 22:11:44 +0100
Subject: [squid-dev] squid master build with alternate openssl fails
In-Reply-To: <86f25476-ae6b-c14a-ce89-c6e92f473ffc@measurement-factory.com>
References: <8d7f50f5-7b88-9284-3417-5c98ecc77187@chtsanti.net>
 <86f25476-ae6b-c14a-ce89-c6e92f473ffc@measurement-factory.com>
Message-ID: <CA+Y8hcNmw4_6DbrSYZfh2jnwaFkQxU3mwsBnC+_3p2n3fu1AXw@mail.gmail.com>

On Fri, May 8, 2020 at 3:58 PM Alex Rousskov <
rousskov at measurement-factory.com> wrote:

> On 5/8/20 10:12 AM, Christos Tsantilas wrote:
>
> > Squid master 699ade2d fails to build with an alternate OpenSsl, when the
> > "--with-openssl=/path/to/openssl" is used.
>
> Francesco, builds with custom OpenSSL paths are not that uncommon,
> especially among SslBump admins. Would you be able to test that kind of
> configuration in one of the Jenkins tests? It can be even combined with
> other custom-path tests. Or is this too custom/special to warrant an
> automated test in your opinion?


The most complicated part is to prep and keep uptodate a test environment
with openssl in a nonstandard location; I rebuild our docker images once a
month to ensure they're fresh with what's in the wild.
To decide how much effort to invest, how prevalent is this situation? On
Linux I'd expect this to be pretty much a corner case by now, is it not?

-- 
    Francesco
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20200508/052462ac/attachment.html>

From christos at chtsanti.net  Sun May 10 07:02:37 2020
From: christos at chtsanti.net (Christos Tsantilas)
Date: Sun, 10 May 2020 10:02:37 +0300
Subject: [squid-dev] squid master build with alternate openssl fails
In-Reply-To: <2d621622-49ba-1af1-cadd-8c183b011016@treenet.co.nz>
References: <8d7f50f5-7b88-9284-3417-5c98ecc77187@chtsanti.net>
 <2d621622-49ba-1af1-cadd-8c183b011016@treenet.co.nz>
Message-ID: <947a3f29-0196-a448-5339-9ed246d8c422@chtsanti.net>

On 8/5/20 5:50 μ.μ., Amos Jeffries wrote:
> Does this change resolve the issue for you?

It is a step but this is not enough.

I am attaching a patch which finally solved the issue. However still it 
is not enough, there are other similar cases need to be fixed in 
squid-util.m4 and probably in configure.ac


> 
> diff --git a/acinclude/squid-util.m4 b/acinclude/squid-util.m4
> index 7f5a72e5b..5860b690e 100644
> --- a/acinclude/squid-util.m4
> +++ b/acinclude/squid-util.m4
> @@ -188,9 +188,9 @@ AC_DEFUN([SQUID_OPTIONAL_LIB],[
>     squid_auto_lib=`echo $1|tr "\-" "_"`
>     set with_$squid_auto_lib = no
>     AC_ARG_WITH([$1],AS_HELP_STRING([--with-$1],[Compile with the $2
> library.]),[
> -    AS_CASE(["$with_$1"],[yes|no],,[
> -      AS_IF([test ! -d "$with_$1"],AC_MSG_ERROR([--with-$1 path does
> not point to a directory]))
> -      with_$squid_auto_lib=yes
> +    AS_CASE(["$withval"],[yes|no],,[
> +      AS_IF([test ! -d "$withval"],AC_MSG_ERROR([--with-$1 path does
> not point to a directory]))
> +      set with_$squid_auto_lib = yes
>         AS_IF([test -d "$withval/lib64"],[$3_PATH += "-L$withval/lib64"])
>         AS_IF([test -d "$withval/lib"],[$3_PATH += "-L$withval/lib"])
>         $3_CFLAGS="-I$withval/include"
> 
> _______________________________________________
> squid-dev mailing list
> squid-dev at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-dev
> 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: fix-openssl-detect.patch
Type: text/x-patch
Size: 1376 bytes
Desc: not available
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20200510/ff1393d0/attachment.bin>

From squid3 at treenet.co.nz  Sun May 10 07:53:24 2020
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Sun, 10 May 2020 19:53:24 +1200
Subject: [squid-dev] squid master build with alternate openssl fails
In-Reply-To: <947a3f29-0196-a448-5339-9ed246d8c422@chtsanti.net>
References: <8d7f50f5-7b88-9284-3417-5c98ecc77187@chtsanti.net>
 <2d621622-49ba-1af1-cadd-8c183b011016@treenet.co.nz>
 <947a3f29-0196-a448-5339-9ed246d8c422@chtsanti.net>
Message-ID: <3d648622-b61c-66cd-e1af-359169bd244a@treenet.co.nz>

On 10/05/20 7:02 pm, Christos Tsantilas wrote:
> On 8/5/20 5:50 μ.μ., Amos Jeffries wrote:
>> Does this change resolve the issue for you?
> 
> It is a step but this is not enough.
> 
> I am attaching a patch which finally solved the issue. However still it
> is not enough, there are other similar cases need to be fixed in
> squid-util.m4 and probably in configure.ac
> 

That configure.ac change is wrong. It really should be checking for ' =
"xyes" ' because this library is supposed to be auto-disabled. eg for
the default value of nil.


The defun'd macro line "set with_$squid_auto_lib = yes" should be
changing with_openssl to "yes". If not, that is a bug.


Amos

From squid3 at treenet.co.nz  Sun May 10 08:49:07 2020
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Sun, 10 May 2020 20:49:07 +1200
Subject: [squid-dev] squid master build with alternate openssl fails
In-Reply-To: <3d648622-b61c-66cd-e1af-359169bd244a@treenet.co.nz>
References: <8d7f50f5-7b88-9284-3417-5c98ecc77187@chtsanti.net>
 <2d621622-49ba-1af1-cadd-8c183b011016@treenet.co.nz>
 <947a3f29-0196-a448-5339-9ed246d8c422@chtsanti.net>
 <3d648622-b61c-66cd-e1af-359169bd244a@treenet.co.nz>
Message-ID: <d77c07ea-a201-a3bb-3674-feba2413b6b7@treenet.co.nz>

On 10/05/20 7:53 pm, Amos Jeffries wrote:
> On 10/05/20 7:02 pm, Christos Tsantilas wrote:
>> On 8/5/20 5:50 μ.μ., Amos Jeffries wrote:
>>> Does this change resolve the issue for you?
>>
>> It is a step but this is not enough.
>>
>> I am attaching a patch which finally solved the issue. However still it
>> is not enough, there are other similar cases need to be fixed in
>> squid-util.m4 and probably in configure.ac
>>
> 
> That configure.ac change is wrong. It really should be checking for ' =
> "xyes" ' because this library is supposed to be auto-disabled. eg for
> the default value of nil.
> 
> 
> The defun'd macro line "set with_$squid_auto_lib = yes" should be
> changing with_openssl to "yes". If not, that is a bug.
> 

Your patch helped me track it down though. The whitespace around "+=" is
breaking those assignments.

I will submit a PR fixing this shortly.

Amos

From rousskov at measurement-factory.com  Mon May 11 13:56:33 2020
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Mon, 11 May 2020 09:56:33 -0400
Subject: [squid-dev] squid master build with alternate openssl fails
In-Reply-To: <CA+Y8hcNmw4_6DbrSYZfh2jnwaFkQxU3mwsBnC+_3p2n3fu1AXw@mail.gmail.com>
References: <8d7f50f5-7b88-9284-3417-5c98ecc77187@chtsanti.net>
 <86f25476-ae6b-c14a-ce89-c6e92f473ffc@measurement-factory.com>
 <CA+Y8hcNmw4_6DbrSYZfh2jnwaFkQxU3mwsBnC+_3p2n3fu1AXw@mail.gmail.com>
Message-ID: <dcf01885-6c36-a9f6-aef6-0379f8794714@measurement-factory.com>

On 5/8/20 5:11 PM, Francesco Chemolli wrote:
> I rebuild our docker
> images once a month to ensure they're fresh with what's in the wild.

FWIW, I think montly update frequency is excessive when there is no
adequate update validation. I speculate that we are spending more time
on faulty build tests than on fixing true build bugs the tests expose.


> To decide how much effort to invest, how prevalent is this situation? On
> Linux I'd expect this to be pretty much a corner case by now, is it not?

Unfortunately, we do not know. Folks running SslBump on older OS
releases may want to build with newer OpenSSL releases. Is that 1% of
Squid deployments? 10%? 20% of those deployments that matter? Unknown.

If it takes more than a few hours to change an existing (or add a new)
test node that uses custom library locations for --with-foo=PATH
options, then I would not do it (for now). You have bigger fish to catch.

Alex.

From pichetr03 at gmail.com  Wed May 27 02:25:21 2020
From: pichetr03 at gmail.com (pic rat rat)
Date: Wed, 27 May 2020 09:25:21 +0700
Subject: [squid-dev] Squid command
Message-ID: <CAFoQnCr0mSeFqJgR_S2Kf69rkMXZDR=pYbbsMtrQyXkuWj--rg@mail.gmail.com>

Dear sir,

We've found problem of squid program after config in squid.conf "ssl-bump
generate-host-certificates=on,"
service is not run, however I remove "generate-host-certificate=on" service
is normally starting.
Could you please advise?

squid -v
Squid Cache: Version 3.5.20

OS
cat /etc/os-release
NAME="Red Hat Enterprise Linux Server"
VERSION="7.8 (Maipo)"
ID="rhel"
ID_LIKE="fedora"
VARIANT="Server"
VARIANT_ID="server"
VERSION_ID="7.8"
PRETTY_NAME="Red Hat Enterprise Linux"
ANSI_COLOR="0;31"
CPE_NAME="cpe:/o:redhat:enterprise_linux:7.8:GA:server"
HOME_URL="https://www.redhat.com/"
BUG_REPORT_URL="https://bugzilla.redhat.com/"

Best Regards,
Pichet R.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20200527/ffd2347f/attachment.html>

From gkinkie at gmail.com  Sat May 30 17:27:12 2020
From: gkinkie at gmail.com (Francesco Chemolli)
Date: Sat, 30 May 2020 18:27:12 +0100
Subject: [squid-dev] cppunit -> googletest / gmock?
Message-ID: <CA+Y8hcNLaEkENpAWSUTpy-efkY5ZjS6rvMLH+agPHDaJphPP3g@mail.gmail.com>

Hi all,
   starting from a PR in a conversation with Alex about our current
approach to unit testing being painful, I've checked what alternatives
would we have and how practical would they be.

An easy first option would be googletest/googlemock.

On a lazy afternoon, I've tried seeing how useful/painful it would be to
try it, by porting one test over - it's quite trivial and doesn't require
mocking, so I'll try a more complicated one next - to start a conversation
about the topic.

You can find the test branch at https://github.com/kinkie/squid/tree/gtest .
I've only touched two files, a newly-created src/tests/testMemGtest and
src/Makefile.am .

The output from the test run is at https://paste.ubuntu.com/p/3sgTDN7rNm/

What do you think?

My initial thoughts:
- it is somewhat simpler and more powerful than cppunit
- setting the test environment up is easy but at this time it can only be
done from source. Adding it to the build farm images is straightforward
- the license is BSD 3-clause new (
https://github.com/google/googletest/blob/master/LICENSE)
- googlemock promises to be vastly superior to our current approach
- porting memTest took me about one hour, mostly caused by us including
cppunit headers from squid.h (WUT? A PR is coming up to unentangle that)

-- 
    Francesco
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20200530/65686d5d/attachment.html>

From squid3 at treenet.co.nz  Sat May 30 18:36:13 2020
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Sun, 31 May 2020 06:36:13 +1200
Subject: [squid-dev] cppunit -> googletest / gmock?
In-Reply-To: <CA+Y8hcNLaEkENpAWSUTpy-efkY5ZjS6rvMLH+agPHDaJphPP3g@mail.gmail.com>
References: <CA+Y8hcNLaEkENpAWSUTpy-efkY5ZjS6rvMLH+agPHDaJphPP3g@mail.gmail.com>
Message-ID: <c9d0adb0-b3d1-47d6-b824-fb6c436773db@treenet.co.nz>

On 31/05/20 5:27 am, Francesco Chemolli wrote:
> Hi all,
>    starting from a PR in a conversation with Alex about our current
> approach to unit testing being painful, I've checked what alternatives
> would we have and how practical would they be.
> 
> An easy first option would be googletest/googlemock.
> 
> On a lazy afternoon, I've tried seeing how useful/painful it would be to
> try it, by porting one test over - it's quite trivial and doesn't
> require mocking, so I'll try a more complicated one next - to start a
> conversation about the topic.
> 
> You can find the test branch at https://github.com/kinkie/squid/tree/gtest .
> I've only touched two files, a newly-created src/tests/testMemGtest and
> src/Makefile.am .
> 
> The output from the test run is at https://paste.ubuntu.com/p/3sgTDN7rNm/
> 
> What do you think?
> 
> My initial thoughts:
> - it is somewhat simpler and more powerful than cppunit
> - setting the test environment up is easy but at this time it can only
> be done from source. Adding it to the build farm images is straightforward

That is a problem. The unit tests are run by pretty much everyone
building Squid.

It is not a complete blocker, but having a process more complex than
simple dependency install does pose a relatively major hurdle that any
framework has to get over to be of much utility.



> - the license is BSD 3-clause new
> (https://github.com/google/googletest/blob/master/LICENSE) 
> - googlemock promises to be vastly superior to our current approach

Where are you seeing evidence of this?

The main issue we have with cppunit itself is that when a test fails it
is not clear from the output which assertion occurred, nor why. One is
left having to try and trigger the unit failure again manually and gdb
from there.

This can be worked around by following best-practice in unit test
implementation. But people contributing to Squid have not been doing so
consistently, and it is just a workaround.

I do see somewhat more verbose output in the logs, and slightly less
code to implement (no .h class). Which is a nice gain, but not what I
would call "vastly superior".


> - porting memTest took me about one hour, mostly caused by us including
> cppunit headers from squid.h (WUT? A PR is coming up to unentangle that)
> 

Converting tests from one framework to another is not a problem. We just
have nobody doing the legwork. Case in point being the old tests not
even using cppunit.


The main problem(s) we have with testing of Squid is dev participation:

 a) people are not writing tests to cover new code, and
 b) people are not writing/updating tests to cover bug fixes, and
 c) tests written are generally not following best practice design.

IIRC Alex an I have different ideas about the ideal focus of testing;
 * I prefer the micro-test approach to demonstrate a high quality proof
of code reliability.
 * Alex has stated a preference for high level black-box testing of
behaviour vs design requirements.


Amos

From squid3 at treenet.co.nz  Sat May 30 18:52:26 2020
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Sun, 31 May 2020 06:52:26 +1200
Subject: [squid-dev] Squid command
In-Reply-To: <CAFoQnCr0mSeFqJgR_S2Kf69rkMXZDR=pYbbsMtrQyXkuWj--rg@mail.gmail.com>
References: <CAFoQnCr0mSeFqJgR_S2Kf69rkMXZDR=pYbbsMtrQyXkuWj--rg@mail.gmail.com>
Message-ID: <f6a8bba1-ce31-f0aa-ec85-7360d3bc450a@treenet.co.nz>

On 27/05/20 2:25 pm, pic rat rat wrote:> Dear sir,
>
> We've found problem of squid program after config in squid.conf
> "ssl-bump generate-host-certificates=on,"

I hope that comma ',' is not in your config file. If it is that would be
the problem.

> service is not run, however I remove "generate-host-certificate=on"
> service is normally starting.
> Could you please advise?

Please see your logs for information on why Squid is not starting.
Either cache.log or the system log should contain a message (or several)
indicating the problem.


>
> squid -v
> Squid Cache: Version 3.5.20
>

This is not he complete output. Build information is missing.


> OS
> cat /etc/os-release
> NAME="Red Hat Enterprise Linux Server"

Have you tried contacting RHEL help channels about this?

 First point of contact should be the vendor whose Squid package you are
using. They are the most likely to know of any patching, custom build
setting, or OS environment details that may be relevant to the issue.

 As a fall-back contact the squid-users mailing list can be used to see
if the larger community has input or hints to help with a problem diagnosis.


This squid-dev contact is for discussion of the code itself. For
example; once you have evidence of the code being a problem - to discuss
changes for a fix. Or for assistance understanding where in the code to
look for such debugging.


Amos

From squid3 at treenet.co.nz  Sat May 30 19:22:00 2020
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Sun, 31 May 2020 07:22:00 +1200
Subject: [squid-dev] RFC: Modernizing sources using clang-tidy
In-Reply-To: <a6773a16-2342-0c29-e21d-e8d602d10999@measurement-factory.com>
References: <a6773a16-2342-0c29-e21d-e8d602d10999@measurement-factory.com>
Message-ID: <aae7e04a-8c08-fe19-59cd-0a396a227573@treenet.co.nz>

On 20/04/20 2:02 pm, Alex Rousskov wrote:
> Hello,
> 
>     Squid sources contain a lot of poorly written, obsolete, and
> inconsistent code that (objectively) complicates development and
> (unfortunately) increases tensions among developers during review.
> 
> Some of those problems can be solved using tools that modify sources.
> Clang-tidy is one such tool: https://clang.llvm.org/extra/clang-tidy/
> It contains 150+ "checks" that can automatically fix some common
> problems by studying the syntax tree produced by the clang compiler.
> Understanding the code at that level allows clang-tidy to attack
> problems that simple scripts cannot touch.
> 
> I have not studied most of the clang-tidy checks, but did try a few
> listed at the end of this email. You can see the whole list of checks at
> https://clang.llvm.org/extra/clang-tidy/checks/list.html
> 
> 
> Here are a few pros and cons of using clang-tidy compared to our own
> custom scripts:
> 
> Pros:
> 
> * maintained and improved by others
> * can fix problems that our scripts cannot see
> * covers a few rules from C++ Core Guidelines and popular Style Guides
> * arguably less likely to accidentally screw things up than our scripts
> 

In order to switch we should be looking for a tool that improves over
the status-quo. Which is both astyle plus the custom scripts.

All of the above are high-level abstractions that the existing astyle
tool provides by itself. So no valid reason for changing is visible yet.


What I have seen from kinkies work is a few cases of little things like
ability to fix whitespace inside () conditionals and before
function/method parameter lists. Which is something astyle has not been
able to do for us and would be difficult to script.



> Cons:
> 
> * Requires installation of clang, clang-tidy-10, bear. It is not
> difficult in a CI environment, but may be too much for occasional
> contributors.

 Likewise same issues with needing a specific astyle version. So this is
more of a non-Pro than a Con.


> 
> * Clang-tidy misses files that do not participate in a specific build
> (e.g., misses many compat/ files that are not needed for an actual
> build). Applying clang-tidy to all sources will be difficult.
> 
> * Clang-tidy misses code lines that do not participate in a specific
> build (e.g., lines inside `#if HEADERS_LOG` where HEADERS_LOG was not
> defined). Applying clang-tidy to all lines will be impractical.
> 
> * Clang-tidy would be difficult to customize or adjust (probably
> requires building clang from scratch and writing low-level AST
> manipulation code).
> 

These are all regressions. Severity varies, but IMO we will need to
solve them somehow in order to remove the astyle usage. Otherwise we
would end up this just being an additional tool on the stack - rather
than a full replacement for astyle+scripts.


> * Clang-tidy is relatively slow -- the whole repository scan takes
> approximately 15-30 minutes per rule in my limited tests. Combining
> rules speeds things up, but it may still be too slow to run during every
> PR check on the current CI hardware.
> 

The current source-maintenance takes 5-10 minutes on master today and
with the scripts/maintenance/ automating growing I expect that to increase.


> * We do not have any clang-tidy experts on the development team (AFAIK).
> 

Not much of a con, we do not exactly have an astyle expert either. The
benefit of third-party tooling is that we don't need an expert. Just
someone able to read the documentation and test config settings when we
want to update the style policy.


> 
> I will itemize a few checks that I tried. The "diff" links below show
> unpolished and partial changes introduced by the corresponding checks.
> If we decide to use clang-tidy in principle, we will need to fine-tune
> each check options (at least) to get the most out of the tool.
> 
> * modernize-use-override
> 
> Adds "override" (and removes "virtual") keywords from class declarations.
> 
> This check is very useful not just because "override" helps prevent
> difficult-to-detect bugs but because it is very difficult to transition
> to using "override" _gradually_ -- some compilers reject class
> declarations that have a mixture of with-override and without-override
> methods. Moreover, adding override keywords to old class declarations is
> rather time-consuming because it is often not obvious (to a human)
> whether the class introduces a new interface or overrides and old one.
> 
> Diff: https://github.com/measurement-factory/squid/commit/d00d0a8
> 

I like.

> 
> * performance-...
> 
> Clang-tidy has a few checks focusing on performance optimizations. The
> following commit shows a combination of the following four checks:
> performance-trivially-destructible, performance-unnecessary-value-param,
> performance-for-range-copy, performance-move-const-arg
> 
> Diff: https://github.com/measurement-factory/squid/commit/1ae5d7c
> 

IMO this is something we should have a


> 
> * modernize-use-nullptr
> 
> Replaces NULL and 0 constants with C++11 nullptr:
> https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-nullptr.html
> 
> While replacing most NULLs is possible with a simple script, this check
> may be a better solution because it can safely cover more NULL uses and
> also converts bare 0s which would be impossible using a script.
> 
> Diff: https://github.com/measurement-factory/squid/commit/4242604
> 

As I mentioned earlier when kinkie tried this; I do not like this
particular tool feature. The "upgrade" it does is far too simplistic for
a style polishing update. If the end goal were simply to eradicate NULL
- this would be fine. But the goal of using this tool is to ensure a
good quality formatting style. A simplistic s/NULL/nullptr/ leaves quite
a few code lines looking just as ugly as they were with NULL.

IMO we would be better off going the scripted way to remove the subset
of cases we can automate and catch the rest with manual edits and in review.


> 
> In summary, I think investing in clang-tidy would be worth it because
> the tool can address several important problems that we would otherwise
> have to leave untreated. It would take some time to agree on a set of
> checks and then properly configure/tune each one, but I think it is
> doable. I am not sure whether these checks should be applied on each PR
> check or periodically, but we can figure it out as we go.
> 
> I am not aware of any viable alternatives.
> 
> What do you think?
> 

I like a few things the tool does. But so far it seems like something we
want to run across the code occasionally. eg as a Jenkins test job.
Additional to, rather than replacement for astyle.

Amos

From rousskov at measurement-factory.com  Sun May 31 15:18:40 2020
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Sun, 31 May 2020 11:18:40 -0400
Subject: [squid-dev] cppunit -> googletest / gmock?
In-Reply-To: <c9d0adb0-b3d1-47d6-b824-fb6c436773db@treenet.co.nz>
References: <CA+Y8hcNLaEkENpAWSUTpy-efkY5ZjS6rvMLH+agPHDaJphPP3g@mail.gmail.com>
 <c9d0adb0-b3d1-47d6-b824-fb6c436773db@treenet.co.nz>
Message-ID: <afe9a500-c2b9-2f03-7e45-d08122b313a7@measurement-factory.com>

On 5/30/20 2:36 PM, Amos Jeffries wrote:
> On 31/05/20 5:27 am, Francesco Chemolli wrote:
>> starting from a PR in a conversation with Alex about our current
>> approach to unit testing being painful, I've checked what alternatives
>> would we have and how practical would they be.

FWIW, I would start from the other end -- trying to understand what the
primary problems are. What unit testing problems do we want to solve?


>> - googlemock promises to be vastly superior to our current approach

> Where are you seeing evidence of this?

I too would appreciate a brief/summary answer to this question -- what
are the primary advantages? If this is already listed on the web
somewhere, a reference is enough, of course.


> The main issue we have with cppunit itself is that when a test fails it
> is not clear from the output which assertion occurred, nor why.

FWIW, the above problem is only a minor issue for me.

The main issue for me is the amount of time spent on keeping "make
check" operational compared to the actual benefits of those unit tests.
I speculate that Squid would be in an overall better place today if all
those tests were simply deleted ten years ago.


> IIRC Alex an I have different ideas about the ideal focus of testing;
>  * I prefer the micro-test approach to demonstrate a high quality proof
> of code reliability.
>  * Alex has stated a preference for high level black-box testing of
> behaviour vs design requirements.

The above summary does not accurately reflect my position. And the
juxtaposition of "reliability" and "satisfying design requirements" is
misleading at best.

Any test, including any micro- and macro-test, can be valuable or a
waste of time. The "level" of the test is not what determines its value.
The focus should be on tests that, over the long term, maximize return
on investment. In the ideal world, that approach would result in a
_combination_ of micro/unit/macro/white/black/etc. tests, each applied
to problems where its effectiveness is maximized.

In our current situation, we can discuss, among other things, whether
the continued investment in unit tests is the right thing to do, and
whether that investment (if any) should be conditional on significantly
reducing maintenance overheads. It is a difficult discussion, especially
when there is a lack of agreed upon testing principles and goals.


HTH,

Alex.

From gkinkie at gmail.com  Sun May 31 19:05:37 2020
From: gkinkie at gmail.com (Francesco Chemolli)
Date: Sun, 31 May 2020 20:05:37 +0100
Subject: [squid-dev] cppunit -> googletest / gmock?
In-Reply-To: <c9d0adb0-b3d1-47d6-b824-fb6c436773db@treenet.co.nz>
References: <CA+Y8hcNLaEkENpAWSUTpy-efkY5ZjS6rvMLH+agPHDaJphPP3g@mail.gmail.com>
 <c9d0adb0-b3d1-47d6-b824-fb6c436773db@treenet.co.nz>
Message-ID: <CA+Y8hcOVN5TO2kyZu+JhUKt9y+4NnmV=FZkgqeqTfRfjF7mEsg@mail.gmail.com>

On Sat, May 30, 2020 at 7:38 PM Amos Jeffries <squid3 at treenet.co.nz> wrote:

> On 31/05/20 5:27 am, Francesco Chemolli wrote:
> > Hi all,
> >    starting from a PR in a conversation with Alex about our current
> > approach to unit testing being painful, I've checked what alternatives
> > would we have and how practical would they be.
> >
> > An easy first option would be googletest/googlemock.
> >
> > On a lazy afternoon, I've tried seeing how useful/painful it would be to
> > try it, by porting one test over - it's quite trivial and doesn't
> > require mocking, so I'll try a more complicated one next - to start a
> > conversation about the topic.
> >
> > You can find the test branch at
> https://github.com/kinkie/squid/tree/gtest .
> > I've only touched two files, a newly-created src/tests/testMemGtest and
> > src/Makefile.am .
> >
> > The output from the test run is at
> https://paste.ubuntu.com/p/3sgTDN7rNm/
> >
> > What do you think?
> >
> > My initial thoughts:
> > - it is somewhat simpler and more powerful than cppunit
> > - setting the test environment up is easy but at this time it can only
> > be done from source. Adding it to the build farm images is
> straightforward
>
> That is a problem. The unit tests are run by pretty much everyone
> building Squid.
>

We should be able to bundle gtest if needed; we only distribute in source
form and it wouldn't be part of distfiles so it shouldn't be a problem
downstream either, I believe


> It is not a complete blocker, but having a process more complex than
> simple dependency install does pose a relatively major hurdle that any
> framework has to get over to be of much utility.
>
>
>
> > - the license is BSD 3-clause new
> > (https://github.com/google/googletest/blob/master/LICENSE)
> > - googlemock promises to be vastly superior to our current approach
>
> Where are you seeing evidence of this?
>

Also including answer on Alex' question:
- https://stackoverflow.com/questions/7922289/googletest-vs-cppun
it-the-facts
<https://stackoverflow.com/questions/7922289/googletest-vs-cppunit-the-facts>
- trivial but it builds up: not generally necessary to have .h and .cc for
simple cases
- comparison table:
https://socialcompare.com/en/comparison/c-unit-testing-framework
- gmock/gtest is used in broadly-used projects (e.g. chromium) - I'm not
sure


So far I'm basing on documentation, found at
https://github.com/google/googletest/blob/master/googlemock/docs/cook_book.md
 .
I see:
- a more structured approach to mocking, and more infrastructure to do it
- ON_CALL and EXPECT_CALL patterns to define actions and expectations on
class methods (method called once / called multiple times). This can also
allow to change the behaviour of a mocked object on different tests without
having to remock it all
- matchers on called methods
- moched methods can different return values depending on arguments, and
check for complex sequences of calls to methods (call a() with some
arguments, then either b() or c(), if it's c() must be followe by d()
- for object, the concept of "uninteresting calls" that get ignored, and
can be defaulted



> The main issue we have with cppunit itself is that when a test fails it
> is not clear from the output which assertion occurred, nor why. One is
> left having to try and trigger the unit failure again manually and gdb
> from there.
>
> This can be worked around by following best-practice in unit test
> implementation. But people contributing to Squid have not been doing so
> consistently, and it is just a workaround.
>
> I do see somewhat more verbose output in the logs, and slightly less
> code to implement (no .h class). Which is a nice gain, but not what I
> would call "vastly superior".
>

Right. A lot of value comes from the combination with gmock.


>
>
> > - porting memTest took me about one hour, mostly caused by us including
> > cppunit headers from squid.h (WUT? A PR is coming up to unentangle that)
> >
>
> Converting tests from one framework to another is not a problem. We just
> have nobody doing the legwork. Case in point being the old tests not
> even using cppunit.
>

>
> The main problem(s) we have with testing of Squid is dev participation:
>
>  a) people are not writing tests to cover new code, and
>  b) people are not writing/updating tests to cover bug fixes, and
>  c) tests written are generally not following best practice design.
>
> IIRC Alex an I have different ideas about the ideal focus of testing;
>  * I prefer the micro-test approach to demonstrate a high quality proof
> of code reliability.
>  * Alex has stated a preference for high level black-box testing of
> behaviour vs design requirements.
>

TBH I favour unit tests as well. But if we can have black box texting (and
there are compliance testing frameworks to do that for us) that'd really
increase the confidence in correctness over time. The two do not cancel
each other, luckily. The former can do fast-feedback return, the latter can
say "something is wrong" and then we can - if needed - bisect to point to a
specific commit


-- 
    Francesco
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20200531/abfbc88a/attachment.html>

From rousskov at measurement-factory.com  Sun May 31 19:43:46 2020
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Sun, 31 May 2020 15:43:46 -0400
Subject: [squid-dev] cppunit -> googletest / gmock?
In-Reply-To: <CA+Y8hcOVN5TO2kyZu+JhUKt9y+4NnmV=FZkgqeqTfRfjF7mEsg@mail.gmail.com>
References: <CA+Y8hcNLaEkENpAWSUTpy-efkY5ZjS6rvMLH+agPHDaJphPP3g@mail.gmail.com>
 <c9d0adb0-b3d1-47d6-b824-fb6c436773db@treenet.co.nz>
 <CA+Y8hcOVN5TO2kyZu+JhUKt9y+4NnmV=FZkgqeqTfRfjF7mEsg@mail.gmail.com>
Message-ID: <ebad6eea-3e0d-d260-6422-dd381c1cdba8@measurement-factory.com>

On 5/31/20 3:05 PM, Francesco Chemolli wrote:

> - https://stackoverflow.com/questions/7922289/googletest-vs-cppun
> it-the-facts
> - trivial but it builds up: not generally necessary to have .h and .cc
> for simple cases
> - comparison
> table: https://socialcompare.com/en/comparison/c-unit-testing-framework
> - gmock/gtest is used in broadly-used projects (e.g. chromium) - I'm not
> sure 


> So far I'm basing on documentation, found
> at https://github.com/google/googletest/blob/master/googlemock/docs/cook_book.md .
> I see: 
> - a more structured approach to mocking, and more infrastructure to do it
> - ON_CALL and EXPECT_CALL patterns to define actions and expectations on
> class methods (method called once / called multiple times). This can
> also allow to change the behaviour of a mocked object on different tests
> without having to remock it all
> - matchers on called methods
> - moched methods can different return values depending on arguments, and
> check for complex sequences of calls to methods (call a() with some
> arguments, then either b() or c(), if it's c() must be followe by d() 
> - for object, the concept of "uninteresting calls" that get ignored, and
> can be defaulted

Thank you for summarizing this info!

FWIW, if you and Amos decide to switch to another unit test platform, I
will not object to such a switch, provided the transition is instant. We
do not have enough resources to properly write and maintain unit tests
using one platform IMO. We certainly do not have enough resources for
two platforms.


> TBH I favour unit tests as well.

TBH, I am against test discrimination ;-).

Alex.

From rousskov at measurement-factory.com  Sun May 31 21:11:17 2020
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Sun, 31 May 2020 17:11:17 -0400
Subject: [squid-dev] RFC: Modernizing sources using clang-tidy
In-Reply-To: <aae7e04a-8c08-fe19-59cd-0a396a227573@treenet.co.nz>
References: <a6773a16-2342-0c29-e21d-e8d602d10999@measurement-factory.com>
 <aae7e04a-8c08-fe19-59cd-0a396a227573@treenet.co.nz>
Message-ID: <1d7889b0-b32d-fdb3-bf9d-771c504efe4e@measurement-factory.com>

On 5/30/20 3:22 PM, Amos Jeffries wrote:
> On 20/04/20 2:02 pm, Alex Rousskov wrote:
>>     Squid sources contain a lot of poorly written, obsolete, and
>> inconsistent code that (objectively) complicates development and
>> (unfortunately) increases tensions among developers during review.
>>
>> Some of those problems can be solved using tools that modify sources.
>> Clang-tidy is one such tool: https://clang.llvm.org/extra/clang-tidy/
>> It contains 150+ "checks" that can automatically fix some common
>> problems by studying the syntax tree produced by the clang compiler.


> In order to switch we should be looking for a tool that improves over
> the status-quo. Which is both astyle plus the custom scripts.
> 
> All of the above are high-level abstractions that the existing astyle
> tool provides by itself. So no valid reason for changing is visible yet.

Amos, you are mixing up two completely different subjects: modernizing
code using clang-tidy (this thread) and formatting sources using
clang-format (Francesco's effort). In hope to make progress, I am
ignoring most comments about astyle.


>> https://clang.llvm.org/extra/clang-tidy/checks/list.html

>> * performance-...
>>
>> Clang-tidy has a few checks focusing on performance optimizations. The
>> following commit shows a combination of the following four checks:
>> performance-trivially-destructible, performance-unnecessary-value-param,
>> performance-for-range-copy, performance-move-const-arg
>>
>> Diff: https://github.com/measurement-factory/squid/commit/1ae5d7c


> IMO this is something we should have a

Sorry, was this phrase cut prematurely or are you voicing support (in
principle) for applying (some of these) performance-related changes?


>> * modernize-use-nullptr
>>
>> Replaces NULL and 0 constants with C++11 nullptr:
>> https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-nullptr.html
>>
>> While replacing most NULLs is possible with a simple script, this check
>> may be a better solution because it can safely cover more NULL uses and
>> also converts bare 0s which would be impossible using a script.
>>
>> Diff: https://github.com/measurement-factory/squid/commit/4242604

> As I mentioned earlier when kinkie tried this; I do not like this
> particular tool feature. The "upgrade" it does is far too simplistic for
> a style polishing update. If the end goal were simply to eradicate NULL
> - this would be fine. But the goal of using this tool is to ensure a
> good quality formatting style.

... except it is not the goal. modernize-use-nullptr does not change
code formatting.


> A simplistic s/NULL/nullptr/ leaves quite
> a few code lines looking just as ugly as they were with NULL.

And, as I mentioned above, modernize-use-nullptr is not simplistic --
nothing else can detect and replace 0s with nullptr.


> IMO we would be better off going the scripted way to remove the subset
> of cases we can automate and catch the rest with manual edits and in review.

I do not see a point of automating ourselves if there is an existing
automation that works much better than anything we can do ourselves.


> I like a few things the tool does. But so far it seems like something we
> want to run across the code occasionally. eg as a Jenkins test job.

Yes, or a Semaphore CI job, and/or on-demand. Please clarify regarding
performance-* checks above. If we are in agreement regarding
modernize-use-override and at least one more check, then I can start
working on a polished proposal for those checks (at least) and the
overall setup.


Cheers,

Alex.

