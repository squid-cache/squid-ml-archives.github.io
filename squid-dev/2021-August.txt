From squid3 at treenet.co.nz  Thu Aug 12 04:42:25 2021
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Thu, 12 Aug 2021 16:42:25 +1200
Subject: [squid-dev] Coding Style updates
Message-ID: <476a77be-4b6d-ed6b-ebb6-6b71d70d60a7@treenet.co.nz>

Hi all,

  Now that we have astyle 3.1 for style enforcement we can take 
advantage of it to perform a few code style change that older versions 
could not.

Before I do any work testing they work I'd like to review the relevant 
details of our style guidelines and see if we actually want to keep that 
requirement.


1) return type on separate line from function definition.

Current style requirement:

   template<...>
   void
   foo(...)
   {
     ...
   }

AFAIK, this based on GNU project style preferences from the far past 
when Squid had a tight relationship with GNU. Today we have a conflict 
between Factory code coming in with the alternative same-line style 
and/or various developers being confused by the mix of code they are 
touching.

IMO; it is easier to work with the one-line style when command-line 
editing, and irrelevant when using more advanced tools.

As such I propose converting Squid to the same-line style:

   template<...>
   void foo(...)
   {
     ...
   }


Opinions?

Any reasons I missed for keeping this?



2) braces on one-liner conditional blocks

Current code style is a bit confused. We have it as a style to use, with 
exceptions for some old macros etc where the lack of braces causes 
compile issues or bugs.

Personally I prefer the non-braced style. But it seems far safer to 
automate the always-brace style and not have those special exceptions.

Opinions?





Amos

From rousskov at measurement-factory.com  Thu Aug 12 16:28:32 2021
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Thu, 12 Aug 2021 12:28:32 -0400
Subject: [squid-dev] Coding Style updates
In-Reply-To: <476a77be-4b6d-ed6b-ebb6-6b71d70d60a7@treenet.co.nz>
References: <476a77be-4b6d-ed6b-ebb6-6b71d70d60a7@treenet.co.nz>
Message-ID: <c2ac5828-e69d-56a3-02f0-ed7ef2239d63@measurement-factory.com>

On 8/12/21 12:42 AM, Amos Jeffries wrote:

> 1) return type on separate line from function definition.
> 
> Current style requirement:
> 
> ? template<...>
> ? void
> ? foo(...)
> ? {
> ??? ...
> ? }
> 
> AFAIK, this based on GNU project style preferences from the far past
> when Squid had a tight relationship with GNU. Today we have a conflict
> between Factory code coming in with the alternative same-line style
> and/or various developers being confused by the mix of code they are
> touching.

AFAIK, Factory developers try to follow the official style (while
keeping the old code consistent), just like all the other developers
(should) do. They make mistakes just like all other developers do. It is
unfortunate that you felt it is necessary to single out a group of
developers in a negative way (that is completely irrelevant to your
actual proposal).


> IMO; it is easier to work with the one-line style when command-line
> editing, and irrelevant when using more advanced tools.

FWIW, I do not find it easier to use one-line style when using
command-line tools. In fact, the opposite is probably true in my experience.


> As such I propose converting Squid to the same-line style:
> 
> ? template<...>
> ? void foo(...)
> ? {
> ??? ...
> ? }
> 
> 
> Opinions?

One-line stile increases horizontal wrapping, especially when the return
type is complex/long and there are additional markers like "static",
"inline", and "[[ noreturn ]]".

One line approach itself is inconsistent because template<> is on the
other line(s).

Searching for a function name with unknown-to-searcher or complex return
type becomes a bit more difficult when using "git log -L" and similar tools.

In many cases, function parameters should be on multiple lines as well.
Their alignment would look worse if the function name does not start the
line.

Most function definitions will have "auto" return type after we upgrade
to C++14. Whether that makes one-line style more or less attractive is
debatable, but it is an important factor in delaying related changes.

Eventually, we may be able to automatically remove explicit return types
using one of the clang-tidy tools, but such a tool does not exist yet
(modernize-use-trailing-return-type comes close but is not it).

In summary, I recommend delaying this decision until C++14. However, if
others insist on changing the format and changing it now, then I will
not block these changes, assuming newer astyle produces reasonable results.


Can new astyle support multiline formatting? If not, _that_ could be a
strong argument for changing the style.


> 2) braces on one-liner conditional blocks
> 
> Current code style is a bit confused. We have it as a style to use, with
> exceptions for some old macros etc where the lack of braces causes
> compile issues or bugs.
> 
> Personally I prefer the non-braced style. But it seems far safer to
> automate the always-brace style and not have those special exceptions.
> 
> Opinions?

I also prefer the non-braced style for simple expressions.

Perhaps there is a way to automatically wrap complex ones, for some
reasonable definition of "complex"?

Alex.

From squid3 at treenet.co.nz  Fri Aug 13 00:31:45 2021
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Fri, 13 Aug 2021 12:31:45 +1200
Subject: [squid-dev] Coding Style updates
In-Reply-To: <c2ac5828-e69d-56a3-02f0-ed7ef2239d63@measurement-factory.com>
References: <476a77be-4b6d-ed6b-ebb6-6b71d70d60a7@treenet.co.nz>
 <c2ac5828-e69d-56a3-02f0-ed7ef2239d63@measurement-factory.com>
Message-ID: <4a7fb95d-0dc1-686b-0b90-0c14fde9b170@treenet.co.nz>

On 13/08/21 4:28 am, Alex Rousskov wrote:
> On 8/12/21 12:42 AM, Amos Jeffries wrote:
> 
>> 1) return type on separate line from function definition.
>>
>> Current style requirement:
>>
>>  ? template<...>
>>  ? void
>>  ? foo(...)
>>  ? {
>>  ??? ...
>>  ? }
>>
>> AFAIK, this based on GNU project style preferences from the far past
>> when Squid had a tight relationship with GNU. Today we have a conflict
>> between Factory code coming in with the alternative same-line style
>> and/or various developers being confused by the mix of code they are
>> touching.
> 
> AFAIK, Factory developers try to follow the official style (while
> keeping the old code consistent), just like all the other developers
> (should) do. They make mistakes just like all other developers do. It is
> unfortunate that you felt it is necessary to single out a group of
> developers in a negative way (that is completely irrelevant to your
> actual proposal).
> 

I don't mean that as a bad thing. Just that I am aware that Factory is a 
large contributor who prefers the one-line style.


> 
>> IMO; it is easier to work with the one-line style when command-line
>> editing, and irrelevant when using more advanced tools.
> 
> FWIW, I do not find it easier to use one-line style when using
> command-line tools. In fact, the opposite is probably true in my experience.
> 

Hmm. Okay.

> 
>> As such I propose converting Squid to the same-line style:
>>
>>  ? template<...>
>>  ? void foo(...)
>>  ? {
>>  ??? ...
>>  ? }
>>
>>
>> Opinions?
> 
> One-line stile increases horizontal wrapping, especially when the return
> type is complex/long and there are additional markers like "static",
> "inline", and "[[ noreturn ]]".
> 
> One line approach itself is inconsistent because template<> is on the
> other line(s).
> 
> Searching for a function name with unknown-to-searcher or complex return
> type becomes a bit more difficult when using "git log -L" and similar tools.
> 
> In many cases, function parameters should be on multiple lines as well.
> Their alignment would look worse if the function name does not start the
> line.
> 
> Most function definitions will have "auto" return type after we upgrade
> to C++14. Whether that makes one-line style more or less attractive is
> debatable, but it is an important factor in delaying related changes.
> 
> Eventually, we may be able to automatically remove explicit return types
> using one of the clang-tidy tools, but such a tool does not exist yet
> (modernize-use-trailing-return-type comes close but is not it).
> 
> In summary, I recommend delaying this decision until C++14. However, if
> others insist on changing the format and changing it now, then I will
> not block these changes, assuming newer astyle produces reasonable results.
> 
> 
> Can new astyle support multiline formatting? If not, _that_ could be a
> strong argument for changing the style.
> 

It can support both now. If we don't have agreement on a change I will 
implement enforcement of the existing style policy.


> 
>> 2) braces on one-liner conditional blocks
>>
>> Current code style is a bit confused. We have it as a style to use, with
>> exceptions for some old macros etc where the lack of braces causes
>> compile issues or bugs.
>>
>> Personally I prefer the non-braced style. But it seems far safer to
>> automate the always-brace style and not have those special exceptions.
>>
>> Opinions?
> 
> I also prefer the non-braced style for simple expressions.
> 
> Perhaps there is a way to automatically wrap complex ones, for some
> reasonable definition of "complex"?
> 
> Alex.
> _______________________________________________
> squid-dev mailing list
> squid-dev at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-dev
> 

From rousskov at measurement-factory.com  Sat Aug 14 15:44:47 2021
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Sat, 14 Aug 2021 11:44:47 -0400
Subject: [squid-dev] Coding Style updates
In-Reply-To: <4a7fb95d-0dc1-686b-0b90-0c14fde9b170@treenet.co.nz>
References: <476a77be-4b6d-ed6b-ebb6-6b71d70d60a7@treenet.co.nz>
 <c2ac5828-e69d-56a3-02f0-ed7ef2239d63@measurement-factory.com>
 <4a7fb95d-0dc1-686b-0b90-0c14fde9b170@treenet.co.nz>
Message-ID: <0b6b88ce-c903-bbd6-01e3-f6042d705194@measurement-factory.com>

On 8/12/21 8:31 PM, Amos Jeffries wrote:

> I am aware that Factory ... prefers the one-line style.

Factory does not prefer the one-line style.



> If we don't have agreement on a change I will
> implement enforcement of the existing style policy.

I cannot find any existing/official rules regarding single- or
multi-line function definitions in [1]. Where are they currently stated?

[1] https://wiki.squid-cache.org/SquidCodingGuidelines

Whether we should (adopt, if it has not been already, and) enforce a
particular style depends, in part, on how well Astyle supports that
style. The quality of that support will probably become clear from the
corresponding PR, and we can decide what to do at PR review time.

Alex.

From gkinkie at gmail.com  Sun Aug 15 18:51:06 2021
From: gkinkie at gmail.com (Francesco Chemolli)
Date: Sun, 15 Aug 2021 19:51:06 +0100
Subject: [squid-dev] bizarre build behaviour from PoolingAllocator on
 OpenBSD/clang
Message-ID: <CA+Y8hcP2XbyGn9QVmcEhp3JkcErpkKnruwSCz=n5GgR3k_Xh2A@mail.gmail.com>

Hi all,
  I'm looking into OpenBSD compatibility for trunk, and there's a
strange behaviour at build time on  OpenBSD (6.9) / clang (10.0.1)

When building src/log/access.log.cc, build fails with these errors:

------------------ begin quote -----------
    static_assert((is_same<value_type, typename
allocator_type::value_type>::value),
    ^
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
access_log.cc:66:26: note: in instantiation of template class
'std::__1::unordered_map<SBuf, unsigned long long,
std::__1::hash<SBuf>, std::__1::equal_to<SBuf>,
PoolingAllocator<std::__1::pair<SBuf, unsigned long long> > >'
requested here
static HeaderValueCounts TheViaCounts;
                         ^
access_log.cc:460:25: error: type 'HeaderValueCounts' (aka
'unordered_map<SBuf, unsigned long long, hash<SBuf>, equal_to<SBuf>,
PoolingAllocator<pair<SBuf, unsigned long long> > >') does not provide
a subscript operator
    ++TheForwardedCounts[key];
      ~~~~~~~~~~~~~~~~~~^~~~
access_log.cc:467:24: error: invalid range expression of type 'const
std::__1::unordered_map<SBuf, unsigned long long,
std::__1::hash<SBuf>, std::__1::equal_to<SBuf>,
PoolingAllocator<std::__1::pair<SBuf, unsigned long long> > >'; no
viable 'begin' function available
    for (const auto &i : counts)
                       ^ ~~~~~~
/usr/include/c++/v1/initializer_list:99:1: note: candidate template
ignored: could not match 'initializer_list' against 'unordered_map'
begin(initializer_list<_Ep> __il) _NOEXCEPT
^
/usr/include/c++/v1/iterator:1753:1: note: candidate template ignored:
could not match '_Tp [_Np]' against 'const
std::__1::unordered_map<SBuf, unsigned long long,
std::__1::hash<SBuf>, std::__1::equal_to<SBuf>,
PoolingAllocator<std::__1::pair<SBuf, unsigned long long> > >'
begin(_Tp (&__array)[_Np])
^
/usr/include/c++/v1/iterator:1771:1: note: candidate template ignored:
substitution failure [with _Cp = const std::__1::unordered_map<SBuf,
unsigned long long, std::__1::hash<SBuf>, std::__1::equal_to<SBuf>,
PoolingAllocator<std::__1::pair<SBuf, unsigned long long> > >]: no
member named 'begin' in 'std::__1::unordered_map<SBuf, unsigned long
long, std::__1::hash<SBuf>, std::__1::equal_to<SBuf>,
PoolingAllocator<std::__1::pair<SBuf, unsigned long long> > >'
begin(_Cp& __c) -> decltype(__c.begin())
^                               ~~~~~
/usr/include/c++/v1/iterator:1779:1: note: candidate template ignored:
substitution failure [with _Cp = std::__1::unordered_map<SBuf,
unsigned long long, std::__1::hash<SBuf>, std::__1::equal_to<SBuf>,
PoolingAllocator<std::__1::pair<SBuf, unsigned long long> > >]: no
member named 'begin' in 'std::__1::unordered_map<SBuf, unsigned long
long, std::__1::hash<SBuf>, std::__1::equal_to<SBuf>,
PoolingAllocator<std::__1::pair<SBuf, unsigned long long> > >'
begin(const _Cp& __c) -> decltype(__c.begin())
^                                     ~~~~~
access_log.cc:489:24: error: no member named 'clear' in
'std::__1::unordered_map<SBuf, unsigned long long,
std::__1::hash<SBuf>, std::__1::equal_to<SBuf>,
PoolingAllocator<std::__1::pair<SBuf, unsigned long long> > >'
    TheForwardedCounts.clear();
    ~~~~~~~~~~~~~~~~~~ ^
------------------ end quote -----------

But then, removing the reference to PoolingAllocator in the definition
of HeaderValueCounts, everything works.
"""
using HeaderValueCounts = std::unordered_map<SBuf, uint64_t,
std::hash<SBuf>, std::equal_to<SBuf> >;
"""

I'm puzzled: I wouldn't expect this to be an OS-specific failure. Any clue?



-- 
    Francesco

From rousskov at measurement-factory.com  Sun Aug 15 21:57:23 2021
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Sun, 15 Aug 2021 17:57:23 -0400
Subject: [squid-dev] bizarre build behaviour from PoolingAllocator on
 OpenBSD/clang
In-Reply-To: <CA+Y8hcP2XbyGn9QVmcEhp3JkcErpkKnruwSCz=n5GgR3k_Xh2A@mail.gmail.com>
References: <CA+Y8hcP2XbyGn9QVmcEhp3JkcErpkKnruwSCz=n5GgR3k_Xh2A@mail.gmail.com>
Message-ID: <6825d7ac-be16-1cfb-9d69-89e2df0191af@measurement-factory.com>

On 8/15/21 2:51 PM, Francesco Chemolli wrote:
> Hi all,
>   I'm looking into OpenBSD compatibility for trunk, and there's a
> strange behaviour at build time on  OpenBSD (6.9) / clang (10.0.1)
> 
> When building src/log/access.log.cc, build fails with these errors:
> 
> ------------------ begin quote -----------
>     static_assert((is_same<value_type, typename
> allocator_type::value_type>::value),
>     ^
> ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Are some compiler messages missing in the above quote? It feels like the
above line is not directly related to the lines below, but perhaps I am
misinterpreting the messy output.

> I'm puzzled: I wouldn't expect this to be an OS-specific failure.

We cannot be sure it is OS-specific, but STL implementation is full of
hacks and optimizations that may be OS- or environment-specific. It is
also possible that there is a conflict between GCC and clang
installation; we have seen those before and they manifest in weird ways.

It is strange that the error below mentions "unordered_map" when it
should say "std::unordered_map" or similar.

Are you building with clang standard library or GCC standard library (I
believe -stdlib controls that, but it is not my area of expertise)? If
you are building with GCC stdlib, perhaps try building with
clang-provided stdlib?

I wish I could be more helpful,

Alex.


> access_log.cc:66:26: note: in instantiation of template class
> 'std::__1::unordered_map<SBuf, unsigned long long,
> std::__1::hash<SBuf>, std::__1::equal_to<SBuf>,
> PoolingAllocator<std::__1::pair<SBuf, unsigned long long> > >'
> requested here
> static HeaderValueCounts TheViaCounts;
>                          ^
> access_log.cc:460:25: error: type 'HeaderValueCounts' (aka
> 'unordered_map<SBuf, unsigned long long, hash<SBuf>, equal_to<SBuf>,
> PoolingAllocator<pair<SBuf, unsigned long long> > >') does not provide
> a subscript operator
>     ++TheForwardedCounts[key];
>       ~~~~~~~~~~~~~~~~~~^~~~
> access_log.cc:467:24: error: invalid range expression of type 'const
> std::__1::unordered_map<SBuf, unsigned long long,
> std::__1::hash<SBuf>, std::__1::equal_to<SBuf>,
> PoolingAllocator<std::__1::pair<SBuf, unsigned long long> > >'; no
> viable 'begin' function available
>     for (const auto &i : counts)
>                        ^ ~~~~~~
> /usr/include/c++/v1/initializer_list:99:1: note: candidate template
> ignored: could not match 'initializer_list' against 'unordered_map'
> begin(initializer_list<_Ep> __il) _NOEXCEPT
> ^
> /usr/include/c++/v1/iterator:1753:1: note: candidate template ignored:
> could not match '_Tp [_Np]' against 'const
> std::__1::unordered_map<SBuf, unsigned long long,
> std::__1::hash<SBuf>, std::__1::equal_to<SBuf>,
> PoolingAllocator<std::__1::pair<SBuf, unsigned long long> > >'
> begin(_Tp (&__array)[_Np])
> ^
> /usr/include/c++/v1/iterator:1771:1: note: candidate template ignored:
> substitution failure [with _Cp = const std::__1::unordered_map<SBuf,
> unsigned long long, std::__1::hash<SBuf>, std::__1::equal_to<SBuf>,
> PoolingAllocator<std::__1::pair<SBuf, unsigned long long> > >]: no
> member named 'begin' in 'std::__1::unordered_map<SBuf, unsigned long
> long, std::__1::hash<SBuf>, std::__1::equal_to<SBuf>,
> PoolingAllocator<std::__1::pair<SBuf, unsigned long long> > >'
> begin(_Cp& __c) -> decltype(__c.begin())
> ^                               ~~~~~
> /usr/include/c++/v1/iterator:1779:1: note: candidate template ignored:
> substitution failure [with _Cp = std::__1::unordered_map<SBuf,
> unsigned long long, std::__1::hash<SBuf>, std::__1::equal_to<SBuf>,
> PoolingAllocator<std::__1::pair<SBuf, unsigned long long> > >]: no
> member named 'begin' in 'std::__1::unordered_map<SBuf, unsigned long
> long, std::__1::hash<SBuf>, std::__1::equal_to<SBuf>,
> PoolingAllocator<std::__1::pair<SBuf, unsigned long long> > >'
> begin(const _Cp& __c) -> decltype(__c.begin())
> ^                                     ~~~~~
> access_log.cc:489:24: error: no member named 'clear' in
> 'std::__1::unordered_map<SBuf, unsigned long long,
> std::__1::hash<SBuf>, std::__1::equal_to<SBuf>,
> PoolingAllocator<std::__1::pair<SBuf, unsigned long long> > >'
>     TheForwardedCounts.clear();
>     ~~~~~~~~~~~~~~~~~~ ^
> ------------------ end quote -----------
> 
> But then, removing the reference to PoolingAllocator in the definition
> of HeaderValueCounts, everything works.
> """
> using HeaderValueCounts = std::unordered_map<SBuf, uint64_t,
> std::hash<SBuf>, std::equal_to<SBuf> >;
> """

From squid3 at treenet.co.nz  Mon Aug 16 01:07:30 2021
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Mon, 16 Aug 2021 13:07:30 +1200
Subject: [squid-dev] Coding Style updates
In-Reply-To: <0b6b88ce-c903-bbd6-01e3-f6042d705194@measurement-factory.com>
References: <476a77be-4b6d-ed6b-ebb6-6b71d70d60a7@treenet.co.nz>
 <c2ac5828-e69d-56a3-02f0-ed7ef2239d63@measurement-factory.com>
 <4a7fb95d-0dc1-686b-0b90-0c14fde9b170@treenet.co.nz>
 <0b6b88ce-c903-bbd6-01e3-f6042d705194@measurement-factory.com>
Message-ID: <0634520d-45e6-3fb3-d4f1-18cc776dd9a2@treenet.co.nz>

On 15/08/21 3:44 am, Alex Rousskov wrote:
> On 8/12/21 8:31 PM, Amos Jeffries wrote:
> 
>> I am aware that Factory ... prefers the one-line style.
> 
> Factory does not prefer the one-line style.
> 

The existence of such a style requirement on Factory developers, and 
thus need for Squid code to match it for ease of future bug fixing, was 
given to me as a reason for ICAP and eCAP feature code staying in the 
Factory supplied one-line format despite the remainder of Squid code 
back then using two-line.


So, between your two responses I gather that there will be no push-back 
on a PR adding enforcement of two-line function/method definitions by 
astyle 3.1.


> 
> 
>> If we don't have agreement on a change I will
>> implement enforcement of the existing style policy.
> 
> I cannot find any existing/official rules regarding single- or
> multi-line function definitions in [1]. Where are they currently stated?
> 
> [1] https://wiki.squid-cache.org/SquidCodingGuidelines
> 

It appears to be one of the policy rules not copied over to that page 
from the Squid-2 page.

  "Follow the coding style of the rest of the code."

... the bulk of Squid code uses two-line. Only the ICAP,eCAP, SSL-Bump 
code received in large PRs from Factory or third-party imported 
libraries (also large imports) use one-line.


Amos

From stu at spacehopper.org  Mon Aug 16 11:29:41 2021
From: stu at spacehopper.org (Stuart Henderson)
Date: Mon, 16 Aug 2021 11:29:41 -0000 (UTC)
Subject: [squid-dev] bizarre build behaviour from PoolingAllocator on
 OpenBSD/clang
References: <CA+Y8hcP2XbyGn9QVmcEhp3JkcErpkKnruwSCz=n5GgR3k_Xh2A@mail.gmail.com>
 <6825d7ac-be16-1cfb-9d69-89e2df0191af@measurement-factory.com>
Message-ID: <slrnshkj15.2h3p.stu.lists@naiad.spacehopper.org>

On 2021-08-15, Alex Rousskov <rousskov at measurement-factory.com> wrote:
> On 8/15/21 2:51 PM, Francesco Chemolli wrote:
>> Hi all,
>>   I'm looking into OpenBSD compatibility for trunk, and there's a
>> strange behaviour at build time on  OpenBSD (6.9) / clang (10.0.1)
>> 
>> When building src/log/access.log.cc, build fails with these errors:
>> 
>> ------------------ begin quote -----------
>>     static_assert((is_same<value_type, typename
>> allocator_type::value_type>::value),
>>     ^
>> ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
>
> Are some compiler messages missing in the above quote? It feels like the
> above line is not directly related to the lines below, but perhaps I am
> misinterpreting the messy output.
>
>> I'm puzzled: I wouldn't expect this to be an OS-specific failure.
>
> We cannot be sure it is OS-specific, but STL implementation is full of
> hacks and optimizations that may be OS- or environment-specific. It is
> also possible that there is a conflict between GCC and clang
> installation; we have seen those before and they manifest in weird ways.
>
> It is strange that the error below mentions "unordered_map" when it
> should say "std::unordered_map" or similar.
>
> Are you building with clang standard library or GCC standard library (I
> believe -stdlib controls that, but it is not my area of expertise)? If
> you are building with GCC stdlib, perhaps try building with
> clang-provided stdlib?

Hi, OpenBSD port maintainer here (I admit to not knowing much C++ though!).
On OpenBSD, on all archs where the base system compiler is clang,
it's configured to use the clang standard library (libc++) by default,

>> /usr/include/c++/v1/initializer_list:99:1: note: candidate template

and these are the correct headers for libc++. (Post-6.9 gcc is no longer
installed in the base OS on any of the "base is clang" archs, it is
present in ports but used only very rarely).

I just gave it a spin, after adding a missed inclusion of sys/socket.h
for SOL_SOCKET in Tcp.cc I hit the same problem with access.log.cc,
there is a clue on the immediately previous line, which I think is
pointing at something to do with const vs non-const SBuf, is that enough
of a clue?


[...]
Making all in log
Making all in DB
Making all in file
depbase=`echo access_log.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`; /usr/bin/libtool  --tag=CXX    --mode=compile c++ -DHAVE_CONFIG_H -DDEFAULT_CONFIG_FILE=\"/etc/squid/squid.conf\"  -DDEFAULT_SQUID_DATA_DIR=\"/usr/local/share/squid\"  -DDEFAULT_SQUID_CONFIG_DIR=\"/etc/squid\"    -I/usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e -I/usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e/include  -I/usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e/lib -I/usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e/src  -I../../include -I/usr/local/include    -I/usr/local/include -I/usr/local/include/libxml2 -I/usr/local/include  -Werror -Wextra -Wno-unused-private-field -Wpointer-arith -Wwrite-strings -Wcomments -Wshadow -Wmissing-declarations  -D_REENTRANT -I/usr/local/include/libxml2 -I/usr/local/include -I/usr/local/include     -I/usr/local/include -I/usr/local/include/p11-kit-1  -O2 -pipe -MT access_log.lo -MD -MP -MF $depbase.Tpo -c -o access_log.lo /usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e/src/log/access_log.cc && mv -f $depbase.Tpo $depbase.Plo
c++ -DHAVE_CONFIG_H -DDEFAULT_CONFIG_FILE="/etc/squid/squid.conf" -DDEFAULT_SQUID_DATA_DIR="/usr/local/share/squid" -DDEFAULT_SQUID_CONFIG_DIR="/etc/squid" -I/usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e -I/usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e/include -I/usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e/lib -I/usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e/src -I../../include -I/usr/local/include -I/usr/local/include -I/usr/local/include/libxml2 -I/usr/local/include -Werror -Wextra -Wno-unused-private-field -Wpointer-arith -Wwrite-strings -Wcomments -Wshadow -Wmissing-declarations -D_REENTRANT -I/usr/local/include/libxml2 -I/usr/local/include -I/usr/local/include -I/usr/local/include -I/usr/local/include/p11-kit-1 -O2 -pipe -MT access_log.lo -MD -MP -MF .deps/access_log.Tpo -c /usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e/src/log/access_log.cc -fPIC -DPIC -o .libs/access_log.o
In file included from /usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e/src/log/access_log.cc:12:
In file included from /usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e/src/AccessLogEntry.h:19:
In file included from /usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e/src/HttpHeader.h:13:
In file included from /usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e/src/base/LookupTable.h:15:
/usr/include/c++/v1/unordered_map:857:5: error: static_assert failed due to requirement 'is_same<std::__1::pair<const SBuf, unsigned long long>, std::__1::pair<SBuf, unsigned long long>>::value' "Invalid allocator::value_type"
    static_assert((is_same<value_type, typename allocator_type::value_type>::value),
    ^              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e/src/log/access_log.cc:65:26: note: in instantiation of template class 'std::__1::unordered_map<SBuf, unsigned long long, std::__1::hash<SBuf>, std::__1::equal_to<SBuf>, PoolingAllocator<std::__1::pair<SBuf, unsigned long long>>>' requested here
static HeaderValueCounts TheViaCounts;
                         ^
/usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e/src/log/access_log.cc:459:25: error: type 'HeaderValueCounts' (aka 'unordered_map<SBuf, unsigned long long, hash<SBuf>, equal_to<SBuf>, PoolingAllocator<pair<SBuf, unsigned long long>>>') does not provide a subscript operator
    ++TheForwardedCounts[key];
      ~~~~~~~~~~~~~~~~~~^~~~
/usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e/src/log/access_log.cc:466:24: error: invalid range expression of type 'const std::__1::unordered_map<SBuf, unsigned long long, std::__1::hash<SBuf>, std::__1::equal_to<SBuf>, PoolingAllocator<std::__1::pair<SBuf, unsigned long long>>>'; no viable 'begin' function available
    for (const auto &i : counts)
                       ^ ~~~~~~
/usr/include/c++/v1/initializer_list:99:1: note: candidate template ignored: could not match 'initializer_list' against 'unordered_map'
begin(initializer_list<_Ep> __il) _NOEXCEPT
^
/usr/include/c++/v1/iterator:1752:1: note: candidate template ignored: could not match '_Tp [_Np]' against 'const std::__1::unordered_map<SBuf, unsigned long long, std::__1::hash<SBuf>, std::__1::equal_to<SBuf>, PoolingAllocator<std::__1::pair<SBuf, unsigned long long>>>'
begin(_Tp (&__array)[_Np])
^
/usr/include/c++/v1/iterator:1770:1: note: candidate template ignored: substitution failure [with _Cp = const std::__1::unordered_map<SBuf, unsigned long long, std::__1::hash<SBuf>, std::__1::equal_to<SBuf>, PoolingAllocator<std::__1::pair<SBuf, unsigned long long>>>]: no member named 'begin' in 'std::__1::unordered_map<SBuf, unsigned long long, std::__1::hash<SBuf>, std::__1::equal_to<SBuf>, PoolingAllocator<std::__1::pair<SBuf, unsigned long long>>>'
begin(_Cp& __c) -> decltype(__c.begin())
^                               ~~~~~
/usr/include/c++/v1/iterator:1778:1: note: candidate template ignored: substitution failure [with _Cp = std::__1::unordered_map<SBuf, unsigned long long, std::__1::hash<SBuf>, std::__1::equal_to<SBuf>, PoolingAllocator<std::__1::pair<SBuf, unsigned long long>>>]: no member named 'begin' in 'std::__1::unordered_map<SBuf, unsigned long long, std::__1::hash<SBuf>, std::__1::equal_to<SBuf>, PoolingAllocator<std::__1::pair<SBuf, unsigned long long>>>'
begin(const _Cp& __c) -> decltype(__c.begin())
^                                     ~~~~~
/usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e/src/log/access_log.cc:488:24: error: no member named 'clear' in 'std::__1::unordered_map<SBuf, unsigned long long, std::__1::hash<SBuf>, std::__1::equal_to<SBuf>, PoolingAllocator<std::__1::pair<SBuf, unsigned long long>>>'
    TheForwardedCounts.clear();
    ~~~~~~~~~~~~~~~~~~ ^
4 errors generated.
Error while executing c++ -DHAVE_CONFIG_H -DDEFAULT_CONFIG_FILE="/etc/squid/squid.conf" -DDEFAULT_SQUID_DATA_DIR="/usr/local/share/squid" -DDEFAULT_SQUID_CONFIG_DIR="/etc/squid" -I/usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e -I/usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e/include -I/usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e/lib -I/usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e/src -I../../include -I/usr/local/include -I/usr/local/include -I/usr/local/include/libxml2 -I/usr/local/include -Werror -Wextra -Wno-unused-private-field -Wpointer-arith -Wwrite-strings -Wcomments -Wshadow -Wmissing-declarations -D_REENTRANT -I/usr/local/include/libxml2 -I/usr/local/include -I/usr/local/include -I/usr/local/include -I/usr/local/include/p11-kit-1 -O2 -pipe -MT access_log.lo -MD -MP -MF .deps/access_log.Tpo -c /usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e/src/log/access_log.cc -fPIC -DPIC -o .libs/access_log.o
*** Error 1 in src/log (Makefile:923 'access_log.lo')


From gkinkie at gmail.com  Mon Aug 16 11:51:35 2021
From: gkinkie at gmail.com (Francesco Chemolli)
Date: Mon, 16 Aug 2021 12:51:35 +0100
Subject: [squid-dev] bizarre build behaviour from PoolingAllocator on
 OpenBSD/clang
In-Reply-To: <slrnshkj15.2h3p.stu.lists@naiad.spacehopper.org>
References: <CA+Y8hcP2XbyGn9QVmcEhp3JkcErpkKnruwSCz=n5GgR3k_Xh2A@mail.gmail.com>
 <6825d7ac-be16-1cfb-9d69-89e2df0191af@measurement-factory.com>
 <slrnshkj15.2h3p.stu.lists@naiad.spacehopper.org>
Message-ID: <CA+Y8hcNEdG7NsBamdA0tRbZh3QSjVM0Z_1qDyOGc0rYx3NzfMQ@mail.gmail.com>

On Mon, Aug 16, 2021 at 12:29 PM Stuart Henderson <stu at spacehopper.org>
wrote:

> On 2021-08-15, Alex Rousskov <rousskov at measurement-factory.com> wrote:
> > On 8/15/21 2:51 PM, Francesco Chemolli wrote:
> >> Hi all,
> >>   I'm looking into OpenBSD compatibility for trunk, and there's a
> >> strange behaviour at build time on  OpenBSD (6.9) / clang (10.0.1)
> >>
> >> When building src/log/access.log.cc, build fails with these errors:
> >>
> >> ------------------ begin quote -----------
> >>     static_assert((is_same<value_type, typename
> >> allocator_type::value_type>::value),
> >>     ^
> >> ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
> >
> > Are some compiler messages missing in the above quote? It feels like the
> > above line is not directly related to the lines below, but perhaps I am
> > misinterpreting the messy output.
> >
> >> I'm puzzled: I wouldn't expect this to be an OS-specific failure.
> >
> > We cannot be sure it is OS-specific, but STL implementation is full of
> > hacks and optimizations that may be OS- or environment-specific. It is
> > also possible that there is a conflict between GCC and clang
> > installation; we have seen those before and they manifest in weird ways.
> >
> > It is strange that the error below mentions "unordered_map" when it
> > should say "std::unordered_map" or similar.
> >
> > Are you building with clang standard library or GCC standard library (I
> > believe -stdlib controls that, but it is not my area of expertise)? If
> > you are building with GCC stdlib, perhaps try building with
> > clang-provided stdlib?
>
> Hi, OpenBSD port maintainer here (I admit to not knowing much C++ though!).
> On OpenBSD, on all archs where the base system compiler is clang,
> it's configured to use the clang standard library (libc++) by default,
>

Hi Stuart,
Pleased to meet you


> >> /usr/include/c++/v1/initializer_list:99:1: note: candidate template
>
> and these are the correct headers for libc++. (Post-6.9 gcc is no longer
> installed in the base OS on any of the "base is clang" archs, it is
> present in ports but used only very rarely).
>
> I just gave it a spin, after adding a missed inclusion of sys/socket.h
> for SOL_SOCKET in Tcp.cc I hit the same problem with access.log.cc,
> there is a clue on the immediately previous line, which I think is
> pointing at something to do with const vs non-const SBuf, is that enough
> of a clue?
>

sys/socket inclusion is in PR#885, queued for landing any time soon.

I had patched the previous line to

    for (auto i : TheGlobalContextStorage.storage) {

letting the compiler do the heavy lifting of type detection; but then the
other issues remained.
I will try some more variations.

egcc (gcc 8.4.0) builds that file just fine, so it might really be
libstdc++ related.

It fails when trying to use libcppunit, I suppose due to the fact that the
system-supplied libcppunit is built with clang++


>
>
> [...]
> Making all in log
> Making all in DB
> Making all in file
> depbase=`echo access_log.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;
> /usr/bin/libtool  --tag=CXX    --mode=compile c++ -DHAVE_CONFIG_H
> -DDEFAULT_CONFIG_FILE=\"/etc/squid/squid.conf\"
> -DDEFAULT_SQUID_DATA_DIR=\"/usr/local/share/squid\"
> -DDEFAULT_SQUID_CONFIG_DIR=\"/etc/squid\"
> -I/usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e
> -I/usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e/include
> -I/usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e/lib
> -I/usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e/src
> -I../../include -I/usr/local/include    -I/usr/local/include
> -I/usr/local/include/libxml2 -I/usr/local/include  -Werror -Wextra
> -Wno-unused-private-field -Wpointer-arith -Wwrite-strings -Wcomments
> -Wshadow -Wmissing-declarations  -D_REENTRANT -I/usr/local/include/libxml2
> -I/usr/local/include -I/usr/local/include     -I/usr/local/include
> -I/usr/local/include/p11-k
>  it-1  -O2 -pipe -MT access_log.lo -MD -MP -MF $depbase.Tpo -c -o
> access_log.lo
> /usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e/src/log/access_log.cc
> && mv -f $depbase.Tpo $depbase.Plo
> c++ -DHAVE_CONFIG_H -DDEFAULT_CONFIG_FILE="/etc/squid/squid.conf"
> -DDEFAULT_SQUID_DATA_DIR="/usr/local/share/squid"
> -DDEFAULT_SQUID_CONFIG_DIR="/etc/squid"
> -I/usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e
> -I/usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e/include
> -I/usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e/lib
> -I/usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e/src
> -I../../include -I/usr/local/include -I/usr/local/include
> -I/usr/local/include/libxml2 -I/usr/local/include -Werror -Wextra
> -Wno-unused-private-field -Wpointer-arith -Wwrite-strings -Wcomments
> -Wshadow -Wmissing-declarations -D_REENTRANT -I/usr/local/include/libxml2
> -I/usr/local/include -I/usr/local/include -I/usr/local/include
> -I/usr/local/include/p11-kit-1 -O2 -pipe -MT access_log.lo -MD -MP -MF
> .deps/access_log.Tpo -c
> /usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a
>  889e0c37f327618e/src/log/access_log.cc -fPIC -DPIC -o .libs/access_log.o
> In file included from
> /usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e/src/log/access_log.cc:12:
> In file included from
> /usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e/src/AccessLogEntry.h:19:
> In file included from
> /usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e/src/HttpHeader.h:13:
> In file included from
> /usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e/src/base/LookupTable.h:15:
> /usr/include/c++/v1/unordered_map:857:5: error: static_assert failed due
> to requirement 'is_same<std::__1::pair<const SBuf, unsigned long long>,
> std::__1::pair<SBuf, unsigned long long>>::value' "Invalid
> allocator::value_type"
>     static_assert((is_same<value_type, typename
> allocator_type::value_type>::value),
>     ^
> ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
> /usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e/src/log/access_log.cc:65:26:
> note: in instantiation of template class 'std::__1::unordered_map<SBuf,
> unsigned long long, std::__1::hash<SBuf>, std::__1::equal_to<SBuf>,
> PoolingAllocator<std::__1::pair<SBuf, unsigned long long>>>' requested here
> static HeaderValueCounts TheViaCounts;
>                          ^
> /usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e/src/log/access_log.cc:459:25:
> error: type 'HeaderValueCounts' (aka 'unordered_map<SBuf, unsigned long
> long, hash<SBuf>, equal_to<SBuf>, PoolingAllocator<pair<SBuf, unsigned long
> long>>>') does not provide a subscript operator
>     ++TheForwardedCounts[key];
>       ~~~~~~~~~~~~~~~~~~^~~~
> /usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e/src/log/access_log.cc:466:24:
> error: invalid range expression of type 'const
> std::__1::unordered_map<SBuf, unsigned long long, std::__1::hash<SBuf>,
> std::__1::equal_to<SBuf>, PoolingAllocator<std::__1::pair<SBuf, unsigned
> long long>>>'; no viable 'begin' function available
>     for (const auto &i : counts)
>                        ^ ~~~~~~
> /usr/include/c++/v1/initializer_list:99:1: note: candidate template
> ignored: could not match 'initializer_list' against 'unordered_map'
> begin(initializer_list<_Ep> __il) _NOEXCEPT
> ^
> /usr/include/c++/v1/iterator:1752:1: note: candidate template ignored:
> could not match '_Tp [_Np]' against 'const std::__1::unordered_map<SBuf,
> unsigned long long, std::__1::hash<SBuf>, std::__1::equal_to<SBuf>,
> PoolingAllocator<std::__1::pair<SBuf, unsigned long long>>>'
> begin(_Tp (&__array)[_Np])
> ^
> /usr/include/c++/v1/iterator:1770:1: note: candidate template ignored:
> substitution failure [with _Cp = const std::__1::unordered_map<SBuf,
> unsigned long long, std::__1::hash<SBuf>, std::__1::equal_to<SBuf>,
> PoolingAllocator<std::__1::pair<SBuf, unsigned long long>>>]: no member
> named 'begin' in 'std::__1::unordered_map<SBuf, unsigned long long,
> std::__1::hash<SBuf>, std::__1::equal_to<SBuf>,
> PoolingAllocator<std::__1::pair<SBuf, unsigned long long>>>'
> begin(_Cp& __c) -> decltype(__c.begin())
> ^                               ~~~~~
> /usr/include/c++/v1/iterator:1778:1: note: candidate template ignored:
> substitution failure [with _Cp = std::__1::unordered_map<SBuf, unsigned
> long long, std::__1::hash<SBuf>, std::__1::equal_to<SBuf>,
> PoolingAllocator<std::__1::pair<SBuf, unsigned long long>>>]: no member
> named 'begin' in 'std::__1::unordered_map<SBuf, unsigned long long,
> std::__1::hash<SBuf>, std::__1::equal_to<SBuf>,
> PoolingAllocator<std::__1::pair<SBuf, unsigned long long>>>'
> begin(const _Cp& __c) -> decltype(__c.begin())
> ^                                     ~~~~~
> /usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e/src/log/access_log.cc:488:24:
> error: no member named 'clear' in 'std::__1::unordered_map<SBuf, unsigned
> long long, std::__1::hash<SBuf>, std::__1::equal_to<SBuf>,
> PoolingAllocator<std::__1::pair<SBuf, unsigned long long>>>'
>     TheForwardedCounts.clear();
>     ~~~~~~~~~~~~~~~~~~ ^
> 4 errors generated.
> Error while executing c++ -DHAVE_CONFIG_H
> -DDEFAULT_CONFIG_FILE="/etc/squid/squid.conf"
> -DDEFAULT_SQUID_DATA_DIR="/usr/local/share/squid"
> -DDEFAULT_SQUID_CONFIG_DIR="/etc/squid"
> -I/usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e
> -I/usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e/include
> -I/usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e/lib
> -I/usr/obj/ports/squid-5.1pl20210816/squid-742d042ea820b4ecac2a651a889e0c37f327618e/src
> -I../../include -I/usr/local/include -I/usr/local/include
> -I/usr/local/include/libxml2 -I/usr/local/include -Werror -Wextra
> -Wno-unused-private-field -Wpointer-arith -Wwrite-strings -Wcomments
> -Wshadow -Wmissing-declarations -D_REENTRANT -I/usr/local/include/libxml2
> -I/usr/local/include -I/usr/local/include -I/usr/local/include
> -I/usr/local/include/p11-kit-1 -O2 -pipe -MT access_log.lo -MD -MP -MF
> .deps/access_log.Tpo -c /usr/obj/ports/squid-5.1pl20210816/squid-74
>  2d042ea820b4ecac2a651a889e0c37f327618e/src/log/access_log.cc -fPIC -DPIC
> -o .libs/access_log.o
> *** Error 1 in src/log (Makefile:923 'access_log.lo')
>
> _______________________________________________
> squid-dev mailing list
> squid-dev at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-dev
>


-- 
    Francesco
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20210816/e8525e84/attachment-0001.htm>

From rousskov at measurement-factory.com  Mon Aug 16 14:12:43 2021
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Mon, 16 Aug 2021 10:12:43 -0400
Subject: [squid-dev] Coding Style updates
In-Reply-To: <0634520d-45e6-3fb3-d4f1-18cc776dd9a2@treenet.co.nz>
References: <476a77be-4b6d-ed6b-ebb6-6b71d70d60a7@treenet.co.nz>
 <c2ac5828-e69d-56a3-02f0-ed7ef2239d63@measurement-factory.com>
 <4a7fb95d-0dc1-686b-0b90-0c14fde9b170@treenet.co.nz>
 <0b6b88ce-c903-bbd6-01e3-f6042d705194@measurement-factory.com>
 <0634520d-45e6-3fb3-d4f1-18cc776dd9a2@treenet.co.nz>
Message-ID: <a6ffd667-7e80-5826-4bd7-19413472f553@measurement-factory.com>

On 8/15/21 9:07 PM, Amos Jeffries wrote:

> The existence of such a style requirement on Factory developers, and
> thus need for Squid code to match it for ease of future bug fixing, was
> given to me as a reason for ICAP and eCAP feature code staying in the
> Factory supplied one-line format despite the remainder of Squid code
> back then using two-line.

The above interpretation does not match reality. I continue to urge you
to stop describing things that you do not have enough information about
to describe accurately, especially things that relate to other people.
Statistically speaking, the probability of success for such dangerous
attempts has been close to zero (and there is no actual need to describe
those things to advance your arguments).



> So, between your two responses I gather that there will be no push-back
> on a PR adding enforcement of two-line function/method definitions by
> astyle 3.1.

There is push back, of course -- any large format changes need to
justify the expenses they necessarily bring. Whether that push back is
enough to block that future PR depends, AFAICT, on Astyle formatting
results and the timing of migration to auto results. As previously
discussed, we do not want to reformat the same large set of lines twice
in a short succession.


> It appears to be one of the policy rules not copied over to that page
> from the Squid-2 page.

The fact that the alleged official formatting rules are not actually
documented anywhere explains some of the inconsistencies and makes
making future rule setting easier IMO.

Alex.

From rousskov at measurement-factory.com  Mon Aug 16 14:44:11 2021
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Mon, 16 Aug 2021 10:44:11 -0400
Subject: [squid-dev] bizarre build behaviour from PoolingAllocator on
 OpenBSD/clang
In-Reply-To: <slrnshkj15.2h3p.stu.lists@naiad.spacehopper.org>
References: <CA+Y8hcP2XbyGn9QVmcEhp3JkcErpkKnruwSCz=n5GgR3k_Xh2A@mail.gmail.com>
 <6825d7ac-be16-1cfb-9d69-89e2df0191af@measurement-factory.com>
 <slrnshkj15.2h3p.stu.lists@naiad.spacehopper.org>
Message-ID: <8b907ff6-828f-9697-6e61-5d44c1ff94f9@measurement-factory.com>

On 8/16/21 7:29 AM, Stuart Henderson wrote:

> -c .../src/log/access_log.cc -fPIC -DPIC -o .libs/access_log.o
> In file included from .../src/log/access_log.cc:12:
> In file included from .../src/AccessLogEntry.h:19:
> In file included from .../src/HttpHeader.h:13:
> In file included from .../src/base/LookupTable.h:15:

> /usr/include/c++/v1/unordered_map:857:5: error: static_assert failed
> due to requirement 'is_same<std::__1::pair<const SBuf, unsigned long
> long>, std::__1::pair<uf, unsigned long long>>::value' "Invalid
> allocator::value_type"

>     static_assert((is_same<value_type, typename allocator_type::value_type>::value),
>     ^              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Yes, that could be the smoking gun missing from the earlier error log,
thank you, Stuart!

Francesco, can you reproduce the same false is_same<> result using a toy
example? You might not even need Squid-specific types.

If you can reproduce it, is the result valid/expected or is that a clang
bug?

Alex.

From oagvozd at gmail.com  Mon Aug 16 17:45:15 2021
From: oagvozd at gmail.com (Meridoff)
Date: Mon, 16 Aug 2021 20:45:15 +0300
Subject: [squid-dev] Squid 4.13: too much memory used for ACL url_regex when
 big list file used
Message-ID: <CAFfuDwzfy=9g6EH706iyfGTJ51d6V7qc+aUtPNXfwPXiMERPHg@mail.gmail.com>

Hello, I have simplest squid config with such acl:

acl a1 url_regex "/tmp/urls.txt"

In /tmp/urls.txt there are about 220 000 URL regexps, most of them in such
form (example):
^(https?|ftp)://([a-z0-9.-]+\.)?nicebox\.pro(/.*)?$
OR
^(https?|ftp)://order-yudobashi-com\.363q1\.bar/

There are a lot of memory used by squid for such configuration: about 2GB.
Without this command: about 30MB used.

So aprxm. 10KB for 1 regexp. Is it normal? I think it is too big..

I think that such big consumption is because of regexps , for simple
strings (for example, domains or IPs) consumption will be less.

How I can decrease memory consumption for such big regexp lists in ACLs ?
May be some fix in squid or some fix in regexp lists ?

Thanks.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20210816/6892418d/attachment.htm>

From rousskov at measurement-factory.com  Mon Aug 16 19:37:23 2021
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Mon, 16 Aug 2021 15:37:23 -0400
Subject: [squid-dev] bizarre build behaviour from PoolingAllocator on
 OpenBSD/clang
In-Reply-To: <8b907ff6-828f-9697-6e61-5d44c1ff94f9@measurement-factory.com>
References: <CA+Y8hcP2XbyGn9QVmcEhp3JkcErpkKnruwSCz=n5GgR3k_Xh2A@mail.gmail.com>
 <6825d7ac-be16-1cfb-9d69-89e2df0191af@measurement-factory.com>
 <slrnshkj15.2h3p.stu.lists@naiad.spacehopper.org>
 <8b907ff6-828f-9697-6e61-5d44c1ff94f9@measurement-factory.com>
Message-ID: <7e4a30ac-be79-e1c6-3bbb-10f20eaada68@measurement-factory.com>

On 8/16/21 10:44 AM, Alex Rousskov wrote:
> On 8/16/21 7:29 AM, Stuart Henderson wrote:
> 
>> -c .../src/log/access_log.cc -fPIC -DPIC -o .libs/access_log.o
>> In file included from .../src/log/access_log.cc:12:
>> In file included from .../src/AccessLogEntry.h:19:
>> In file included from .../src/HttpHeader.h:13:
>> In file included from .../src/base/LookupTable.h:15:
> 
>> /usr/include/c++/v1/unordered_map:857:5: error: static_assert failed
>> due to requirement 'is_same<std::__1::pair<const SBuf, unsigned long
>> long>, std::__1::pair<uf, unsigned long long>>::value' "Invalid
>> allocator::value_type"
> 
>>     static_assert((is_same<value_type, typename allocator_type::value_type>::value),
>>     ^              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
> 
> Yes, that could be the smoking gun missing from the earlier error log,
> thank you, Stuart!
> 
> Francesco, can you reproduce the same false is_same<> result using a toy
> example? You might not even need Squid-specific types.
> 
> If you can reproduce it, is the result valid/expected or is that a clang
> bug?


BTW, since LookupTable.h was mentioned in the above error, I think it
might be important to mention that the unordered_map declaration in that
file (lookupTable_t) is probably buggy because it is missing the custom
equality operator. I have recently discovered that bug but did not have
the time to properly report or address it.

BTW, LookupTable.h is unrelated to PoolingAllocator -- lookupTable_t
does not pool (yet?).


HTH,

Alex.

From squid3 at treenet.co.nz  Tue Aug 17 01:38:23 2021
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Tue, 17 Aug 2021 13:38:23 +1200
Subject: [squid-dev] Squid 4.13: too much memory used for ACL url_regex
 when big list file used
In-Reply-To: <CAFfuDwzfy=9g6EH706iyfGTJ51d6V7qc+aUtPNXfwPXiMERPHg@mail.gmail.com>
References: <CAFfuDwzfy=9g6EH706iyfGTJ51d6V7qc+aUtPNXfwPXiMERPHg@mail.gmail.com>
Message-ID: <cee5b9ca-42ab-2c1b-9013-1c942f796115@treenet.co.nz>

On 17/08/21 5:45 am, Meridoff wrote:
> Hello, I have simplest squid config with such acl:
> 
> acl a1 url_regex "/tmp/urls.txt"
> 
> In /tmp/urls.txt there are about 220 000 URL regexps, most of them in 
> such form (example):
> ^(https?|ftp)://([a-z0-9.-]+\.)?nicebox\.pro(/.*)?$
> OR
> ^(https?|ftp)://order-yudobashi-com\.363q1\.bar/
> 
> There are a lot of memory used by squid for such configuration: about 
> 2GB. Without this command: about 30MB used.

Are those numbers without traffic going through?
ie. just Squid loading the configuration then does nothing.

> 
> So aprxm. 10KB for 1 regexp. Is it normal? I think it is too big..
> 

regex rules get aggregated into longer compound lines, then compiled 
into a binary form for the regex library to handle. It is not easy to 
tell how the compiled form will compare in size to the original strings.


> I think that such big consumption is because of regexps , for simple 
> strings (for example, domains or IPs) consumption will be less.
> 

Sure. "Simple strings" will be not much larger than the size of the file 
input - though there is some extra memory used for indexing etc.


> How I can decrease memory consumption for such big regexp lists in ACLs 
> ? May be some fix in squid or some fix in regexp lists ?
> 

First thing to do is figure out where the memory is being consumed.

This command:
  squidclient mgr:mem

Will produce a spreadhsheet in TSV format of the memory allocations your 
Squid has. Look through that for the big memory spenders, with an eye on 
the regex one(s) you are suspicious of.


Amos

