From rousskov at measurement-factory.com  Sun Dec  4 16:18:17 2022
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Sun, 4 Dec 2022 11:18:17 -0500
Subject: [squid-dev] RFC: Switch to C++17
Message-ID: <e47b62ea-eeba-e260-89a8-35a70fe85b5e@measurement-factory.com>

Hello,

     I propose that we switch master/v6 from C++11 to C++17: Modern 
environments support C++17 well. We are wasting significant amounts of 
time on emulating such basic C++17 features as std::optional. We are 
writing worse code than we can because we lack access to such basic 
C++14 and C++17 features as

* function return type deduction (auto)
* generic lambdas (auto arguments)
* relaxed constexpr restrictions
* std::make_unique
* std::integer_sequence
* std::quoted
* Nested namespace definitions
* [[fallthrough]], [[maybe_unused]], and [[nodiscard]]
* fold expressions
* auto [a, b] = getTwoReturnValues();
* inline variables
* std::any
* std::variant
* std::byte

If we do not switch now, then we would have to wait about a year for the 
next such opportunity because we should not introduce such a big 
difference between master and the upcoming unstable v6 branch.


C++17 is supported by popular modern compilers and stable distros. Squid 
master branch should target those IMO. Even old environments can install 
the necessary modern compilers (e.g., RHEL5 users can get them via Red 
Hat Developer Toolset).

* GCC v5 supports most C++17 features.
* GCC v8 supports all relevant C++17 features.
* Clang v5 supports nearly all C++17 features.
* Clang v8 supports all relevant C++17 features.

* Ubuntu 20.04 LTS ships with GCC v9 and clang v10.

* https://gcc.gnu.org/projects/cxx-status.html#cxx17
* 
https://gcc.gnu.org/onlinedocs/libstdc++/manual/status.html#status.iso.2017
* https://clang.llvm.org/cxx_status.html#cxx17
* https://en.cppreference.com/w/cpp/compiler_support/17


Switching to just C++14 would be better than nothing, but it will not 
give us several C++17 features that we already waste serious time on 
emulating/avoiding (e.g., std::optional). We should not switch to C++20 
yet because modern stable compilers still have some C++20 support holes.


I can volunteer the corresponding PR.


Any objections to switching master/v6 to C++17?


Thank you,

Alex.

From gkinkie at gmail.com  Sun Dec  4 16:21:47 2022
From: gkinkie at gmail.com (Francesco Chemolli)
Date: Sun, 4 Dec 2022 16:21:47 +0000
Subject: [squid-dev] RFC: Switch to C++17
In-Reply-To: <e47b62ea-eeba-e260-89a8-35a70fe85b5e@measurement-factory.com>
References: <e47b62ea-eeba-e260-89a8-35a70fe85b5e@measurement-factory.com>
Message-ID: <CA+Y8hcOcGqk9thOA5kuj5BpVaTYZqPddTaaN2a-yyvOzeqPTSA@mail.gmail.com>

I support the switch

On Sun, 4 Dec 2022 at 16:18, Alex Rousskov <rousskov at measurement-factory.com>
wrote:

> Hello,
>
>      I propose that we switch master/v6 from C++11 to C++17: Modern
> environments support C++17 well. We are wasting significant amounts of
> time on emulating such basic C++17 features as std::optional. We are
> writing worse code than we can because we lack access to such basic
> C++14 and C++17 features as
>
> * function return type deduction (auto)
> * generic lambdas (auto arguments)
> * relaxed constexpr restrictions
> * std::make_unique
> * std::integer_sequence
> * std::quoted
> * Nested namespace definitions
> * [[fallthrough]], [[maybe_unused]], and [[nodiscard]]
> * fold expressions
> * auto [a, b] = getTwoReturnValues();
> * inline variables
> * std::any
> * std::variant
> * std::byte
>
> If we do not switch now, then we would have to wait about a year for the
> next such opportunity because we should not introduce such a big
> difference between master and the upcoming unstable v6 branch.
>
>
> C++17 is supported by popular modern compilers and stable distros. Squid
> master branch should target those IMO. Even old environments can install
> the necessary modern compilers (e.g., RHEL5 users can get them via Red
> Hat Developer Toolset).
>
> * GCC v5 supports most C++17 features.
> * GCC v8 supports all relevant C++17 features.
> * Clang v5 supports nearly all C++17 features.
> * Clang v8 supports all relevant C++17 features.
>
> * Ubuntu 20.04 LTS ships with GCC v9 and clang v10.
>
> * https://gcc.gnu.org/projects/cxx-status.html#cxx17
> *
> https://gcc.gnu.org/onlinedocs/libstdc++/manual/status.html#status.iso.2017
> * https://clang.llvm.org/cxx_status.html#cxx17
> * https://en.cppreference.com/w/cpp/compiler_support/17
>
>
> Switching to just C++14 would be better than nothing, but it will not
> give us several C++17 features that we already waste serious time on
> emulating/avoiding (e.g., std::optional). We should not switch to C++20
> yet because modern stable compilers still have some C++20 support holes.
>
>
> I can volunteer the corresponding PR.
>
>
> Any objections to switching master/v6 to C++17?
>
>
> Thank you,
>
> Alex.
> _______________________________________________
> squid-dev mailing list
> squid-dev at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-dev
>
-- 
@mobile
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20221204/1b707376/attachment.htm>

From squid3 at treenet.co.nz  Mon Dec  5 11:18:36 2022
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Tue, 6 Dec 2022 00:18:36 +1300
Subject: [squid-dev] RFC: Switch to C++17
In-Reply-To: <CA+Y8hcOcGqk9thOA5kuj5BpVaTYZqPddTaaN2a-yyvOzeqPTSA@mail.gmail.com>
References: <e47b62ea-eeba-e260-89a8-35a70fe85b5e@measurement-factory.com>
 <CA+Y8hcOcGqk9thOA5kuj5BpVaTYZqPddTaaN2a-yyvOzeqPTSA@mail.gmail.com>
Message-ID: <dfa25bb6-32b6-9436-e5a9-f0f4dd06e373@treenet.co.nz>

I support the switch.

Caveat details below...


On 5/12/2022 5:21 am, Francesco Chemolli wrote:
> I support the switch
>
> On Sun, 4 Dec 2022 at 16:18, Alex Rousskov wrote:
>
>     Hello,
>
>     C++17 is supported by popular modern compilers and stable distros.
>     Squid
>     master branch should target those IMO. Even old environments can
>     install
>     the necessary modern compilers (e.g., RHEL5 users can get them via
>     Red
>     Hat Developer Toolset).
>
>     * GCC v5 supports most C++17 features.
>     * GCC v8 supports all relevant C++17 features.
>     * Clang v5 supports nearly all C++17 features.
>     * Clang v8 supports all relevant C++17 features.
>

non-RHEL distros shipping Squid are almost all providing at lease GCC 
v8. In many cases even their recently refreshed (Nov 2022) LTS have it.

The RHEL family distros (CentOS 7 in particular, but also many others) 
LTS versions only provide LLVM/clang v7 from the C++17 compilers.

So I think we could bump to require GCC v8 or Clang v7 minimum without 
much fuss. That would leave us figuring out what (if any) hacks we 
needed for the clang v7 vs C++17 feature gaps. Hopefully no worse than 
what we have been doing to figure out the GCC 4.8 vs C++11 feature gaps.

It has been a while since I had any info about the RedHat developer 
toolset. Do you know if GCC 8+ or LLVM/clang 8+ are in there? if so, 
then bump to v8 for both compilers and full speed ahead :-)


>
>     Switching to just C++14 would be better than nothing, but it will not
>     give us several C++17 features that we already waste serious time on
>     emulating/avoiding (e.g., std::optional). We should not switch to
>     C++20
>     yet because modern stable compilers still have some C++20 support
>     holes.
>

Agreed, C++14 is not worth the jump, and C++20 is far too early.

[ IMO in general we should leave ~5 years for the distro LTS to catch up 
on compilers releases before considering adopting a language update. ]


Cheers
Amos


From rousskov at measurement-factory.com  Mon Dec  5 14:31:39 2022
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Mon, 5 Dec 2022 09:31:39 -0500
Subject: [squid-dev] RFC: Switch to C++17
In-Reply-To: <dfa25bb6-32b6-9436-e5a9-f0f4dd06e373@treenet.co.nz>
References: <e47b62ea-eeba-e260-89a8-35a70fe85b5e@measurement-factory.com>
 <CA+Y8hcOcGqk9thOA5kuj5BpVaTYZqPddTaaN2a-yyvOzeqPTSA@mail.gmail.com>
 <dfa25bb6-32b6-9436-e5a9-f0f4dd06e373@treenet.co.nz>
Message-ID: <b712dadd-73a8-71f6-9d64-852d83c887e6@measurement-factory.com>

On 12/5/22 06:18, Amos Jeffries wrote:
> I support the switch.

Great, I will start working on a PR. If anybody reading this will be 
seriously inconvenienced by future Squid v6 requiring C++17, please 
speak up!


> Caveat details below...

>> On Sun, 4 Dec 2022 at 16:18, Alex Rousskov wrote:
>> ??? * GCC v5 supports most C++17 features.
>> ??? * GCC v8 supports all relevant C++17 features.
>> ??? * Clang v5 supports nearly all C++17 features.
>> ??? * Clang v8 supports all relevant C++17 features.


> non-RHEL distros shipping Squid are almost all providing at lease GCC 
> v8. In many cases even their recently refreshed (Nov 2022) LTS have it.

> The RHEL family distros (CentOS 7 in particular, but also many others) 
> LTS versions only provide LLVM/clang v7 from the C++17 compilers.


I believe the key here is not what distros ship by default, but how 
difficult it is, for an old distro user, to get the compiler Squid 
needs. For example, AFAICT, RHEL users are supposed to use Red Hat 
Developer Toolset or GCC Toolset to get modern compilers.


> It has been a while since I had any info about the RedHat developer 
> toolset. Do you know if GCC 8+ or LLVM/clang 8+ are in there? if so, 
> then bump to v8 for both compilers and full speed ahead :-)

AFAICT[1], Red Hat Developer Toolset "delivers the latest stable GCC 
version" for RHEL7. For example, Toolset v10 has GCC v10[2].

RHEL8 has GCC Toolset with characteristics similar to Red Hat Developer 
Toolset for RHEL7. For example, GCC Toolset v10 provides GCC v10[3], 
while GCC Toolset v12 provides GCC v12[4].

[1] https://developers.redhat.com/products/developertoolset/overview

[2] 
https://access.redhat.com/documentation/en-us/red_hat_developer_toolset/10/html/user_guide/chap-red_hat_developer_toolset#sect-Red_Hat_Developer_Toolset-About

[3] 
https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/developing_c_and_cpp_applications_in_rhel_8/additional-toolsets-for-development_developing-applications#tools-and-versions-provided-by-gcc-toolset-10_gcc-toolset-10

[4] 
https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/developing_c_and_cpp_applications_in_rhel_8/additional-toolsets-for-development_developing-applications#tools-and-versions-provided-by-gcc-toolset-12_gcc-toolset-12


Thank you,

Alex.


From rousskov at measurement-factory.com  Thu Dec 15 21:30:06 2022
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Thu, 15 Dec 2022 16:30:06 -0500
Subject: [squid-dev] RFC: Reject repeated same-name annotations
Message-ID: <d4773b44-99eb-f173-b5a2-96f54bc97dc8@measurement-factory.com>

Hello,

     I propose to adjust Squid code to reject repeated same-name 
annotations from each and every source that supplies annotations:

* "note" directive
* adaptation_meta directive
* annotate_transaction ACL [1]
* annotate_client ACL [1]
* adaptation services responses (eCAP and ICAP)
* helper responses

If this RFC is approved: A configuration that contains a directive with 
repeated same-name annotations will be rejected with a fatal ERROR[2]. A 
helper or service response that contains repeated same-name annotations 
will trigger a non-fatal (to Squid or transaction) cache.log ERROR[2].


Currently, Squid treats repeated same-name annotations inconsistently. 
Depending on the annotation source, Squid processing code may

* use the first same-name annotation and ignore repetitions
* use the last same-name annotation and ignore repetitions
* use all same-name annotations, honoring repetitions

These inconsistencies make it difficult to improve/enhance/optimize 
Squid code, while Squid ignorance hides misconfigurations and 
helper/service implementation bugs, including problems that may be 
related to access controls and other sensitive matters.


Any objections or better ideas?


Thank you,

Alex.

[1] In this context, we are talking about same-name annotations 
mentioned in the corresponding ACL _configuration_ (i.e. all "acl" 
directives with a given ACL name). A repeated _computation_ of 
annotate_foo ACL will continue to deal with same-name annotations as 
documented -- a "name+=value" configuration will continue to append 
values to the existing same-name annotation, while a "name=value" 
configuration will continue to overwrite any existing same-name annotation.

[2] Repeated same-name annotations that all have identical _values_ will 
be flagged with a WARNING instead. Some overly simplistic configuration 
generators, complicated configurations build from many include files, 
and dumb helpers/services might generate repeated same-everything 
annotations. Since such repetitions can be _safely_ ignored (honoring 
just one name=value pair among all the identical ones), we do not have 
to reject the configuration or log an ERROR because of them.

From ngtech1ltd at gmail.com  Thu Dec 15 22:27:19 2022
From: ngtech1ltd at gmail.com (ngtech1ltd at gmail.com)
Date: Fri, 16 Dec 2022 00:27:19 +0200
Subject: [squid-dev] RFC: Reject repeated same-name annotations
In-Reply-To: <d4773b44-99eb-f173-b5a2-96f54bc97dc8@measurement-factory.com>
References: <d4773b44-99eb-f173-b5a2-96f54bc97dc8@measurement-factory.com>
Message-ID: <006301d910d4$65a2a790$30e7f6b0$@gmail.com>

Hey Alex,

I must admit that I didn't understand it enough to make sense on what specific scenario for example it will affect.
We have a set of sources for a "note" ie:
* "note" directive
* adaptation_meta directive
* annotate_transaction ACL [1]
* annotate_client ACL [1]
* adaptation services responses (eCAP and ICAP)
* helper responses

The only one I have used until today is the helpers and maybe once more with an ICAP service.

I couldn't make sense the 1+2 appended comments with the rejection RFC.
I assumed that what would happen is that if multiple helpers for example will use the same note or
a single response will contain multiple notes with the same key these will be appended.
The last time I have seen this I assumed it's in an array fashion ie multiple values compared to a single string.
I do not remember the subject enough but what I do remember is that there was an issue with
the comparison/check of a note ACL when two values were applied with the same name.

>From what I understood until now a single helper that will respond with multiple note_1=v note_1=v
Will trigger a fatal error and I have mixed feelings about it.
However, if multiple helpers will send both each in it's turn a note_1=v these will be appended.

I agree that the result should be predictable however if logs can help to trace the issue I believe it's predicted enough
to not say about the current situation "un-predictable".
I would say that since it's not a "sync" engine which the timing belt must not miss a "beat" or a "tooth"
It's an async engine which is far more complex.

I hope I understood the RFC and what's above it so my words will make sense of themselves.

Eliezer

----
Eliezer Croitoru
NgTech, Tech Support
Mobile: +972-5-28704261
Email: ngtech1ltd at gmail.com
Web: https://ngtech.co.il/
My-Tube: https://tube.ngtech.co.il/

-----Original Message-----
From: squid-dev <squid-dev-bounces at lists.squid-cache.org> On Behalf Of Alex Rousskov
Sent: Thursday, 15 December 2022 23:30
To: Squid Developers <squid-dev at lists.squid-cache.org>
Subject: [squid-dev] RFC: Reject repeated same-name annotations

Hello,

     I propose to adjust Squid code to reject repeated same-name 
annotations from each and every source that supplies annotations:

* "note" directive
* adaptation_meta directive
* annotate_transaction ACL [1]
* annotate_client ACL [1]
* adaptation services responses (eCAP and ICAP)
* helper responses

If this RFC is approved: A configuration that contains a directive with 
repeated same-name annotations will be rejected with a fatal ERROR[2]. A 
helper or service response that contains repeated same-name annotations 
will trigger a non-fatal (to Squid or transaction) cache.log ERROR[2].


Currently, Squid treats repeated same-name annotations inconsistently. 
Depending on the annotation source, Squid processing code may

* use the first same-name annotation and ignore repetitions
* use the last same-name annotation and ignore repetitions
* use all same-name annotations, honoring repetitions

These inconsistencies make it difficult to improve/enhance/optimize 
Squid code, while Squid ignorance hides misconfigurations and 
helper/service implementation bugs, including problems that may be 
related to access controls and other sensitive matters.


Any objections or better ideas?


Thank you,

Alex.

[1] In this context, we are talking about same-name annotations 
mentioned in the corresponding ACL _configuration_ (i.e. all "acl" 
directives with a given ACL name). A repeated _computation_ of 
annotate_foo ACL will continue to deal with same-name annotations as 
documented -- a "name+=value" configuration will continue to append 
values to the existing same-name annotation, while a "name=value" 
configuration will continue to overwrite any existing same-name annotation.

[2] Repeated same-name annotations that all have identical _values_ will 
be flagged with a WARNING instead. Some overly simplistic configuration 
generators, complicated configurations build from many include files, 
and dumb helpers/services might generate repeated same-everything 
annotations. Since such repetitions can be _safely_ ignored (honoring 
just one name=value pair among all the identical ones), we do not have 
to reject the configuration or log an ERROR because of them.
_______________________________________________
squid-dev mailing list
squid-dev at lists.squid-cache.org
http://lists.squid-cache.org/listinfo/squid-dev


From rousskov at measurement-factory.com  Thu Dec 15 23:56:06 2022
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Thu, 15 Dec 2022 18:56:06 -0500
Subject: [squid-dev] RFC: Reject repeated same-name annotations
In-Reply-To: <006301d910d4$65a2a790$30e7f6b0$@gmail.com>
References: <d4773b44-99eb-f173-b5a2-96f54bc97dc8@measurement-factory.com>
 <006301d910d4$65a2a790$30e7f6b0$@gmail.com>
Message-ID: <5489c27f-a7d2-d4aa-0b63-be091d827899@measurement-factory.com>

On 12/15/22 17:27, ngtech1ltd at gmail.com wrote:

> I must admit that I didn't understand it enough to make sense on what
> specific scenario for example it will affect.

Here is a configuration example:

   # Let's mark certain allowed transactions as green and hot:
   acl markCertain annotate_transaction color=green t=hot color=grn
   http_access allow certainSlowAclHere markAsGreen

   # And then use 10.0.0.1 for those certain transactions:
   acl markedAsGreen note color green
   tcp_outgoing_address 10.0.0.1 markedAsGreen

The above will not use 10.0.0.1 for transactions that should use that 
outgoing address because somebody accidentally overwritten the color on 
the annotate_transaction line. We are actually coloring matching 
transactions "grn" instead of "green" now, and the above 
tcp_outgoing_address rule does not match.


Such errors a more difficult to spot when the offending acl line is in a 
different configuration file than the correct acl line. They are even 
more difficult to spot when the problem is hidden in a helper response!


> I assumed that what would happen is that if ... a single response
> will contain multiple notes with the same key these will be
> appended.

No, they will not be appended. Or, to be more precise, they may not be 
appended in every case. The actual results vary depending on the 
annotation source, Squid version, etc. What happens is currently an 
undefined behavior.


> From what I understood until now a single helper that will respond
> with multiple note_1=v note_1=v Will trigger a fatal error

No, bad helper responses will not trigger fatal errors. They will 
trigger non-fatal ERROR messages.

Only misconfigurations (e.g., the above squid.conf example) will be fatal.


> However, if multiple helpers will send both each in it's turn a
> note_1=v these will be appended.

IIRC, annotations from earlier helper responses will be overwritten by 
annotations in the later ones. However, this RFC is _not_ about multiple 
responses, so let's not lose our focus, even if my recollection is 
wrong. :-)


> I agree that the result should be predictable however if logs can
> help to trace the issue I believe it's predicted enough to not say
> about the current situation "un-predictable".

Currently, ALL,1 cache.log is silent about same-name annotations in many 
cases. Debugging cache.log does not count, of course (and it would be 
rather difficult to triage these problems in a busy debugging cache.log 
anyway). As far as Squid administration is concerned, the biggest 
trouble is not in figuring out where the problem is. It is knowing that 
there is a problem (e.g., that users that should be blocked are actually 
allowed when everybody seems "happy").


Also, the value of this RFC is not just in making Squid safer. It also 
helps with enhancing Squid code, adding features. Right now, if Bob 
tries to add a feature involving annotations, Alice may shoot it down 
because the new code does not handle same-name annotations the same way 
as the code Alice happens to know about (while Bob is copying another 
piece of code that handles similar situation differently or inventing 
his own thing).


We need to fix this mess from both development and administration point 
of view.


Hope this clarifies,

Alex.


> -----Original Message-----
> From: squid-dev <squid-dev-bounces at lists.squid-cache.org> On Behalf Of Alex Rousskov
> Sent: Thursday, 15 December 2022 23:30
> To: Squid Developers <squid-dev at lists.squid-cache.org>
> Subject: [squid-dev] RFC: Reject repeated same-name annotations
> 
> Hello,
> 
>       I propose to adjust Squid code to reject repeated same-name
> annotations from each and every source that supplies annotations:
> 
> * "note" directive
> * adaptation_meta directive
> * annotate_transaction ACL [1]
> * annotate_client ACL [1]
> * adaptation services responses (eCAP and ICAP)
> * helper responses
> 
> If this RFC is approved: A configuration that contains a directive with
> repeated same-name annotations will be rejected with a fatal ERROR[2]. A
> helper or service response that contains repeated same-name annotations
> will trigger a non-fatal (to Squid or transaction) cache.log ERROR[2].
> 
> 
> Currently, Squid treats repeated same-name annotations inconsistently.
> Depending on the annotation source, Squid processing code may
> 
> * use the first same-name annotation and ignore repetitions
> * use the last same-name annotation and ignore repetitions
> * use all same-name annotations, honoring repetitions
> 
> These inconsistencies make it difficult to improve/enhance/optimize
> Squid code, while Squid ignorance hides misconfigurations and
> helper/service implementation bugs, including problems that may be
> related to access controls and other sensitive matters.
> 
> 
> Any objections or better ideas?
> 
> 
> Thank you,
> 
> Alex.
> 
> [1] In this context, we are talking about same-name annotations
> mentioned in the corresponding ACL _configuration_ (i.e. all "acl"
> directives with a given ACL name). A repeated _computation_ of
> annotate_foo ACL will continue to deal with same-name annotations as
> documented -- a "name+=value" configuration will continue to append
> values to the existing same-name annotation, while a "name=value"
> configuration will continue to overwrite any existing same-name annotation.
> 
> [2] Repeated same-name annotations that all have identical _values_ will
> be flagged with a WARNING instead. Some overly simplistic configuration
> generators, complicated configurations build from many include files,
> and dumb helpers/services might generate repeated same-everything
> annotations. Since such repetitions can be _safely_ ignored (honoring
> just one name=value pair among all the identical ones), we do not have
> to reject the configuration or log an ERROR because of them.
> _______________________________________________
> squid-dev mailing list
> squid-dev at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-dev
> 
> _______________________________________________
> squid-dev mailing list
> squid-dev at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-dev


From infantvin at yahoo.com  Fri Dec 23 21:29:42 2022
From: infantvin at yahoo.com (infant vinay)
Date: Fri, 23 Dec 2022 21:29:42 +0000 (UTC)
Subject: [squid-dev] Possible bug with file-descriptor parameter in
 configure of squid-6.0.0-20221210-r71f62e86e
References: <1426249516.2659836.1671830982733.ref@mail.yahoo.com>
Message-ID: <1426249516.2659836.1671830982733@mail.yahoo.com>


Hi
I am trying to compile squid release squid-6.0.0-20221210-r71f62e86e downloaded from here http://www.squid-cache.org/Versions/v6/squid-6.0.0-20221210-r71f62e86e.tar.bz2

I am using the same configure option I have used for at least 2+ years now which includes the ?--with-filedescriptors=4096 option in it. The options are further down below.

Until the most recent version of this release in Sep 2022 I have never seen any errors during configure
However in the Dec 2022 release, I see the following error
checking for main in -lmalloc... no
checking for library containing log... -lm
configure: error: --with-filedescriptors expects a numeric argument

Configure option used is
./configure --prefix=/opt/squid --build=x86_64-pc-linux-gnu --host=x86_64-pc-linux-gnu --enable-removal-policies=heap,lru --enable-ssl --enable--storeio=aufs,diskd,ufs,rock --enable-diskio --with-aio --with-default-user=squid --with-pthreads --disable-arch-native --disable-ipv6 --enable-xmalloc-statistics --enable-delay-pools --disable-snmp --with-filedescriptors=4096
CFLAGS and CXXFLAGS set are
-O3 -march=znver2 -pthread

I have ensured that the ulimit -n for the root user I use for compile is set to 8192 and I am not sure what else to do.
squid-6.0.0-20221210-r71f62e86e]# ulimit -n
8192

OS is Fedora Core rawhide (v38) - as I said this has worked until the previous squid version released in Sep 2022 on the same OS and same hardware.
Attaching the running version of squid info here
?squid-6.0.0-20221210-r71f62e86e]# /opt/squid/sbin/squid -v
Squid Cache: Version 6.0.0-20220905-r9358e99f9
Service Name: squid
configure options:? '--prefix=/opt/squid' '--build=x86_64-pc-linux-gnu' '--host=x86_64-pc-linux-gnu' '--enable-removal-policies=heap,lru' '--enable-ssl' '--enable--storeio=aufs,diskd,ufs,rock' '--enable-diskio' '--with-aio' '--with-default-user=squid' '--with-pthreads' '--disable-arch-native' '--disable-ipv6' '--enable-xmalloc-statistics' '--with-filedescriptors=4096' '--enable-delay-pools' '--disable-snmp' 'build_alias=x86_64-pc-linux-gnu' 'host_alias=x86_64-pc-linux-gnu' 'CFLAGS=-O3 -march=znver2 -pthread' 'CXXFLAGS=-O3 -march=znver2 -pthread' --enable-ltdl-convenience

I am not sure what else you need. Please do ask if you need. I will attach the config.log file here too if that helps you.
Thanks for verifying if this is a bug. If there is an error from my side, I am ok to be pointed out by you as to what is wrong.
- Infant V Patrick

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20221223/7839e13c/attachment-0001.htm>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: config.log
Type: text/x-log
Size: 946004 bytes
Desc: not available
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20221223/7839e13c/attachment-0001.bin>

From rousskov at measurement-factory.com  Sat Dec 24 17:03:36 2022
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Sat, 24 Dec 2022 12:03:36 -0500
Subject: [squid-dev] Possible bug with file-descriptor parameter in
 configure of squid-6.0.0-20221210-r71f62e86e
In-Reply-To: <1426249516.2659836.1671830982733@mail.yahoo.com>
References: <1426249516.2659836.1671830982733.ref@mail.yahoo.com>
 <1426249516.2659836.1671830982733@mail.yahoo.com>
Message-ID: <48d13fe2-a0f8-3efe-d718-8d1332137b4a@measurement-factory.com>

On 12/23/22 16:29, infant vinay wrote:

> I am trying to compile squid release squid-6.0.0-20221210-r71f62e86e 
> 
> I am using the same configure option I have used for at least 2+ years 
> now which includes the ?--with-filedescriptors=4096 option in it. The 
> options are further down below.
> 
> Until the most recent version of this release in Sep 2022 I have never 
> seen any errors during configure
> 
> However in the Dec 2022 release, I see the following error
> 
> checking for main in -lmalloc... no
> checking for library containing log... -lm
> *configure: error: --with-filedescriptors expects a numeric argument*

This is a Squid bug. Please see the following PR for a proposed fix:
https://github.com/squid-cache/squid/pull/1217


HTH,

Alex.


> Configure option used is
> 
> ./configure --prefix=/opt/squid --build=x86_64-pc-linux-gnu 
> --host=x86_64-pc-linux-gnu --enable-removal-policies=heap,lru 
> --enable-ssl --enable--storeio=aufs,diskd,ufs,rock --enable-diskio 
> --with-aio --with-default-user=squid --with-pthreads 
> --disable-arch-native --disable-ipv6 --enable-xmalloc-statistics 
> --enable-delay-pools --disable-snmp *--with-filedescriptors=4096*
> 
> CFLAGS and CXXFLAGS set are
> 
> -O3 -march=znver2 -pthread
> 
> 
> I have ensured that the ulimit -n for the root user I use for compile is 
> set to 8192 and I am not sure what else to do.
> 
> squid-6.0.0-20221210-r71f62e86e]# ulimit -n
> 8192
> 
> OS is Fedora Core rawhide (v38) - as I said this has worked until the 
> previous squid version released in Sep 2022 on the same OS and same 
> hardware.
> 
> Attaching the running version of squid info here
> 
>  ?squid-6.0.0-20221210-r71f62e86e]# /opt/squid/sbin/squid -v
> Squid Cache: Version 6.0.0-20220905-r9358e99f9
> Service Name: squid
> configure options:? '--prefix=/opt/squid' '--build=x86_64-pc-linux-gnu' 
> '--host=x86_64-pc-linux-gnu' '--enable-removal-policies=heap,lru' 
> '--enable-ssl' '--enable--storeio=aufs,diskd,ufs,rock' '--enable-diskio' 
> '--with-aio' '--with-default-user=squid' '--with-pthreads' 
> '--disable-arch-native' '--disable-ipv6' '--enable-xmalloc-statistics' 
> '--with-filedescriptors=4096' '--enable-delay-pools' '--disable-snmp' 
> 'build_alias=x86_64-pc-linux-gnu' 'host_alias=x86_64-pc-linux-gnu' 
> 'CFLAGS=-O3 -march=znver2 -pthread' 'CXXFLAGS=-O3 -march=znver2 
> -pthread' --enable-ltdl-convenience
> 
> 
> I am not sure what else you need. Please do ask if you need. I will 
> attach the config.log file here too if that helps you.
> 
> Thanks for verifying if this is a bug. If there is an error from my 
> side, I am ok to be pointed out by you as to what is wrong.
> 
> - Infant V Patrick
> 
> 
> 
> _______________________________________________
> squid-dev mailing list
> squid-dev at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-dev


