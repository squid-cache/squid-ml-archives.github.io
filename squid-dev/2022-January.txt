From squid3 at treenet.co.nz  Tue Jan 18 10:31:09 2022
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Tue, 18 Jan 2022 23:31:09 +1300
Subject: [squid-dev] v5.4 backports
Message-ID: <b54633e2-6a6b-4913-6b3d-8dc361fd8081@treenet.co.nz>

The following changes accepted into v6 are also eligible for v5 but have 
issues preventing me scheduling them.


This has conflicts I need some assistance resolving. So will not being 
doing the backport myself. If you are interested please open a PR 
against v5 branch for the working backport before Feb 1st.

  * Bug #5090: Must(!request->pinnedConnection()) violation (#930)
   squid-6-15bde30c33e47a72650ef17766719a5fc7abee4c


The following just need bugzilla IDs. If interested in getting a 
backport please open the bug report with useful details (ie document the 
user-visible behaviour) and then ping me.

  * Properly track (and mark) truncated store entries (#909)
    squid-6-ba3fe8d9bc8d35c4b04cecf30cfc7288c57e685c

  * Fix reconfiguration leaking tls-cert=... memory (#911)
    squid-6-b05c195415169b684b6037f306feead45ee9de4e

  * Preserve configured order of intermediate CA certificate chain (#956)
    squid-6-166fb918211b76a0e79eb07967f4d092f74ea18d


This is going to be a special case. Alex; I responded to you a few hrs 
back in the squid-users thread "squid 5.3 frequent crash" with a plan 
that I am okay with for backporting.


  * Bug #5055: FATAL FwdState::noteDestinationsEnd exception: opening (#877)
   squid-6-2b6b1bcb8650095c99a1916f5964305484af7ef0

and; Fix FATAL ServiceRep::putConnection exception: theBusyConns > 0 (#939)
   squid-6-a8ac892bab446ac11f816edec53306256bad4de7


Cheers
Amos


From rousskov at measurement-factory.com  Wed Jan 19 21:32:03 2022
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Wed, 19 Jan 2022 16:32:03 -0500
Subject: [squid-dev] RFC: Adding a new line to a regex
Message-ID: <3400b3a4-6aba-379d-4057-7e49a24fd3b2@measurement-factory.com>

Hello,

    We have a use case where a regex in squid.conf should contain/match
a new line (i.e. ASCII LF). I do not know whether there are similar use
cases with the existing squid.conf regex directives, but that is not
important because we are adding a _new_ directive that will need such
support. This email discusses the problem and proposes how to add a new
line (and other special characters) to regexes found in squid.conf and such.

Programming languages usually have standard mechanisms for adding
special characters to strings from which regexes are compiled. We all
know that "a\nb" uses LF byte in the C++ string literal. Other bytes can
be added as well: https://en.cppreference.com/w/cpp/language/escape

Unfortunately, squid.conf syntax lacks a similar general mechanism. In
most cases, it is possible to work around that limitation by entering
special symbols directly. However, that trick causes various headaches
and does not work for new lines at all because squid.conf preprocessor
and parameter parser use/strip all new lines; the code compiling the
regular expression will simply not see any.

In POSIX regex(7), the two-character \n escape sequence is referring to
the ASCII character 'n', not the new line/LF character, so entering \n
(two characters) into a squid.conf regex value will not work if one
wants to match ASCII LF.

There are many options for adding this functionality to regexes used in
_new_ squid.conf contexts (i.e. contexts aware of this enhancement).
Here is a fairly representative sample:

1a. Recognize just \n escape sequence in squid.conf regexes
   Pros: Simple.
   Cons: Converting old regexes[1] requires careful checking[2].
   Cons: Cannot detect typos in escape sequences. \r is accepted.
   Cons: Cannot address other, similar use cases (e.g., ASCII CR).

1b. Recognize all C escape sequences in squid.conf regexes
   Pros: Can detect typos -- unsupported escape sequences.
   Cons: Poor readability: Double-escaping of all for-regex backslashes!
   Cons: Converting old regexes requires non-trivial automation.


2a. Recognize %byte{n} logformat-like sequence in squid.conf regexes
   Pros: Simple.
   Cons: Converting old regexes[1] requires careful checking[3].
   Cons: Cannot detect typos in logformat-like sequences.
   Cons: Does not support other advanced use cases (e.g., %tr).

2b. Recognize %byte{n} and logformat sequences in squid.conf regexes
   Pros: Can detect typos -- unsupported logformat sequences.
   Cons: The need to escape % in regexes will surprise admins.
   Cons: Converting old regexes requires (simple) automation.


3. Use composition to combine regexes and some special strings:
   regex1 + "\n" + regex2
   or
   regex1 + %byte{10} + regex2
   Pros: Old regexes can be safely used without any conversions.
   Cons: Requires new, complex composition expressions/syntax.
   Cons: A bit difficult to read.
   Cons: Requires a lot of development.


4. Use 2b but only when regex is given to a special function:
   substitute_logformat_codes(regex)
   Pros: Old regexes can be safely used without any conversions.
   Pros: New regexes do not need to escape % (by default).
   Pros: Extendable to old regex configuration contexts.
   Pros: Extendable to non-regex configuration contexts.
   Pros: Reusing the existing parameters(...)-like call syntax.
   Cons: A bit more difficult to read than 1a or 2a.
   Cons: Duplicates "quoted string" approach in some directives[4].
   Cons: Requires arguing about the new function name :-).


Given all the pros and cons, I think we should use option 4 above.

Do you see any better options?


Thank you,

Alex.

[1] We are still talking about new configuration contexts here, but we
should still be thinking about bringing old regexes into new contexts
and, eventually, possibly even about upgrading old contexts to support
the new feature. Neither is required or urgent, but it would be nice to
eventually end up with a uniform regex approach, of course.

[2] In most cases, no old regexes will contain the \n sequence because
it means nothing to the regex compiler. A few exceptional regexes can be
edited manually. Automated conversion will be required only in some rare
cases.

[3] Essentially the same as [2] above: Old regexes are unlikely to
contain the %byte 5-character sequence (or whatever we end up calling
that special sequence -- we are polishing a PR that adds %byte support
to logformat).

[4] Several existing squid.conf directives interpret "quoted values"
specially, substituting embedded logformat %codes. Arguably, the
explicit function call mechanism is better because there is less
confusion regarding which context supports it and which does not. And we
probably should not "quote regexes" because many old regexes contain
double quotes already.

From eduard.bagdasaryan at measurement-factory.com  Thu Jan 20 18:27:25 2022
From: eduard.bagdasaryan at measurement-factory.com (Eduard Bagdasaryan)
Date: Thu, 20 Jan 2022 21:27:25 +0300
Subject: [squid-dev] RFC: Adding a new line to a regex
In-Reply-To: <3400b3a4-6aba-379d-4057-7e49a24fd3b2@measurement-factory.com>
References: <3400b3a4-6aba-379d-4057-7e49a24fd3b2@measurement-factory.com>
Message-ID: <5b0b56e3-0265-e72c-12e9-27b6e58e4945@measurement-factory.com>

I would concur with Alex that (4) is preferable: It does not break old 
configurations, re-uses existing mechanisms and allows to apply it only 
when/where required. I have one more option for your consideration: 
escaping with a backtick (e.g., `n) instead of a backslash. This 
approach is used, e.g., in PowerShell.

5a. Recognize just `n escape sequence in squid.conf regexes.

5b. Recognize all '`'-based escape sequences in squid.conf regexes.

Pros:? Easier upgrade: backtick is rare in regular expressions (compared 
to '%' or '/'), probably there is no need to convert old regexes at all.
Pros:? Simplicity: no double-escaping is required (as in (1b)).
Cons: Though it should be straightforward to specify common escape 
sequences, such as `n, `r or `t, we still need to devise a way of 
providing arbitrary character (i.e., its code) in this way.


HTH,

Eduard.


On 20.01.2022 00:32, Alex Rousskov wrote:
> Here is a fairly representative sample:
>
> 1a. Recognize just \n escape sequence in squid.conf regexes
>     Pros: Simple.
>     Cons: Converting old regexes[1] requires careful checking[2].
>     Cons: Cannot detect typos in escape sequences. \r is accepted.
>     Cons: Cannot address other, similar use cases (e.g., ASCII CR).
>
> 1b. Recognize all C escape sequences in squid.conf regexes
>     Pros: Can detect typos -- unsupported escape sequences.
>     Cons: Poor readability: Double-escaping of all for-regex backslashes!
>     Cons: Converting old regexes requires non-trivial automation.
>
>
> 2a. Recognize %byte{n} logformat-like sequence in squid.conf regexes
>     Pros: Simple.
>     Cons: Converting old regexes[1] requires careful checking[3].
>     Cons: Cannot detect typos in logformat-like sequences.
>     Cons: Does not support other advanced use cases (e.g., %tr).
>
> 2b. Recognize %byte{n} and logformat sequences in squid.conf regexes
>     Pros: Can detect typos -- unsupported logformat sequences.
>     Cons: The need to escape % in regexes will surprise admins.
>     Cons: Converting old regexes requires (simple) automation.
>
>
> 3. Use composition to combine regexes and some special strings:
>     regex1 + "\n" + regex2
>     or
>     regex1 + %byte{10} + regex2
>     Pros: Old regexes can be safely used without any conversions.
>     Cons: Requires new, complex composition expressions/syntax.
>     Cons: A bit difficult to read.
>     Cons: Requires a lot of development.
>
>
> 4. Use 2b but only when regex is given to a special function:
>     substitute_logformat_codes(regex)
>     Pros: Old regexes can be safely used without any conversions.
>     Pros: New regexes do not need to escape % (by default).
>     Pros: Extendable to old regex configuration contexts.
>     Pros: Extendable to non-regex configuration contexts.
>     Pros: Reusing the existing parameters(...)-like call syntax.
>     Cons: A bit more difficult to read than 1a or 2a.
>     Cons: Duplicates "quoted string" approach in some directives[4].
>     Cons: Requires arguing about the new function name:-).
>
>
> Given all the pros and cons, I think we should use option 4 above.
>
> Do you see any better options?

From rousskov at measurement-factory.com  Thu Jan 20 19:20:44 2022
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Thu, 20 Jan 2022 14:20:44 -0500
Subject: [squid-dev] v5.4 backports
In-Reply-To: <b54633e2-6a6b-4913-6b3d-8dc361fd8081@treenet.co.nz>
References: <b54633e2-6a6b-4913-6b3d-8dc361fd8081@treenet.co.nz>
Message-ID: <ec195e42-1548-870b-8bac-6d32c0212167@measurement-factory.com>

On 1/18/22 5:31 AM, Amos Jeffries wrote:
> The following changes accepted into v6 are also eligible for v5 but have
> issues preventing me scheduling them.
> 
> 
> This has conflicts I need some assistance resolving. So will not being
> doing the backport myself. If you are interested please open a PR
> against v5 branch for the working backport before Feb 1st.
> 
> ?* Bug #5090: Must(!request->pinnedConnection()) violation (#930)
> ? squid-6-15bde30c33e47a72650ef17766719a5fc7abee4c

The above fix relies on a Bug #5055 fix (i.e. master/v6 commit 2b6b1bc
mentioned below as a special case).


> The following just need bugzilla IDs. If interested in getting a
> backport please open the bug report with useful details (ie document the
> user-visible behaviour) and then ping me.
> 
> ?* Properly track (and mark) truncated store entries (#909)
> ?? squid-6-ba3fe8d9bc8d35c4b04cecf30cfc7288c57e685c

https://bugs.squid-cache.org/show_bug.cgi?id=5187

> ?* Fix reconfiguration leaking tls-cert=... memory (#911)
> ?? squid-6-b05c195415169b684b6037f306feead45ee9de4e

https://bugs.squid-cache.org/show_bug.cgi?id=5188


> ?* Preserve configured order of intermediate CA certificate chain (#956)
> ?? squid-6-166fb918211b76a0e79eb07967f4d092f74ea18d

https://bugs.squid-cache.org/show_bug.cgi?id=5190

Please do not misinterpret the creation of the above bug reports as an
implicit support for the idea of spending time on creating such bug
reports. I think our time is best spent elsewhere.



> ?* Bug #5055: FATAL FwdState::noteDestinationsEnd exception: opening (#877)
> ? squid-6-2b6b1bcb8650095c99a1916f5964305484af7ef0

Waiting for a base commit SHA from you.


> and; Fix FATAL ServiceRep::putConnection exception: theBusyConns > 0 (#939)
> ? squid-6-a8ac892bab446ac11f816edec53306256bad4de7

This fixes a bug in the Bug #5055 fix AFAICT, so waiting on the
master/v6 commit 2b6b1bc backport (i.e. the previous bullet).


HTH,

Alex.

From squid3 at treenet.co.nz  Fri Jan 21 17:16:49 2022
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Sat, 22 Jan 2022 06:16:49 +1300
Subject: [squid-dev] RFC: Adding a new line to a regex
In-Reply-To: <5b0b56e3-0265-e72c-12e9-27b6e58e4945@measurement-factory.com>
References: <3400b3a4-6aba-379d-4057-7e49a24fd3b2@measurement-factory.com>
 <5b0b56e3-0265-e72c-12e9-27b6e58e4945@measurement-factory.com>
Message-ID: <227948a9-e6b7-6652-855d-9717d9471f7f@treenet.co.nz>

On 21/01/22 07:27, Eduard Bagdasaryan wrote:
> I would concur with Alex that (4) is preferable: It does not break old 
> configurations, re-uses existing mechanisms and allows to apply it only 
> when/where required. I have one more option for your consideration: 
> escaping with a backtick (e.g., `n) instead of a backslash. This 
> approach is used, e.g., in PowerShell.
> 
> 5a. Recognize just `n escape sequence in squid.conf regexes.
> 
> 5b. Recognize all '`'-based escape sequences in squid.conf regexes.
> 
> Pros:? Easier upgrade: backtick is rare in regular expressions (compared 
> to '%' or '/'), probably there is no need to convert old regexes at all.
> Pros:? Simplicity: no double-escaping is required (as in (1b)).
> Cons: Though it should be straightforward to specify common escape 
> sequences, such as `n, `r or `t, we still need to devise a way of 
> providing arbitrary character (i.e., its code) in this way.
> 

You are mixing up different features offered by several of the *many* 
different languages people call "regex".

Squid regex patterns are written in GNU Regular Expression language. 
None of those commonly expected things are features in that ancient 
language.


Amos

From squid3 at treenet.co.nz  Fri Jan 21 17:42:08 2022
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Sat, 22 Jan 2022 06:42:08 +1300
Subject: [squid-dev] RFC: Adding a new line to a regex
In-Reply-To: <3400b3a4-6aba-379d-4057-7e49a24fd3b2@measurement-factory.com>
References: <3400b3a4-6aba-379d-4057-7e49a24fd3b2@measurement-factory.com>
Message-ID: <8fc0225b-faa5-0116-f2a8-7c400eceae6e@treenet.co.nz>

On 20/01/22 10:32, Alex Rousskov wrote:
> Hello,
> 
>      We have a use case where a regex in squid.conf should contain/match
> a new line (i.e. ASCII LF). I do not know whether there are similar use
> cases with the existing squid.conf regex directives, but that is not
> important because we are adding a _new_ directive that will need such
> support. This email discusses the problem and proposes how to add a new
> line (and other special characters) to regexes found in squid.conf and such.


With the current mix of squid.conf parsers this RFC seems irrelevant to me.

The developer designing a new directive also writes the parse_*() 
function that processes the config file line. All they have to do is 
avoid using the parser functions which implicitly do the problematic 
behaviour.
  The fact that there is logic imposing this problem at all is a bug to 
be resolved. But that is something for a different RFC.


> 
> Programming languages usually have standard mechanisms for adding
> special characters to strings from which regexes are compiled. We all
> know that "a\nb" uses LF byte in the C++ string literal. Other bytes can
> be added as well: https://en.cppreference.com/w/cpp/language/escape
> 

There was a plan from 2014 (re-attempted by Christos 2016) to migrate 
Squid from the GNURegex dependency to more flexible C++11 regex library 
which supports many regex languages. With that plan the UI would only 
need an option flag or pattern prefix to specify which language a 
pattern uses.

That plan was put on hold due to feature-incomplete GCC 4.8 versions 
being distributed by CentOS 7 and RHEL needing to build Squid.

One Core Developer (you Alex) has repeatedly expressed a strong opinion 
veto'ing the addition/removal of features to Squid-6 while they are 
still officially supported by a small set of "officially supported" 
Vendors. RHEL and CentOS being in that set.


When combined, those two design limitations mean the C++11 regex library 
cannot be implemented in a Squid released prior to June 2024.



IMO that plan is still a good one for long-term. However you design your 
new directive UI please make it compatible with that.


> Unfortunately, squid.conf syntax lacks a similar general mechanism.

This is not a property of squid.conf design choices. It is an artifact 
of the GNURegex language.

Until Squid gets a major upgrade to support other regex languages. We 
are stuck with these pattern limitations.

  In
> most cases, it is possible to work around that limitation by entering
> special symbols directly. However, that trick causes various headaches
> and does not work for new lines at all because squid.conf preprocessor
> and parameter parser use/strip all new lines; the code compiling the
> regular expression will simply not see any.
> 
> In POSIX regex(7), the two-character \n escape sequence is referring to
> the ASCII character 'n', not the new line/LF character, so entering \n
> (two characters) into a squid.conf regex value will not work if one
> wants to match ASCII LF.
> 
> There are many options for adding this functionality to regexes used in
> _new_ squid.conf contexts (i.e. contexts aware of this enhancement).
> Here is a fairly representative sample:
> 
> 1a. Recognize just \n escape sequence in squid.conf regexes
>     Pros: Simple.
>     Cons: Converting old regexes[1] requires careful checking[2].
>     Cons: Cannot detect typos in escape sequences. \r is accepted.
>     Cons: Cannot address other, similar use cases (e.g., ASCII CR).
> 
> 1b. Recognize all C escape sequences in squid.conf regexes
>     Pros: Can detect typos -- unsupported escape sequences.
>     Cons: Poor readability: Double-escaping of all for-regex backslashes!
>     Cons: Converting old regexes requires non-trivial automation.
> 

As you mention these \-escape is a feature of POSIX Regular Expression 
language.

Taking this step we will no longer to honestly say that Squid is only 
supporting GNU "regex" patterns. Open the floodgate and you will find a 
mountain of admin wanting the other POSIX features for one reason or 
another.

We would be better accepting the long-ago planned migration to C++11 
regex than taking more half-measures like implementing \-escape patterns 
ourselves.


> 
> 2a. Recognize %byte{n} logformat-like sequence in squid.conf regexes
>     Pros: Simple.
>     Cons: Converting old regexes[1] requires careful checking[3].
>     Cons: Cannot detect typos in logformat-like sequences.
>     Cons: Does not support other advanced use cases (e.g., %tr).
> 
> 2b. Recognize %byte{n} and logformat sequences in squid.conf regexes
>     Pros: Can detect typos -- unsupported logformat sequences.
>     Cons: The need to escape % in regexes will surprise admins.
>     Cons: Converting old regexes requires (simple) automation.
> 
> 
> 3. Use composition to combine regexes and some special strings:
>     regex1 + "\n" + regex2
>     or
>     regex1 + %byte{10} + regex2
>     Pros: Old regexes can be safely used without any conversions.
>     Cons: Requires new, complex composition expressions/syntax.
>     Cons: A bit difficult to read.
>     Cons: Requires a lot of development.
> 

Please no. There are enough regex languages confusing people. Lets not 
be responsible for creating yet another.

That is my clear "no" vote on all (2) and (3) idea variants.

> 
> 4. Use 2b but only when regex is given to a special function:
>     substitute_logformat_codes(regex)
>     Pros: Old regexes can be safely used without any conversions.
>     Pros: New regexes do not need to escape % (by default).
>     Pros: Extendable to old regex configuration contexts.
>     Pros: Extendable to non-regex configuration contexts.
>     Pros: Reusing the existing parameters(...)-like call syntax.
>     Cons: A bit more difficult to read than 1a or 2a.
>     Cons: Duplicates "quoted string" approach in some directives[4].
>     Cons: Requires arguing about the new function name :-).
> 

Or (5) Alex puts aside his objection blocking the plan to convert Squid 
to C++11 regex library.


Cheers
Amos

From rousskov at measurement-factory.com  Fri Jan 21 18:10:31 2022
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Fri, 21 Jan 2022 13:10:31 -0500
Subject: [squid-dev] RFC: Adding a new line to a regex
In-Reply-To: <227948a9-e6b7-6652-855d-9717d9471f7f@treenet.co.nz>
References: <3400b3a4-6aba-379d-4057-7e49a24fd3b2@measurement-factory.com>
 <5b0b56e3-0265-e72c-12e9-27b6e58e4945@measurement-factory.com>
 <227948a9-e6b7-6652-855d-9717d9471f7f@treenet.co.nz>
Message-ID: <3720978f-b3dd-8583-01bf-aa20cf3a5823@measurement-factory.com>

On 1/21/22 12:16 PM, Amos Jeffries wrote:
> On 21/01/22 07:27, Eduard Bagdasaryan wrote:
>> I would concur with Alex that (4) is preferable: It does not break old
>> configurations, re-uses existing mechanisms and allows to apply it
>> only when/where required. I have one more option for your
>> consideration: escaping with a backtick (e.g., `n) instead of a
>> backslash. This approach is used, e.g., in PowerShell.
>>
>> 5a. Recognize just `n escape sequence in squid.conf regexes.
>>
>> 5b. Recognize all '`'-based escape sequences in squid.conf regexes.
>>
>> Pros:? Easier upgrade: backtick is rare in regular expressions
>> (compared to '%' or '/'), probably there is no need to convert old
>> regexes at all.
>> Pros:? Simplicity: no double-escaping is required (as in (1b)).
>> Cons: Though it should be straightforward to specify common escape
>> sequences, such as `n, `r or `t, we still need to devise a way of
>> providing arbitrary character (i.e., its code) in this way.


> You are mixing up different features offered by several of the *many*
> different languages people call "regex".

Yes, to solve the problem, we should be (and are) considering both
applicable features from other languages/libraries and our own/bespoke
suggestions.


> Squid regex patterns are written in GNU Regular Expression language.
> None of those commonly expected things are features in that ancient
> language.

We cannot modify POSIX regex syntax, and we are not trying to do that.
We can modify how regexes are configured in squid.conf. We need a
solution that works with the existing POSIX regex syntax or on top of
it. Various solutions have been posted and analyzed.

If you want to help, please correct significant analysis mistakes (if
any) and/or add new option(s) to the list, for similar consideration.


Thank you,

Alex.

From rousskov at measurement-factory.com  Fri Jan 21 19:36:08 2022
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Fri, 21 Jan 2022 14:36:08 -0500
Subject: [squid-dev] RFC: Adding a new line to a regex
In-Reply-To: <8fc0225b-faa5-0116-f2a8-7c400eceae6e@treenet.co.nz>
References: <3400b3a4-6aba-379d-4057-7e49a24fd3b2@measurement-factory.com>
 <8fc0225b-faa5-0116-f2a8-7c400eceae6e@treenet.co.nz>
Message-ID: <fb294c3e-3c25-8e77-5900-1030453b7fec@measurement-factory.com>

TLDR: I am adding solution #6 into the mix based on Amos email (#5 was
taken by Eduard). Amos needs to clarify why he thinks that Squid master
branch cannot accept STL-based regexes "now". After that, we can decide
whether #6 remains a viable candidate. Details below.


On 1/21/22 12:42 PM, Amos Jeffries wrote:
> On 20/01/22 10:32, Alex Rousskov wrote:
>> We have a use case where a regex in squid.conf should contain/match
>> a new line [...] This email discusses the problem and proposes how
>> to add a new line (and other special characters) to regexes found
>> in squid.conf and such.


> With the current mix of squid.conf parsers this RFC seems irrelevant to me.

I do not understand the relationship between "the current mix of
squid.conf parsers" and this RFC relevance. This RFC is relevant because
it is about a practical solution to a real problem facing real Squid admins.

Whether Squid has one parser or ten, good ones or bad ones, is relevant
to how the solution is implemented/integrated with Squid, of course, but
that is already a part of the analysis on this thread.


> The developer designing a new directive also writes the parse_*()
> function that processes the config file line. All they have to do is
> avoid using the parser functions which implicitly do the problematic
> behaviour.

Concerns regarding the overall quality of Squid configuration syntax and
upgrade paths expand the reach of this problem far beyond a single new
directive, but let's assume, for the sake of the argument, that all we
care about is a new parsing function. Now we need to decide what syntax
that parsing function will use. This RFC is about that decision.


> The fact that there is logic imposing this problem at all is a bug to
> be resolved. But that is something for a different RFC.

FWIW, I do not know which logic/bug you are talking about here.


> There was a plan from 2014 (re-attempted by Christos 2016) to migrate
> Squid from the GNURegex dependency to more flexible C++11 regex library
> which supports many regex languages. With that plan the UI would only
> need an option flag or pattern prefix to specify which language a
> pattern uses.

I agree that one of the solutions worth considering is to use a regex
library that supports different regex syntax. So here is the
corresponding entry for solution based on C++ STL regex:

6. Use STL regex features that support \n and similar escape sequences
Pros: Supports much more than just advanced escape sequences!
Pros: The new syntax is easy to document by referencing library docs.
Cons: Requires serious changes to the internal regex support in Squid.
Cons: Miserable STL regex performance in some environments[1,2]?
Cons: Converting old regexes requires (complex) automation.
Cons: Requires dropping GCC v4.8 support.
Cons: Amos thinks Squid cannot support STL regex until 2024.

[1] See, for example, the following Reddit thread, ignoring comments
about GCC v4.8 and similar noise. The table in the second link is
representative of these performance concerns and there are similar
instability claims:
https://www.reddit.com/r/cpp/comments/e16s1m/what_is_wrong_with_stdregex
https://www.reddit.com/r/cpp/comments/e16s1m/what_is_wrong_with_stdregex/f94g2ny/

[2] STL does not allow us to define a custom allocator for its regexes.
Various STL implementations have various hidden workarounds, but we will
be at their (varying) mercy.



> That plan was put on hold due to feature-incomplete GCC 4.8 versions
> being distributed by CentOS 7 and RHEL needing to build Squid.

... and serious/substantiated performance concerns[1]. They may have
been addressed by STL implementations since then, but my quick check and
the impossibility of solving [2] without breaking ABI suggest that at
least some of these issues still remain.


> One Core Developer (you Alex) has repeatedly expressed a strong opinion
> veto'ing the addition/removal of features to Squid-6 while they are
> still officially supported by a small set of "officially supported"
> Vendors. RHEL and CentOS being in that set.

Sorry, I have no idea what you are talking about.

> When combined, those two design limitations mean the C++11 regex library
> cannot be implemented in a Squid released prior to June 2024.

Until you clarify what relevant addition/removals I have repeatedly
vetoed in this context, I cannot validate this assertion. Given how many
times you have completely misrepresented and misinterpreted my
statements (usually without providing usable references to them), it is
likely that this is just one of those pointless time wasting attacks.
Please stop doing that.


>> Unfortunately, squid.conf syntax lacks a similar general mechanism.

> This is not a property of squid.conf design choices. It is an artifact
> of the GNURegex language.

It is the other way around. C/C++ programs can supply LF characters to
GNURegex library. Squid configuration files cannot. The library is the
same -- it _does_ support LF characters in regexes (AFAIK). But the
library cannot consume the regex from the program or configuration file
directly -- the library needs Squid, compiler, or equivalent parser to
give it the regex. If that parser/supplier does not support adding new
lines, the regex library cannot receive them. That is exactly what
happens in Squid case. We screwed up. Very, very long time ago.


> Until Squid gets a major upgrade to support other regex languages. We
> are stuck with these pattern limitations.

Obviously, we are not -- solutions 1-5 all allow inclusion of LF
characters into GNURegex patterns.


Thank you,

Alex.

From squid3 at treenet.co.nz  Sat Jan 22 01:59:34 2022
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Sat, 22 Jan 2022 14:59:34 +1300
Subject: [squid-dev] RFC: Adding a new line to a regex
In-Reply-To: <fb294c3e-3c25-8e77-5900-1030453b7fec@measurement-factory.com>
References: <3400b3a4-6aba-379d-4057-7e49a24fd3b2@measurement-factory.com>
 <8fc0225b-faa5-0116-f2a8-7c400eceae6e@treenet.co.nz>
 <fb294c3e-3c25-8e77-5900-1030453b7fec@measurement-factory.com>
Message-ID: <84eb237e-2b30-dd62-0b52-d931feb3d24c@treenet.co.nz>

On 22/01/22 08:36, Alex Rousskov wrote:
> TLDR: I am adding solution #6 into the mix based on Amos email (#5 was
> taken by Eduard). Amos needs to clarify why he thinks that Squid master
> branch cannot accept STL-based regexes "now". After that, we can decide
> whether #6 remains a viable candidate. Details below.
> 
> 
> On 1/21/22 12:42 PM, Amos Jeffries wrote:
>> On 20/01/22 10:32, Alex Rousskov wrote:
>>> We have a use case where a regex in squid.conf should contain/match
>>> a new line [...] This email discusses the problem and proposes how
>>> to add a new line (and other special characters) to regexes found
>>> in squid.conf and such.
> 
> 
>> With the current mix of squid.conf parsers this RFC seems irrelevant to me.
> 
> I do not understand the relationship between "the current mix of
> squid.conf parsers" and this RFC relevance. This RFC is relevant because
> it is about a practical solution to a real problem facing real Squid admins.
> 

Sentence #2 of the RFC explicitly states that admin needs are not 
relevant "I do not know whether there are similar use
cases with the existing squid.conf regex directives"

The same sentence delimits RFC scope as: "adding a _new_ directive that 
will need such support."

That means the syntax defining how the regex pattern is configured does 
not yet exist. It is not necessary for the developer to design their 
_new_ UI syntax in a way that exposes admin to this problem in the first 
place. Simply design the



> Whether Squid has one parser or ten, good ones or bad ones, is relevant
> to how the solution is implemented/integrated with Squid, of course, but
> that is already a part of the analysis on this thread.
> 

Very relevant. RFC cites "squid.conf preprocessor and parameter parser 
use/strip all new lines" as a problem.

I point out that this behaviour depends on *which* config parser is 
chosen to be used by the (again _new_) directive. It should be an 
implementation detail for the dev, not design consideration for this RFC.


> 
>> The developer designing a new directive also writes the parse_*()
>> function that processes the config file line. All they have to do is
>> avoid using the parser functions which implicitly do the problematic
>> behaviour.
> 
> Concerns regarding the overall quality of Squid configuration syntax and
> upgrade paths expand the reach of this problem far beyond a single new
> directive, but let's assume, for the sake of the argument, that all we
> care about is a new parsing function. Now we need to decide what syntax
> that parsing function will use. This RFC is about that decision.
> 

Nod.

I must state that I do not see much in the say of squid.conf syntax 
discussion in the RFC text. It seems to focus a lot on syntax inside the 
regex pattern.

IMO regex is such a complicated situation that we should avoid having 
special things inside or on top of its syntax. That is a recipe for 
admin pain.


...
>> There was a plan from 2014 (re-attempted by Christos 2016) to migrate
>> Squid from the GNURegex dependency to more flexible C++11 regex library
>> which supports many regex languages. With that plan the UI would only
>> need an option flag or pattern prefix to specify which language a
>> pattern uses.
> 
> I agree that one of the solutions worth considering is to use a regex
> library that supports different regex syntax. So here is the
> corresponding entry for solution based on C++ STL regex:
> 
> 6. Use STL regex features that support \n and similar escape sequences
> Pros: Supports much more than just advanced escape sequences!
> Pros: The new syntax is easy to document by referencing library docs.

Pro: we do not have to write any part of pattern matching ourselves. 
Simpler config parser.

Pro: we do not have to maintain custom code supporting special 
behaviours in regex pattern configuration.

Pro: we do not have to provide additional user support for non-standard 
squid.conf patterns.

Pro: we do not have to waste brain cycles designing how to integrate 
syntax into regex patterns cleanly.


> Cons: Requires serious changes to the internal regex support in Squid.

IIRC, the changes are not as serious as it may seem. The largest part is 
squid.conf parser alteration to accept the proposals flag/prefix and 
patterns cleanly. Beyond that is just a switch of container which is 
easy (not trivial, just easy).


> Cons: Miserable STL regex performance in some environments[1,2]?

IMO this is balanced by Squid existing regex being well known to have 
similar performance issues.


> Cons: Converting old regexes requires (complex) automation.

Disagree this is problem.

GNU regex is predecessor syntax behind all modern regex variants. We can 
retain GNUregex as the default pattern and require language flag/prefix 
for patterns needing modern features.


> Cons: Requires dropping GCC v4.8 support.
> Cons: Amos thinks Squid cannot support STL regex until 2024.

I am honoured that you consider my opinion to be of such importance.

But, seriously, the technical part of my earlier statement is already 
covered by the GCC 4.8 line.


> [2] STL does not allow us to define a custom allocator for its regexes.
> Various STL implementations have various hidden workarounds, but we will
> be at their (varying) mercy.
> 

That is an interesting point. And probably should be a Con in its own right.


> 
>> That plan was put on hold due to feature-incomplete GCC 4.8 versions
>> being distributed by CentOS 7 and RHEL needing to build Squid.
> 
> ... and serious/substantiated performance concerns[1]. They may have
> been addressed by STL implementations since then, but my quick check and
> the impossibility of solving [2] without breaking ABI suggest that at
> least some of these issues still remain.
> 
> 
>> One Core Developer (you Alex) has repeatedly expressed a strong opinion
>> veto'ing the addition/removal of features to Squid-6 while they are
>> still officially supported by a small set of "officially supported"
>> Vendors. RHEL and CentOS being in that set.
> 
> Sorry, I have no idea what you are talking about.
> 

Your latest voicing of it was in 
<http://lists.squid-cache.org/pipermail/squid-dev/2021-December/009743.html>

 > "
 > Any
 > known Squid regression affecting the "main" environment should block the
 > PR introducing that regression IMO. I see no need to limit this to
 > "build and unit tests" regressions
 > "

The definition of "main" under discussion in that thread never reached 
consensus to change away from the existing OS represented by the Jenkins 
5-pr-test nodes. So (for now) it still includes LTS versions of RHEL / 
CentOS 7 shipping the broken GCC 4.8.x std::regex.



Amos

From rousskov at measurement-factory.com  Sat Jan 22 04:17:02 2022
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Fri, 21 Jan 2022 23:17:02 -0500
Subject: [squid-dev] RFC: Adding a new line to a regex
In-Reply-To: <84eb237e-2b30-dd62-0b52-d931feb3d24c@treenet.co.nz>
References: <3400b3a4-6aba-379d-4057-7e49a24fd3b2@measurement-factory.com>
 <8fc0225b-faa5-0116-f2a8-7c400eceae6e@treenet.co.nz>
 <fb294c3e-3c25-8e77-5900-1030453b7fec@measurement-factory.com>
 <84eb237e-2b30-dd62-0b52-d931feb3d24c@treenet.co.nz>
Message-ID: <6dc0b76a-3843-579b-2d7c-dc39db0bf8cd@measurement-factory.com>

TLDR: Solutions #4 (substitute_logformat_codes) and #6 (STL regex) are
still leading. The next key question is: Do we want this feature to be
the last drop that brings STL regex support to Squid? If yes, #6 wins
IMO. Two followup questions at the end of the email, below details...


On 1/21/22 8:59 PM, Amos Jeffries wrote:
> On 22/01/22 08:36, Alex Rousskov wrote:
>> TLDR: I am adding solution #6 into the mix based on Amos email (#5 was
>> taken by Eduard). Amos needs to clarify why he thinks that Squid master
>> branch cannot accept STL-based regexes "now". After that, we can decide
>> whether #6 remains a viable candidate. Details below.
>>
>>
>> On 1/21/22 12:42 PM, Amos Jeffries wrote:
>>> On 20/01/22 10:32, Alex Rousskov wrote:
>>>> We have a use case where a regex in squid.conf should contain/match
>>>> a new line [...] This email discusses the problem and proposes how
>>>> to add a new line (and other special characters) to regexes found
>>>> in squid.conf and such.
>>
>>
>>> With the current mix of squid.conf parsers this RFC seems irrelevant
>>> to me.
>>
>> I do not understand the relationship between "the current mix of
>> squid.conf parsers" and this RFC relevance. This RFC is relevant because
>> it is about a practical solution to a real problem facing real Squid
>> admins.
>>
> 
> Sentence #2 of the RFC explicitly states that admin needs are not
> relevant "I do not know whether there are similar use
> cases with the existing squid.conf regex directives"

There is no connection between that sentence and admin needs:

* Admin needs are not limited to the existing squid.conf regex directives.

* It is possible that similar needs do exist for the existing squid.conf
regex directives. I just do not know it. This existence is not required
for the RFC to be relevant (because of the first bullet).


> The same sentence delimits RFC scope as: "adding a _new_ directive that
> will need such support."

Correct.


> That means the syntax defining how the regex pattern is configured does
> not yet exist. It is not necessary for the developer to design their
> _new_ UI syntax in a way that exposes admin to this problem in the first
> place. Simply design the

The above paragraph was cut short, but I agree with its beginning: It is
not necessary. In fact, I would say that hitting the problem we are
trying to solve would be a very bad idea! However, our definition of
"way that exposes" may differ.


>> Whether Squid has one parser or ten, good ones or bad ones, is relevant
>> to how the solution is implemented/integrated with Squid, of course, but
>> that is already a part of the analysis on this thread.

> Very relevant.

Glad we agree.


> RFC cites "squid.conf preprocessor and parameter parser
> use/strip all new lines" as a problem.
>
> I point out that this behaviour depends on *which* config parser is
> chosen to be used by the (again _new_) directive. It should be an
> implementation detail for the dev, not design consideration for this RFC.

The behavior I described is rooted in the _preprocessor_ behavior, so
one cannot work around it by inventing a new directive parser. By the
time we get to the directive parser, it is already too late -- the new
lines are already stripped.

Finally, even if we modify the preprocessor to preserve new lines in
some special cases, preserving real new lines is actually not a good
solution at all! That solution results in very awkward-looking
configuration statements. The code would not care, of course, but humans
writing those statements will. All of the proposed solutions are better IMO.


> I must state that I do not see much in the say of squid.conf syntax
> discussion in the RFC text. It seems to focus a lot on syntax inside the
> regex pattern.

... which is obviously a part of the encompassing squid.conf syntax, but
it does not really matter -- if you prefer to think of this RFC as
discussing regex pattern syntax, you can do that and still make correct
decisions AFAICT.


> IMO regex is such a complicated situation that we should avoid having
> special things inside or on top of its syntax. That is a recipe for
> admin pain.

I agree, we should, but we also should solve the problem this RFC is
addressing. The problem obviously has acceptable solutions. There is no
reason to say "regex are too complicated" and walk away. We can make
things better here by finding the best solution we can find.


>> 6. Use STL regex features that support \n and similar escape sequences
>> Pros: Supports much more than just advanced escape sequences!
>> Pros: The new syntax is easy to document by referencing library docs.
> 
> Pro: we do not have to write any part of pattern matching ourselves.
> Simpler config parser.
> 
> Pro: we do not have to maintain custom code supporting special
> behaviours in regex pattern configuration.
> 
> Pro: we do not have to provide additional user support for non-standard
> squid.conf patterns.
> 
> Pro: we do not have to waste brain cycles designing how to integrate
> syntax into regex patterns cleanly.

Some of the new Pros above are serious exaggerations, but I do not think
we need to fight over these details at this point.


>> Cons: Requires serious changes to the internal regex support in Squid.

> IIRC, the changes are not as serious as it may seem. The largest part is
> squid.conf parser alteration to accept the proposals flag/prefix and
> patterns cleanly. Beyond that is just a switch of container which is
> easy (not trivial, just easy).

Given the poor state of some underlying C++ classes, and the code using
them, it will not be easy to do this correctly IMO. I have seen easier
changes take a lot of iterations to get right and to merge, for many
reasons that are still here.

However, I do not think we have to argue about the exact difficulty
level of this task for now. You say "easy". I say "serious". I doubt
this vague difference in our estimates will decide which solution is the
best. If it will, we can come back to this item.


>> Cons: Miserable STL regex performance in some environments[1,2]?
> 
> IMO this is balanced by Squid existing regex being well known to have
> similar performance issues.

We can always make things much worse by adding STL regex library-induced
delays to the existing Squid delays. AFAICT, many folks believe that the
GNU regex library we are using is much faster than some popular STL
library implementations. Whether most of that difference is in memory
allocations and whether most of those memory allocations are equally bad
for existing GNU regex code in Squid is currently unknown.

I suspect we will not know for sure until we implement at least some
rudimentary form of STL regex support so that we can do a meaningful
test (for a given STL implementation).


>> Cons: Converting old regexes requires (complex) automation.
> 
> Disagree this is problem.
> 
> GNU regex is predecessor syntax behind all modern regex variants. We can
> retain GNUregex as the default pattern and require language flag/prefix
> for patterns needing modern features.

We can, but this is not what this Cons item is talking about. This
specific Cons item is talking about the cost of a decision by an admin
and/or (eventually) the Squid Project to switch to _one_ (new) regex
style everywhere. At that point, complex conversion will be required.

You may believe that that moment will never come. I am not so sure
because there is obviously value in using (new) regexes and using one
regex style everywhere. I do not think we need to agree on this.


>> Cons: Requires dropping GCC v4.8 support.
>> Cons: Amos thinks Squid cannot support STL regex until 2024.
> 
> the technical part of my earlier statement is already
> covered by the GCC 4.8 line.

Since I did not know what your assertions regard 2024 are based on, I
could not safely merge the two entries. If this is just about GCC v4.8,
I will disregard the second one.


>> [2] STL does not allow us to define a custom allocator for its regexes.
>> Various STL implementations have various hidden workarounds, but we will
>> be at their (varying) mercy.

> probably should be a Con in its own right.

Sure, let's treat it as such.



>>> One Core Developer (you Alex) has repeatedly expressed a strong opinion
>>> veto'ing the addition/removal of features to Squid-6 while they are
>>> still officially supported by a small set of "officially supported"
>>> Vendors. RHEL and CentOS being in that set.

>> Sorry, I have no idea what you are talking about.

> Your latest voicing of it was in
> http://lists.squid-cache.org/pipermail/squid-dev/2021-December/009743.html

Nothing in that email precludes stopping GCC v4.8 support in master.


>> "
>> Any
>> known Squid regression affecting the "main" environment should block the
>> PR introducing that regression IMO.
>> "

I still believe the above assertion is correct, but it is irrelevant
here. Regression tests do not drive what Project changes are possible.
*We* decide which environments we support, not our regression tests!


> The definition of "main" under discussion in that thread never reached
> consensus to change away from the existing OS represented by the Jenkins
> 5-pr-test nodes. So (for now) it still includes LTS versions of RHEL /
> CentOS 7 shipping the broken GCC 4.8.x std::regex.

Yes, but so what?! We have the power to decide:

1. Whether master must continue to support GCC v4.8. If we decide that
we should drop that support (for various good reasons beyond this RFC),
then we will obviously stop testing Squid for GCC v4.8 regressions or
move those tests into the "optional" or non-blocking categories.

2. Whether the new feature must be available in GCC v4.8 builds. If
there are good reasons to base this feature on STL regexes, and good
reasons to keep GCC v4.8 support, then we _can_ make the new feature
conditional on newer compilers. Doing so increases implementation
complexity and support headaches, but it is technically possible. We
already have a Cons item to remind us about this problem. I am not
saying this is something we should do, only that this is an option to
consider.

I knew I was not repeatedly vetoing dropping GCC v4.8. Glad this was
clarified, putting one more wild misinterpretation behind us.


Do you think we should bite the bullet and add STL regex support to
Squid master branch?

If yes, I suggest _postponing_ the decision regarding GCC v4.8 support
until it becomes clear how difficult it would be to make the new code
_compile_ on GCC v4.8? I know it is not going to _work_, but Squid can
easily detect that and reject configurations that are using new regexes
with GCC v4.8 builds. "Sorry, you cannot use this regex with this
binary" errors are not ideal, but this approach saves a lot of work, and
adds support for the vast majority of Squid deployments that are willing
to run master/v6.


Thank you,

Alex.

From squid3 at treenet.co.nz  Mon Jan 24 20:26:31 2022
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Tue, 25 Jan 2022 09:26:31 +1300
Subject: [squid-dev] v5.4 backports
In-Reply-To: <ec195e42-1548-870b-8bac-6d32c0212167@measurement-factory.com>
References: <b54633e2-6a6b-4913-6b3d-8dc361fd8081@treenet.co.nz>
 <ec195e42-1548-870b-8bac-6d32c0212167@measurement-factory.com>
Message-ID: <00ce039c-0d9f-a1a7-241f-686ce95e1187@treenet.co.nz>

On 21/01/22 08:20, Alex Rousskov wrote:
> On 1/18/22 5:31 AM, Amos Jeffries wrote:
>> The following changes accepted into v6 are also eligible for v5 but have
>> issues preventing me scheduling them.
>>
>>
>> This has conflicts I need some assistance resolving. So will not being
>> doing the backport myself. If you are interested please open a PR
>> against v5 branch for the working backport before Feb 1st.
>>
>>  ?* Bug #5090: Must(!request->pinnedConnection()) violation (#930)
>>  ? squid-6-15bde30c33e47a72650ef17766719a5fc7abee4c
> 
> The above fix relies on a Bug #5055 fix (i.e. master/v6 commit 2b6b1bc
> mentioned below as a special case).
> 

Okay. I will try again for a later release.
> 
>>  ?* Bug #5055: FATAL FwdState::noteDestinationsEnd exception: opening (#877)
>>  ? squid-6-2b6b1bcb8650095c99a1916f5964305484af7ef0
> 
> Waiting for a base commit SHA from you.
> 
> 
>> and; Fix FATAL ServiceRep::putConnection exception: theBusyConns > 0 (#939)
>>  ? squid-6-a8ac892bab446ac11f816edec53306256bad4de7
> 
> This fixes a bug in the Bug #5055 fix AFAICT, so waiting on the
> master/v6 commit 2b6b1bc backport (i.e. the previous bullet).
> 

FYI; As of right now the v5 HEAD should be fine to base the PR on.

Amos

From ngtech1ltd at gmail.com  Mon Jan 24 23:00:16 2022
From: ngtech1ltd at gmail.com (Eliezer Croitoru)
Date: Tue, 25 Jan 2022 01:00:16 +0200
Subject: [squid-dev] [squid-users] 4.17 and 5.3 SSL BUMP issue:
 SSL_ERROR_RX_RECORD_TOO_LONG
In-Reply-To: <eca4aa31-238e-0d7f-b36c-021cd7629696@measurement-factory.com>
References: <!&!AAAAAAAAAAAYAAAAAAAAAG15AYh8TcJOh7jZfP/beGvCgAAAEAAAAO3UOMecORtCkjs2qj/1mFoBAAAAAA==@gmail.com>
 <1ad648ca-ccbf-a1c5-e209-02f520d4c1cd@measurement-factory.com>
 <002401d8114d$1cb7ef40$5627cdc0$@gmail.com>
 <eca4aa31-238e-0d7f-b36c-021cd7629696@measurement-factory.com>
Message-ID: <002701d81176$28489c50$78d9d4f0$@gmail.com>

Hey Alex, 

@Squid-dev

Thanks for the response!
It will take me time to answer your questions and doubts about the solution to a more "scientific" degree rather than a basic understanding of the way the code works.

The main reason I posted it on the Squid-Users list first was since this issues was not resolved by anyone to an acceptable degree for such a long time.
This patch demonstrates that it's possible to prevent a basic DOS from Squid side based on the assumption that the client can damage the cache.

There are couple options on what to do when such a request happens ie:
There is a difference between what Squid knows about the requested domain name and what the client is asking for.(Split brain scenario?)

What have been done in HTTP/1.X was mostly to force the proxy resolved domain ip rather then considering the client side of the picture.
In TLS we ca assume that the client knows pretty well what IP he wants to reach for.
The only thing that was left is to verify the remote host against the proxy local CA's bundle(s) from an admin point of view.
We can naturally assume that any TLS connection that is trusted by the proxy CA's bundle(s) is trusted and there is no need
for any special test about the basic trust for caching from the destination address.(Revocations are an exception to this)

Indeed there are tests which are required but when the service is denying the basic nature of the proxy which
is in my case content filtering and not caching, I and many others would prefer to have close to 0 Cache but an operational service.
(which by the way in TLS connections this what happens in most cases anyways)

I have traced the issue to at-least 6 years ago.
I have tried to find a bug report which contains NONE/409 but none was found by the Bugzilla search despite the fact
that many encountered this issue in production with alive clients... compared to API or AI systems.
(???? Why no-one responded or filed a bug report, even a duplicate one???)

Since V 3.5 there is something broken :\

So answering:
* http://lists.squid-cache.org/pipermail/squid-users/2020-November/022913.html
* http://www.squid-cache.org/mail-archive/squid-dev/201112/0035.html
* https://forum.netgate.com/topic/159364/squid-squidguard-none-409-and-dns-issue
* https://docs.netgate.com/pfsense/en/latest/troubleshooting/squid.html
* https://www.linuxquestions.org/questions/linux-server-73/tag_none-409-connect-squid-3-5-20-a-4175620518/
* https://community.spiceworks.com/topic/351106-pfsense-and-squidguard-error-page


The use cases that I have seen until now are: (please add more cases to the list if you have)
* remote work VPN which forces remote(geographically and in the network level) DNS but splits the tunnel traffic between the office and the local WAN connection
* enforcement of a specific IP for testing using the hosts file by CDN and networking services providers 
* software that uses another way to acquire the destination IP of the service (DNS over HTTPS/others) (AV, Software Updates, others)
* Malware/Spyware that forces a specific DNS service which also installed a RootCA on the device (Squid CA's bundle(s) blocks these easily)

Bugzilla related bugs I have found using other keywords:
* https://bugs.squid-cache.org/show_bug.cgi?id=4940
* https://bugs.squid-cache.org/show_bug.cgi?id=4514

I do not have any sponsorship for this patch and I if someone is willing to pay for the work as it is then I would be happy
to accept some donation for my time on it.

If you have noticed or not it also removes the:
"Host header forgery detected on" and couple other log messages flooding.

I hope it will help to move couple steps forward.

One of the things that pushed me to write this patch is that the fact that Squid is a very good software despite it's an old beast
and I have tried to use commercial products and got really disappointed until now more then once.

I do believe that the right solution is not an ON/OFF switch but rather something that can be matched against http_access and other matchers/acls.
The right choice in my use case is ON/OFF switch but if the admin would be able to configure this it would be very easy to enforce a policy.
Currently in the security industry the investments are on the TLS level rather then on the policy itself. (feel free to correct me if I'm wrong).

I will add this patch to the next RPM's release which have just finished the build so these who have been having these issues would be able to use squid in production.

Thanks again,
Eliezer

* Currently I am building RPM's for: CentOS7-8, Oracle Linux 7-8, Amazon Linux 2.
* peek at: Slamming-Your-Head-Into-Keyboard-HOWTO: Packaging Applications - Jared Morrow    https://vimeo.com/70019064

----
Eliezer Croitoru
Tech Support
Mobile: +972-5-28704261
Email: ngtech1ltd at gmail.com

-----Original Message-----
From: Alex Rousskov <rousskov at measurement-factory.com> 
Sent: Monday, January 24, 2022 21:54
To: Eliezer Croitoru <ngtech1ltd at gmail.com>; squid-users at lists.squid-cache.org
Cc: 'Amos Jeffries' <squid3 at treenet.co.nz>
Subject: Re: [squid-users] 4.17 and 5.3 SSL BUMP issue: SSL_ERROR_RX_RECORD_TOO_LONG

On 1/24/22 1:06 PM, Eliezer Croitoru wrote:
> I sat for a while thinking what is the best approach to the subject and the
> next patch seems to be reasonable enough to me:
> https://gist.github.com/elico/630fa57d161b0c0b59ef68786d801589

> Let me know if this patch violates anything that I might not took into
> account.

The squid-users mailing list is not a good place for code reviews. If
you think your changes should be made official, please submit a pull
request on GitHub: https://wiki.squid-cache.org/MergeProcedure

FWIW, I wonder whether we should reuse and/or extend host_verify_strict
instead of adding a new squid.conf directive to control this behavior.
All other factors being equal, it would be good to have one directive to
control Host validation and its direct effects.


> * Tested to work in my specific scenario which I really don't care about
> caching when I'm in a DOS situation.

When one disables checks, Squid will continue to "work", of course. Did
you verify that the patched Squid:

1. Goes to the intended destination IP address rather than to Host?
2. Does not evict the matching cached responses from the cache?
3. Does not satisfy the forged request from the cache?
4. Does not share responses to requests with the "forged" Host?

There may be other prerequisites, and the above four may need polishing,
but these are the first conditions that come to my mind when dealing
with forgery attacks. Please disclose this information when/if posting
your changes for the Project review on GitHub.


Thank you,

Alex.

> ----
> Eliezer Croitoru
> Tech Support
> Mobile: +972-5-28704261
> Email: ngtech1ltd at gmail.com
> 
> -----Original Message-----
> From: squid-users <squid-users-bounces at lists.squid-cache.org> On Behalf Of
> Alex Rousskov
> Sent: Monday, January 24, 2022 16:54
> To: squid-users at lists.squid-cache.org
> Subject: Re: [squid-users] 4.17 and 5.3 SSL BUMP issue:
> SSL_ERROR_RX_RECORD_TOO_LONG
> 
> On 1/24/22 2:42 AM, Eliezer Croitoru wrote:
>> 2022/01/24 09:11:20 kid1| SECURITY ALERT: Host header forgery detected on
>> local=142.250.179.228:443 remote=10.200.191.171:51831 FD 16 flags=33
> (local
>> IP does not match any domain IP)
> 
> As you know, Squid improvements related to these messages have been
> discussed many times. I bet the ideas summarized in the following old
> email remain valid today:
> 
> http://lists.squid-cache.org/pipermail/squid-users/2019-July/020764.html
> 
> 
> If you would like to address browser's SSL_ERROR_RX_RECORD_TOO_LONG
> specifically (the error in your email Subject line), then that is a
> somewhat different matter: According to your packet capture, Squid sends
> a plain text HTTP 409 response to a TLS client. That is not going to
> work with popular browsers (for various technical and policy reasons).
> 
> Depending on the SslBump stage where the Host header forgery was
> detected, Squid could bump the client connection to deliver that error
> response; in that case, the browser may still refuse to show the
> response to the user because the browser will not trust the certificate
> that Squid would have to fake without sufficient origin server info.
> However, the browser error will be different and arguably less confusing
> to admins and even users.
> 
> https://wiki.squid-cache.org/SquidFaq/AboutSquid#How_to_add_a_new_Squid_feat
> ure.2C_enhance.2C_of_fix_something.3F
> 
> 
> HTH,
> 
> Alex.
> 
> _______________________________________________
> squid-users mailing list
> squid-users at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-users
> 


From rousskov at measurement-factory.com  Mon Jan 24 23:27:22 2022
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Mon, 24 Jan 2022 18:27:22 -0500
Subject: [squid-dev] v5.4 backports
In-Reply-To: <00ce039c-0d9f-a1a7-241f-686ce95e1187@treenet.co.nz>
References: <b54633e2-6a6b-4913-6b3d-8dc361fd8081@treenet.co.nz>
 <ec195e42-1548-870b-8bac-6d32c0212167@measurement-factory.com>
 <00ce039c-0d9f-a1a7-241f-686ce95e1187@treenet.co.nz>
Message-ID: <6271c843-f4a0-d92a-61b8-ee6bec2a42a5@measurement-factory.com>

On 1/24/22 3:26 PM, Amos Jeffries wrote:
> On 21/01/22 08:20, Alex Rousskov wrote:
>> On 1/18/22 5:31 AM, Amos Jeffries wrote:
>>> The following changes accepted into v6 are also eligible for v5 but have
>>> issues preventing me scheduling them.
>>>
>>>
>>> This has conflicts I need some assistance resolving. So will not being
>>> doing the backport myself. If you are interested please open a PR
>>> against v5 branch for the working backport before Feb 1st.
>>>
>>> ??* Bug #5090: Must(!request->pinnedConnection()) violation (#930)
>>> ?? squid-6-15bde30c33e47a72650ef17766719a5fc7abee4c
>>
>> The above fix relies on a Bug #5055 fix (i.e. master/v6 commit 2b6b1bc
>> mentioned below as a special case).
>>
> 
> Okay. I will try again for a later release.
>>
>>> ??* Bug #5055: FATAL FwdState::noteDestinationsEnd exception: opening
>>> (#877)
>>> ?? squid-6-2b6b1bcb8650095c99a1916f5964305484af7ef0
>>
>> Waiting for a base commit SHA from you.
>>
>>
>>> and; Fix FATAL ServiceRep::putConnection exception: theBusyConns > 0
>>> (#939)
>>> ?? squid-6-a8ac892bab446ac11f816edec53306256bad4de7
>>
>> This fixes a bug in the Bug #5055 fix AFAICT, so waiting on the
>> master/v6 commit 2b6b1bc backport (i.e. the previous bullet).


> FYI; As of right now the v5 HEAD should be fine to base the PR on.

Please see https://github.com/squid-cache/squid/pull/967

I will leave it as a Draft PR until I have a chance to run more tests.
Please test what you can as well.


HTH,

Alex.

From squid3 at treenet.co.nz  Sun Jan 30 11:56:15 2022
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Mon, 31 Jan 2022 00:56:15 +1300
Subject: [squid-dev] RFC: protocols in Squid
Message-ID: <b9e924fe-cd77-3885-b42d-637c0fa50472@treenet.co.nz>

Attached is first draft of a map for the transactions possible by 
protocols supported (and "should be") by Squid.


In this diagram transactions are split into three types:

  1) switching - Protocol A ending initiates Protocol B.

  2) nested - Protocol B carries Protocol C in its message payload.

  3) fetch - Protocol B initiates Protocol D to fetch some data used by 
Protocol B.

Note: to simplify the number of arrows surrounding "HTTP" I have split 
out the CONNECT tunnel as a separate thing.


Am posting this as RFC to see of anyone has additions of transactions I 
missed. Or suggestions on how better to document it.

Next step is to write up which object(s) or function implements each of 
these in Squid.


Amos
-------------- next part --------------
A non-text attachment was scrubbed...
Name: protocol_flow.dot
Type: application/msword-template
Size: 5104 bytes
Desc: not available
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20220131/b4ec4355/attachment-0001.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: protocol_flow.dot.png
Type: image/png
Size: 339210 bytes
Desc: not available
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20220131/b4ec4355/attachment-0001.png>

From rousskov at measurement-factory.com  Sun Jan 30 16:52:23 2022
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Sun, 30 Jan 2022 11:52:23 -0500
Subject: [squid-dev] RFC: protocols in Squid
In-Reply-To: <b9e924fe-cd77-3885-b42d-637c0fa50472@treenet.co.nz>
References: <b9e924fe-cd77-3885-b42d-637c0fa50472@treenet.co.nz>
Message-ID: <01eadc9a-9468-0c76-e94f-977d3ab18b62@measurement-factory.com>

On 1/30/22 6:56 AM, Amos Jeffries wrote:
> Attached is first draft of a map for the transactions possible by
> protocols supported (and "should be") by Squid.
> 
> 
> In this diagram transactions are split into three types:
> 
> ?1) switching - Protocol A ending initiates Protocol B.
> 
> ?2) nested - Protocol B carries Protocol C in its message payload.
> 
> ?3) fetch - Protocol B initiates Protocol D to fetch some data used by
> Protocol B.
> 
> Note: to simplify the number of arrows surrounding "HTTP" I have split
> out the CONNECT tunnel as a separate thing.
> 
> 
> Am posting this as RFC to see of anyone has additions of transactions I
> missed. Or suggestions on how better to document it.

Who is the target audience for this work? What are the primary goals of
this documentation effort? It is difficult to suggest improvements
without understanding who we are talking to and what we want them to
learn or do with that information...

FWIW, I personally do not find the chosen illustration approach useful
for documenting the relationship between various transactions or
protocols in Squid:

* At a high level, if the target audience are folks who do not know much
about Squid but are familiar with many network protocols, then the
picture can be morphed into a useful introductory illustration of the
protocols supported by Squid. However, most of the effort on
switch/nest/fetch documentation would be lost or misplaced in the
process -- there are much simpler/better ways to illustrate which
protocols are supported where, of course.

* At a high level, if the target audience are folks that want to do
serious Squid development, then the picture effectively obscures or
hides such critical architectural concepts as transaction layering and
grouping/cooperating. Illustrating those concepts needs a very different
approach IMO.

* At a low level, correctly interpreting or even tracing some of the
depicted individual relationships is already quite difficult for a human
like me, and when all the [should be] supported relationships are
included, the interesting parts may become an intractable spaghetti of
colored lines. I suspect it would be easier and a lot more useful to
just say (in text form!) what transport protocols are used by which
to-Squid and from-Squid higher-level transactions.


> Next step is to write up which object(s) or function implements each of
> these in Squid.

Developing a high-level documentation of primary transaction-related
class relationships may be very useful for establishing common
terminology and resolving refactoring conflicts. Such a document would
be based on about ~10 classes and rely heavily on the embedded class
documentation (instead of repeating or substituting it). I can draft
such a document if you think it may be useful.

At the level of "objects or functions", it would take a lot of time to
write and review such detailed function-level documentation. Maintaining
it would be costly as well, especially given the fact that a lot of that
code should be seriously refactored! This is your call, but I think your
personal energy and talents are better spent elsewhere, and the Project
as a whole should not undertake such a costly initiative with murky
outcomes.


Cheers,

Alex.
P.S. FWIW, I do not know what the various
circles/diamonds/hexagons/ovals mean on this particular diagram. Many
different standards and common notations are recycling those basic
shapes, of course.

