From netfiretecc at gmail.com  Fri Sep  9 14:09:11 2022
From: netfiretecc at gmail.com (=?UTF-8?Q?Leandro_de_Fran=C3=A7a?=)
Date: Fri, 9 Sep 2022 11:09:11 -0300
Subject: [squid-dev] IPv6 Proxy (RTC leak)
Message-ID: <CAH5rjV2b-3TEc9n3cd_T50rG6FWiKdgBzLWqZERTeOqXBoQtAw@mail.gmail.com>

Hello, my name is Leandro de Fran?a!
I am using Squid to configure an IPv4 (incoming) Proxy server ----> IPv6
(outgoing).
I'm facing a problem with an RTC leak, where a speed test is identifying
the IPv4 of the local machine.

Is there any solution to this problem?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20220909/ca6aa0be/attachment.htm>

From gkinkie at gmail.com  Mon Sep 12 08:55:37 2022
From: gkinkie at gmail.com (Francesco Chemolli)
Date: Mon, 12 Sep 2022 09:55:37 +0100
Subject: [squid-dev] IPv6 Proxy (RTC leak)
In-Reply-To: <CAH5rjV2b-3TEc9n3cd_T50rG6FWiKdgBzLWqZERTeOqXBoQtAw@mail.gmail.com>
References: <CAH5rjV2b-3TEc9n3cd_T50rG6FWiKdgBzLWqZERTeOqXBoQtAw@mail.gmail.com>
Message-ID: <CA+Y8hcOQXy8edbmHv4kX6D_w8jRLfNogGjZSc_QXemNEiiNOTw@mail.gmail.com>

Hi Leandro,
  have you followed the instructions in
https://wiki.squid-cache.org/SquidFaq/ConfiguringSquid#Can_Squid_anonymize_HTTP_requests.3F
?


On Sun, Sep 11, 2022 at 10:33 PM Leandro de Fran?a <netfiretecc at gmail.com>
wrote:

> Hello, my name is Leandro de Fran?a!
> I am using Squid to configure an IPv4 (incoming) Proxy server ----> IPv6
> (outgoing).
> I'm facing a problem with an RTC leak, where a speed test is identifying
> the IPv4 of the local machine.
>
> Is there any solution to this problem?
> _______________________________________________
> squid-dev mailing list
> squid-dev at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-dev
>


-- 
    Francesco
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20220912/42efd2e0/attachment.htm>

From gkinkie at gmail.com  Mon Sep 19 13:28:22 2022
From: gkinkie at gmail.com (Francesco Chemolli)
Date: Mon, 19 Sep 2022 14:28:22 +0100
Subject: [squid-dev] Proposal: switch to always-build for some currently
 optional features
Message-ID: <CA+Y8hcNweb6LzNXOdoJ1o+h6HvPCifyH3o5ZTwH4y6Qp7Ddt1g@mail.gmail.com>

Hi all,
   there is a bunch of features that are currently gated at compile time:
among others, I see:
- adaptation (icap, ecap)
- authentication
- ident
- delay pools
- cache digests
- htcp
- cache digests
- wccp
- unlinkd

I'd like to propose that we switch to always-build them.
We would gain:
- code clarity
- ease of development
- test coverage
- feature uniformity across builds

We would lose:
- slightly longer build time
- larger binaries

The latter should not be an issue anymore, even the most embedded of
embedded systems Squid is likely to be used on has plenty of storage and
core, and the former should not be too big a deal

Opinions?

-- 
    Francesco
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20220919/2e237a2c/attachment.htm>

From rousskov at measurement-factory.com  Mon Sep 19 21:39:25 2022
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Mon, 19 Sep 2022 17:39:25 -0400
Subject: [squid-dev] Proposal: switch to always-build for some currently
 optional features
In-Reply-To: <CA+Y8hcNweb6LzNXOdoJ1o+h6HvPCifyH3o5ZTwH4y6Qp7Ddt1g@mail.gmail.com>
References: <CA+Y8hcNweb6LzNXOdoJ1o+h6HvPCifyH3o5ZTwH4y6Qp7Ddt1g@mail.gmail.com>
Message-ID: <83db8714-7670-78bd-d411-406ab0ad9197@measurement-factory.com>

On 9/19/22 09:28, Francesco Chemolli wrote:

> there is a bunch of features that are currently gated at compile 
> time: among others, I see:

> - adaptation (icap, ecap)
> - authentication
> - ident
> - delay pools
> - cache digests
> - htcp
> - cache digests
> - wccp
> - unlinkd
> 
> I'd like to propose that we switch to always-build them.

> We would gain:

> - code clarity
 > - ease of development

The above two items do not fully apply to features that depend on 
external libraries (which may be absent): eCAP, some authentication 
modules, and possibly others. Their code and related development 
overheads will remain largely unchanged. I suspect that you actually did 
not want to include optional modules with external dependencies in your 
proposal, but please clarify.


> - test coverage

To be more precise, we would gain reduction of feature _combinations_ 
that should be tested (which is a significant gain!). Basic code 
coverage by tests would remain unchanged because nearly any test can 
enable (and test) all features that can be built.


> - feature uniformity across builds

Yes, fewer features that can be enabled/disabled at build time helps 
with support.


> We would lose:
> - slightly longer build time
> - larger binaries

And:

- Larger attack surface if we always build modules like ESI. This can be 
partially mitigated by making sure we default-disable them. This is one 
of the reasons for the precondition at the end of my email.

- Some loss of performance. For example, the cache digests module, when 
enabled, builds cache digests by default (from squid.conf point of 
view). Similarly, ESI parses applicable content. There are probably also 
non-trivial slow ACL-driven checks that a module may bring in by default 
(from squid.conf point of view) if enabled.


> Opinions?

I agree that modules that can always be built, should be. Such modules 
should have no guarding #ifdefs. I think this is the set of modules that 
your proposal is targeting, but please correct me if I am wrong. FWIW, 
this design stems from an even more general/fundamental rule of thumb: 
Do not add unnecessary #ifdefs.

However, there is a precondition: Any always-built optional feature with 
a potentially significant performance impact or a controversial side 
effect should be disabled by default (via squid.conf). Satisfying this 
precondition will require code changes.


Cheers,

Alex.

From gkinkie at gmail.com  Tue Sep 20 06:34:58 2022
From: gkinkie at gmail.com (Francesco Chemolli)
Date: Tue, 20 Sep 2022 07:34:58 +0100
Subject: [squid-dev] Proposal: switch to always-build for some currently
 optional features
In-Reply-To: <83db8714-7670-78bd-d411-406ab0ad9197@measurement-factory.com>
References: <CA+Y8hcNweb6LzNXOdoJ1o+h6HvPCifyH3o5ZTwH4y6Qp7Ddt1g@mail.gmail.com>
 <83db8714-7670-78bd-d411-406ab0ad9197@measurement-factory.com>
Message-ID: <CA+Y8hcMZZPMFppNjOKQ=WRcBKUM26ThecK0rdZgm2FwA0iiezw@mail.gmail.com>

>
>
> I agree that modules that can always be built, should be. Such modules
> should have no guarding #ifdefs. I think this is the set of modules that
> your proposal is targeting, but please correct me if I am wrong. FWIW,
> this design stems from an even more general/fundamental rule of thumb:
> Do not add unnecessary #ifdefs.
>

I agree. We could also work on better isolation, by restricting
#ifdef-guarded areas
to specific delegate classes, and then using c++ features (e.g. if
constexpr, eventually) to
disable the callsites.


> However, there is a precondition: Any always-built optional feature with
> a potentially significant performance impact or a controversial side
> effect should be disabled by default (via squid.conf). Satisfying this
> precondition will require code changes.
>

Yes, I agree.

-- 
    Francesco
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20220920/93679121/attachment.htm>

From rousskov at measurement-factory.com  Tue Sep 20 13:56:59 2022
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Tue, 20 Sep 2022 09:56:59 -0400
Subject: [squid-dev] Proposal: switch to always-build for some currently
 optional features
In-Reply-To: <CA+Y8hcMZZPMFppNjOKQ=WRcBKUM26ThecK0rdZgm2FwA0iiezw@mail.gmail.com>
References: <CA+Y8hcNweb6LzNXOdoJ1o+h6HvPCifyH3o5ZTwH4y6Qp7Ddt1g@mail.gmail.com>
 <83db8714-7670-78bd-d411-406ab0ad9197@measurement-factory.com>
 <CA+Y8hcMZZPMFppNjOKQ=WRcBKUM26ThecK0rdZgm2FwA0iiezw@mail.gmail.com>
Message-ID: <59943cbe-e86a-12df-0eb2-ec4e44996fab@measurement-factory.com>

On 9/20/22 02:34, Francesco Chemolli wrote:
> 
>     I agree that modules that can always be built, should be. Such modules
>     should have no guarding #ifdefs. I think this is the set of modules
>     that
>     your proposal is targeting, but please correct me if I am wrong. FWIW,
>     this design stems from an even more general/fundamental rule of thumb:
>     Do not add unnecessary #ifdefs.
> 
> 
> I agree. We could also work on better isolation, by restricting 
> #ifdef-guarded areas
> to specific delegate classes, and then using c++ features?(e.g. if 
> constexpr, eventually) to
> disable the callsites.

Yes, of course, but I would start with modules/features that require no 
significant refactoring. I am not sure what the best candidates are, but 
I would evaluate ident, cache digests, htcp, and wccp first (these are 
from your own list of candidates).

For example, a feature like unlinkd (also on your list) would require 
adding a default-disabled configuration option (unlinkd_enable, similar 
to pinger_enable) or introducing support for a special program location 
spelling like "none". Adding either would break existing configurations 
that willingly run unlinkd. There are probably a few features/modules 
that do _not_ require such disruptive configuration changes. I would 
start with those.


>     However, there is a precondition: Any always-built optional feature
>     with
>     a potentially significant performance impact or a controversial side
>     effect should be disabled by default (via squid.conf). Satisfying this
>     precondition will require code changes.

> Yes, I agree.

Glad we are on the same page!

I recommend giving Amos more time to leave feedback before spending time 
on code changes, but if we are all in agreement, then I am looking 
forward to PRs reducing the number of unnecessary #ifdefs. To minimize 
overheads, please use one PR per module/feature and avoid opening 
multiple concurrent PRs (at least until it is clear that we are on the 
same page regarding the overall approach to the corresponding code 
modifications).


Thank you,

Alex.

From squid3 at treenet.co.nz  Wed Sep 21 14:47:48 2022
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Thu, 22 Sep 2022 02:47:48 +1200
Subject: [squid-dev] Proposal: switch to always-build for some currently
 optional features
In-Reply-To: <CA+Y8hcNweb6LzNXOdoJ1o+h6HvPCifyH3o5ZTwH4y6Qp7Ddt1g@mail.gmail.com>
References: <CA+Y8hcNweb6LzNXOdoJ1o+h6HvPCifyH3o5ZTwH4y6Qp7Ddt1g@mail.gmail.com>
Message-ID: <d65ee3b1-57d7-809c-e920-9616ddcd1a75@treenet.co.nz>

On 20/09/22 01:28, Francesco Chemolli wrote:
> Hi all,
>  ? ?there is a bunch of features that are currently gated at compile 
> time: among others, I see:
> - adaptation (icap, ecap)
> - authentication
> - ident
> - delay pools
> - cache digests
> - htcp
> - cache digests
> - wccp
> - unlinkd
> 
> I'd like to propose that we switch to always-build them.


If you mean switching their build to default-enable. Sure - but there 
are often good reasons for each specific item to be default disabled today:

  * performance expensive logic
    delay pools, cache digests, adaptation

  * unavailable dependencies
   adaptation, auth sub-components

  * rarely necessary
   unlinkd, wccp, delay pools, htcp

  * buggy
   delay pools, wccp

Those reasons are also why we cannot simply remove the ./configure 
options for them (yet).


> We would gain:
> - code clarity

This proposal only has a very minor gain for code clarity. The worst of 
that problem is all the #if/def looking for OS hacks/workarounds, and 
the unnecessary custom re-implementations still hanging around.


> - ease of development

I do no think there will be any change regarding ease. Just a different 
way of setting up the testing.


> - test coverage

Disagree. The default/min/max build test "layers" already build as many 
of these as can be tested.

Plus all the reasons Alex already stated.

> - feature uniformity across builds
> 

I agree with most of Alex points on these.

In addition, on the security side there are some passive defense 
benefits from feature obscurity and avoidance of a mono-culture for 
Squid installations.



> We would lose:
> - slightly longer build time


Longer build time may not be an issue for users not building Squid 
often. But it would be compounding the already tough build farm situation.


> - larger binaries
> 
> The latter should not be an issue anymore, even the most embedded of 
> embedded systems Squid is likely to be used on has plenty of storage and 
> core, and the former should not be too big a deal
> 

It has been 4-5 years since I had any direct customers needing embedded 
Squid. AIUI the needs there are for software updates on hardware that 
are difficult to change (eg satellites or remote geographic outposts).



HTH
Amos

From ngtech1ltd at gmail.com  Thu Sep 22 14:03:20 2022
From: ngtech1ltd at gmail.com (ngtech1ltd at gmail.com)
Date: Thu, 22 Sep 2022 17:03:20 +0300
Subject: [squid-dev] security_file_certgen protocol
Message-ID: <000001d8ce8c$1332a8a0$3997f9e0$@gmail.com>

Hey Everybody,

I am a bit lost in my search.
I am trying to write a service like security_file_certgen as a daemon that will be communicated  via a TCP or UNIX Socket.
However, it?s a bit hard for me now to grasp the STDIN/STDOUT protocol of security_file_certgen.
I remember vaguely that it involves reading from some string (else then new lines) to another and then sends back
to stdout a certificate string.

So what are the parts of the request object and what are the parts of the response object?
If I will grasp it I will be able to model it in a single ruby script.

I know this is not the first time I am asking about this and it?s harder for me that I forget such simple things.
I will be thankful for any help with this.

Eliezer

----
Eliezer Croitoru
NgTech, Tech Support
Mobile: +972-5-28704261
Email: ngtech1ltd at gmail.com
Web: https://ngtech.co.il/
My-Tube: https://tube.ngtech.co.il/



From rousskov at measurement-factory.com  Thu Sep 22 15:36:02 2022
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Thu, 22 Sep 2022 11:36:02 -0400
Subject: [squid-dev] security_file_certgen protocol
In-Reply-To: <000001d8ce8c$1332a8a0$3997f9e0$@gmail.com>
References: <000001d8ce8c$1332a8a0$3997f9e0$@gmail.com>
Message-ID: <530810dc-e9e4-bf7d-b21e-0cc37154d123@measurement-factory.com>

On 9/22/22 10:03, ngtech1ltd at gmail.com wrote:

> I am trying to write a service like security_file_certgen as a daemon that will be communicated  via a TCP or UNIX Socket.
> However, it?s a bit hard for me now to grasp the STDIN/STDOUT protocol of security_file_certgen.
> I remember vaguely that it involves reading from some string (else then new lines) to another and then sends back
> to stdout a certificate string.
> 
> So what are the parts of the request object and what are the parts of the response object?
> If I will grasp it I will be able to model it in a single ruby script.
> 
> I know this is not the first time I am asking about this and it?s harder for me that I forget such simple things.
> I will be thankful for any help with this.

The basic protocol syntax is documented at 
https://wiki.squid-cache.org/Features/AddonHelpers#SSL_certificate_generation

Beyond that, there is source code and actual traffic that you can 
analyze, of course, but there is no comprehensive documentation AFAICT.

Please note that Squid workers already communicate with these helpers 
via TCP or UNIX sockets. The helpers just do not know that because a 
forked intermediary process remaps those sockets to helper stdin/stdout 
descriptors. See `git grep -1 define.IPC_STREAM` and dup2() in ipcCreate().


HTH,

Alex.

