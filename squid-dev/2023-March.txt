From squid3 at treenet.co.nz  Tue Mar  7 05:38:30 2023
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Tue, 7 Mar 2023 18:38:30 +1300
Subject: [squid-dev] RFC: policy change for header #includes
Message-ID: <05390ed8-b5b4-17fb-05ed-7f6eaf9b3eea@treenet.co.nz>


Current Policy 
<https://wiki.squid-cache.org/DeveloperResources/SquidCodingGuidelines#file-include-guidelines>:
"
 ?4. system C headers (with a .h suffix):
 ? ? * mandatory HAVE_FOO_H wrapper
"


I propose using the C++17 "__has_include(<foo.h>)" instead of HAVE_FOO_H 
whenever we can. Which is:
 ?* all .cc and .cci files
 ?* any .h files in the src/ and tools/ areas


Pros:
 ?* less configure.ac logic, smaller build logs
 ?* removes need to do a full bootstrap + re-configure when a 
third-party library or system header is added/remove/changed
 ?* conversion can be semi-scripted

Cons AFAIK are all about how it cannot be a blanket requirement like 
HAVE_FOO_H is:
 ?* sometimes headers need to be forbidden include by ./configure logic 
checks
 ?* C language does not support the __has_include


Cheers
Amos


From gkinkie at gmail.com  Tue Mar  7 09:14:44 2023
From: gkinkie at gmail.com (Francesco Chemolli)
Date: Tue, 7 Mar 2023 09:14:44 +0000
Subject: [squid-dev] RFC: policy change for header #includes
In-Reply-To: <05390ed8-b5b4-17fb-05ed-7f6eaf9b3eea@treenet.co.nz>
References: <05390ed8-b5b4-17fb-05ed-7f6eaf9b3eea@treenet.co.nz>
Message-ID: <CA+Y8hcOPJq-VcKJu_m5ByJkfaHb7hWw5PEEimxXZ4tv1z2DMeg@mail.gmail.com>

I like this idea; I would also complement it with the directive to use
header <cXXXXX> instead of <XXXXX.h> whenever possible - this could also be
automatically enforced

On Tue, Mar 7, 2023 at 5:38?AM Amos Jeffries <squid3 at treenet.co.nz> wrote:

>
> Current Policy
> <
> https://wiki.squid-cache.org/DeveloperResources/SquidCodingGuidelines#file-include-guidelines
> >:
> "
>   4. system C headers (with a .h suffix):
>      * mandatory HAVE_FOO_H wrapper
> "
>
>
> I propose using the C++17 "__has_include(<foo.h>)" instead of HAVE_FOO_H
> whenever we can. Which is:
>   * all .cc and .cci files
>   * any .h files in the src/ and tools/ areas
>
>
> Pros:
>   * less configure.ac logic, smaller build logs
>   * removes need to do a full bootstrap + re-configure when a
> third-party library or system header is added/remove/changed
>   * conversion can be semi-scripted
>
> Cons AFAIK are all about how it cannot be a blanket requirement like
> HAVE_FOO_H is:
>   * sometimes headers need to be forbidden include by ./configure logic
> checks
>   * C language does not support the __has_include
>
>
> Cheers
> Amos
>
> _______________________________________________
> squid-dev mailing list
> squid-dev at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-dev
>


-- 
    Francesco
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20230307/5cd1d466/attachment.htm>

From rousskov at measurement-factory.com  Tue Mar  7 15:49:35 2023
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Tue, 7 Mar 2023 10:49:35 -0500
Subject: [squid-dev] RFC: policy change for header #includes
In-Reply-To: <05390ed8-b5b4-17fb-05ed-7f6eaf9b3eea@treenet.co.nz>
References: <05390ed8-b5b4-17fb-05ed-7f6eaf9b3eea@treenet.co.nz>
Message-ID: <9f755242-6254-1541-d888-ab8c3b628ed7@measurement-factory.com>

On 3/7/23 00:38, Amos Jeffries wrote:
> 
> Current Policy 
> https://wiki.squid-cache.org/DeveloperResources/SquidCodingGuidelines#file-include-guidelines:
>  ?4. system C headers (with a .h suffix):
>  ? ? * mandatory HAVE_FOO_H wrapper


> I propose using the C++17 "__has_include(<foo.h>)" instead of HAVE_FOO_H 
> whenever we can. Which is:
>  ?* all .cc and .cci files
>  ?* any .h files in the src/ and tools/ areas


We should not use __has_include() instead of HAVE_FOO_H for most system 
include files because HAVE_FOO_H essentially means "can compile" while 
__has_include() means "exists". Essentially, __has_include() has the 
same problems that old AC_CHECK_HEADER and AC_CHECK_HEADERS macros had, 
before Autoconf changed them to check whether the header is not just 
present but can be compiled. We should not go back to unreliable 
existence checks IMO!

The semantic difference detailed above is sufficient to avoid the 
proposed change IMO, but I can also mention another significant problem: 
The increased difficulty in deciding when to use __has_include() and 
when HAVE_FOO_H. We already suffer from this problem (a little) in some 
special "Do not use HAVE_X_H for x.h!" cases, but unreliable 
environment-dependent __has_include() checks are likely to make it 
significantly worse IMO.

If we should not use __has_include() instead of HAVE_FOO_H for _most_ 
include files, then we should not use it at all: Code consistency and 
less bickering during reviews are worth the extra ./configure 
changes/time IMO, especially since we do not add new system headers that 
often.


HTH,

Alex.
P.S. To save time, I am not detailing my partial disagreement with the 
pros/cons statements quoted below.


> Pros:
>  ?* less configure.ac logic, smaller build logs
>  ?* removes need to do a full bootstrap + re-configure when a 
> third-party library or system header is added/remove/changed
>  ?* conversion can be semi-scripted
> 
> Cons AFAIK are all about how it cannot be a blanket requirement like 
> HAVE_FOO_H is:
>  ?* sometimes headers need to be forbidden include by ./configure logic 
> checks
>  ?* C language does not support the __has_include



From john.rmesi at gmail.com  Tue Mar  7 13:26:33 2023
From: john.rmesi at gmail.com (john jacob)
Date: Tue, 7 Mar 2023 18:56:33 +0530
Subject: [squid-dev] acl dst ipv6 doesnot matches all IPv6 addresses
Message-ID: <CAGMRTB3GoFJ74YEd3aXMf3_qt1x_POgBNZrtLCb1rfDD4DOvwA@mail.gmail.com>

Hi,

I am facing the same issue as described in
https://bugs.squid-cache.org/show_bug.cgi?id=5154 where ipv6 literal URLs
are casuing squid, v5.7, to restart. As a work around I am testing the
below to deny ipv6 requests.

acl to_ipv6 dst ipv6
acl from_ipv6 src ipv6

# Prevent ipv6 requests to avoid crash in squid > 5.x
http_access deny to_ipv6
http_access deny from_ipv6

While this works for most of the ipv6 URLs , some of the cases like
http://[FEDC:BA98:7654:3210:FEDC:BA98:7654:3210]:80/index.html
, ACL is not matched.

2023/03/06 20:01:03.049 kid1| 28,3| Checklist.cc(70) preCheck: 0x15c1278
checking slow rules
2023/03/06 20:01:03.049 kid1| 28,5| Acl.cc(124) matches: checking
http_access
2023/03/06 20:01:03.049 kid1| 28,5| Checklist.cc(398) bannedAction: Action
'DENIED/0' is not banned
2023/03/06 20:01:03.050 kid1| 28,5| Acl.cc(124) matches: checking
http_access#1
2023/03/06 20:01:03.050 kid1| 28,5| Acl.cc(124) matches: checking to_ipv6
2023/03/06 20:01:03.050 kid1| 28,9| Ip.cc(96) aclIpAddrNetworkCompare:
aclIpAddrNetworkCompare: compare:
[fedc:ba98:7654:3210:fedc:ba98:7654:3210]/[ffc0::] ([fec0::])  vs
[fe80::]-[::]/[ffc0::]
2023/03/06 20:01:03.050 kid1| 28,3| Ip.cc(538) match: aclIpMatchIp:
'[fedc:ba98:7654:3210:fedc:ba98:7654:3210]' NOT found
2023/03/06 20:01:03.050 kid1| 28,3| Acl.cc(151) matches: checked: to_ipv6 =
0
2023/03/06 20:01:03.050 kid1| 28,3| Acl.cc(151) matches: checked:
http_access#1 = 0
2023/03/06 20:01:03.050 kid1| 28,5| Checklist.cc(398) bannedAction: Action
'DENIED/0' is not banned
2023/03/06 20:01:03.050 kid1| 28,5| Acl.cc(124) matches: checking
http_access#2

I could not find any reference which mentions
FEDC:BA98:7654:3210:FEDC:BA98:7654:3210 as a special type of IPv6. I am
wondering why FEDC:BA98:7654:3210:FEDC:BA98:7654:3210 does not match ipv6
check.

Regards,
John
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20230307/e7f51d38/attachment.htm>

From squid3 at treenet.co.nz  Wed Mar  8 14:12:36 2023
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Thu, 9 Mar 2023 03:12:36 +1300
Subject: [squid-dev] RFC: policy change for header #includes
In-Reply-To: <CA+Y8hcOPJq-VcKJu_m5ByJkfaHb7hWw5PEEimxXZ4tv1z2DMeg@mail.gmail.com>
References: <05390ed8-b5b4-17fb-05ed-7f6eaf9b3eea@treenet.co.nz>
 <CA+Y8hcOPJq-VcKJu_m5ByJkfaHb7hWw5PEEimxXZ4tv1z2DMeg@mail.gmail.com>
Message-ID: <b338a6a0-ebe3-b47a-9bc9-7a5925e947fc@treenet.co.nz>

On 7/03/2023 10:14 pm, Francesco Chemolli wrote:
> I like this idea; I would also complement it with the directive to use 
> header <cXXXXX> instead of <XXXXX.h> whenever possible - this could 
> also be automatically enforced
>

That we already have. PRs doing the updates welcome.

Amos


From rousskov at measurement-factory.com  Wed Mar  8 15:12:13 2023
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Wed, 8 Mar 2023 10:12:13 -0500
Subject: [squid-dev] RFC: policy change for header #includes
In-Reply-To: <b338a6a0-ebe3-b47a-9bc9-7a5925e947fc@treenet.co.nz>
References: <05390ed8-b5b4-17fb-05ed-7f6eaf9b3eea@treenet.co.nz>
 <CA+Y8hcOPJq-VcKJu_m5ByJkfaHb7hWw5PEEimxXZ4tv1z2DMeg@mail.gmail.com>
 <b338a6a0-ebe3-b47a-9bc9-7a5925e947fc@treenet.co.nz>
Message-ID: <b47a2ad3-2d5d-76f1-ebfb-2f978c22868c@measurement-factory.com>

On 3/8/23 09:12, Amos Jeffries wrote:
> On 7/03/2023 10:14 pm, Francesco Chemolli wrote:
>> I would also complement it with the directive to use 
>> header <cXXXXX> instead of <XXXXX.h> whenever possible


> That we already have. PRs doing the updates welcome.

Agreed on both counts, especially if an updating PR updates all known 
cases rather than just "a few here and there".


 >> this could also be automatically enforced

This part is not implemented, and it is not trivial to implement (please 
ping me if you decide to work on that). I would welcome proper enforcement.


Cheers,

Alex.


From hamilton.coutinho at gmail.com  Thu Mar 23 23:56:05 2023
From: hamilton.coutinho at gmail.com (Hamilton Coutinho)
Date: Thu, 23 Mar 2023 16:56:05 -0700
Subject: [squid-dev] Squid 5.6 leaking memory when peeking for an origin
 with an invalid certificate
In-Reply-To: <CAL34ib=pMDnt2jhf5aM1-=NGwCCq-d2swbtOpDYfT_C0-dqESw@mail.gmail.com>
References: <CAL34ibm-a1GiedEOHO2LcCYzRZuJt_4Dm4ZjJfkEdweC5BNoYw@mail.gmail.com>
 <84f382a5-1830-39fa-5f0c-f0bc52425235@measurement-factory.com>
 <CAL34ib=pMDnt2jhf5aM1-=NGwCCq-d2swbtOpDYfT_C0-dqESw@mail.gmail.com>
Message-ID: <CAL34ibnfhSsN5=M-JDvi-Ng3cZyMs6mh_USuv8ForwFqFXwbPA@mail.gmail.com>

Hi all,

We found a way to reproduce the leak: set up squid to run in intercept
mode + SSL description + memory pools off (to ease identifying the leak)
and then generate requests to sites with invalid certs (eg, CA not
installed), for instance: curl -k https://slscr.update.microsoft.com.
squidclient mgr:mem should show ever increasing HttpRequest instances.

As far as I can tell, the HttpRequest object created
in ConnStateData::buildFakeRequest() is never freed because its refcount >
0.

Any ideas where an HTTPMSGUNLOCK() might be missing?

Thanks!

On Wed, Jan 18, 2023 at 11:28?AM Hamilton Coutinho <
hamilton.coutinho at gmail.com> wrote:

> Hi Alex,
>
> Thanks for the prompt reply! Thanks also for the clarifications.
>
> Agreed, I just realized the requests seem to be failing
> with Http::scServiceUnavailable, so my focus turned
> to Security::PeerConnector::sslCrtvdHandleReply() and friends.
>
> Best.
>
> On Wed, Jan 18, 2023 at 11:11 AM Alex Rousskov <
> rousskov at measurement-factory.com> wrote:
>
>> On 1/18/23 13:46, Hamilton Coutinho wrote:
>> > Hi all,
>> >
>> > We are observing what seems to be several objects leaking in the output
>> > mgr:mem, to the tune of 10s of 1000s
>> >
>> of HttpRequest, HttpHeaderEntry, Comm::Connection, Security::ErrorDetail, cbdata
>> PeekingPeerConnector (31), etc.
>> >
>> > We dumped a core and managed to find some HttpRequest objects and they
>> > all seem to have failed in the same way, with an
>> ERR_SECURE_CONNECT_FAIL
>> > category, for a site that has a certificate signed by a CA authority
>> not
>> > available to squid.
>> >
>> > If I would guess, the origin of the problem might be in
>> > Ssl::PeekingPeerConnector::checkForPeekAndSpliceMatched():
>> >
>> >      if (finalAction == Ssl::bumpTerminate) {
>> >          bail(new ErrorState(ERR_SECURE_CONNECT_FAIL,
>> Http::scForbidden,
>> > request.getRaw(), al));
>> >          clientConn->close();
>> >          clientConn = nullptr;
>> >
>> > Wondering if assigning null to clientConn there would be premature.
>>
>>
>> FWIW, that connection pointer reset itself looks OK to me. ConnStateData
>> and/or others should have a connection closure handler attached to the
>> clientConn descriptor. That handler should be notified by Comm and
>> initiate cleanup of the objects responsible for client-Squid
>> communication.
>>
>> The bail() call above should inform the requestor about the
>> error/termination and terminate this AsyncJob. That requestor should
>> then close the Squid-server connection and clean up associated state.
>>
>> While there may be bugs in those "should..." sequences, please note that
>> the pasted code is not related to handling of untrusted origin servers
>> (unless your ssl_bump rules specifically activate the terminate action
>> upon discovering such an origin server). The pasted code is reacting to
>> an "ssl_bump terminate" rule matching.
>>
>>
>> Cheers,
>>
>> Alex.
>>
>> _______________________________________________
>> squid-dev mailing list
>> squid-dev at lists.squid-cache.org
>> http://lists.squid-cache.org/listinfo/squid-dev
>>
>
>
> --
> Hamilton
>


-- 
Hamilton
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20230323/24f5727d/attachment.htm>

From squid3 at treenet.co.nz  Mon Mar 27 11:05:59 2023
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Tue, 28 Mar 2023 00:05:59 +1300
Subject: [squid-dev] 6.0.2 release update
Message-ID: <0e4f49cd-6a0c-c7c8-f361-c3b032db72cc@treenet.co.nz>

Hi all,

Squid-6 beta release schedule calls for a 6.0.2 release this coming weekend.

However we have not had enough change to qualify for a new release 
packaging.
As such I/we are going to skip this monthly release.


Cheers
Amos


From hamilton.coutinho at gmail.com  Mon Mar 27 19:47:31 2023
From: hamilton.coutinho at gmail.com (Hamilton Coutinho)
Date: Mon, 27 Mar 2023 12:47:31 -0700
Subject: [squid-dev] Squid 5.6 leaking memory when peeking for an origin
 with an invalid certificate
In-Reply-To: <CAL34ibnfhSsN5=M-JDvi-Ng3cZyMs6mh_USuv8ForwFqFXwbPA@mail.gmail.com>
References: <CAL34ibm-a1GiedEOHO2LcCYzRZuJt_4Dm4ZjJfkEdweC5BNoYw@mail.gmail.com>
 <84f382a5-1830-39fa-5f0c-f0bc52425235@measurement-factory.com>
 <CAL34ib=pMDnt2jhf5aM1-=NGwCCq-d2swbtOpDYfT_C0-dqESw@mail.gmail.com>
 <CAL34ibnfhSsN5=M-JDvi-Ng3cZyMs6mh_USuv8ForwFqFXwbPA@mail.gmail.com>
Message-ID: <CAL34ibnCwGD7ZXHQ2EitHkHQbegvsaJDQf5kzk8mNmWGTb8-UQ@mail.gmail.com>

Hello all,

We moved one step closer to the root cause. We bisected the code and found
out that the commit that introduced the leak is:

$ git show --stat  800967afde7921eb22a2711c5a75b5cd9c9d7178
commit 800967afde7921eb22a2711c5a75b5cd9c9d7178 (HEAD)
Author: Christos Tsantilas <christos at chtsanti.net>
Date:   Mon Feb 22 21:15:32 2021 +0000

    Handling missing issuer certificates for TLSv1.3 (#766)

    Prior to TLS v1.3 Squid could detect and fetch missing intermediate
    server certificates by parsing TLS ServerHello. TLS v1.3 encrypts the
    relevant part of the handshake, making such "prefetch" impossible.

    Instead of looking for certificates in TLS ServerHello, Squid now waits
    for the OpenSSL built-in certificate validation to fail with an
    X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY error. Squid-supplied
    verify_callback function tells OpenSSL to ignore that error. Squid
    SSL_connect()-calling code detects that the error was ignored and, if
    possible, fetches the missing certificates and orchestrates certificate
    chain validation outside the SSL_connect() sequence. If that validation
    is successful, Squid continues with SSL_connect(). See comments inside
    Security::PeerConnector::negotiate() for low-level details.

    In some cases, OpenSSL is able to complete SSL_connect() with an ignored
    X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY error. If Squid validation
    fails afterwards, the TLS connection is closed (before any payload is
    exchanged). Ideally, the negotiation with an untrusted server should not
    complete, but complexity BIO changes required to prevent such premature
    completion is probably not worth reaching that ideal, especially since
    all of this is just a workaround.

    The long-term solution is adding SSL_ERROR_WANT_RETRY_VERIFY to OpenSSL,
    giving an application a chance to download the missing certificates
    during SSL_connect() negotiations. We assist OpenSSL team with that
    change, but it will not be available at least until OpenSSL v3.0.

    This description and changes are not specific to SslBump code paths.

    This is a Measurement Factory project.

 acinclude/lib-checks.m4       |   6 ++
 compat/openssl.h              |  30 +++++++++
 src/security/Handshake.cc     |  46 --------------
 src/security/Handshake.h      |   5 +-
 src/security/Io.cc            |  27 ++++++++
 src/security/Io.h             |  14 +++-
 src/security/PeerConnector.cc | 211
++++++++++++++++++++++++++++++++++++++++++++-----------------
 src/security/PeerConnector.h  |  46 ++++++++++----
 src/security/Session.h        |   4 ++
 src/ssl/bio.cc                |   7 --
 src/ssl/bio.h                 |   8 ---
 src/ssl/gadgets.h             |   1 +
 src/ssl/support.cc            | 355
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++----------------------------
 src/ssl/support.h             |  57 +++++++++++++++--
 src/tests/stub_libsecurity.cc |   4 +-
 15 files changed, 582 insertions(+), 239 deletions(-)

On Thu, Mar 23, 2023 at 4:56?PM Hamilton Coutinho <
hamilton.coutinho at gmail.com> wrote:

> Hi all,
>
> We found a way to reproduce the leak: set up squid to run in intercept
> mode + SSL description + memory pools off (to ease identifying the leak)
> and then generate requests to sites with invalid certs (eg, CA not
> installed), for instance: curl -k https://slscr.update.microsoft.com.
> squidclient mgr:mem should show ever increasing HttpRequest instances.
>
> As far as I can tell, the HttpRequest object created
> in ConnStateData::buildFakeRequest() is never freed because its refcount >
> 0.
>
> Any ideas where an HTTPMSGUNLOCK() might be missing?
>
> Thanks!
>
> On Wed, Jan 18, 2023 at 11:28?AM Hamilton Coutinho <
> hamilton.coutinho at gmail.com> wrote:
>
>> Hi Alex,
>>
>> Thanks for the prompt reply! Thanks also for the clarifications.
>>
>> Agreed, I just realized the requests seem to be failing
>> with Http::scServiceUnavailable, so my focus turned
>> to Security::PeerConnector::sslCrtvdHandleReply() and friends.
>>
>> Best.
>>
>> On Wed, Jan 18, 2023 at 11:11 AM Alex Rousskov <
>> rousskov at measurement-factory.com> wrote:
>>
>>> On 1/18/23 13:46, Hamilton Coutinho wrote:
>>> > Hi all,
>>> >
>>> > We are observing what seems to be several objects leaking in the
>>> output
>>> > mgr:mem, to the tune of 10s of 1000s
>>> >
>>> of HttpRequest, HttpHeaderEntry, Comm::Connection, Security::ErrorDetail, cbdata
>>> PeekingPeerConnector (31), etc.
>>> >
>>> > We dumped a core and managed to find some HttpRequest objects and they
>>> > all seem to have failed in the same way, with an
>>> ERR_SECURE_CONNECT_FAIL
>>> > category, for a site that has a certificate signed by a CA authority
>>> not
>>> > available to squid.
>>> >
>>> > If I would guess, the origin of the problem might be in
>>> > Ssl::PeekingPeerConnector::checkForPeekAndSpliceMatched():
>>> >
>>> >      if (finalAction == Ssl::bumpTerminate) {
>>> >          bail(new ErrorState(ERR_SECURE_CONNECT_FAIL,
>>> Http::scForbidden,
>>> > request.getRaw(), al));
>>> >          clientConn->close();
>>> >          clientConn = nullptr;
>>> >
>>> > Wondering if assigning null to clientConn there would be premature.
>>>
>>>
>>> FWIW, that connection pointer reset itself looks OK to me. ConnStateData
>>> and/or others should have a connection closure handler attached to the
>>> clientConn descriptor. That handler should be notified by Comm and
>>> initiate cleanup of the objects responsible for client-Squid
>>> communication.
>>>
>>> The bail() call above should inform the requestor about the
>>> error/termination and terminate this AsyncJob. That requestor should
>>> then close the Squid-server connection and clean up associated state.
>>>
>>> While there may be bugs in those "should..." sequences, please note that
>>> the pasted code is not related to handling of untrusted origin servers
>>> (unless your ssl_bump rules specifically activate the terminate action
>>> upon discovering such an origin server). The pasted code is reacting to
>>> an "ssl_bump terminate" rule matching.
>>>
>>>
>>> Cheers,
>>>
>>> Alex.
>>>
>>> _______________________________________________
>>> squid-dev mailing list
>>> squid-dev at lists.squid-cache.org
>>> http://lists.squid-cache.org/listinfo/squid-dev
>>>
>>
>>
>> --
>> Hamilton
>>
>
>
> --
> Hamilton
>


-- 
Hamilton
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20230327/bab43fe4/attachment.htm>

From squid3 at treenet.co.nz  Tue Mar 28 13:27:25 2023
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Wed, 29 Mar 2023 02:27:25 +1300
Subject: [squid-dev] Latest Clang build errors
Message-ID: <d8dce2b3-dcd2-5f11-f65c-24961b329e25@treenet.co.nz>

Alex, since the whole IPC and SHM system is your design are you able to 
work on fixing the FlexibleArray build errors we are now getting with 
clang v15.

IIRC FlexibleArray was a placeholder for std::dynarray, which is now 
officially dead. So if we can do an implementation which uses more 
standard behaviour it would be better.

Cheers
Amos


[1] Log excerpt from Jenkins:

01:00:06 In file included from ../../../../src/ipc/StoreMap.h:12,
01:00:06????????????????? from ../../../../src/fs/rock/RockRebuild.h:17,
01:00:06????????????????? from ../../../../src/fs/rock/RockRebuild.cc:15:
01:00:06 In member function 'Item& 
Ipc::Mem::FlexibleArray<Item>::operator[](int) [with Item = long 
unsigned int]',
01:00:06???? inlined from 'Ipc::StoreMapItems<C>::Item& 
Ipc::StoreMapItems<C>::at(int) [with C = long unsigned int]' at 
../../../../src/ipc/StoreMap.h:136:21,
01:00:06???? inlined from 'Rock::LoadingEntry::LoadingEntry(sfileno, 
Rock::LoadingParts&)' at ../../../../src/fs/rock/RockRebuild.cc:199:27:
01:00:06 ../../../../src/ipc/mem/FlexibleArray.h:34:52: error: array 
subscript -1 is below array bounds of 'long unsigned int [1]' 
[-Werror=array-bounds=]
01:00:06??? 34 |???? Item &operator [](const int idx) { return items[idx]; }
01:00:06?????? | ~~~~~^
01:00:06 ../../../../src/ipc/mem/FlexibleArray.h: In constructor 
'Rock::LoadingEntry::LoadingEntry(sfileno, Rock::LoadingParts&)':
01:00:06 ../../../../src/ipc/mem/FlexibleArray.h:43:10: note: while 
referencing 'Ipc::Mem::FlexibleArray<long unsigned int>::items'
01:00:06??? 43 |???? Item items[1]; // ensures proper alignment of array 
elements
01:00:06?????? |????????? ^~~~~
01:00:06 In member function 'Item& 
Ipc::Mem::FlexibleArray<Item>::operator[](int) [with Item = unsigned int]',
01:00:06???? inlined from 'Ipc::StoreMapItems<C>::Item& 
Ipc::StoreMapItems<C>::at(int) [with C = unsigned int]' at 
../../../../src/ipc/StoreMap.h:136:21,
01:00:06???? inlined from 'Rock::LoadingEntry::LoadingEntry(sfileno, 
Rock::LoadingParts&)' at ../../../../src/fs/rock/RockRebuild.cc:200:33:
01:00:06 ../../../../src/ipc/mem/FlexibleArray.h:34:52: error: array 
subscript -1 is below array bounds of 'unsigned int [1]' 
[-Werror=array-bounds=]
01:00:06??? 34 |???? Item &operator [](const int idx) { return items[idx]; }
01:00:06?????? | ~~~~~^
01:00:06 ../../../../src/ipc/mem/FlexibleArray.h: In constructor 
'Rock::LoadingEntry::LoadingEntry(sfileno, Rock::LoadingParts&)':
01:00:06 ../../../../src/ipc/mem/FlexibleArray.h:43:10: note: while 
referencing 'Ipc::Mem::FlexibleArray<unsigned int>::items'
01:00:06??? 43 |???? Item items[1]; // ensures proper alignment of array 
elements
01:00:06?????? |????????? ^~~~~
01:00:06 In member function 'Item& 
Ipc::Mem::FlexibleArray<Item>::operator[](int) [with Item = int]',
01:00:06???? inlined from 'Ipc::StoreMapItems<C>::Item& 
Ipc::StoreMapItems<C>::at(int) [with C = int]' at 
../../../../src/ipc/StoreMap.h:136:21,
01:00:06???? inlined from 'Rock::LoadingSlot::LoadingSlot(Rock::SlotId, 
Rock::LoadingParts&)' at ../../../../src/fs/rock/RockRebuild.cc:208:27:
01:00:06 ../../../../src/ipc/mem/FlexibleArray.h:34:52: error: array 
subscript -1 is below array bounds of 'int [1]' [-Werror=array-bounds=]
01:00:06??? 34 |???? Item &operator [](const int idx) { return items[idx]; }
01:00:06?????? | ~~~~~^
01:00:06 ../../../../src/ipc/mem/FlexibleArray.h: In constructor 
'Rock::LoadingSlot::LoadingSlot(Rock::SlotId, Rock::LoadingParts&)':
01:00:06 ../../../../src/ipc/mem/FlexibleArray.h:43:10: note: while 
referencing 'Ipc::Mem::FlexibleArray<int>::items'
01:00:06??? 43 |???? Item items[1]; // ensures proper alignment of array 
elements
01:00:06?????? |????????? ^~~~~
01:00:06 cc1plus: all warnings being treated as errors
01:00:06 make[4]: *** [Makefile:986: rock/RockRebuild.lo] Error 1
01:00:06 make[4]: Leaving directory 
'/srv/jenkins/workspace/5-pr-test/COMPILER/gcc/OS/fedora-rawhide/label/docker-build-host/btlayer-02-maximus/squid-7.0.0-VCS/_build/sub/src/fs'


From gkinkie at gmail.com  Tue Mar 28 14:04:30 2023
From: gkinkie at gmail.com (Francesco Chemolli)
Date: Tue, 28 Mar 2023 15:04:30 +0100
Subject: [squid-dev] Latest Clang build errors
In-Reply-To: <d8dce2b3-dcd2-5f11-f65c-24961b329e25@treenet.co.nz>
References: <d8dce2b3-dcd2-5f11-f65c-24961b329e25@treenet.co.nz>
Message-ID: <CA+Y8hcNydGSctekx0Y2DKp3q2yfbLWCt-aQUs9ic_eeoMrPu2Q@mail.gmail.com>

Hi all,
  that is not just with clang:
https://build.squid-cache.org/job/trunk-amd64-matrix/COMPILER=gcc,CPU=amd64,OS=fedora-rawhide,force_on_docker_arm64=docker-build-host-lowpri/434/console
shows the error on gcc 13.

I recall a conversation where Alex showed it to be a compiler issue, but I
can't find it now.

On Tue, Mar 28, 2023 at 2:27?PM Amos Jeffries <squid3 at treenet.co.nz> wrote:

> Alex, since the whole IPC and SHM system is your design are you able to
> work on fixing the FlexibleArray build errors we are now getting with
> clang v15.
>
> IIRC FlexibleArray was a placeholder for std::dynarray, which is now
> officially dead. So if we can do an implementation which uses more
> standard behaviour it would be better.
>
> Cheers
> Amos
>
>
> [1] Log excerpt from Jenkins:
>
> 01:00:06 In file included from ../../../../src/ipc/StoreMap.h:12,
> 01:00:06                  from ../../../../src/fs/rock/RockRebuild.h:17,
> 01:00:06                  from ../../../../src/fs/rock/RockRebuild.cc:15:
> 01:00:06 In member function 'Item&
> Ipc::Mem::FlexibleArray<Item>::operator[](int) [with Item = long
> unsigned int]',
> 01:00:06     inlined from 'Ipc::StoreMapItems<C>::Item&
> Ipc::StoreMapItems<C>::at(int) [with C = long unsigned int]' at
> ../../../../src/ipc/StoreMap.h:136:21,
> 01:00:06     inlined from 'Rock::LoadingEntry::LoadingEntry(sfileno,
> Rock::LoadingParts&)' at ../../../../src/fs/rock/RockRebuild.cc:199:27:
> 01:00:06 ../../../../src/ipc/mem/FlexibleArray.h:34:52: error: array
> subscript -1 is below array bounds of 'long unsigned int [1]'
> [-Werror=array-bounds=]
> 01:00:06    34 |     Item &operator [](const int idx) { return items[idx];
> }
> 01:00:06       | ~~~~~^
> 01:00:06 ../../../../src/ipc/mem/FlexibleArray.h: In constructor
> 'Rock::LoadingEntry::LoadingEntry(sfileno, Rock::LoadingParts&)':
> 01:00:06 ../../../../src/ipc/mem/FlexibleArray.h:43:10: note: while
> referencing 'Ipc::Mem::FlexibleArray<long unsigned int>::items'
> 01:00:06    43 |     Item items[1]; // ensures proper alignment of array
> elements
> 01:00:06       |          ^~~~~
> 01:00:06 In member function 'Item&
> Ipc::Mem::FlexibleArray<Item>::operator[](int) [with Item = unsigned int]',
> 01:00:06     inlined from 'Ipc::StoreMapItems<C>::Item&
> Ipc::StoreMapItems<C>::at(int) [with C = unsigned int]' at
> ../../../../src/ipc/StoreMap.h:136:21,
> 01:00:06     inlined from 'Rock::LoadingEntry::LoadingEntry(sfileno,
> Rock::LoadingParts&)' at ../../../../src/fs/rock/RockRebuild.cc:200:33:
> 01:00:06 ../../../../src/ipc/mem/FlexibleArray.h:34:52: error: array
> subscript -1 is below array bounds of 'unsigned int [1]'
> [-Werror=array-bounds=]
> 01:00:06    34 |     Item &operator [](const int idx) { return items[idx];
> }
> 01:00:06       | ~~~~~^
> 01:00:06 ../../../../src/ipc/mem/FlexibleArray.h: In constructor
> 'Rock::LoadingEntry::LoadingEntry(sfileno, Rock::LoadingParts&)':
> 01:00:06 ../../../../src/ipc/mem/FlexibleArray.h:43:10: note: while
> referencing 'Ipc::Mem::FlexibleArray<unsigned int>::items'
> 01:00:06    43 |     Item items[1]; // ensures proper alignment of array
> elements
> 01:00:06       |          ^~~~~
> 01:00:06 In member function 'Item&
> Ipc::Mem::FlexibleArray<Item>::operator[](int) [with Item = int]',
> 01:00:06     inlined from 'Ipc::StoreMapItems<C>::Item&
> Ipc::StoreMapItems<C>::at(int) [with C = int]' at
> ../../../../src/ipc/StoreMap.h:136:21,
> 01:00:06     inlined from 'Rock::LoadingSlot::LoadingSlot(Rock::SlotId,
> Rock::LoadingParts&)' at ../../../../src/fs/rock/RockRebuild.cc:208:27:
> 01:00:06 ../../../../src/ipc/mem/FlexibleArray.h:34:52: error: array
> subscript -1 is below array bounds of 'int [1]' [-Werror=array-bounds=]
> 01:00:06    34 |     Item &operator [](const int idx) { return items[idx];
> }
> 01:00:06       | ~~~~~^
> 01:00:06 ../../../../src/ipc/mem/FlexibleArray.h: In constructor
> 'Rock::LoadingSlot::LoadingSlot(Rock::SlotId, Rock::LoadingParts&)':
> 01:00:06 ../../../../src/ipc/mem/FlexibleArray.h:43:10: note: while
> referencing 'Ipc::Mem::FlexibleArray<int>::items'
> 01:00:06    43 |     Item items[1]; // ensures proper alignment of array
> elements
> 01:00:06       |          ^~~~~
> 01:00:06 cc1plus: all warnings being treated as errors
> 01:00:06 make[4]: *** [Makefile:986: rock/RockRebuild.lo] Error 1
> 01:00:06 make[4]: Leaving directory
>
> '/srv/jenkins/workspace/5-pr-test/COMPILER/gcc/OS/fedora-rawhide/label/docker-build-host/btlayer-02-maximus/squid-7.0.0-VCS/_build/sub/src/fs'
>
> _______________________________________________
> squid-dev mailing list
> squid-dev at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-dev
>


-- 
    Francesco
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20230328/ee3cd16a/attachment.htm>

From rousskov at measurement-factory.com  Wed Mar 29 13:57:02 2023
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Wed, 29 Mar 2023 09:57:02 -0400
Subject: [squid-dev] Latest Clang build errors
In-Reply-To: <d8dce2b3-dcd2-5f11-f65c-24961b329e25@treenet.co.nz>
References: <d8dce2b3-dcd2-5f11-f65c-24961b329e25@treenet.co.nz>
Message-ID: <f299e270-e9d2-2637-6fd6-28927b3f716c@measurement-factory.com>

On 3/28/23 09:27, Amos Jeffries wrote:
> Alex, since the whole IPC and SHM system is your design are you able to 
> work on fixing the FlexibleArray build errors we are now getting with 
> clang v15.

Sure, I will work on this. I doubt I will be able to post a fix in the 
next few days due to travel, but I am sure we can figure it out in a 
week or so.

Alex.


> [1] Log excerpt from Jenkins:
> 
> 01:00:06 In file included from ../../../../src/ipc/StoreMap.h:12,
> 01:00:06????????????????? from ../../../../src/fs/rock/RockRebuild.h:17,
> 01:00:06????????????????? from ../../../../src/fs/rock/RockRebuild.cc:15:
> 01:00:06 In member function 'Item& 
> Ipc::Mem::FlexibleArray<Item>::operator[](int) [with Item = long 
> unsigned int]',
> 01:00:06???? inlined from 'Ipc::StoreMapItems<C>::Item& 
> Ipc::StoreMapItems<C>::at(int) [with C = long unsigned int]' at 
> ../../../../src/ipc/StoreMap.h:136:21,
> 01:00:06???? inlined from 'Rock::LoadingEntry::LoadingEntry(sfileno, 
> Rock::LoadingParts&)' at ../../../../src/fs/rock/RockRebuild.cc:199:27:
> 01:00:06 ../../../../src/ipc/mem/FlexibleArray.h:34:52: error: array 
> subscript -1 is below array bounds of 'long unsigned int [1]' 
> [-Werror=array-bounds=]
> 01:00:06??? 34 |???? Item &operator [](const int idx) { return 
> items[idx]; }
> 01:00:06?????? | ~~~~~^
> 01:00:06 ../../../../src/ipc/mem/FlexibleArray.h: In constructor 
> 'Rock::LoadingEntry::LoadingEntry(sfileno, Rock::LoadingParts&)':
> 01:00:06 ../../../../src/ipc/mem/FlexibleArray.h:43:10: note: while 
> referencing 'Ipc::Mem::FlexibleArray<long unsigned int>::items'
> 01:00:06??? 43 |???? Item items[1]; // ensures proper alignment of array 
> elements
> 01:00:06?????? |????????? ^~~~~
> 01:00:06 In member function 'Item& 
> Ipc::Mem::FlexibleArray<Item>::operator[](int) [with Item = unsigned int]',
> 01:00:06???? inlined from 'Ipc::StoreMapItems<C>::Item& 
> Ipc::StoreMapItems<C>::at(int) [with C = unsigned int]' at 
> ../../../../src/ipc/StoreMap.h:136:21,
> 01:00:06???? inlined from 'Rock::LoadingEntry::LoadingEntry(sfileno, 
> Rock::LoadingParts&)' at ../../../../src/fs/rock/RockRebuild.cc:200:33:
> 01:00:06 ../../../../src/ipc/mem/FlexibleArray.h:34:52: error: array 
> subscript -1 is below array bounds of 'unsigned int [1]' 
> [-Werror=array-bounds=]
> 01:00:06??? 34 |???? Item &operator [](const int idx) { return 
> items[idx]; }
> 01:00:06?????? | ~~~~~^
> 01:00:06 ../../../../src/ipc/mem/FlexibleArray.h: In constructor 
> 'Rock::LoadingEntry::LoadingEntry(sfileno, Rock::LoadingParts&)':
> 01:00:06 ../../../../src/ipc/mem/FlexibleArray.h:43:10: note: while 
> referencing 'Ipc::Mem::FlexibleArray<unsigned int>::items'
> 01:00:06??? 43 |???? Item items[1]; // ensures proper alignment of array 
> elements
> 01:00:06?????? |????????? ^~~~~
> 01:00:06 In member function 'Item& 
> Ipc::Mem::FlexibleArray<Item>::operator[](int) [with Item = int]',
> 01:00:06???? inlined from 'Ipc::StoreMapItems<C>::Item& 
> Ipc::StoreMapItems<C>::at(int) [with C = int]' at 
> ../../../../src/ipc/StoreMap.h:136:21,
> 01:00:06???? inlined from 'Rock::LoadingSlot::LoadingSlot(Rock::SlotId, 
> Rock::LoadingParts&)' at ../../../../src/fs/rock/RockRebuild.cc:208:27:
> 01:00:06 ../../../../src/ipc/mem/FlexibleArray.h:34:52: error: array 
> subscript -1 is below array bounds of 'int [1]' [-Werror=array-bounds=]
> 01:00:06??? 34 |???? Item &operator [](const int idx) { return 
> items[idx]; }
> 01:00:06?????? | ~~~~~^
> 01:00:06 ../../../../src/ipc/mem/FlexibleArray.h: In constructor 
> 'Rock::LoadingSlot::LoadingSlot(Rock::SlotId, Rock::LoadingParts&)':
> 01:00:06 ../../../../src/ipc/mem/FlexibleArray.h:43:10: note: while 
> referencing 'Ipc::Mem::FlexibleArray<int>::items'
> 01:00:06??? 43 |???? Item items[1]; // ensures proper alignment of array 
> elements
> 01:00:06?????? |????????? ^~~~~
> 01:00:06 cc1plus: all warnings being treated as errors
> 01:00:06 make[4]: *** [Makefile:986: rock/RockRebuild.lo] Error 1
> 01:00:06 make[4]: Leaving directory 
> '/srv/jenkins/workspace/5-pr-test/COMPILER/gcc/OS/fedora-rawhide/label/docker-build-host/btlayer-02-maximus/squid-7.0.0-VCS/_build/sub/src/fs'

