From squid3 at treenet.co.nz  Fri May  5 13:39:10 2023
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Sat, 6 May 2023 01:39:10 +1200
Subject: [squid-dev] RFC: GitHub Projects and Issues
Message-ID: <27063216-cb2a-2749-2a87-2dbd137e162d@treenet.co.nz>

Greetings all,

You may (or not) have noticed that recently I have been experimenting 
with GitHub Projects.
Creating a few for the major long-term efforts and assigned a number of 
the open PRs to them.

IMO this looks like it could be a better way to track progress on 
incomplete features or code conversions instead of wiki Feature pages.
But the current limitation that only PRs can be linked to it prevents it 
being a full replacement. We do not currently have a good way to add 
TODO listings to track how close to complete it is.

That limitation might be resolved by enabling GitHub Issues for (only) 
feature-enhancement TODO items prior to PR creation.

Amos


From rousskov at measurement-factory.com  Fri May  5 15:50:59 2023
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Fri, 5 May 2023 11:50:59 -0400
Subject: [squid-dev] RFC: GitHub Projects and Issues
In-Reply-To: <27063216-cb2a-2749-2a87-2dbd137e162d@treenet.co.nz>
References: <27063216-cb2a-2749-2a87-2dbd137e162d@treenet.co.nz>
Message-ID: <363c96c8-066d-1a18-38d7-5af5cdf5aca3@measurement-factory.com>

On 5/5/23 09:39, Amos Jeffries wrote:

> You may (or not) have noticed that recently I have been experimenting 
> with GitHub Projects.
> Creating a few for the major long-term efforts and assigned a number of 
> the open PRs to them.
>
> IMO this looks like it could be a better way to track progress on 
> incomplete features or code conversions instead of wiki Feature pages.

I am against using GitHub Projects for projects that lack Squid Project 
consensus. Just like Feature pages, GitHub Projects currently create a 
false impression that the Squid Project has agreed that some activity is 
a good idea, that some details of that activity have been reviewed and 
approved by the Squid Project, and/or that some GitHub PRs match that 
good idea.

I wish you have not started using GitHub Projects before discussing that 
shared Squid Project resource use. Please pause that experiment.


> That limitation might be resolved by enabling GitHub Issues for (only) 
> feature-enhancement TODO items prior to PR creation.

Enabling GitHub Issues and then rejecting "regular" bug reports 
submitted via GitHub Issues is bad UX. IMO, we should either enable 
GitHub Issues for regular bug reports and other issues that folks expect 
to file via GitHub Issues (and deprecate Bugzilla) or not enable them at 
all.


HTH,

Alex.


From ngtech1ltd at gmail.com  Fri May  5 19:28:26 2023
From: ngtech1ltd at gmail.com (ngtech1ltd at gmail.com)
Date: Fri, 5 May 2023 22:28:26 +0300
Subject: [squid-dev] RFC: GitHub Projects and Issues
In-Reply-To: <363c96c8-066d-1a18-38d7-5af5cdf5aca3@measurement-factory.com>
References: <27063216-cb2a-2749-2a87-2dbd137e162d@treenet.co.nz>
 <363c96c8-066d-1a18-38d7-5af5cdf5aca3@measurement-factory.com>
Message-ID: <001101d97f87$c4d22840$4e7678c0$@gmail.com>

Hey Amos and Alex,

(Writing freely)

It's pretty simple to understand that there are two sides to the same picture so it's
possible that there are multiple scenarios.
To my understanding opening GitHub issues is not an explicit move that states any migration
from https://bugs.squid-cache.org/ towards any other option.
I want to believe that developers and sysadmins are smart enough to understand a declaration
on the GitHub issues template. (Assuming they will read the text..)

In general opening an issue is nice and will probably help to work with PR's but the main question is:
Will it bring more then there is today?

However, there is another issue.
The development team will need to be watch another vector in the development cycle and I believe
that it's already not a simple task as it is.

It's better to think about any way to address both the technical and the administrative overhead
that I might suspect it will leave the development team with before the full adoption.

I believe that for now restricting the issues with an experimental statement would be enough.
If Amos feels fine with handling all the issues related syn/syn-ack/ack of any issue being opened
by himself I believe it will not harm anyone.

HTH,
Eliezer

-----Original Message-----
From: squid-dev <squid-dev-bounces at lists.squid-cache.org> On Behalf Of Alex Rousskov
Sent: Friday, May 5, 2023 6:51 PM
To: squid-dev at lists.squid-cache.org
Subject: Re: [squid-dev] RFC: GitHub Projects and Issues

On 5/5/23 09:39, Amos Jeffries wrote:

> You may (or not) have noticed that recently I have been experimenting 
> with GitHub Projects.
> Creating a few for the major long-term efforts and assigned a number of 
> the open PRs to them.
>
> IMO this looks like it could be a better way to track progress on 
> incomplete features or code conversions instead of wiki Feature pages.

I am against using GitHub Projects for projects that lack Squid Project 
consensus. Just like Feature pages, GitHub Projects currently create a 
false impression that the Squid Project has agreed that some activity is 
a good idea, that some details of that activity have been reviewed and 
approved by the Squid Project, and/or that some GitHub PRs match that 
good idea.

I wish you have not started using GitHub Projects before discussing that 
shared Squid Project resource use. Please pause that experiment.


> That limitation might be resolved by enabling GitHub Issues for (only) 
> feature-enhancement TODO items prior to PR creation.

Enabling GitHub Issues and then rejecting "regular" bug reports 
submitted via GitHub Issues is bad UX. IMO, we should either enable 
GitHub Issues for regular bug reports and other issues that folks expect 
to file via GitHub Issues (and deprecate Bugzilla) or not enable them at 
all.


HTH,

Alex.

_______________________________________________
squid-dev mailing list
squid-dev at lists.squid-cache.org
http://lists.squid-cache.org/listinfo/squid-dev


From rousskov at measurement-factory.com  Wed May 10 21:09:17 2023
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Wed, 10 May 2023 17:09:17 -0400
Subject: [squid-dev] Squid 5.6 leaking memory when peeking for an origin
 with an invalid certificate
In-Reply-To: <CAL34ibnfhSsN5=M-JDvi-Ng3cZyMs6mh_USuv8ForwFqFXwbPA@mail.gmail.com>
References: <CAL34ibm-a1GiedEOHO2LcCYzRZuJt_4Dm4ZjJfkEdweC5BNoYw@mail.gmail.com>
 <84f382a5-1830-39fa-5f0c-f0bc52425235@measurement-factory.com>
 <CAL34ib=pMDnt2jhf5aM1-=NGwCCq-d2swbtOpDYfT_C0-dqESw@mail.gmail.com>
 <CAL34ibnfhSsN5=M-JDvi-Ng3cZyMs6mh_USuv8ForwFqFXwbPA@mail.gmail.com>
Message-ID: <fc076b66-7127-6e16-4bdb-31571cf5fd7b@measurement-factory.com>

On 3/23/23 19:56, Hamilton Coutinho wrote:

> We found a way to reproduce the leak: set up squid to run in intercept 
> mode?+ SSL description?+ memory pools off (to ease identifying the leak) 
> and then generate requests to sites with invalid certs (eg, CA not 
> installed), for instance:?curl -k https://slscr.update.microsoft.com 

Thanks a lot for sharing those details! Using them, I was able to 
reproduce one memory leak. Please try the following fix:
https://github.com/squid-cache/squid/pull/1346

I do not know whether that PR changes port to v5 cleanly or whether the 
same bug exists in v5. I can only speculate that v5 has a similar leak.


> squidclient mgr:mem should show ever increasing HttpRequest instances.

> As far as I can tell, the HttpRequest object created 
> in?ConnStateData::buildFakeRequest() is never freed because its refcount 
>  > 0.

> Any ideas where an HTTPMSGUNLOCK() might be missing?

Sorry, I do not know. In my master/v7-based tests, HttpRequest objects 
are not leaking. However, I am not testing an intercepting Squid. I 
still have one red flag to investigate, so perhaps I will be able to 
reproduce and fix that HttpRequest leak as well.


HTH,

Alex.


> On Wed, Jan 18, 2023 at 11:28?AM Hamilton Coutinho wrote:
> 
>     Hi Alex,
> 
>     Thanks for the prompt reply! Thanks also for the clarifications.
> 
>     Agreed, I just realized the requests seem to be failing
>     with?Http::scServiceUnavailable, so my focus turned
>     to?Security::PeerConnector::sslCrtvdHandleReply() and friends.
> 
>     Best.
> 
>     On Wed, Jan 18, 2023 at 11:11 AM Alex Rousskov
>     <rousskov at measurement-factory.com
>     <mailto:rousskov at measurement-factory.com>> wrote:
> 
>         On 1/18/23 13:46, Hamilton Coutinho wrote:
>          > Hi all,
>          >
>          > We are observing what seems to be several objects leaking in
>         the output
>          > mgr:mem, to the tune of 10s of 1000s
>          >
>         of?HttpRequest,?HttpHeaderEntry,?Comm::Connection,?Security::ErrorDetail,?cbdata PeekingPeerConnector (31), etc.
>          >
>          > We dumped a core and managed to find some HttpRequest objects
>         and they
>          > all seem to have failed in the same way, with an
>         ERR_SECURE_CONNECT_FAIL
>          > category, for a site that has a certificate signed by a CA
>         authority not
>          > available to squid.
>          >
>          > If I would guess, the origin of the problem might be in
>          > Ssl::PeekingPeerConnector::checkForPeekAndSpliceMatched():
>          >
>          >? ? ? if (finalAction == Ssl::bumpTerminate) {
>          >? ? ? ? ? bail(new ErrorState(ERR_SECURE_CONNECT_FAIL,
>         Http::scForbidden,
>          > request.getRaw(), al));
>          >? ? ? ? ? clientConn->close();
>          >? ? ? ? ? clientConn = nullptr;
>          >
>          > Wondering if assigning null to clientConn there would be
>         premature.
> 
> 
>         FWIW, that connection pointer reset itself looks OK to me.
>         ConnStateData
>         and/or others should have a connection closure handler attached
>         to the
>         clientConn descriptor. That handler should be notified by Comm and
>         initiate cleanup of the objects responsible for client-Squid
>         communication.
> 
>         The bail() call above should inform the requestor about the
>         error/termination and terminate this AsyncJob. That requestor
>         should
>         then close the Squid-server connection and clean up associated
>         state.
> 
>         While there may be bugs in those "should..." sequences, please
>         note that
>         the pasted code is not related to handling of untrusted origin
>         servers
>         (unless your ssl_bump rules specifically activate the terminate
>         action
>         upon discovering such an origin server). The pasted code is
>         reacting to
>         an "ssl_bump terminate" rule matching.
> 
> 
>         Cheers,
> 
>         Alex.
> 
>         _______________________________________________
>         squid-dev mailing list
>         squid-dev at lists.squid-cache.org
>         <mailto:squid-dev at lists.squid-cache.org>
>         http://lists.squid-cache.org/listinfo/squid-dev
>         <http://lists.squid-cache.org/listinfo/squid-dev>
> 
> 
> 
>     -- 
>     Hamilton
> 
> 
> 
> -- 
> Hamilton
> 
> _______________________________________________
> squid-dev mailing list
> squid-dev at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-dev


From hamilton.coutinho at gmail.com  Wed May 10 23:05:25 2023
From: hamilton.coutinho at gmail.com (Hamilton Coutinho)
Date: Wed, 10 May 2023 16:05:25 -0700
Subject: [squid-dev] Squid 5.6 leaking memory when peeking for an origin
 with an invalid certificate
In-Reply-To: <fc076b66-7127-6e16-4bdb-31571cf5fd7b@measurement-factory.com>
References: <CAL34ibm-a1GiedEOHO2LcCYzRZuJt_4Dm4ZjJfkEdweC5BNoYw@mail.gmail.com>
 <84f382a5-1830-39fa-5f0c-f0bc52425235@measurement-factory.com>
 <CAL34ib=pMDnt2jhf5aM1-=NGwCCq-d2swbtOpDYfT_C0-dqESw@mail.gmail.com>
 <CAL34ibnfhSsN5=M-JDvi-Ng3cZyMs6mh_USuv8ForwFqFXwbPA@mail.gmail.com>
 <fc076b66-7127-6e16-4bdb-31571cf5fd7b@measurement-factory.com>
Message-ID: <CAL34ibkuWuftrpsfvxVuzfZY3=L_RR80MRZeDgd+9zeCR3CRxg@mail.gmail.com>

Hi Alex,

Thanks for your reply. I will try your patch.

FWIW, we eventually arrived at a very different fix. See attached.

Best.

On Wed, May 10, 2023 at 2:09?PM Alex Rousskov <
rousskov at measurement-factory.com> wrote:

> On 3/23/23 19:56, Hamilton Coutinho wrote:
>
> > We found a way to reproduce the leak: set up squid to run in intercept
> > mode + SSL description + memory pools off (to ease identifying the leak)
> > and then generate requests to sites with invalid certs (eg, CA not
> > installed), for instance: curl -k https://slscr.update.microsoft.com
>
> Thanks a lot for sharing those details! Using them, I was able to
> reproduce one memory leak. Please try the following fix:
> https://github.com/squid-cache/squid/pull/1346
>
> I do not know whether that PR changes port to v5 cleanly or whether the
> same bug exists in v5. I can only speculate that v5 has a similar leak.
>
>
> > squidclient mgr:mem should show ever increasing HttpRequest instances.
>
> > As far as I can tell, the HttpRequest object created
> > in ConnStateData::buildFakeRequest() is never freed because its refcount
> >  > 0.
>
> > Any ideas where an HTTPMSGUNLOCK() might be missing?
>
> Sorry, I do not know. In my master/v7-based tests, HttpRequest objects
> are not leaking. However, I am not testing an intercepting Squid. I
> still have one red flag to investigate, so perhaps I will be able to
> reproduce and fix that HttpRequest leak as well.
>
>
> HTH,
>
> Alex.
>
>
> > On Wed, Jan 18, 2023 at 11:28?AM Hamilton Coutinho wrote:
> >
> >     Hi Alex,
> >
> >     Thanks for the prompt reply! Thanks also for the clarifications.
> >
> >     Agreed, I just realized the requests seem to be failing
> >     with Http::scServiceUnavailable, so my focus turned
> >     to Security::PeerConnector::sslCrtvdHandleReply() and friends.
> >
> >     Best.
> >
> >     On Wed, Jan 18, 2023 at 11:11 AM Alex Rousskov
> >     <rousskov at measurement-factory.com
> >     <mailto:rousskov at measurement-factory.com>> wrote:
> >
> >         On 1/18/23 13:46, Hamilton Coutinho wrote:
> >          > Hi all,
> >          >
> >          > We are observing what seems to be several objects leaking in
> >         the output
> >          > mgr:mem, to the tune of 10s of 1000s
> >          >
> >
>  of HttpRequest, HttpHeaderEntry, Comm::Connection, Security::ErrorDetail, cbdata
> PeekingPeerConnector (31), etc.
> >          >
> >          > We dumped a core and managed to find some HttpRequest objects
> >         and they
> >          > all seem to have failed in the same way, with an
> >         ERR_SECURE_CONNECT_FAIL
> >          > category, for a site that has a certificate signed by a CA
> >         authority not
> >          > available to squid.
> >          >
> >          > If I would guess, the origin of the problem might be in
> >          > Ssl::PeekingPeerConnector::checkForPeekAndSpliceMatched():
> >          >
> >          >      if (finalAction == Ssl::bumpTerminate) {
> >          >          bail(new ErrorState(ERR_SECURE_CONNECT_FAIL,
> >         Http::scForbidden,
> >          > request.getRaw(), al));
> >          >          clientConn->close();
> >          >          clientConn = nullptr;
> >          >
> >          > Wondering if assigning null to clientConn there would be
> >         premature.
> >
> >
> >         FWIW, that connection pointer reset itself looks OK to me.
> >         ConnStateData
> >         and/or others should have a connection closure handler attached
> >         to the
> >         clientConn descriptor. That handler should be notified by Comm
> and
> >         initiate cleanup of the objects responsible for client-Squid
> >         communication.
> >
> >         The bail() call above should inform the requestor about the
> >         error/termination and terminate this AsyncJob. That requestor
> >         should
> >         then close the Squid-server connection and clean up associated
> >         state.
> >
> >         While there may be bugs in those "should..." sequences, please
> >         note that
> >         the pasted code is not related to handling of untrusted origin
> >         servers
> >         (unless your ssl_bump rules specifically activate the terminate
> >         action
> >         upon discovering such an origin server). The pasted code is
> >         reacting to
> >         an "ssl_bump terminate" rule matching.
> >
> >
> >         Cheers,
> >
> >         Alex.
> >
> >         _______________________________________________
> >         squid-dev mailing list
> >         squid-dev at lists.squid-cache.org
> >         <mailto:squid-dev at lists.squid-cache.org>
> >         http://lists.squid-cache.org/listinfo/squid-dev
> >         <http://lists.squid-cache.org/listinfo/squid-dev>
> >
> >
> >
> >     --
> >     Hamilton
> >
> >
> >
> > --
> > Hamilton
> >
> > _______________________________________________
> > squid-dev mailing list
> > squid-dev at lists.squid-cache.org
> > http://lists.squid-cache.org/listinfo/squid-dev
>
> _______________________________________________
> squid-dev mailing list
> squid-dev at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-dev
>


-- 
Hamilton
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20230510/3c75bcf6/attachment.htm>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: squid.diff
Type: text/x-patch
Size: 1179 bytes
Desc: not available
URL: <http://lists.squid-cache.org/pipermail/squid-dev/attachments/20230510/3c75bcf6/attachment.bin>

