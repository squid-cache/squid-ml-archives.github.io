=== modified file 'helpers/negotiate_auth/kerberos/negotiate_kerberos_auth.cc'
--- helpers/negotiate_auth/kerberos/negotiate_kerberos_auth.cc	2014-12-19 22:16:42 +0000
+++ helpers/negotiate_auth/kerberos/negotiate_kerberos_auth.cc	2014-12-20 00:58:24 +0000
@@ -72,7 +72,7 @@
 check_k5_err(krb5_context context, const char *function, krb5_error_code code)
 {
 
-    if (code) {
+    if (code && code != KRB5_KT_END) {
         const char *errmsg;
         errmsg = krb5_get_error_message(context, code);
         debug((char *) "%s| %s: ERROR: %s failed: %s\n", LogTime(), PROGRAM, function, errmsg);
@@ -392,12 +392,12 @@
             struct stat fstat;
             char *ktp;
 #endif
-	    if (optarg)
+            if (optarg)
                 keytab_name = xstrdup(optarg);
-	    else {
+            else {
                 fprintf(stderr, "ERROR: keytab file not given\n");
-		exit(1);
-	    }
+                exit(1);
+            }
             /*
              * Some sanity checks
              */
@@ -428,12 +428,12 @@
 #if HAVE_SYS_STAT_H
             struct stat dstat;
 #endif
-	    if (optarg)
+            if (optarg)
                 rcache_dir = xstrdup(optarg);
-	    else {
+            else {
                 fprintf(stderr, "ERROR: replay cache directory not given\n");
-		exit(1);
-	    }
+                exit(1);
+            }
             /*
              * Some sanity checks
              */
@@ -457,20 +457,20 @@
 #endif
             break;
         case 't':
-	    if (optarg)
+            if (optarg)
                 rcache_type = xstrdup(optarg);
-	    else {
+            else {
                 fprintf(stderr, "ERROR: replay cache type not given\n");
-		exit(1);
-	    }
+                exit(1);
+            }
             break;
         case 's':
-	    if (optarg)
+            if (optarg)
                 service_principal = xstrdup(optarg);
-	    else {
+            else {
                 fprintf(stderr, "ERROR: service principal not given\n");
-		exit(1);
-	    }
+                exit(1);
+            }
             break;
         default:
             fprintf(stderr, "Usage: \n");
@@ -570,6 +570,11 @@
                       LogTime(), PROGRAM, memory_keytab_name);
             }
         }
+        ret = krb5_free_kt_list(context,ktlist);
+        if (check_k5_err(context, "krb5_free_kt_list", ret)) {
+            debug((char *) "%s| %s: ERROR: Freeing list failed\n",
+                  LogTime(), PROGRAM);
+        }
     }
     krb5_free_context(context);
 #endif

