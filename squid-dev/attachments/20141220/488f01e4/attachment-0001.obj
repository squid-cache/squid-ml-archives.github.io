# Bazaar merge directive format 2 (Bazaar 0.90)
# revision_id: kinkie@squid-cache.org-20141220081705-og9j2t8qkgwljfqh
# target_branch: ../trunk
# testament_sha1: e553bb2e6bc9e01db8d9fca85728b58e738aaee1
# timestamp: 2014-12-20 09:52:42 +0100
# base_revision_id: squid3@treenet.co.nz-20141217135310-\
#   jh1k98po0cxgx0dt
# 
# Begin patch
=== modified file 'helpers/basic_auth/MSNT/Makefile.am'
--- helpers/basic_auth/MSNT/Makefile.am	2014-09-02 01:08:58 +0000
+++ helpers/basic_auth/MSNT/Makefile.am	2014-12-20 08:14:09 +0000
@@ -7,32 +7,19 @@
 
 include $(top_srcdir)/src/Common.am
 
-MSNTAUTH_CONF = $(sysconfdir)/msntauth.conf
-
 libexec_PROGRAMS = basic_msnt_auth
 
 basic_msnt_auth_SOURCES = \
-	allowusers.cc \
-	confload.cc \
-	denyusers.cc \
 	msntauth.cc \
 	msntauth.h \
-	usersfile.cc \
-	usersfile.h \
 	valid.cc \
 	valid.h
 
 EXTRA_DIST = \
-	msntauth.conf.default \
 	msntauth-v2.0.lsm \
 	README.html \
 	required.m4
 
-sysconf_DATA = \
-	msntauth.conf.default
-
-CFLAGS += -DSYSCONFDIR=\"$(sysconfdir)\"
-CXXFLAGS += -DSYSCONFDIR=\"$(sysconfdir)\"
 LDADD = \
 	$(top_builddir)/lib/smblib/libsmblib.la \
 	$(top_builddir)/lib/rfcnb/librfcnb.la \
@@ -42,17 +29,3 @@
 
 ## we need our local files too (but avoid -I. at all costs)
 AM_CPPFLAGS += -I$(srcdir) -I$(top_srcdir)/lib
-
-
-install-data-local: msntauth.conf.default
-	@if test -f $(DESTDIR)$(MSNTAUTH_CONF) ; then \
-		echo "$@ will not overwrite existing $(DESTDIR)$(MSNTAUTH_CONF)" ; \
-	else \
-		echo "$(INSTALL_DATA) $(srcdir)/msntauth.conf.default $(DESTDIR)$(MSNTAUTH_CONF)" ; \
-		$(INSTALL_DATA) $(srcdir)/msntauth.conf.default $(DESTDIR)$(MSNTAUTH_CONF) ; \
-	fi
-
-uninstall-local:
-	@$(SHELL) $(top_srcdir)/scripts/remove-cfg.sh "$(RM)" $(DESTDIR)$(MSNTAUTH_CONF)
-	$(RM) -f $(DESTDIR)$(MSNTAUTH_CONF).default
-

=== removed file 'helpers/basic_auth/MSNT/allowusers.cc'
--- helpers/basic_auth/MSNT/allowusers.cc	2014-09-02 01:08:58 +0000
+++ helpers/basic_auth/MSNT/allowusers.cc	1970-01-01 00:00:00 +0000
@@ -1,58 +0,0 @@
-/*
- * Copyright (C) 1996-2014 The Squid Software Foundation and contributors
- *
- * Squid software is distributed under GPLv2+ license and includes
- * contributions from numerous individuals and organizations.
- * Please see the COPYING and CONTRIBUTORS files for details.
- */
-
-/*
- * allowusers.c
- * (C) 2000 Antonino Iannella, Stellar-X Pty Ltd
- * Released under GPL, see COPYING-2.0 for details.
- *
- * These routines are to allow users attempting to use the proxy which
- * have been explicitly allowed by the system administrator.
- * The code originated from denyusers.c.
- */
-
-#include "squid.h"
-#include "msntauth.h"
-#include "usersfile.h"
-
-#include <cstdlib>
-#include <cstring>
-#include <unistd.h>
-#include <sys/types.h>
-#include <sys/param.h>
-
-static usersfile AllowUsers;
-static int init = 0;
-
-/* shared */
-char Allowuserpath[MAXPATHLEN];	/* MAXPATHLEN defined in param.h */
-
-int
-Read_allowusers(void)
-{
-    if (!init) {
-        memset(&AllowUsers, '\0', sizeof(AllowUsers));
-        init = 1;
-    }
-    if (*Allowuserpath)
-        return Read_usersfile(Allowuserpath, &AllowUsers);
-    else
-        return 0;
-}
-
-int
-Check_ifuserallowed(char *ConnectingUser)
-{
-    return Check_userlist(&AllowUsers, ConnectingUser);
-}
-
-void
-Check_forallowchange(void)
-{
-    Check_forfilechange(&AllowUsers);
-}

=== removed file 'helpers/basic_auth/MSNT/confload.cc'
--- helpers/basic_auth/MSNT/confload.cc	2014-09-02 01:08:58 +0000
+++ helpers/basic_auth/MSNT/confload.cc	1970-01-01 00:00:00 +0000
@@ -1,273 +0,0 @@
-/*
- * Copyright (C) 1996-2014 The Squid Software Foundation and contributors
- *
- * Squid software is distributed under GPLv2+ license and includes
- * contributions from numerous individuals and organizations.
- * Please see the COPYING and CONTRIBUTORS files for details.
- */
-
-/*
- * confload.c
- * (C) 2000 Antonino Iannella, Stellar-X Pty Ltd
- * Released under GPL, see COPYING-2.0 for details.
- *
- * These routines load the msntauth configuration file.
- * It stores the servers to query, sets the denied and
- * allowed user files, and provides the
- * authenticating function.
- */
-
-/* Squid provides a number of portability overrides */
-#include "squid.h"
-
-#include <cassert>
-#include <cerrno>
-#include <cstdlib>
-#include <cstring>
-#include <syslog.h>
-#include <sys/param.h>
-#include <netdb.h>
-
-#include "msntauth.h"
-#include "valid.h"
-
-/* Path to configuration file */
-#ifndef SYSCONFDIR
-#define SYSCONFDIR "/usr/local/squid/etc"
-#endif
-#define CONFIGFILE   SYSCONFDIR "/msntauth.conf"
-
-/* Maximum number of servers to query. This number can be increased. */
-#define MAXSERVERS 5
-#define NTHOSTLEN 65
-
-extern char Denyuserpath[MAXPATHLEN];	/* MAXPATHLEN defined in param.h */
-extern char Allowuserpath[MAXPATHLEN];
-
-typedef struct _ServerTuple {
-    char pdc[NTHOSTLEN];
-    char bdc[NTHOSTLEN];
-    char domain[NTHOSTLEN];
-} ServerTuple;
-
-ServerTuple ServerArray[MAXSERVERS];	/* Array of servers to query */
-int Serversqueried = 0;		/* Number of servers queried */
-
-/* Declarations */
-
-static void ProcessLine(char *);
-static void AddServer(char *, char *, char *);
-static int QueryServerForUser(int, char *, char *);
-
-/*
- * Opens and reads the configuration file.
- * Returns 0 on success, or 1 for error.
- */
-
-int
-OpenConfigFile(void)
-{
-    FILE *ConfigFile;
-    char Confbuf[2049];		/* Line reading buffer */
-
-    /* Initialise defaults */
-
-    Serversqueried = 0;
-    memset(ServerArray, '\0', sizeof(ServerArray));
-    memset(Denyuserpath, '\0', MAXPATHLEN);
-    memset(Allowuserpath, '\0', MAXPATHLEN);
-
-    /* Open file */
-    if ((ConfigFile = fopen(CONFIGFILE, "r")) == NULL) {
-        syslog(LOG_ERR, "OpenConfigFile: Failed to open %s.", CONFIGFILE);
-        syslog(LOG_ERR, "%s", strerror(errno));
-        return 1;
-    }
-    /* Read in, one line at a time */
-    while (!feof(ConfigFile)) {
-        Confbuf[0] = '\0';
-        if (NULL == fgets(Confbuf, 2048, ConfigFile))
-            break;
-        Confbuf[2048] = '\0';
-        ProcessLine(Confbuf);
-    }
-    fclose(ConfigFile);
-
-    /*
-     * Check that at least one server is being queried. Report error if not.
-     * Denied and allowed user files are hardcoded, so it's fine if they're
-     * not set in the confugration file.
-     */
-    if (Serversqueried == 0) {
-        syslog(LOG_ERR, "OpenConfigFile: No servers set in %s. At least one is needed.", CONFIGFILE);
-        return 1;
-    }
-    return 0;
-}
-
-/* Parses a configuration file line. */
-
-static void
-ProcessLine(char *Linebuf)
-{
-    char *Directive;
-    char *Param1;
-    char *Param2;
-    char *Param3;
-
-    /* Ignore empty lines */
-    if (strlen(Linebuf) == 0)
-        return;
-
-    /* Break up on whitespaces */
-    if ((Directive = strtok(Linebuf, " \t\n")) == NULL)
-        return;
-
-    /* Check for a comment line. If found, stop . */
-    if (Directive[0] == '#')
-        return;
-
-    /* Check for server line. Check for 3 parameters. */
-    if (strcmp(Directive, "server") == 0) {
-        Param1 = strtok(NULL, " \t\n");
-        if (NULL == Param1) {
-            syslog(LOG_ERR, "ProcessLine: 'server' missing PDC parameter.");
-            return;
-        }
-        Param2 = strtok(NULL, " \t\n");
-        if (NULL == Param2) {
-            syslog(LOG_ERR, "ProcessLine: 'server' missing BDC parameter.");
-            return;
-        }
-        Param3 = strtok(NULL, " \t\n");
-        if (NULL == Param3) {
-            syslog(LOG_ERR, "ProcessLine: 'server' missing domain parameter.");
-            return;
-        }
-        AddServer(Param1, Param2, Param3);
-        return;
-    }
-    /* Check for denyusers line */
-    if (strcmp(Directive, "denyusers") == 0) {
-        Param1 = strtok(NULL, " \t\n");
-
-        if (NULL == Param1) {
-            syslog(LOG_ERR, "ProcessLine: A 'denyusers' line needs a filename parameter.");
-            return;
-        }
-        memset(Denyuserpath, '\0', MAXPATHLEN);
-        strncpy(Denyuserpath, Param1, MAXPATHLEN - 1);
-        return;
-    }
-    /* Check for allowusers line */
-    if (strcmp(Directive, "allowusers") == 0) {
-        Param1 = strtok(NULL, " \t\n");
-
-        if (NULL == Param1) {
-            syslog(LOG_ERR, "ProcessLine: An 'allowusers' line needs a filename parameter.");
-            return;
-        }
-        memset(Allowuserpath, '\0', MAXPATHLEN);
-        strncpy(Allowuserpath, Param1, MAXPATHLEN - 1);
-        return;
-    }
-    /* Reports error for unknown line */
-    syslog(LOG_ERR, "ProcessLine: Ignoring '%s' line.", Directive);
-}
-
-/*
- * Adds a server to query to the server array.
- * Checks if the server IP is resolvable.
- * Checks if the number of servers to query is not exceeded.
- * Does not allow parameters longer than NTHOSTLEN.
- */
-
-void
-AddServer(char *ParamPDC, char *ParamBDC, char *ParamDomain)
-{
-    if (Serversqueried == MAXSERVERS) {
-        syslog(LOG_ERR, "AddServer: Ignoring '%s' server line; "
-               "too many servers.", ParamPDC);
-        return;
-    }
-    if (gethostbyname(ParamPDC) == NULL) {
-        syslog(LOG_ERR, "AddServer: Ignoring host '%s'. "
-               "Cannot resolve its address.", ParamPDC);
-        return;
-    }
-    if (gethostbyname(ParamBDC) == NULL) {
-        syslog(LOG_USER | LOG_ERR, "AddServer: Ignoring host '%s'. "
-               "Cannot resolve its address.", ParamBDC);
-        return;
-    }
-    /* NOTE: ServerArray is zeroed in OpenConfigFile() */
-    assert(Serversqueried < MAXSERVERS);
-    strncpy(ServerArray[Serversqueried].pdc, ParamPDC, NTHOSTLEN - 1);
-    strncpy(ServerArray[Serversqueried].bdc, ParamBDC, NTHOSTLEN - 1);
-    strncpy(ServerArray[Serversqueried].domain, ParamDomain, NTHOSTLEN - 1);
-    ++Serversqueried;
-}
-
-/*
- * Cycles through all servers to query.
- * Returns 0 if one server could authenticate the user.
- * Returns 1 if no server authenticated the user.
- */
-
-int
-QueryServers(char *username, char *password)
-{
-    int i;
-    for (i = 0; i < Serversqueried; ++i) {
-        if (0 == QueryServerForUser(i, username, password))
-            return 0;
-    }
-    return 1;
-}
-
-/*
- * Attempts to authenticate the user with one server.
- * Logs syslog messages for different errors.
- * Returns 0 on success, non-zero on failure.
- */
-
-/* Define for systems which don't support it, like Solaris */
-#ifndef LOG_AUTHPRIV
-#define LOG_AUTHPRIV LOG_AUTH
-#endif
-
-static int
-QueryServerForUser(int x, char *username, char *password)
-{
-    int result = 1;
-
-    result = Valid_User(username, password, ServerArray[x].pdc,
-                        ServerArray[x].bdc, ServerArray[x].domain);
-
-    switch (result) {		/* Write any helpful syslog messages */
-    case 0:
-        break;
-    case 1:
-        syslog(LOG_AUTHPRIV | LOG_INFO, "Server error when checking %s.",
-               username);
-        break;
-    case 2:
-        syslog(LOG_AUTHPRIV | LOG_INFO, "Protocol error when checking %s.",
-               username);
-        break;
-    case 3:
-        syslog(LOG_AUTHPRIV | LOG_INFO, "Authentication failed for %s.",
-               username);
-        break;
-    }
-
-    return result;
-}
-
-/* Valid_User return codes -
- *
- * 0 - User authenticated successfully.
- * 1 - Server error.
- * 2 - Protocol error.
- * 3 - Logon error; Incorrect password or username given.
- */

=== removed file 'helpers/basic_auth/MSNT/denyusers.cc'
--- helpers/basic_auth/MSNT/denyusers.cc	2014-09-02 01:08:58 +0000
+++ helpers/basic_auth/MSNT/denyusers.cc	1970-01-01 00:00:00 +0000
@@ -1,126 +0,0 @@
-/*
- * Copyright (C) 1996-2014 The Squid Software Foundation and contributors
- *
- * Squid software is distributed under GPLv2+ license and includes
- * contributions from numerous individuals and organizations.
- * Please see the COPYING and CONTRIBUTORS files for details.
- */
-
-/*
- * denyusers.c
- * (C) 2000 Antonino Iannella, Stellar-X Pty Ltd
- * Released under GPL, see COPYING-2.0 for details.
- *
- * These routines are to block users attempting to use the proxy which
- * have been explicitly denied by the system administrator.
- * Routines at the bottom also use the allowed user functions.
- */
-
-#include "squid.h"
-#include "msntauth.h"
-#include "usersfile.h"
-
-#include <cstdlib>
-#include <cstring>
-#include <ctime>
-#include <unistd.h>
-#include <sys/types.h>
-#include <sys/param.h>
-
-static usersfile DenyUsers;
-static int init = 0;
-
-/* shared */
-char Denyuserpath[MAXPATHLEN];	/* MAXPATHLEN defined in param.h */
-
-int
-Read_denyusers(void)
-{
-    if (!init) {
-        memset(&DenyUsers, '\0', sizeof(DenyUsers));
-        init = 1;
-    }
-    if (*Denyuserpath)
-        return Read_usersfile(Denyuserpath, &DenyUsers);
-    else
-        return 0;
-}
-
-static void
-Check_fordenychange(void)
-{
-    Check_forfilechange(&DenyUsers);
-}
-
-/*
- * Check to see if the username provided by Squid appears in the denied
- * user list. Returns 0 if the user was not found, and 1 if they were.
- */
-
-static int
-Check_ifuserdenied(char *ConnectingUser)
-{
-    /* If user string is empty, deny */
-    if (ConnectingUser[0] == '\0')
-        return 1;
-
-    /* If denied user list is empty, allow */
-    if (DenyUsers.Inuse == 0)
-        return 0;
-
-    return Check_userlist(&DenyUsers, ConnectingUser);
-}
-
-/*
- * Decides if a user is denied or allowed.
- * If they have been denied, or not allowed, return 1.
- * Else return 0.
- */
-
-int
-Check_user(char *ConnectingUser)
-{
-    if (Check_ifuserdenied(ConnectingUser) == 1)
-        return 1;
-
-    if (Check_ifuserallowed(ConnectingUser) == 0)
-        return 1;
-
-    return 0;
-}
-
-/*
- * Checks the denied and allowed user files for change.
- * This function is invoked when a SIGHUP signal is received.
- * It is also run after every 60 seconds, at the next request.
- */
-
-void
-Check_forchange(int signal)
-{
-    Check_fordenychange();
-    Check_forallowchange();
-}
-
-/*
- * Checks the timer. If longer than 1 minute has passed since the last
- * time someone has accessed the proxy, then check for changes in the
- * denied user file. If longer than one minute hasn't passed, return.
- */
-
-void
-Checktimer()
-{
-    static time_t Lasttime;	/* The last time the timer was checked */
-    static time_t Currenttime;	/* The current time */
-
-    Currenttime = time(NULL);
-
-    /* If timeout has expired, check the denied user file, else return */
-    if (difftime(Currenttime, Lasttime) < 60)
-        return;
-    else {
-        Check_forchange(-1);
-        Lasttime = Currenttime;
-    }
-}

=== modified file 'helpers/basic_auth/MSNT/msntauth.cc'
--- helpers/basic_auth/MSNT/msntauth.cc	2014-09-02 01:08:58 +0000
+++ helpers/basic_auth/MSNT/msntauth.cc	2014-12-20 08:17:05 +0000
@@ -43,18 +43,33 @@
 
 #include <csignal>
 #include <cstring>
+#include <iostream>
+#include <string>
+#include <vector> //todo: turn into multimap
 #include <syslog.h>
 
 #include "msntauth.h"
+#include "valid.h"
 
 extern char version[];
-char msntauth_version[] = "Msntauth v2.0.3 (C) 2 Sep 2001 Stellar-X Antonino Iannella.\nModified by the Squid HTTP Proxy team 26 Jun 2002";
-
-/* Main program for simple authentication.
- * Reads the denied user file. Sets alarm timer.
- * Scans and checks for Squid input, and attempts to validate the user.
- */
-
+char msntauth_version[] = "Msntauth v2.0.3 (C) 2 Sep 2001 Stellar-X Antonino Iannella.\nModified by the Squid HTTP Proxy team 2002-2014";
+
+struct domaincontroller {
+	std::string domain;
+	std::string server;
+};
+std::vector<domaincontroller> domaincontrollers;
+
+bool
+validate_user(char *username, char *password)
+{
+	for (domaincontroller dc : domaincontrollers) {
+		if (Valid_User(username, password, dc.server.c_str(), dc.domain.c_str()))
+			return true;
+	}
+	return false;
+}
+// arguments: domain/server_name
 int
 main(int argc, char **argv)
 {
@@ -66,34 +81,25 @@
     openlog("msnt_auth", LOG_PID, LOG_USER);
     setbuf(stdout, NULL);
 
-    /* Read configuration file. Abort wildly if error. */
-    if (OpenConfigFile() == 1)
-        return 1;
-
-    /*
-     * Read denied and allowed user files.
-     * If they fails, there is a serious problem.
-     * Check syslog messages. Deny all users while in this state.
-     * The msntauth process should then be killed.
-     */
-    if ((Read_denyusers() == 1) || (Read_allowusers() == 1)) {
-        while (1) {
-            memset(wstr, '\0', sizeof(wstr));
-            if (fgets(wstr, 255, stdin) == NULL)
-                break;
-            puts("ERR");
-        }
-        return 1;
+    for (int j = 1; j < argc; ++j) {
+    	std::string arg = argv[j];
+    	size_t pos=arg.find('/');
+    	if (arg.find('/',pos+1)) {
+    		std::cerr << "Error: can't understand domain controller specification '"
+    				<< arg << '"' << std::endl;
+    		exit(1);
+    	}
+    	domaincontroller dc;
+    	dc.domain = arg.substr(0,pos);
+    	dc.server = arg.substr(pos+1);
+    	if (dc.domain.length() == 0 || dc.server.length() == 0) {
+    		std::cerr << "Error: invalid domain specification in '" << arg <<
+    				"'" << std::endl;
+    		exit(1);
+    	}
+    	domaincontrollers.push_back(dc);
     }
 
-    /*
-     * Make Check_forchange() the handle for HUP signals.
-     * Don't use alarms any more. I don't think it was very
-     * portable between systems.
-     * XXX this should be sigaction()
-     */
-    signal(SIGHUP, Check_forchange);
-
     while (1) {
         int n;
         /* Read whole line from standard input. Terminate on break. */
@@ -114,7 +120,6 @@
 
         /*
          * extract username and password.
-         * XXX is sscanf() safe?
          */
         username[0] = '\0';
         password[0] = '\0';
@@ -128,21 +133,13 @@
             puts("ERR");
             continue;
         }
-        Checktimer();		/* Check if the user lists have changed */
 
         rfc1738_unescape(username);
         rfc1738_unescape(password);
 
-        /*
-         * Check if user is explicitly denied or allowed.
-         * If user passes both checks, they can be authenticated.
-         */
-        if (Check_user(username) == 1) {
-            syslog(LOG_INFO, "'%s' denied", username);
-            puts("ERR");
-        } else if (QueryServers(username, password) == 0)
+        if (validate_user(username, password)) {
             puts("OK");
-        else {
+        } else {
             syslog(LOG_INFO, "'%s' login failed", username);
             puts("ERR");
         }

=== modified file 'helpers/basic_auth/MSNT/msntauth.h'
--- helpers/basic_auth/MSNT/msntauth.h	2014-09-02 01:08:58 +0000
+++ helpers/basic_auth/MSNT/msntauth.h	2014-12-20 08:00:35 +0000
@@ -9,15 +9,7 @@
 #ifndef _SQUID_HELPERS_BASIC_AUTH_MSNT_MSNTAUTH_H
 #define _SQUID_HELPERS_BASIC_AUTH_MSNT_MSNTAUTH_H
 
-extern int OpenConfigFile(void);
-extern int QueryServers(char *, char *);
-extern void Checktimer(void);
-extern "C" void Check_forchange(int);
-extern int Read_denyusers(void);
-extern int Read_allowusers(void);
-extern int Check_user(char *);
-extern int QueryServers(char *, char *);
-extern int Check_ifuserallowed(char *ConnectingUser);
+extern int QueryServers(char *, char *);
 extern void Check_forallowchange(void);
 
 #endif /* _SQUID_HELPERS_BASIC_AUTH_MSNT_MSNTAUTH_H */

=== removed file 'helpers/basic_auth/MSNT/usersfile.cc'
--- helpers/basic_auth/MSNT/usersfile.cc	2014-09-02 01:08:58 +0000
+++ helpers/basic_auth/MSNT/usersfile.cc	1970-01-01 00:00:00 +0000
@@ -1,205 +0,0 @@
-/*
- * Copyright (C) 1996-2014 The Squid Software Foundation and contributors
- *
- * Squid software is distributed under GPLv2+ license and includes
- * contributions from numerous individuals and organizations.
- * Please see the COPYING and CONTRIBUTORS files for details.
- */
-
-/*
- * usersfile.c
- * (C) 2000 Antonino Iannella, Stellar-X Pty Ltd
- * Released under GPL, see COPYING-2.0 for details.
- *
- * These routines are to allow users attempting to use the proxy which
- * have been explicitly allowed by the system administrator.
- * The code originated from denyusers.c.
- */
-
-#include "squid.h"
-#include "util.h"
-
-#include <cctype>
-#include <cerrno>
-#include <cstring>
-#include <ctime>
-#include <syslog.h>
-#include <unistd.h>
-#include <sys/stat.h>
-#include <sys/param.h>
-#include <fcntl.h>
-
-#include "usersfile.h"
-
-#define NAMELEN     50		/* Maximum username length */
-
-static int
-name_cmp(const void *a, const void *b)
-{
-    const char * const *A = static_cast<const char * const *>(a);
-    const char * const *B = static_cast<const char * const *>(b);
-    return strcasecmp(*A, *B);
-}
-
-static void
-free_names(usersfile * uf)
-{
-    int i;
-    for (i = 0; i < uf->Inuse; ++i) {
-        if (uf->names[i])
-            free(uf->names[i]);
-        uf->names[i] = NULL;
-    }
-    uf->Inuse = 0;
-}
-
-/*
- * Reads a file of usernames and stuffs them into an array
- * of strings.
- * Returns 0 if the user list was successfully loaded,
- * and 1 in case of error.
- */
-
-int
-Read_usersfile(const char *path, usersfile * uf)
-{
-    FILE *fp;
-    struct stat FileBuf;
-    char buf[1024];
-
-    free_names(uf);
-
-    if (NULL == path) {
-        path = uf->path;
-    } else {
-        if (uf->path)
-            free(uf->path);
-        uf->path = xstrdup(path);
-    }
-
-    /* Open the users file. Report any errors. */
-    fp = fopen(path, "r");
-    if (NULL == fp) {
-        uf->LMT = 0;
-        if (errno == ENOENT)
-            return 0;
-        syslog(LOG_ERR, "%s: %s", path, strerror(errno));
-        return 1;
-    }
-    /* Stat the file. If it does not exist, save the size as zero.
-     * Clear the allowed user string. Return. */
-    if (fstat(fileno(fp), &FileBuf) < 0) {
-        syslog(LOG_ERR, "%s: %s", path, strerror(errno));
-        fclose(fp);
-        return 1;
-    }
-    /* If it exists, save the modification time and size */
-    uf->LMT = FileBuf.st_mtime;
-
-    /* Handle the special case of a zero length file */
-    if (FileBuf.st_size == 0) {
-        fclose(fp);
-        return 0;
-    }
-
-    /*
-     * Read the file into memory
-     * XXX assumes one username per input line
-     */
-    while (fgets(buf, 1024, fp) != NULL) {
-        /* ensure no names longer than our limit */
-        buf[NAMELEN] = '\0';
-        /* skip bad input lines */
-        if (NULL == strtok(buf, "\r\n"))
-            continue;
-        /* grow the list if necessary */
-        if (0 == uf->Alloc) {
-            uf->Alloc = 256;
-            uf->names = static_cast<char**>(calloc(uf->Alloc, sizeof(*uf->names)));
-        } else if (uf->Inuse == uf->Alloc) {
-            uf->Alloc = uf->Alloc << 1;
-            uf->names = static_cast<char**>(realloc(uf->names, uf->Alloc * sizeof(*uf->names)));
-            /* zero out the newly allocated memory */
-            memset(&uf->names[uf->Alloc >> 1],
-                   '\0',
-                   (uf->Alloc >> 1) * sizeof(*uf->names));
-        }
-        uf->names[uf->Inuse] = xstrdup(buf);
-        ++uf->Inuse;
-    }
-    fclose(fp);
-    fp = NULL;
-
-    /* sort the names for searching */
-    qsort(uf->names, uf->Inuse, sizeof(*uf->names), name_cmp);
-
-    return 0;
-}
-
-/*
- * Check to see if the username provided by Squid appears in the
- * user list. Returns 0 if the user was not found, and 1 if they were.
- */
-
-int
-Check_userlist(usersfile * uf, char *User)
-{
-    void *p;
-
-    /* Empty users are always in the list */
-    if (User[0] == '\0')
-        return 1;
-
-    /* If allowed user list is empty, allow all users.
-     * If no users are supposed to be using the proxy, stop squid instead. */
-    if (0 == uf->Inuse)
-        return 1;
-
-    /* Check if username string is found in the allowed user list.
-     * If so, allow. If not, deny. Reconstruct the username
-     * to have whitespace, to avoid finding wrong string subsets. */
-
-    p = bsearch(&User,
-                uf->names,
-                uf->Inuse,
-                sizeof(*uf->names),
-                name_cmp);
-    if (NULL == p) {
-        return 0;
-    }
-    return 1;
-}
-
-/*
- * Checks if there has been a change in a users file.
- * If the modification time has changed, then reload the user list.
- */
-void
-Check_forfilechange(usersfile * uf)
-{
-    struct stat ChkBuf;		/* Stat data buffer */
-
-    /* Stat the allowed users file. If it cannot be accessed, return. */
-
-    if (uf->path == NULL)
-        return;
-
-    if (stat(uf->path, &ChkBuf) < 0) {
-        if (errno == ENOENT) {
-            uf->LMT = 0;
-            free_names(uf);
-        } else {		/* Report error when accessing file */
-            syslog(LOG_ERR, "%s: %s", uf->path, strerror(errno));
-        }
-        return;
-    }
-    /* return if no change */
-    if (ChkBuf.st_mtime == uf->LMT)
-        return;
-
-    /*
-     * The file changed, so re-read it.
-     */
-    syslog(LOG_INFO, "Check_forfilechange: Reloading user list '%s'.", uf->path);
-    Read_usersfile(NULL, uf);
-}

=== removed file 'helpers/basic_auth/MSNT/usersfile.h'
--- helpers/basic_auth/MSNT/usersfile.h	2014-09-02 01:08:58 +0000
+++ helpers/basic_auth/MSNT/usersfile.h	1970-01-01 00:00:00 +0000
@@ -1,19 +0,0 @@
-/*
- * Copyright (C) 1996-2014 The Squid Software Foundation and contributors
- *
- * Squid software is distributed under GPLv2+ license and includes
- * contributions from numerous individuals and organizations.
- * Please see the COPYING and CONTRIBUTORS files for details.
- */
-
-typedef struct {
-    char *path;
-    char **names;
-    int Alloc;
-    int Inuse;
-    time_t LMT;
-} usersfile;
-
-int Read_usersfile(const char *path, usersfile * uf);
-int Check_userlist(usersfile * uf, char *User);
-void Check_forfilechange(usersfile * uf);

=== modified file 'helpers/basic_auth/MSNT/valid.cc'
--- helpers/basic_auth/MSNT/valid.cc	2014-09-02 01:08:58 +0000
+++ helpers/basic_auth/MSNT/valid.cc	2014-12-20 08:17:05 +0000
@@ -20,10 +20,10 @@
 #include "valid.h"
 
 int
-Valid_User(char *USERNAME, char *PASSWORD, char *SERVER, char *BACKUP, char *DOMAIN)
+Valid_User(char *USERNAME, char *PASSWORD, const char *SERVER, const char *DOMAIN)
 {
     const char *supportedDialects[] = {"PC NETWORK PROGRAM 1.0",
-                                       "MICROSOFT NETWORKS 1.03",
+                                       "MICchecROSOFT NETWORKS 1.03",
                                        "MICROSOFT NETWORKS 3.0",
                                        "LANMAN1.0",
                                        "LM1.2X002",
@@ -36,12 +36,9 @@
 
     SMB_Init();
     con = SMB_Connect_Server(NULL, SERVER, DOMAIN);
-    if (con == NULL) {		/* Error ... */
-        con = SMB_Connect_Server(NULL, BACKUP, DOMAIN);
-        if (con == NULL) {
-            return (NTV_SERVER_ERROR);
-        }
-    }
+    if (con == NULL)
+    	return (NTV_SERVER_ERROR);
+
     if (SMB_Negotiate(con, supportedDialects) < 0) {	/* An error */
         SMB_Discon(con, 0);
         return (NTV_PROTOCOL_ERROR);

=== modified file 'helpers/basic_auth/MSNT/valid.h'
--- helpers/basic_auth/MSNT/valid.h	2014-09-02 01:08:58 +0000
+++ helpers/basic_auth/MSNT/valid.h	2014-12-20 08:17:05 +0000
@@ -15,6 +15,6 @@
 #define NTV_PROTOCOL_ERROR 2
 #define NTV_LOGON_ERROR 3
 
-int Valid_User(char *USERNAME, char *PASSWORD, char *SERVER, char *BACKUP, char *DOMAIN);
+int Valid_User(char *USERNAME, char *PASSWORD, const char *SERVER, const char *DOMAIN);
 
 #endif

=== modified file 'helpers/basic_auth/SSPI/valid.cc'
--- helpers/basic_auth/SSPI/valid.cc	2014-09-02 01:08:58 +0000
+++ helpers/basic_auth/SSPI/valid.cc	2014-12-20 08:00:35 +0000
@@ -123,66 +123,3 @@
         NetApiBufferFree(pBuf);
     return result;
 }
-
-/* Valid_User return codes -
-   0 - User authenticated successfully.
-   1 - Server error.
-   2 - Group membership error.
-   3 - Logon error; Incorrect password or username given.
-*/
-
-int
-Valid_User(char *UserName, char *Password, char *Group)
-{
-    int result = NTV_SERVER_ERROR;
-    size_t i;
-    char NTDomain[256];
-    char *domain_qualify = NULL;
-    char DomainUser[256];
-    char User[256];
-
-    errormsg = NTV_SERVER_ERROR_MSG;
-    strncpy(NTDomain, UserName, sizeof(NTDomain));
-
-    for (i=0; i < strlen(NTV_VALID_DOMAIN_SEPARATOR); ++i) {
-        if ((domain_qualify = strchr(NTDomain, NTV_VALID_DOMAIN_SEPARATOR[i])) != NULL)
-            break;
-    }
-    if (domain_qualify == NULL) {
-        strcpy(User, NTDomain);
-        strcpy(NTDomain, Default_NTDomain);
-    } else {
-        strcpy(User, domain_qualify + 1);
-        domain_qualify[0] = '\0';
-    }
-    /* Log the client on to the local computer. */
-    if (!SSP_LogonUser(User, Password, NTDomain)) {
-        result = NTV_LOGON_ERROR;
-        errormsg = NTV_LOGON_ERROR_MSG;
-        debug("%s\n", errormsg);
-    } else {
-        result = NTV_NO_ERROR;
-        if (strcmp(NTDomain, NTV_DEFAULT_DOMAIN) == 0)
-            strcpy(DomainUser, User);
-        else {
-            strcpy(DomainUser, NTDomain);
-            strcat(DomainUser, "\\");
-            strcat(DomainUser, User);
-        }
-        if (UseAllowedGroup) {
-            if (!Valid_Group(DomainUser, NTAllowedGroup)) {
-                result = NTV_GROUP_ERROR;
-                errormsg = NTV_GROUP_ERROR_MSG;
-                debug("%s\n", errormsg);
-            }
-        }
-        if (UseDisallowedGroup) {
-            if (Valid_Group(DomainUser, NTDisAllowedGroup)) {
-                result = NTV_GROUP_ERROR;
-                errormsg = NTV_GROUP_ERROR_MSG;
-                debug("%s\n", errormsg);
-            }
-        }
-    }
-    return result;
-}

=== modified file 'helpers/basic_auth/SSPI/valid.h'
--- helpers/basic_auth/SSPI/valid.h	2014-09-02 01:08:58 +0000
+++ helpers/basic_auth/SSPI/valid.h	2014-12-20 08:00:35 +0000
@@ -91,6 +91,4 @@
 }
 #endif /* __GNUC__ */
 
-int Valid_User(char *,char *, char *);
-
 #endif

=== modified file 'lib/smblib/smblib.c'
--- lib/smblib/smblib.c	2014-09-02 01:08:58 +0000
+++ lib/smblib/smblib.c	2014-12-20 08:00:35 +0000
@@ -99,7 +99,7 @@
 /* or anything else ...                                                  */
 
 SMB_Handle_Type SMB_Connect_Server(SMB_Handle_Type Con_Handle,
-                                   char *server, const char *NTdomain)
+                                   const char *server, const char *NTdomain)
 
 {
     SMB_Handle_Type con;

=== modified file 'lib/smblib/smblib.h'
--- lib/smblib/smblib.h	2014-09-02 01:08:58 +0000
+++ lib/smblib/smblib.h	2014-12-20 08:00:35 +0000
@@ -50,7 +50,7 @@
     /* Connect to a server, but do not do a tree con etc ... */
 
     SMB_Handle_Type SMB_Connect_Server(SMB_Handle_Type Con_Handle,
-                                       char *server,
+                                       const char *server,
                                        const char *NTdomain);
 
     /* Connect to a server and give us back a handle. If Con == NULL, create */

# Begin bundle
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
