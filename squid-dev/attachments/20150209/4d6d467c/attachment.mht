[From nobody Sun Feb  8 12:19:37 2015
X-Envelope-From: &lt;squid3@treenet.co.nz&gt;
X-Envelope-To: &lt;squid-dev@squid-cache.org&gt;
Received: from treenet.co.nz (unknown)
 by lists.squid-cache.org(Postfix 2.11.0/8.13.0) with SMTP id unknown
 Sun, 08 Feb 2015 12:19:30 +0000 (envelope-from &lt;squid3@treenet.co.nz&gt;
Received: from [192.168.2.9] (121-98-158-196.bng1.mdr.orcon.net.nz
 [121.98.158.196])
 by treenet.co.nz (Postfix) with ESMTP id 0140AE6EEF;
 Mon,  9 Feb 2015 01:18:51 +1300 (NZDT)
Message-ID: &lt;54D7542B.4070603@treenet.co.nz&gt;
Date: Mon, 09 Feb 2015 01:18:51 +1300
From: Amos Jeffries &lt;squid3@treenet.co.nz&gt;
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64;
 rv:31.0) Gecko/20100101 Thunderbird/31.4.0
MIME-Version: 1.0
To: Alex Rousskov &lt;rousskov@measurement-factory.com&gt;, 
 squid-dev@squid-cache.org
Subject: Re: [squid-dev] [PATCH] Initial libsecurity API
References: &lt;54B6904A.5090409@treenet.co.nz&gt;
 &lt;54C69500.3080301@measurement-factory.com&gt;
In-Reply-To: &lt;54C69500.3080301@measurement-factory.com&gt;
Content-Type: multipart/mixed; boundary=&quot;------------090508080200040803040202&quot;

This is a multi-part message in MIME format.
--------------090508080200040803040202
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: 7bit


New patch attached for review.




On 27/01/2015 8:26 a.m., Alex Rousskov wrote:
&gt; On 01/14/2015 08:50 AM, Amos Jeffries wrote:
&gt;&gt; This is the first step(s) towards a generic TLS/SSL security API for
&gt;&gt; Squid.
&gt; 
&gt; 
&gt;&gt; +    // BUG: ssl_client.sslContext will leak on reconfigure when Config gets memset()
&gt; ...
&gt;&gt; +    Config.ssl_client.sslContext = Security::ProxyOutgoingConfig.createContext();
&gt; 
&gt; Which memset(Config) call are you referring to here?
&gt; 
&gt;&gt; void
&gt;&gt; configFreeMemory(void)
&gt;&gt; {   
&gt;&gt;     free_all();
&gt;&gt; #if USE_OPENSSL
&gt;&gt;     SSL_CTX_free(Config.ssl_client.sslContext);
&gt;&gt; #endif
&gt;&gt; }
&gt; 
&gt; And is not Config.ssl_client.sslContext destroyed in the old
&gt; configFreeMemory() function quoted above?

I keep overlooking that one. :-(

&gt;&gt; +    // it makes more sense to create a context per outbound connection instead of this
&gt; 
&gt; Please remove this comment. Since each context may consume gobbles of
&gt; RAM, I doubt what you are suggesting always makes more sense, but
&gt; discussing this is outside your project scope.
&gt; 
&gt; 

Removed.


&gt;&gt; +NAME: tls_outgoing_options
&gt; 
&gt; Please do not forget the recently added SSL_OP_NO_TICKET when merging.
&gt; 

Done.

&gt; 
&gt;&gt; +} // namespace Security
&gt;&gt; +
&gt;&gt; +// parse the tls_outgoing_options directive
&gt;&gt; +inline void
&gt;&gt; +parse_securePeerOptions(Security::PeerOptions *opt)
&gt;&gt; +{
&gt;&gt; +    while(const char *token = ConfigParser::NextToken()) {
&gt;&gt; +        opt-&gt;parse(token);
&gt;&gt; +    }
&gt;&gt; +}
&gt;&gt; +
&gt;&gt; +#define free_securePeerOptions(x) Security::ProxyOutgoingConfig.clear()
&gt;&gt; +#define dump_securePeerOptions(e,n,x) // not supported yet
&gt; 
&gt; 
&gt; Please add an XXX to explain why is these are declared outside their
&gt; namespace. For example:
&gt; 
&gt; XXX: These declarations are outside their namespace because our
&gt; generated parsing code cannot handle namespaces.

These are outside the namespace because that is the coding style used by
all wrappers everywhere for the old config parser. No need for dozens of
XXX comments IMO.


&gt; 
&gt;&gt; +// parse the tls_outgoing_options directive
&gt;&gt; +inline void
&gt;&gt; +parse_securePeerOptions(Security::PeerOptions *opt)
&gt;&gt; +{
&gt;&gt; +    while(const char *token = ConfigParser::NextToken()) {
&gt;&gt; +        opt-&gt;parse(token);
&gt;&gt; +    }
&gt;&gt; +}
&gt; 
&gt; I see no reasons to inline this loop. The related code is slow for other
&gt; reasons and not in a critical path. Please do not inline unless really
&gt; necessary.
&gt; 

Saves making it a #define. I get parser errors about duplicate
definitions if its defined in the .h and not inlined.

Moved to the .cc.

&gt; 
&gt;&gt; +#define free_securePeerOptions(x) Security::ProxyOutgoingConfig.clear()
&gt;&gt; +#define dump_securePeerOptions(e,n,x) // not supported yet
&gt; 
&gt; Why are these #defined? If they can be implemented as regular functions,
&gt; they should be IMO.
&gt; 

That is how cache_cf.cc wrappers are defined for the old parser. I'm not
changing that styling in this patch scope.

&gt; 
&gt;&gt; +            // const loss is okay here, ssl_ex_index_server is only read and not assigned a destructor
&gt;&gt; +            SSL_set_ex_data(ssl, ssl_ex_index_server, const_cast&lt;SBuf*&gt;(&amp;peer-&gt;secure.sslDomain));
&gt; 
&gt; Perhaps I am missing something, but it looks like you are adding an SBuf
&gt; pointer where the rest of the code expects a char* pointer (both
&gt; SSL_set_ex_data and SSL_get_ex_data calls with the same
&gt; ssl_ex_index_server index). How did this change work or was this path
&gt; not tested?
&gt; 
&gt; If this is indeed a bug, please go through all ssl_ex_index_server users
&gt; to make sure they all agree on the data type. For example:
&gt; 
&gt;   bzr grep -n ssl_ex_index_server
&gt; 

There is a mix of results there, most are related to the ::Server SSL
contexts, the ones I changed are in ::Client SSL contexts. I see the
latest code is a bit ambiguous about whether the verify function is
called on context from server or client peers.

Reverting this to the char* form to be safe for now.


&gt; 
&gt;&gt; +#if WHEN_PEER_HOST_IS_SBUF
&gt;&gt;          else
&gt;&gt;              SSL_set_ex_data(ssl, ssl_ex_index_server, peer-&gt;host);
&gt;&gt; +#endif
&gt; 
&gt; Lost of functionality here? Please restore if possible or
&gt; explain/document if not.
&gt; 

That ssldomain= option default value is set in the cache_peer
post-reconfigure initializations now. So no need for the extra if test
on every use.


&gt;&gt; +
&gt;&gt; +class PeerOptions
&gt;&gt; +{
&gt; 
&gt; Please add a one-line description to clarify what we mean by &quot;Peer&quot;
&gt; here: cache_peer, any server, any client or server, etc.
&gt; 
&gt; 

Done.

&gt;&gt; +    /// generate a security context from the configured options
&gt;&gt; +    Security::ContextPointer createContext();
&gt; 
&gt; Do we need to use the explicit Secutiry:: prefix inside namespace
&gt; Security {}?
&gt; 

Helps a little to clarify what context we are creating, there are other
contexts with pointers.

&gt; 
&gt;&gt; +    /// generate a security context from the configured options
&gt;&gt; +    Security::ContextPointer createContext();
&gt; 
&gt; If the description is accurate, should not this method be moved outside
&gt; the PeerOptions class? And if the move is not possible for some reason,
&gt; should not this method be &quot;const&quot;?
&gt; 

It is specific to options held in *this object, there are different
types of context created in different ways from different sets of options.

Changing /the/these/.


const is not possible at this stage because the c_str() calls require a
data-copy and change the SBuf members of *this object. Fixing that
requires the Ssl:: context functionality to be re-written for SBuf. I
have now noted the c_str() side effects.


Also, const was clashing with the cert/key file defaults behavour. I've
moved that to the parser now, but its not a nice situation either way.
Long term I really want to drop either cert= or key= parameter and just
require a combined PEM file - that will help reduce the number of
security things to be locked down by sysadmin as well.


&gt; 
&gt;&gt; +    bool ssl;   ///&lt; whether SSL is to be used on this connection
&gt; 
&gt; &quot;this connection&quot; is not clear in a PeerOptions context. Perhaps we can
&gt; say &quot;with this peer&quot;?
&gt; 
&gt; I thought you were opposed to using ssl for new stuff. Why not call this
&gt; &quot;secured&quot; or something like that? You have to change all calling code
&gt; anyway, right?

... and you always objected to me removing 'ssl' names on things
previously ;-)

Renaming to 'encryptedTransport'.

&gt; 
&gt;&gt; +    bool ssl;   ///&lt; whether SSL is to be used on this connection
&gt;&gt; +
&gt;&gt; +    SBuf certFile;       ///&lt; path of file containing PEM format X509 certificate
&gt;&gt; +    SBuf privateKeyFile; ///&lt; path of file containing private key in PEM format
&gt;&gt; +    SBuf sslOptions;     ///&lt; library-specific options string
&gt;&gt; +    SBuf caFile;         ///&lt; path of file containing trusted Certificate Authority
&gt;&gt; +    SBuf caDir;          ///&lt; path of directory containign a set of trusted Certificate Authorities


... and fixed that documentation typo.

&gt;&gt; +    SBuf crlFile;        ///&lt; path of file containing Certificate Revoke List
&gt;&gt; +
&gt;&gt; +    int sslVersion;
&gt;&gt; +    SBuf sslCipher;
&gt;&gt; +    SBuf sslFlags;
&gt;&gt; +    SBuf sslDomain;
&gt; 
&gt; Please consider making &quot;sslVersion&quot; and &quot;ssl&quot; last data members (in that
&gt; order), to possibly save a tiny bit of padding and avoid giving a bad
&gt; order example for other classes (where it may actually matter).
&gt; 

Done. Though it does not seem to matter for the version parameter. The
generic &quot;int&quot; is sized to one system word (whatever that be), so there
is no padding around it.
 I'm tempted to make it a uint8_t to shrink the memory. However the
final plan is to replace it entirely with a minimum-version parameter
same as most other software is starting to use to prune obsolete SSL/TLS
versions while leaving TLS auto-upgrade to future improved versions
possible. The type-size change can better happen during that.

&gt; 
&gt; If this change was not tested with and without SslBump, please test.
&gt; 

It was compile tested, but I am not able to run-test.

Amos

--------------090508080200040803040202
Content-Type: text/plain; charset=windows-1252;
 name=&quot;cryptong_libsecurity_mk2.patch&quot;
Content-Transfer-Encoding: base64
Content-Disposition: attachment;
 filename=&quot;cryptong_libsecurity_mk2.patch&quot;

PT09IG1vZGlmaWVkIGZpbGUgJ2NvbmZpZ3VyZS5hYycKLS0tIGNvbmZpZ3VyZS5hYwkyMDE1
LTAxLTEzIDA3OjI1OjM2ICswMDAwCisrKyBjb25maWd1cmUuYWMJMjAxNS0wMS0xNCAxNTow
OToxMyArMDAwMApAQCAtMzg1OSwzNiArMzg1OSwzNyBAQAogCXNyYy9iYXNlL01ha2VmaWxl
CiAJc3JjL2NsaWVudHMvTWFrZWZpbGUKIAlzcmMvY29tbS9NYWtlZmlsZQogCXNyYy9lc2kv
TWFrZWZpbGUKIAlzcmMvZXVpL01ha2VmaWxlCiAJc3JjL2Zvcm1hdC9NYWtlZmlsZQogCXNy
Yy9mcy9NYWtlZmlsZQogCXNyYy9mdHAvTWFrZWZpbGUKIAlzcmMvaGVscGVyL01ha2VmaWxl
CiAJc3JjL2h0dHAvTWFrZWZpbGUKIAlzcmMvaHR0cC9vbmUvTWFrZWZpbGUKIAlzcmMvaWNt
cC9NYWtlZmlsZQogCXNyYy9pZGVudC9NYWtlZmlsZQogCXNyYy9pcC9NYWtlZmlsZQogCXNy
Yy9pcGMvTWFrZWZpbGUKIAlzcmMvbG9nL01ha2VmaWxlCiAJc3JjL21lbS9NYWtlZmlsZQog
CXNyYy9tZ3IvTWFrZWZpbGUKIAlzcmMvcGFyc2VyL01ha2VmaWxlCiAJc3JjL3JlcGwvTWFr
ZWZpbGUKKwlzcmMvc2VjdXJpdHkvTWFrZWZpbGUKIAlzcmMvc2VydmVycy9NYWtlZmlsZQog
CXNyYy9zbm1wL01ha2VmaWxlCiAJc3JjL3NzbC9NYWtlZmlsZQogCXRlc3Qtc3VpdGUvTWFr
ZWZpbGUKIAl0b29scy9NYWtlZmlsZQogCXRvb2xzL2hlbHBlci1tdXgvTWFrZWZpbGUKIAl0
b29scy9wdXJnZS9NYWtlZmlsZQogCXRvb2xzL3NxdWlkY2xpZW50L01ha2VmaWxlCiAJdG9v
bHMvc3lzdGVtZC9NYWtlZmlsZQogCXRvb2xzL3N5c3Zpbml0L01ha2VmaWxlCiBdKQogCiAj
IG11c3QgY29uZmlndXJlIGxpYmx0ZGwgc3ViZGlyIHVuY29uZGl0aW9uYWxseSBmb3IgIm1h
a2UgZGlzdGNoZWNrIiB0byB3b3JrCiAjQUNfQ09ORklHX1NVQkRJUlMobGlibHRkbCkKIAog
QUNfT1VUUFVUCgo9PT0gbW9kaWZpZWQgZmlsZSAnZG9jL3JlbGVhc2Utbm90ZXMvcmVsZWFz
ZS0zLjYuc2dtbCcKLS0tIGRvYy9yZWxlYXNlLW5vdGVzL3JlbGVhc2UtMy42LnNnbWwJMjAx
NS0wMS0xMyAwNzoyNTozNiArMDAwMAorKysgZG9jL3JlbGVhc2Utbm90ZXMvcmVsZWFzZS0z
LjYuc2dtbAkyMDE1LTAxLTE0IDE1OjA5OjQxICswMDAwCkBAIC04MSw0MCArODEsNDQgQEAK
ICAgIDxlbT5iYXNpY19zbWJfbG1fYXV0aDwvZW0+IGhlbHBlciBwZXJmb3JtcyB0aGUgc2Ft
ZSBhY3Rpb25zIHdpdGhvdXQgZXh0cmEKICAgIFBlcmwgYW5kIFNhbWJhIGRlcGVuZGVuY2ll
cy4KIAogCiA8c2VjdD5DaGFuZ2VzIHRvIHNxdWlkLmNvbmYgc2luY2UgU3F1aWQtMy41CiA8
cD4KIFRoZXJlIGhhdmUgYmVlbiBjaGFuZ2VzIHRvIFNxdWlkJ3MgY29uZmlndXJhdGlvbiBm
aWxlIHNpbmNlIFNxdWlkLTMuNS4KIAogVGhpcyBzZWN0aW9uIGdpdmVzIGEgdGhvcm91Z2gg
YWNjb3VudCBvZiB0aG9zZSBjaGFuZ2VzIGluIHRocmVlIGNhdGVnb3JpZXM6CiAKIDxpdGVt
aXplPgogCTxpdGVtPjxyZWYgaWQ9Im5ld3RhZ3MiIG5hbWU9Ik5ldyB0YWdzIj4KIAk8aXRl
bT48cmVmIGlkPSJtb2RpZmllZHRhZ3MiIG5hbWU9IkNoYW5nZXMgdG8gZXhpc3RpbmcgdGFn
cyI+CiAJPGl0ZW0+PHJlZiBpZD0icmVtb3ZlZHRhZ3MiIG5hbWU9IlJlbW92ZWQgdGFncyI+
CiA8L2l0ZW1pemU+CiA8cD4KIAogPHNlY3QxPk5ldyB0YWdzPGxhYmVsIGlkPSJuZXd0YWdz
Ij4KIDxwPgogPGRlc2NyaXA+CisJPHRhZz50bHNfb3V0Z29pbmdfb3B0aW9uczwvdGFnPgor
CTxwPk5ldyB0YWcgdG8gZGVmaW5lIFRMUyBzZWN1cml0eSBjb250ZXh0IG9wdGlvbnMgZm9y
IG91dGdvaW5nCisJICAgY29ubmVjdGlvbnMuIEZvciBleGFtcGxlIHRvIEhUVFBTIHNlcnZl
cnMuCisKICAgICAgICAgIDx0YWc+IHVybF9yZXdyaXRlX3RpbWVvdXQgPC90YWc+CiAgICAg
ICAgICA8cD4gU3F1aWQgdGltZXMgYWN0aXZlIHJlcXVlc3RzIHRvIHJlZGlyZWN0b3IuIFRo
aXMgb3B0aW9uIHNldHMKICAgICAgICAgICAgICB0aGUgdGltZW91dCB2YWx1ZSBhbmQgdGhl
IFNxdWlkIHJlYWN0aW9uIHRvIGEgdGltZWQgb3V0CiAgICAgICAgICAgICAgcmVxdWVzdC4g
PC9wPgogPC9kZXNjcmlwPgogCiA8c2VjdDE+Q2hhbmdlcyB0byBleGlzdGluZyB0YWdzPGxh
YmVsIGlkPSJtb2RpZmllZHRhZ3MiPgogPHA+CiA8ZGVzY3JpcD4KIAk8dGFnPmF1dGhfcGFy
YW08L3RhZz4KIAk8cD5OZXcgcGFyYW1ldGVyIDxlbT5xdWV1ZS1zaXplPTwvZW0+IHRvIHNl
dCB0aGUgbWF4aW11bSBudW1iZXIKIAkgICBvZiBxdWV1ZWQgcmVxdWVzdHMuCiAKIAk8dGFn
PmNhY2hlX3BlZXI8L3RhZz4KIAk8cD5BbGwgPGVtPnNzbG9wdGlvbj08L2VtPiBhbmQgPGVt
PnNzbHZlcnNpb249PC9lbT4gdmFsdWVzIGZvcgogCSAgIFNTTHYyIGNvbmZpZ3VyYXRpb24g
b3IgZGlzYWJsaW5nIGhhdmUgYmVlbiByZW1vdmVkLgogCTxwPk1hbnVhbCBzcXVpZC5jb25m
IHVwZGF0ZSBtYXkgYmUgcmVxdWlyZWQgb24gdXBncmFkZS4KIAogCTx0YWc+ZXh0ZXJuYWxf
YWNsX3R5cGU8dGFnPgogCTxwPk5ldyBwYXJhbWV0ZXIgPGVtPnF1ZXVlLXNpemU9PC9lbT4g
dG8gc2V0IHRoZSBtYXhpbXVtIG51bWJlcgpAQCAtMTM3LDQwICsxNDEsNjMgQEAKIAk8dGFn
PnNzbGNydHZhbGlkYXRvcl9jaGlsZHJlbjwvdGFnPgogCTxwPk5ldyBwYXJhbWV0ZXIgPGVt
PnF1ZXVlLXNpemU9PC9lbT4gdG8gc2V0IHRoZSBtYXhpbXVtIG51bWJlcgogCSAgIG9mIHF1
ZXVlZCByZXF1ZXN0cy4KIAogCTx0YWc+c3NscHJveHlfb3B0aW9uczwvdGFnPgogCTxwPkFs
bCB2YWx1ZXMgZm9yIFNTTHYyIGNvbmZpZ3VyYXRpb24gb3IgZGlzYWJsaW5nIGhhdmUgYmVl
biByZW1vdmVkLgogCTxwPk1hbnVhbCBzcXVpZC5jb25mIHVwZGF0ZSBtYXkgYmUgcmVxdWly
ZWQgb24gdXBncmFkZS4KIAogCTx0YWc+c3NscHJveHlfdmVyc2lvbjwvdGFnPgogCTxwPlZh
bHVlICcyJyBmb3IgU1NMdjItb25seSBvcGVyYXRpb24gaXMgbm8gbG9uZ2VyIHN1cHBvcnRl
ZC4KIAogCTx0YWc+dXJsX3Jld3JpdGVfY2hpbGRyZW48dGFnPgogCTxwPk5ldyBwYXJhbWV0
ZXIgPGVtPnF1ZXVlLXNpemU9PC9lbT4gdG8gc2V0IHRoZSBtYXhpbXVtIG51bWJlcgogCSAg
IG9mIHF1ZXVlZCByZXF1ZXN0cy4KIAogPC9kZXNjcmlwPgogCiA8c2VjdDE+UmVtb3ZlZCB0
YWdzPGxhYmVsIGlkPSJyZW1vdmVkdGFncyI+CiA8cD4KIDxkZXNjcmlwPgorCTx0YWc+c3Ns
cHJveHlfY2FmaWxlPC90YWc+CisJPHA+UmVwbGFjZWQgYnkgPGVtPnRsc19vdXRnb2luZ19v
cHRpb25zIGNhZmlsZT08L2VtPi4KKworCTx0YWc+c3NscHJveHlfY2FwYXRoPC90YWc+CisJ
PHA+UmVwbGFjZWQgYnkgPGVtPnRsc19vdXRnb2luZ19vcHRpb25zIGNhcGF0aD08L2VtPi4K
KworCTx0YWc+c3NscHJveHlfY2lwaGVyPC90YWc+CisJPHA+UmVwbGFjZWQgYnkgPGVtPnRs
c19vdXRnb2luZ19vcHRpb25zIGNpcGhlcj08L2VtPi4KKworCTx0YWc+c3NscHJveHlfY2xp
ZW50X2NlcnRpZmljYXRlPC90YWc+CisJPHA+UmVwbGFjZWQgYnkgPGVtPnRsc19vdXRnb2lu
Z19vcHRpb25zIGNlcnQ9PC9lbT4uCisKKwk8dGFnPnNzbHByb3h5X2NsaWVudF9rZXk8L3Rh
Zz4KKwk8cD5SZXBsYWNlZCBieSA8ZW0+dGxzX291dGdvaW5nX29wdGlvbnMga2V5PTwvZW0+
LgorCisJPHRhZz5zc2xwcm94eV9mbGFnczwvdGFnPgorCTxwPlJlcGxhY2VkIGJ5IDxlbT50
bHNfb3V0Z29pbmdfb3B0aW9ucyBmbGFncz08L2VtPi4KKworCTx0YWc+c3NscHJveHlfb3B0
aW9uczwvdGFnPgorCTxwPlJlcGxhY2VkIGJ5IDxlbT50bHNfb3V0Z29pbmdfb3B0aW9ucyBv
cHRpb25zPTwvZW0+LgorCisJPHRhZz5zc2xwcm94eV92ZXJzaW9uPC90YWc+CisJPHA+UmVw
bGFjZWQgYnkgPGVtPnRsc19vdXRnb2luZ19vcHRpb25zIHZlcnNpb249PC9lbT4uCiAKIDwv
ZGVzY3JpcD4KIAogCiA8c2VjdD5DaGFuZ2VzIHRvIC4vY29uZmlndXJlIG9wdGlvbnMgc2lu
Y2UgU3F1aWQtMy41CiA8cD4KIFRoZXJlIGhhdmUgYmVlbiBzb21lIGNoYW5nZXMgdG8gU3F1
aWQncyBidWlsZCBjb25maWd1cmF0aW9uIHNpbmNlIFNxdWlkLTMuNS4KIAogVGhpcyBzZWN0
aW9uIGdpdmVzIGFuIGFjY291bnQgb2YgdGhvc2UgY2hhbmdlcyBpbiB0aHJlZSBjYXRlZ29y
aWVzOgogCiA8aXRlbWl6ZT4KIAk8aXRlbT48cmVmIGlkPSJuZXdvcHRpb25zIiBuYW1lPSJO
ZXcgb3B0aW9ucyI+CiAJPGl0ZW0+PHJlZiBpZD0ibW9kaWZpZWRvcHRpb25zIiBuYW1lPSJD
aGFuZ2VzIHRvIGV4aXN0aW5nIG9wdGlvbnMiPgogCTxpdGVtPjxyZWYgaWQ9InJlbW92ZWRv
cHRpb25zIiBuYW1lPSJSZW1vdmVkIG9wdGlvbnMiPgogPC9pdGVtaXplPgogCiAKIDxzZWN0
MT5OZXcgb3B0aW9uczxsYWJlbCBpZD0ibmV3b3B0aW9ucyI+CiA8cD4KIDxkZXNjcmlwPgoK
PT09IG1vZGlmaWVkIGZpbGUgJ3NyYy9DYWNoZVBlZXIuaCcKLS0tIHNyYy9DYWNoZVBlZXIu
aAkyMDE1LTAxLTEzIDA3OjI1OjM2ICswMDAwCisrKyBzcmMvQ2FjaGVQZWVyLmgJMjAxNS0w
MS0xNCAxNTo0MzoyNyArMDAwMApAQCAtMSwzNiArMSwzNyBAQAogLyoKICAqIENvcHlyaWdo
dCAoQykgMTk5Ni0yMDE1IFRoZSBTcXVpZCBTb2Z0d2FyZSBGb3VuZGF0aW9uIGFuZCBjb250
cmlidXRvcnMKICAqCiAgKiBTcXVpZCBzb2Z0d2FyZSBpcyBkaXN0cmlidXRlZCB1bmRlciBH
UEx2MisgbGljZW5zZSBhbmQgaW5jbHVkZXMKICAqIGNvbnRyaWJ1dGlvbnMgZnJvbSBudW1l
cm91cyBpbmRpdmlkdWFscyBhbmQgb3JnYW5pemF0aW9ucy4KICAqIFBsZWFzZSBzZWUgdGhl
IENPUFlJTkcgYW5kIENPTlRSSUJVVE9SUyBmaWxlcyBmb3IgZGV0YWlscy4KICAqLwogCiAj
aWZuZGVmIFNRVUlEX0NBQ0hFUEVFUl9IXwogI2RlZmluZSBTUVVJRF9DQUNIRVBFRVJfSF8K
IAogI2luY2x1ZGUgImFjbC9mb3J3YXJkLmgiCiAjaW5jbHVkZSAiYmFzZS9DYmNQb2ludGVy
LmgiCiAjaW5jbHVkZSAiZW51bXMuaCIKICNpbmNsdWRlICJpY3Bfb3Bjb2RlLmgiCiAjaW5j
bHVkZSAiaXAvQWRkcmVzcy5oIgorI2luY2x1ZGUgInNlY3VyaXR5L1BlZXJPcHRpb25zLmgi
CiAKIC8vVE9ETzogcmVtb3ZlLCBpdCBpcyB1bmNvbmRpdGlvbmFsbHkgZGVmaW5lZCBhbmQg
YWx3YXlzIHVzZWQuCiAjZGVmaW5lIFBFRVJfTVVMVElDQVNUX1NJQkxJTkdTIDEKIAogI2lm
IEhBVkVfT1BFTlNTTF9TU0xfSAogI2luY2x1ZGUgPG9wZW5zc2wvc3NsLmg+CiAjZW5kaWYK
IAogY2xhc3MgQ2FjaGVQZWVyRG9tYWluTGlzdDsKIGNsYXNzIE5laWdoYm9yVHlwZURvbWFp
bkxpc3Q7CiBjbGFzcyBQY29ublBvb2w7CiBjbGFzcyBQZWVyRGlnZXN0OwogY2xhc3MgUGVl
clBvb2xNZ3I7CiAKIC8vIGN1cnJlbnRseSBhIFBPRAogY2xhc3MgQ2FjaGVQZWVyCiB7CiBw
dWJsaWM6CiAgICAgdV9pbnQgaW5kZXg7CiAgICAgY2hhciAqbmFtZTsKQEAgLTE1OSw0MyAr
MTYwLDM1IEBACiAgICAgICAgIGRvdWJsZSBsb2FkX2ZhY3RvcjsgLyogbm9ybWFsaXplZCB3
ZWlnaHQgdmFsdWUgKi8KICAgICB9IHVzZXJoYXNoOwogI2VuZGlmCiAgICAgc3RydWN0IHsK
ICAgICAgICAgdW5zaWduZWQgaW50IGhhc2g7CiAgICAgICAgIGRvdWJsZSBsb2FkX211bHRp
cGxpZXI7CiAgICAgICAgIGRvdWJsZSBsb2FkX2ZhY3RvcjsgLyogbm9ybWFsaXplZCB3ZWln
aHQgdmFsdWUgKi8KICAgICB9IHNvdXJjZWhhc2g7CiAKICAgICBjaGFyICpsb2dpbjsgICAg
ICAgIC8qIFByb3h5IGF1dGhvcml6YXRpb24gKi8KICAgICB0aW1lX3QgY29ubmVjdF90aW1l
b3V0OwogICAgIGludCBjb25uZWN0X2ZhaWxfbGltaXQ7CiAgICAgaW50IG1heF9jb25uOwog
ICAgIHN0cnVjdCB7CiAgICAgICAgIFBjb25uUG9vbCAqcG9vbDsgLy8vPCBpZGxlIGNvbm5l
Y3Rpb24gcG9vbCBmb3IgdGhpcyBwZWVyCiAgICAgICAgIENiY1BvaW50ZXI8UGVlclBvb2xN
Z3I+IG1ncjsgLy8vPCBwb29sIG1hbmFnZXIKICAgICAgICAgaW50IGxpbWl0OyAvLy88IHRo
ZSBsaW1pdCBpdHNlbGYKICAgICAgICAgYm9vbCB3YWl0aW5nRm9yQ2xvc2U7IC8vLzwgYSBj
b25uIG11c3QgY2xvc2UgYmVmb3JlIHdlIG9wZW4gYSBzdGFuZGJ5IGNvbm4KICAgICB9IHN0
YW5kYnk7IC8vLzwgb3B0aW9uYWwgImNhY2hlX3BlZXIgc3RhbmRieT1saW1pdCIgZmVhdHVy
ZQogICAgIGNoYXIgKmRvbWFpbjsgICAgICAgLyogRm9yY2VkIGRvbWFpbiAqLwotI2lmIFVT
RV9PUEVOU1NMCiAKLSAgICBpbnQgdXNlX3NzbDsKLSAgICBjaGFyICpzc2xjZXJ0OwotICAg
IGNoYXIgKnNzbGtleTsKLSAgICBpbnQgc3NsdmVyc2lvbjsKLSAgICBjaGFyICpzc2xvcHRp
b25zOwotICAgIGNoYXIgKnNzbGNpcGhlcjsKLSAgICBjaGFyICpzc2xjYWZpbGU7Ci0gICAg
Y2hhciAqc3NsY2FwYXRoOwotICAgIGNoYXIgKnNzbGNybGZpbGU7Ci0gICAgY2hhciAqc3Ns
ZmxhZ3M7Ci0gICAgY2hhciAqc3NsZG9tYWluOworICAgIC8vLyBzZWN1cml0eSBzZXR0aW5n
cyBmb3IgcGVlciBjb25uZWN0aW9uCisgICAgU2VjdXJpdHk6OlBlZXJPcHRpb25zIHNlY3Vy
ZTsKKworI2lmIFVTRV9PUEVOU1NMCiAgICAgU1NMX0NUWCAqc3NsQ29udGV4dDsKICAgICBT
U0xfU0VTU0lPTiAqc3NsU2Vzc2lvbjsKICNlbmRpZgogCiAgICAgaW50IGZyb250X2VuZF9o
dHRwczsKICAgICBpbnQgY29ubmVjdGlvbl9hdXRoOwogfTsKIAogI2VuZGlmIC8qIFNRVUlE
X0NBQ0hFUEVFUl9IXyAqLwogCgo9PT0gbW9kaWZpZWQgZmlsZSAnc3JjL0Z3ZFN0YXRlLmNj
JwotLS0gc3JjL0Z3ZFN0YXRlLmNjCTIwMTUtMDEtMTMgMDc6MjU6MzYgKzAwMDAKKysrIHNy
Yy9Gd2RTdGF0ZS5jYwkyMDE1LTAyLTA4IDA2OjI0OjM5ICswMDAwCkBAIC02NjYsNDEgKzY2
Niw0MSBAQAogICAgICAgICAgICAgICAgIHBlZXJDb25uZWN0RmFpbGVkKGNvbm4tPmdldFBl
ZXIoKSk7CiAKICAgICAgICAgICAgIGNvbm4tPmNsb3NlKCk7CiAgICAgICAgIH0KICAgICAg
ICAgcmV0cnlPckJhaWwoKTsKICAgICAgICAgcmV0dXJuOwogICAgIH0KIAogICAgIHNlcnZl
ckNvbm4gPSBjb25uOwogICAgIGZsYWdzLmNvbm5lY3RlZF9va2F5ID0gdHJ1ZTsKIAogICAg
IGRlYnVncygxNywgMywgSEVSRSA8PCBzZXJ2ZXJDb25uZWN0aW9uKCkgPDwgIjogJyIgPDwg
ZW50cnktPnVybCgpIDw8ICInIiApOwogCiAgICAgY29tbV9hZGRfY2xvc2VfaGFuZGxlcihz
ZXJ2ZXJDb25uZWN0aW9uKCktPmZkLCBmd2RTZXJ2ZXJDbG9zZWRXcmFwcGVyLCB0aGlzKTsK
IAogICAgIGlmIChzZXJ2ZXJDb25uZWN0aW9uKCktPmdldFBlZXIoKSkKICAgICAgICAgcGVl
ckNvbm5lY3RTdWNjZWRlZChzZXJ2ZXJDb25uZWN0aW9uKCktPmdldFBlZXIoKSk7CiAKICNp
ZiBVU0VfT1BFTlNTTAogICAgIGlmICghcmVxdWVzdC0+ZmxhZ3MucGlubmVkKSB7Ci0gICAg
ICAgIGlmICgoc2VydmVyQ29ubmVjdGlvbigpLT5nZXRQZWVyKCkgJiYgc2VydmVyQ29ubmVj
dGlvbigpLT5nZXRQZWVyKCktPnVzZV9zc2wpIHx8CisgICAgICAgIGlmICgoc2VydmVyQ29u
bmVjdGlvbigpLT5nZXRQZWVyKCkgJiYgc2VydmVyQ29ubmVjdGlvbigpLT5nZXRQZWVyKCkt
PnNlY3VyZS5lbmNyeXB0VHJhbnNwb3J0KSB8fAogICAgICAgICAgICAgICAgICghc2VydmVy
Q29ubmVjdGlvbigpLT5nZXRQZWVyKCkgJiYgcmVxdWVzdC0+dXJsLmdldFNjaGVtZSgpID09
IEFueVA6OlBST1RPX0hUVFBTKSB8fAogICAgICAgICAgICAgICAgIHJlcXVlc3QtPmZsYWdz
LnNzbFBlZWspIHsKIAogICAgICAgICAgICAgSHR0cFJlcXVlc3Q6OlBvaW50ZXIgcmVxdWVz
dFBvaW50ZXIgPSByZXF1ZXN0OwogICAgICAgICAgICAgQXN5bmNDYWxsOjpQb2ludGVyIGNh
bGxiYWNrID0gYXN5bmNDYWxsKDE3LDQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIkZ3ZFN0YXRlOjpDb25uZWN0ZWRUb1BlZXIiLAog
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZ3
ZFN0YXRlUGVlckFuc3dlckRpYWxlcigmRndkU3RhdGU6OmNvbm5lY3RlZFRvUGVlciwgdGhp
cykpOwogICAgICAgICAgICAgLy8gVXNlIHBvc2l0aXZlIHRpbWVvdXQgd2hlbiBsZXNzIHRo
YW4gb25lIHNlY29uZCBpcyBsZWZ0LgogICAgICAgICAgICAgY29uc3QgdGltZV90IHNzbE5l
Z290aWF0aW9uVGltZW91dCA9IG1heChzdGF0aWNfY2FzdDx0aW1lX3Q+KDEpLCB0aW1lTGVm
dCgpKTsKICAgICAgICAgICAgIFNzbDo6UGVlckNvbm5lY3RvciAqY29ubmVjdG9yID0KICAg
ICAgICAgICAgICAgICBuZXcgU3NsOjpQZWVyQ29ubmVjdG9yKHJlcXVlc3RQb2ludGVyLCBz
ZXJ2ZXJDb25uZWN0aW9uKCksIGNsaWVudENvbm4sIGNhbGxiYWNrLCBzc2xOZWdvdGlhdGlv
blRpbWVvdXQpOwogICAgICAgICAgICAgQXN5bmNKb2I6OlN0YXJ0KGNvbm5lY3Rvcik7IC8v
IHdpbGwgY2FsbCBvdXIgY2FsbGJhY2sKICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAg
fQogICAgIH0KICNlbmRpZgogCiAgICAgLy8gc2hvdWxkIHJlYWNoIENvbm5TdGF0ZURhdGEg
YmVmb3JlIHRoZSBkaXNwYXRjaGVkIENsaWVudCBqb2Igc3RhcnRzCiAgICAgQ2FsbEpvYkhl
cmUxKDE3LCA0LCByZXF1ZXN0LT5jbGllbnRDb25uZWN0aW9uTWFuYWdlciwgQ29ublN0YXRl
RGF0YSwKICAgICAgICAgICAgICAgICAgQ29ublN0YXRlRGF0YTo6bm90ZVBlZXJDb25uZWN0
aW9uLCBzZXJ2ZXJDb25uZWN0aW9uKCkpOwoKPT09IG1vZGlmaWVkIGZpbGUgJ3NyYy9NYWtl
ZmlsZS5hbScKLS0tIHNyYy9NYWtlZmlsZS5hbQkyMDE1LTAxLTEzIDA3OjI1OjM2ICswMDAw
CisrKyBzcmMvTWFrZWZpbGUuYW0JMjAxNS0wMS0xNCAxNToxMDoyMCArMDAwMApAQCAtNDEs
NTAgKzQxLDQ5IEBACiAJU3RvcmVNZXRhVmFyeS5jYyBcCiAJU3RvcmVNZXRhVmFyeS5oCiAK
IExPQURBQkxFX01PRFVMRVNfU09VUkNFUyA9IFwKIAlMb2FkYWJsZU1vZHVsZS5oIFwKIAlM
b2FkYWJsZU1vZHVsZS5jYyBcCiAJTG9hZGFibGVNb2R1bGVzLmggXAogCUxvYWRhYmxlTW9k
dWxlcy5jYwogCiBTVUJESVJTCT0gbWVtIGJhc2UgYW55cCBoZWxwZXIgZnRwIHBhcnNlciBj
b21tIGV1aSBhY2wgZm9ybWF0IGNsaWVudHMgc2VydmVycyBmcyByZXBsCiBESVNUX1NVQkRJ
UlMgPSBtZW0gYmFzZSBhbnlwIGhlbHBlciBmdHAgcGFyc2VyIGNvbW0gZXVpIGFjbCBmb3Jt
YXQgY2xpZW50cyBzZXJ2ZXJzIGZzIHJlcGwKIAogaWYgRU5BQkxFX0FVVEgKIFNVQkRJUlMg
Kz0gYXV0aAogQVVUSF9MSUJTPSBhdXRoL2xpYmF1dGgubGEKIEFVVEhfQUNMX0xJQlM9IGF1
dGgvbGliYWNscy5sYQogY2hlY2tfUFJPR1JBTVMrPSB0ZXN0cy90ZXN0QUNMTWF4VXNlcklQ
CiBlbmRpZgogRElTVF9TVUJESVJTICs9IGF1dGgKIAotU1VCRElSUwkrPSBodHRwIGlwIGlj
bXAgaWRlbnQgbG9nIGlwYyBtZ3IKLURJU1RfU1VCRElSUyArPSBodHRwIGlwIGljbXAgaWRl
bnQgbG9nIGlwYyBtZ3IKK1NVQkRJUlMJKz0gaHR0cCBpcCBpY21wIGlkZW50IGxvZyBpcGMg
bWdyIHNlY3VyaXR5CitESVNUX1NVQkRJUlMgKz0gaHR0cCBpcCBpY21wIGlkZW50IGxvZyBp
cGMgbWdyIHNlY3VyaXR5CiAKK1NTTF9MSUJTPQogaWYgRU5BQkxFX1NTTAogU1VCRElSUyAr
PSBzc2wKLVNTTF9MSUJTID0gXAorU1NMX0xJQlMgKz0gXAogCXNzbC9saWJzc2xzcXVpZC5s
YSBcCiAJc3NsL2xpYnNzbHV0aWwubGEKLWVsc2UKLVNTTF9MT0NBTF9MSUJTID0KIGVuZGlm
CiBESVNUX1NVQkRJUlMgKz0gc3NsCiAKIFNOTVBfQUxMX1NPVVJDRSA9IFwKIAlTbm1wUmVx
dWVzdC5oIFwKIAlzbm1wX2NvcmUuaCBcCiAJc25tcF9jb3JlLmNjIFwKIAlzbm1wX2FnZW50
LmggXAogCXNubXBfYWdlbnQuY2MKIGlmIEVOQUJMRV9TTk1QCiBTTk1QX1NPVVJDRSA9ICQo
U05NUF9BTExfU09VUkNFKQogU1VCRElSUyArPSBzbm1wCiBTTk1QX0xJQlMgPSBzbm1wL2xp
YnNubXAubGEgJChTTk1QTElCKQogZWxzZQogU05NUF9TT1VSQ0UgPSAKIGVuZGlmCiBESVNU
X1NVQkRJUlMgKz0gc25tcAogCiBpZiBVU0VfQURBUFRBVElPTgogU1VCRElSUyArPSBhZGFw
dGF0aW9uCkBAIC01OTcsNDAgKzU5Niw0MSBAQAogQ0xFQU5GSUxFUyArPSAkKEJVSUxUX1NP
VVJDRVMpCiAKIG5vZGlzdF9zcXVpZF9TT1VSQ0VTID0gXAogCSQoRElTS0lPX0dFTl9TT1VS
Q0UpIFwKIAkkKEJVSUxUX1NPVVJDRVMpCiAKIHNxdWlkX0xEQUREID0gXAogCSQoQVVUSF9B
Q0xfTElCUykgXAogCWlkZW50L2xpYmlkZW50LmxhIFwKIAlhY2wvbGliYWNscy5sYSBcCiAJ
YWNsL2xpYnN0YXRlLmxhIFwKIAkkKEFVVEhfTElCUykgXAogCSQoRElTS19MSUJTKSBcCiAJ
YWNsL2xpYmFwaS5sYSBcCiAJY2xpZW50cy9saWJjbGllbnRzLmxhIFwKIAlzZXJ2ZXJzL2xp
YnNlcnZlcnMubGEgXAogCWZ0cC9saWJmdHAubGEgXAogCWhlbHBlci9saWJoZWxwZXIubGEg
XAogCWh0dHAvbGlic3F1aWQtaHR0cC5sYSBcCiAJcGFyc2VyL2xpYnNxdWlkLXBhcnNlci5s
YSBcCisJc2VjdXJpdHkvbGlic2VjdXJpdHkubGEgXAogCWJhc2UvbGliYmFzZS5sYSBcCiAJ
bGlic3F1aWQubGEgXAogCWlwL2xpYmlwLmxhIFwKIAlmcy9saWJmcy5sYSBcCiAJJChTU0xf
TElCUykgXAogCWlwYy9saWJpcGMubGEgXAogCW1nci9saWJtZ3IubGEgXAogCWFueXAvbGli
YW55cC5sYSBcCiAJY29tbS9saWJjb21tLmxhIFwKIAlldWkvbGliZXVpLmxhIFwKIAlpY21w
L2xpYmljbXAubGEgaWNtcC9saWJpY21wLWNvcmUubGEgXAogCWxvZy9saWJsb2cubGEgXAog
CWZvcm1hdC9saWJmb3JtYXQubGEgXAogCSQoWFRSQV9PQkpTKSBcCiAJJChESVNLX0xJTktP
QkpTKSBcCiAJJChSRVBMX09CSlMpIFwKIAkkKERJU0tfT1NfTElCUykgXAogCSQoTkVUVExF
TElCKSBcCiAJJChDUllQVExJQikgXAogCSQoUkVHRVhMSUIpIFwKQEAgLTE0NjAsNDAgKzE0
NjAsNDEgQEAKIAlIdHRwSGVhZGVyVG9vbHMuaCBcCiAJSHR0cEhlYWRlclRvb2xzLmNjIFwK
IAlIdHRwSGVhZGVyRmllbGRTdGF0LmggXAogCUh0dHBIZHJDYy5oIFwKIAlIdHRwSGRyQ2Mu
Y2MgXAogCUh0dHBIZHJDYy5jY2kgXAogCUh0dHBIZHJDb250UmFuZ2UuY2MgXAogCUh0dHBI
ZHJSYW5nZS5jYyBcCiAJSHR0cEhkclNjLmNjIFwKIAlIdHRwSGRyU2NUYXJnZXQuY2MgXAog
CUh0dHBNc2cuY2MgXAogCUh0dHBSZXBseS5jYyBcCiAJaWNwX3YyLmNjIFwKIAlpY3BfdjMu
Y2MgXAogCSQoSVBDX1NPVVJDRSkgXAogCWlwY2FjaGUuY2MgXAogCWludC5oIFwKIAlpbnQu
Y2MgXAogCWludGVybmFsLmggXAogCWludGVybmFsLmNjIFwKKwl0ZXN0cy9zdHViX2xpYnNl
Y3VyaXR5LmNjIFwKIAlTcXVpZExpc3QuaCBcCiAJU3F1aWRMaXN0LmNjIFwKIAlNYXN0ZXJY
YWN0aW9uLmNjIFwKIAlNYXN0ZXJYYWN0aW9uLmggXAogCW11bHRpY2FzdC5oIFwKIAltdWx0
aWNhc3QuY2MgXAogCW1lbV9ub2RlLmNjIFwKIAlNZW1CdWYuY2MgXAogCU1lbU9iamVjdC5j
YyBcCiAJbWltZS5oIFwKIAltaW1lLmNjIFwKIAltaW1lX2hlYWRlci5oIFwKIAltaW1lX2hl
YWRlci5jYyBcCiAJbmVpZ2hib3JzLmggXAogCW5laWdoYm9ycy5jYyBcCiAJTm90ZXMuY2Mg
XAogCU5vdGVzLmggXAogCVBhY2tlci5jYyBcCiAJUGFyc2luZy5jYyBcCiAJcGNvbm4uY2Mg
XApAQCAtMTg4MCw0MCArMTg4MSw0MSBAQAogCUh0dHBIZHJDYy5jY2kgXAogCUh0dHBIZHJD
b250UmFuZ2UuY2MgXAogCUh0dHBIZHJSYW5nZS5jYyBcCiAJSHR0cEhkclNjLmNjIFwKIAlI
dHRwSGRyU2NUYXJnZXQuY2MgXAogCUh0dHBNc2cuY2MgXAogCUh0dHBSZXBseS5jYyBcCiAJ
UGVlclBvb2xNZ3IuaCBcCiAJUGVlclBvb2xNZ3IuY2MgXAogCVJlcXVlc3RGbGFncy5oIFwK
IAlSZXF1ZXN0RmxhZ3MuY2MgXAogCUh0dHBSZXF1ZXN0LmNjIFwKIAlpY3BfdjIuY2MgXAog
CWljcF92My5jYyBcCiAJJChJUENfU09VUkNFKSBcCiAJaXBjYWNoZS5jYyBcCiAJaW50Lmgg
XAogCWludC5jYyBcCiAJaW50ZXJuYWwuaCBcCiAJaW50ZXJuYWwuY2MgXAorCXRlc3RzL3N0
dWJfbGlic2VjdXJpdHkuY2MgXAogCVNxdWlkTGlzdC5oIFwKIAlTcXVpZExpc3QuY2MgXAog
CU1hc3RlclhhY3Rpb24uY2MgXAogCU1hc3RlclhhY3Rpb24uaCBcCiAJdGVzdHMvc3R1Yl9s
aWJtZW0uY2MgXAogCW1lbV9ub2RlLmNjIFwKIAlNZW1CdWYuY2MgXAogCU1lbU9iamVjdC5j
YyBcCiAJbWltZS5oIFwKIAltaW1lLmNjIFwKIAltaW1lX2hlYWRlci5oIFwKIAltaW1lX2hl
YWRlci5jYyBcCiAJbXVsdGljYXN0LmggXAogCW11bHRpY2FzdC5jYyBcCiAJbmVpZ2hib3Jz
LmggXAogCW5laWdoYm9ycy5jYyBcCiAJTm90ZXMuY2MgXAogCU5vdGVzLmggXAogCVBhY2tl
ci5jYyBcCiAJUGFyc2luZy5jYyBcCkBAIC0yMTIzLDQwICsyMTI1LDQxIEBACiAJSHR0cEhk
ckNjLmNjaSBcCiAJSHR0cEhkckNvbnRSYW5nZS5jYyBcCiAJSHR0cEhkclJhbmdlLmNjIFwK
IAlIdHRwSGRyU2MuY2MgXAogCUh0dHBIZHJTY1RhcmdldC5jYyBcCiAJSHR0cE1zZy5jYyBc
CiAJSHR0cFJlcGx5LmNjIFwKIAlQZWVyUG9vbE1nci5oIFwKIAlQZWVyUG9vbE1nci5jYyBc
CiAJUmVxdWVzdEZsYWdzLmggXAogCVJlcXVlc3RGbGFncy5jYyBcCiAJSHR0cFJlcXVlc3Qu
Y2MgXAogCWljcF92Mi5jYyBcCiAJaWNwX3YzLmNjIFwKIAkkKElQQ19TT1VSQ0UpIFwKIAlp
cGNhY2hlLmNjIFwKIAlpbnQuaCBcCiAJaW50LmNjIFwKIAlpbnRlcm5hbC5oIFwKIAlpbnRl
cm5hbC5jYyBcCisJdGVzdHMvc3R1Yl9saWJzZWN1cml0eS5jYyBcCiAJU3F1aWRMaXN0Lmgg
XAogCVNxdWlkTGlzdC5jYyBcCiAJTWFzdGVyWGFjdGlvbi5jYyBcCiAJTWFzdGVyWGFjdGlv
bi5oIFwKIAlNZW1CdWYuY2MgXAogCU1lbU9iamVjdC5jYyBcCiAJdGVzdHMvc3R1Yl9saWJt
ZW0uY2MgXAogCW1lbV9ub2RlLmNjIFwKIAltaW1lLmggXAogCW1pbWUuY2MgXAogCW1pbWVf
aGVhZGVyLmggXAogCW1pbWVfaGVhZGVyLmNjIFwKIAltdWx0aWNhc3QuaCBcCiAJbXVsdGlj
YXN0LmNjIFwKIAluZWlnaGJvcnMuaCBcCiAJbmVpZ2hib3JzLmNjIFwKIAlOb3Rlcy5jYyBc
CiAJTm90ZXMuaCBcCiAJUGFja2VyLmNjIFwKIAlQYXJzaW5nLmNjIFwKQEAgLTIzNjEsNDAg
KzIzNjQsNDEgQEAKIAlIdHRwSGVhZGVyLmggXAogCUh0dHBIZWFkZXIuY2MgXAogCUh0dHBI
ZWFkZXJGaWVsZEluZm8uaCBcCiAJSHR0cEhlYWRlclRvb2xzLmggXAogCUh0dHBIZWFkZXJU
b29scy5jYyBcCiAJSHR0cE1zZy5jYyBcCiAJSHR0cFJlcGx5LmNjIFwKIAlQZWVyUG9vbE1n
ci5oIFwKIAlQZWVyUG9vbE1nci5jYyBcCiAJUmVxdWVzdEZsYWdzLmggXAogCVJlcXVlc3RG
bGFncy5jYyBcCiAJSHR0cFJlcXVlc3QuY2MgXAogCWljcF92Mi5jYyBcCiAJaWNwX3YzLmNj
IFwKIAlpbnQuaCBcCiAJaW50LmNjIFwKIAlpbnRlcm5hbC5oIFwKIAlpbnRlcm5hbC5jYyBc
CiAJJChJUENfU09VUkNFKSBcCiAJaXBjYWNoZS5jYyBcCisJdGVzdHMvc3R1Yl9saWJzZWN1
cml0eS5jYyBcCiAJU3F1aWRMaXN0LmggXAogCVNxdWlkTGlzdC5jYyBcCiAJTWFzdGVyWGFj
dGlvbi5jYyBcCiAJTWFzdGVyWGFjdGlvbi5oIFwKIAlNZW1CdWYuY2MgXAogCU1lbU9iamVj
dC5jYyBcCiAJdGVzdHMvc3R1Yl9saWJtZW0uY2MgXAogCW1lbV9ub2RlLmNjIFwKIAltaW1l
LmggXAogCW1pbWUuY2MgXAogCW1pbWVfaGVhZGVyLmggXAogCW1pbWVfaGVhZGVyLmNjIFwK
IAltdWx0aWNhc3QuaCBcCiAJbXVsdGljYXN0LmNjIFwKIAluZWlnaGJvcnMuaCBcCiAJbmVp
Z2hib3JzLmNjIFwKIAlOb3Rlcy5jYyBcCiAJTm90ZXMuaCBcCiAJUGFja2VyLmNjIFwKIAlQ
YXJzaW5nLmNjIFwKQEAgLTI2NTQsNDAgKzI2NTgsNDEgQEAKIAlIdHRwSGVhZGVyVG9vbHMu
aCBcCiAJSHR0cEhlYWRlclRvb2xzLmNjIFwKIAlIdHRwSGVhZGVyRmllbGRTdGF0LmggXAog
CUh0dHBIZHJDYy5oIFwKIAlIdHRwSGRyQ2MuY2MgXAogCUh0dHBIZHJDYy5jY2kgXAogCUh0
dHBIZHJDb250UmFuZ2UuY2MgXAogCUh0dHBIZHJSYW5nZS5jYyBcCiAJSHR0cEhkclNjLmNj
IFwKIAlIdHRwSGRyU2NUYXJnZXQuY2MgXAogCUh0dHBNc2cuY2MgXAogCUh0dHBSZXBseS5j
YyBcCiAJaWNwX3YyLmNjIFwKIAlpY3BfdjMuY2MgXAogCSQoSVBDX1NPVVJDRSkgXAogCWlw
Y2FjaGUuY2MgXAogCWludC5oIFwKIAlpbnQuY2MgXAogCWludGVybmFsLmggXAogCWludGVy
bmFsLmNjIFwKKwl0ZXN0cy9zdHViX2xpYnNlY3VyaXR5LmNjIFwKIAlTcXVpZExpc3QuaCBc
CiAJU3F1aWRMaXN0LmNjIFwKIAlNYXN0ZXJYYWN0aW9uLmNjIFwKIAlNYXN0ZXJYYWN0aW9u
LmggXAogCW11bHRpY2FzdC5oIFwKIAltdWx0aWNhc3QuY2MgXAogCW1lbV9ub2RlLmNjIFwK
IAlNZW1CdWYuY2MgXAogCU1lbU9iamVjdC5jYyBcCiAJbWltZS5oIFwKIAltaW1lLmNjIFwK
IAltaW1lX2hlYWRlci5oIFwKIAltaW1lX2hlYWRlci5jYyBcCiAJbmVpZ2hib3JzLmggXAog
CW5laWdoYm9ycy5jYyBcCiAJTm90ZXMuY2MgXAogCU5vdGVzLmggXAogCVBhY2tlci5jYyBc
CiAJUGFyc2luZy5jYyBcCiAJcGNvbm4uY2MgXApAQCAtMzQ3MCw0MCArMzQ3NSw0MSBAQAog
CUh0dHBIZWFkZXIuaCBcCiAJSHR0cEhlYWRlci5jYyBcCiAJSHR0cEhlYWRlckZpZWxkSW5m
by5oIFwKIAlIdHRwSGVhZGVyVG9vbHMuaCBcCiAJSHR0cEhlYWRlclRvb2xzLmNjIFwKIAlI
dHRwTXNnLmNjIFwKIAlIdHRwUmVwbHkuY2MgXAogCVBlZXJQb29sTWdyLmggXAogCVBlZXJQ
b29sTWdyLmNjIFwKIAlSZXF1ZXN0RmxhZ3MuaCBcCiAJUmVxdWVzdEZsYWdzLmNjIFwKIAlI
dHRwUmVxdWVzdC5jYyBcCiAJaWNwX3YyLmNjIFwKIAlpY3BfdjMuY2MgXAogCSQoSVBDX1NP
VVJDRSkgXAogCWlwY2FjaGUuY2MgXAogCWludC5oIFwKIAlpbnQuY2MgXAogCWludGVybmFs
LmggXAogCWludGVybmFsLmNjIFwKKwl0ZXN0cy9zdHViX2xpYnNlY3VyaXR5LmNjIFwKIAlT
cXVpZExpc3QuaCBcCiAJU3F1aWRMaXN0LmNjIFwKIAlNYXN0ZXJYYWN0aW9uLmNjIFwKIAlN
YXN0ZXJYYWN0aW9uLmggXAogCW11bHRpY2FzdC5oIFwKIAltdWx0aWNhc3QuY2MgXAogCXRl
c3RzL3N0dWJfbGlibWVtLmNjIFwKIAltZW1fbm9kZS5jYyBcCiAJTWVtQnVmLmNjIFwKIAlN
ZW1PYmplY3QuY2MgXAogCW1pbWUuaCBcCiAJbWltZS5jYyBcCiAJbWltZV9oZWFkZXIuaCBc
CiAJbWltZV9oZWFkZXIuY2MgXAogCW5laWdoYm9ycy5oIFwKIAluZWlnaGJvcnMuY2MgXAog
CU5vdGVzLmggXAogCU5vdGVzLmNjIFwKIAlQYWNrZXIuY2MgXAogCVBhcnNpbmcuY2MgXAoK
PT09IG1vZGlmaWVkIGZpbGUgJ3NyYy9QZWVyUG9vbE1nci5jYycKLS0tIHNyYy9QZWVyUG9v
bE1nci5jYwkyMDE1LTAxLTEzIDA3OjI1OjM2ICswMDAwCisrKyBzcmMvUGVlclBvb2xNZ3Iu
Y2MJMjAxNS0wMi0wOCAwNjoyNDoyNSArMDAwMApAQCAtOTYsNDEgKzk2LDQxIEBACiAgICAg
aWYgKCF2YWxpZFBlZXIoKSkgewogICAgICAgICBkZWJ1Z3MoNDgsIDMsICJwZWVyIGdvbmUi
KTsKICAgICAgICAgaWYgKHBhcmFtcy5jb25uICE9IE5VTEwpCiAgICAgICAgICAgICBwYXJh
bXMuY29ubi0+Y2xvc2UoKTsKICAgICAgICAgcmV0dXJuOwogICAgIH0KIAogICAgIGlmIChw
YXJhbXMuZmxhZyAhPSBDb21tOjpPSykgewogICAgICAgICAvKiBpdCBtaWdodCBoYXZlIGJl
ZW4gYSB0aW1lb3V0IHdpdGggYSBwYXJ0aWFsbHkgb3BlbiBsaW5rICovCiAgICAgICAgIGlm
IChwYXJhbXMuY29ubiAhPSBOVUxMKQogICAgICAgICAgICAgcGFyYW1zLmNvbm4tPmNsb3Nl
KCk7CiAgICAgICAgIHBlZXJDb25uZWN0RmFpbGVkKHBlZXIpOwogICAgICAgICBjaGVja3Bv
aW50KCJjb25uIG9wZW5pbmcgZmFpbHVyZSIpOyAvLyBtYXkgcmV0cnkKICAgICAgICAgcmV0
dXJuOwogICAgIH0KIAogICAgIE11c3QocGFyYW1zLmNvbm4gIT0gTlVMTCk7CiAKICNpZiBV
U0VfT1BFTlNTTAogICAgIC8vIEhhbmRsZSBTU0wgcGVlcnMuCi0gICAgaWYgKHBlZXItPnVz
ZV9zc2wpIHsKKyAgICBpZiAocGVlci0+c2VjdXJlLmVuY3J5cHRUcmFuc3BvcnQpIHsKICAg
ICAgICAgdHlwZWRlZiBDb21tQ2JNZW1GdW5UPFBlZXJQb29sTWdyLCBDb21tQ2xvc2VDYlBh
cmFtcz4gQ2xvc2VyRGlhbGVyOwogICAgICAgICBjbG9zZXIgPSBKb2JDYWxsYmFjayg0OCwg
MywgQ2xvc2VyRGlhbGVyLCB0aGlzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQ
ZWVyUG9vbE1ncjo6aGFuZGxlU2VjdXJlQ2xvc3VyZSk7CiAgICAgICAgIGNvbW1fYWRkX2Ns
b3NlX2hhbmRsZXIocGFyYW1zLmNvbm4tPmZkLCBjbG9zZXIpOwogCiAgICAgICAgIHNlY3Vy
ZXIgPSBhc3luY0NhbGwoNDgsIDQsICJQZWVyUG9vbE1ncjo6aGFuZGxlU2VjdXJlZFBlZXIi
LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIE15QW5zd2VyRGlhbGVyKHRoaXMsICZQ
ZWVyUG9vbE1ncjo6aGFuZGxlU2VjdXJlZFBlZXIpKTsKIAogICAgICAgICBjb25zdCBpbnQg
cGVlclRpbWVvdXQgPSBwZWVyLT5jb25uZWN0X3RpbWVvdXQgPiAwID8KICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgcGVlci0+Y29ubmVjdF90aW1lb3V0IDogQ29uZmlnLlRp
bWVvdXQucGVlcl9jb25uZWN0OwogICAgICAgICBjb25zdCBpbnQgdGltZVVzZWQgPSBzcXVp
ZF9jdXJ0aW1lIC0gcGFyYW1zLmNvbm4tPnN0YXJ0VGltZSgpOwogICAgICAgICAvLyBVc2Ug
cG9zaXRpdmUgdGltZW91dCB3aGVuIGxlc3MgdGhhbiBvbmUgc2Vjb25kIGlzIGxlZnQgZm9y
IGNvbm4uCiAgICAgICAgIGNvbnN0IGludCB0aW1lTGVmdCA9IG1heCgxLCAocGVlclRpbWVv
dXQgLSB0aW1lVXNlZCkpOwogICAgICAgICBTc2w6OlBlZXJDb25uZWN0b3IgKmNvbm5lY3Rv
ciA9CiAgICAgICAgICAgICBuZXcgU3NsOjpQZWVyQ29ubmVjdG9yKHJlcXVlc3QsIHBhcmFt
cy5jb25uLCBOVUxMLCBzZWN1cmVyLCB0aW1lTGVmdCk7CiAgICAgICAgIEFzeW5jSm9iOjpT
dGFydChjb25uZWN0b3IpOyAvLyB3aWxsIGNhbGwgb3VyIGNhbGxiYWNrCiAgICAgICAgIHJl
dHVybjsKICAgICB9CiAjZW5kaWYKIAoKPT09IG1vZGlmaWVkIGZpbGUgJ3NyYy9TcXVpZENv
bmZpZy5oJwotLS0gc3JjL1NxdWlkQ29uZmlnLmgJMjAxNS0wMS0xMyAwNzoyNTozNiArMDAw
MAorKysgc3JjL1NxdWlkQ29uZmlnLmgJMjAxNS0wMS0xNCAxNTowNTo0NyArMDAwMApAQCAt
NDgwLDUxICs0ODAsNDEgQEAKICAgICAgICAgY2hhciAqc3NsX2VuZ2luZTsKICAgICAgICAg
aW50IHNlc3Npb25fdHRsOwogICAgICAgICBzaXplX3Qgc2Vzc2lvbkNhY2hlU2l6ZTsKICAg
ICAgICAgY2hhciAqY2VydFNpZ25IYXNoOwogICAgIH0gU1NMOwogI2VuZGlmCiAKICAgICB3
b3JkbGlzdCAqZXh0X21ldGhvZHM7CiAKICAgICBzdHJ1Y3QgewogICAgICAgICBpbnQgaGln
aF9ycHRtOwogICAgICAgICBpbnQgaGlnaF9wZjsKICAgICAgICAgc2l6ZV90IGhpZ2hfbWVt
b3J5OwogICAgIH0gd2FybmluZ3M7CiAgICAgY2hhciAqc3RvcmVfZGlyX3NlbGVjdF9hbGdv
cml0aG07CiAgICAgaW50IHNsZWVwX2FmdGVyX2Zvcms7ICAgLyogbWljcm9zZWNvbmRzICov
CiAgICAgdGltZV90IG1pbmltdW1fZXhwaXJ5X3RpbWU7IC8qIHNlY29uZHMgKi8KICAgICBl
eHRlcm5hbF9hY2wgKmV4dGVybmFsQWNsSGVscGVyTGlzdDsKIAogI2lmIFVTRV9PUEVOU1NM
Ci0KICAgICBzdHJ1Y3QgewotICAgICAgICBjaGFyICpjZXJ0OwotICAgICAgICBjaGFyICpr
ZXk7Ci0gICAgICAgIGludCB2ZXJzaW9uOwotICAgICAgICBjaGFyICpvcHRpb25zOwotICAg
ICAgICBjaGFyICpjaXBoZXI7Ci0gICAgICAgIGNoYXIgKmNhZmlsZTsKLSAgICAgICAgY2hh
ciAqY2FwYXRoOwotICAgICAgICBjaGFyICpjcmxmaWxlOwotICAgICAgICBjaGFyICpmbGFn
czsKICAgICAgICAgYWNsX2FjY2VzcyAqY2VydF9lcnJvcjsKICAgICAgICAgU1NMX0NUWCAq
c3NsQ29udGV4dDsKICAgICAgICAgc3NscHJveHlfY2VydF9zaWduICpjZXJ0X3NpZ247CiAg
ICAgICAgIHNzbHByb3h5X2NlcnRfYWRhcHQgKmNlcnRfYWRhcHQ7CiAgICAgfSBzc2xfY2xp
ZW50OwogI2VuZGlmCiAKICAgICBjaGFyICphY2NlcHRfZmlsdGVyOwogICAgIGludCB1bWFz
azsKICAgICBpbnQgbWF4X2ZpbGVkZXNjcmlwdG9yczsKICAgICBpbnQgd29ya2VyczsKICAg
ICBDcHVBZmZpbml0eU1hcCAqY3B1QWZmaW5pdHlNYXA7CiAKICNpZiBVU0VfTE9BREFCTEVf
TU9EVUxFUwogICAgIHdvcmRsaXN0ICpsb2FkYWJsZV9tb2R1bGVfbmFtZXM7CiAjZW5kaWYK
IAogICAgIGludCBjbGllbnRfaXBfbWF4X2Nvbm5lY3Rpb25zOwogCiAgICAgY2hhciAqcmVk
aXJlY3Rvcl9leHRyYXM7Cgo9PT0gbW9kaWZpZWQgZmlsZSAnc3JjL2NhY2hlX2NmLmNjJwot
LS0gc3JjL2NhY2hlX2NmLmNjCTIwMTUtMDEtMTMgMDc6MjU6MzYgKzAwMDAKKysrIHNyYy9j
YWNoZV9jZi5jYwkyMDE1LTAyLTA4IDA2OjI0OjQ3ICswMDAwCkBAIC04NjgsNDYgKzg2OCw1
MSBAQAogICAgICAgICBDb25maWcyLmVmZmVjdGl2ZUdyb3VwSUQgPSBnZXRlZ2lkKCk7CiAg
ICAgfQogCiAgICAgaWYgKE5VTEwgIT0gQ29uZmlnLmVmZmVjdGl2ZUdyb3VwKSB7CiAKICAg
ICAgICAgc3RydWN0IGdyb3VwICpncnAgPSBnZXRncm5hbShDb25maWcuZWZmZWN0aXZlR3Jv
dXApOwogCiAgICAgICAgIGlmIChOVUxMID09IGdycCkgewogICAgICAgICAgICAgZmF0YWxm
KCJnZXRncm5hbSBmYWlsZWQgdG8gZmluZCBncm91cGlkIGZvciBlZmZlY3RpdmUgZ3JvdXAg
JyVzJyIsCiAgICAgICAgICAgICAgICAgICAgQ29uZmlnLmVmZmVjdGl2ZUdyb3VwKTsKICAg
ICAgICAgICAgIHJldHVybjsKICAgICAgICAgfQogCiAgICAgICAgIENvbmZpZzIuZWZmZWN0
aXZlR3JvdXBJRCA9IGdycC0+Z3JfZ2lkOwogICAgIH0KIAogI2lmIFVTRV9PUEVOU1NMCiAK
ICAgICBkZWJ1Z3MoMywgREJHX0lNUE9SVEFOVCwgIkluaXRpYWxpemluZyBodHRwcyBwcm94
eSBjb250ZXh0Iik7CiAKLSAgICBDb25maWcuc3NsX2NsaWVudC5zc2xDb250ZXh0ID0gc3Ns
Q3JlYXRlQ2xpZW50Q29udGV4dChDb25maWcuc3NsX2NsaWVudC5jZXJ0LCBDb25maWcuc3Ns
X2NsaWVudC5rZXksIENvbmZpZy5zc2xfY2xpZW50LnZlcnNpb24sIENvbmZpZy5zc2xfY2xp
ZW50LmNpcGhlciwgQ29uZmlnLnNzbF9jbGllbnQub3B0aW9ucywgQ29uZmlnLnNzbF9jbGll
bnQuZmxhZ3MsIENvbmZpZy5zc2xfY2xpZW50LmNhZmlsZSwgQ29uZmlnLnNzbF9jbGllbnQu
Y2FwYXRoLCBDb25maWcuc3NsX2NsaWVudC5jcmxmaWxlKTsKKyAgICBDb25maWcuc3NsX2Ns
aWVudC5zc2xDb250ZXh0ID0gU2VjdXJpdHk6OlByb3h5T3V0Z29pbmdDb25maWcuY3JlYXRl
Q29udGV4dCgpOwogCiAgICAgZm9yIChDYWNoZVBlZXIgKnAgPSBDb25maWcucGVlcnM7IHAg
IT0gTlVMTDsgcCA9IHAtPm5leHQpIHsKLSAgICAgICAgaWYgKHAtPnVzZV9zc2wpIHsKKwor
ICAgICAgICAvLyBkZWZhdWx0IHZhbHVlIGZvciBzc2xkb21haW49IGlzIHRoZSBwZWVyIGhv
c3QvSVAKKyAgICAgICAgaWYgKHAtPnNlY3VyZS5zc2xEb21haW4uaXNFbXB0eSgpKQorICAg
ICAgICAgICAgcC0+c2VjdXJlLnNzbERvbWFpbiA9IHAtPmhvc3Q7CisKKyAgICAgICAgaWYg
KHAtPnNlY3VyZS5lbmNyeXB0VHJhbnNwb3J0KSB7CiAgICAgICAgICAgICBkZWJ1Z3MoMywg
REJHX0lNUE9SVEFOVCwgIkluaXRpYWxpemluZyBjYWNoZV9wZWVyICIgPDwgcC0+bmFtZSA8
PCAiIFNTTCBjb250ZXh0Iik7Ci0gICAgICAgICAgICBwLT5zc2xDb250ZXh0ID0gc3NsQ3Jl
YXRlQ2xpZW50Q29udGV4dChwLT5zc2xjZXJ0LCBwLT5zc2xrZXksIHAtPnNzbHZlcnNpb24s
IHAtPnNzbGNpcGhlciwgcC0+c3Nsb3B0aW9ucywgcC0+c3NsZmxhZ3MsIHAtPnNzbGNhZmls
ZSwgcC0+c3NsY2FwYXRoLCBwLT5zc2xjcmxmaWxlKTsKKyAgICAgICAgICAgIHAtPnNzbENv
bnRleHQgPSBwLT5zZWN1cmUuY3JlYXRlQ29udGV4dCgpOwogICAgICAgICB9CiAgICAgfQog
CiAgICAgZm9yIChBbnlQOjpQb3J0Q2ZnUG9pbnRlciBzID0gSHR0cFBvcnRMaXN0OyBzICE9
IE5VTEw7IHMgPSBzLT5uZXh0KSB7CiAgICAgICAgIGlmICghcy0+ZmxhZ3MudHVubmVsU3Ns
QnVtcGluZykKICAgICAgICAgICAgIGNvbnRpbnVlOwogCiAgICAgICAgIGRlYnVncygzLCBE
QkdfSU1QT1JUQU5ULCAiSW5pdGlhbGl6aW5nIGh0dHBfcG9ydCAiIDw8IHMtPnMgPDwgIiBT
U0wgY29udGV4dCIpOwogICAgICAgICBzLT5jb25maWd1cmVTc2xTZXJ2ZXJDb250ZXh0KCk7
CiAgICAgfQogCiAgICAgZm9yIChBbnlQOjpQb3J0Q2ZnUG9pbnRlciBzID0gSHR0cHNQb3J0
TGlzdDsgcyAhPSBOVUxMOyBzID0gcy0+bmV4dCkgewogICAgICAgICBkZWJ1Z3MoMywgREJH
X0lNUE9SVEFOVCwgIkluaXRpYWxpemluZyBodHRwc19wb3J0ICIgPDwgcy0+cyA8PCAiIFNT
TCBjb250ZXh0Iik7CiAgICAgICAgIHMtPmNvbmZpZ3VyZVNzbFNlcnZlckNvbnRleHQoKTsK
ICAgICB9CiAKICNlbmRpZgogCiAgICAgLy8gcHJldmVudCBpbmZpbml0ZSBmZXRjaCBsb29w
cyBpbiB0aGUgcmVxdWVzdCBwYXJzZXIKICAgICAvLyBkdWUgdG8gYnVmZmVyIGZ1bGwgYnV0
IG5vdCBlbm91Z2ggZGF0YSByZWNpdmVkIHRvIGZpbmlzaCBwYXJzZQpAQCAtOTU5LDQwICs5
NjQsNzAgQEAKICAgICBpZiAoIXN0cmNtcChuYW1lLCAidXJsX3Jld3JpdGVfY29uY3VycmVu
Y3kiKSkgewogICAgICAgICBpbnQgY3ZhbDsKICAgICAgICAgcGFyc2VfaW50KCZjdmFsKTsK
ICAgICAgICAgZGVidWdzKDMsIERCR19DUklUSUNBTCwgIldBUk5JTkc6IHVybF9yZXdyaXRl
X2NvbmN1cnJlbmN5IHVwZ3JhZGUgb3ZlcnJpZGluZyB1cmxfcmV3cml0ZV9jaGlsZHJlbiBz
ZXR0aW5ncy4iKTsKICAgICAgICAgQ29uZmlnLnJlZGlyZWN0Q2hpbGRyZW4uY29uY3VycmVu
Y3kgPSBjdmFsOwogICAgIH0KIAogICAgIGlmICghc3RyY21wKG5hbWUsICJsb2dfYWNjZXNz
IikpCiAgICAgICAgIHNlbGZfZGVzdHJ1Y3QoKTsKIAogICAgIGlmICghc3RyY21wKG5hbWUs
ICJsb2dfaWNhcCIpKQogICAgICAgICBzZWxmX2Rlc3RydWN0KCk7CiAKICAgICBpZiAoIXN0
cmNtcChuYW1lLCAiaWdub3JlX2ltc19vbl9taXNzIikpIHsKICAgICAgICAgLy8gdGhlIHJl
cGxhY2VtZW50IGRpcmVjdGl2ZSBjYWNoZV9yZXZhbGlkYXRlX29uX21pc3MgaGFzIG9wcG9z
aXRlIG1lYW5pbmdzIGZvciBPTi9PRkYgdmFsdWUKICAgICAgICAgLy8gdGhhbiB0aGUgMi43
IGRpcmVjdGl2ZS4gV2UgbmVlZCB0byBwYXJzZSBhbmQgaW52ZXJ0IHRoZSBjb25maWd1cmVk
IHZhbHVlLgogICAgICAgICBpbnQgdGVtcCA9IDA7CiAgICAgICAgIHBhcnNlX29ub2ZmKCZ0
ZW1wKTsKICAgICAgICAgQ29uZmlnLm9ub2ZmLmNhY2hlX21pc3NfcmV2YWxpZGF0ZSA9ICF0
ZW1wOwogICAgIH0KKworICAgIGlmICghc3RybmNtcChuYW1lLCAic3NscHJveHlfIiwgOSkp
IHsKKyAgICAgICAgLy8gdGhlIHJlcGxhY2VtZW50IGRpcmVjdGl2ZSB0bHNfb3V0Z29pbmdf
b3B0aW9ucyB1c2VzIG9wdGlvbnMgaW5zdGVhZCBvZiB3aG9sZS1saW5lIGlucHV0CisgICAg
ICAgIFNCdWYgdG1wOworICAgICAgICBpZiAoIXN0cmNtcChuYW1lLCAic3NscHJveHlfY2Fm
aWxlIikpCisgICAgICAgICAgICB0bXAuYXBwZW5kKCJjYWZpbGU9Iik7CisgICAgICAgIGVs
c2UgaWYgKCFzdHJjbXAobmFtZSwgInNzbHByb3h5X2NhcGF0aCIpKQorICAgICAgICAgICAg
dG1wLmFwcGVuZCgiY2FwYXRoPSIpOworICAgICAgICBlbHNlIGlmICghc3RyY21wKG5hbWUs
ICJzc2xwcm94eV9jaXBoZXIiKSkKKyAgICAgICAgICAgIHRtcC5hcHBlbmQoImNpcGhlcj0i
KTsKKyAgICAgICAgZWxzZSBpZiAoIXN0cmNtcChuYW1lLCAic3NscHJveHlfY2xpZW50X2Nl
cnRpZmljYXRlIikpCisgICAgICAgICAgICB0bXAuYXBwZW5kKCJjZXJ0PSIpOworICAgICAg
ICBlbHNlIGlmICghc3RyY21wKG5hbWUsICJzc2xwcm94eV9jbGllbnRfa2V5IikpCisgICAg
ICAgICAgICB0bXAuYXBwZW5kKCJrZXk9Iik7CisgICAgICAgIGVsc2UgaWYgKCFzdHJjbXAo
bmFtZSwgInNzbHByb3h5X2ZsYWdzIikpCisgICAgICAgICAgICB0bXAuYXBwZW5kKCJmbGFn
cz0iKTsKKyAgICAgICAgZWxzZSBpZiAoIXN0cmNtcChuYW1lLCAic3NscHJveHlfb3B0aW9u
cyIpKQorICAgICAgICAgICAgdG1wLmFwcGVuZCgib3B0aW9ucz0iKTsKKyAgICAgICAgZWxz
ZSBpZiAoIXN0cmNtcChuYW1lLCAic3NscHJveHlfdmVyc2lvbiIpKQorICAgICAgICAgICAg
dG1wLmFwcGVuZCgidmVyc2lvbj0iKTsKKyAgICAgICAgZWxzZSB7CisgICAgICAgICAgICBk
ZWJ1Z3MoMywgREJHX0NSSVRJQ0FMLCAiRVJST1I6IHVua25vd24gZGlyZWN0aXZlOiAiIDw8
IG5hbWUpOworICAgICAgICAgICAgc2VsZl9kZXN0cnVjdCgpOworICAgICAgICB9CisKKyAg
ICAgICAgLy8gYWRkIHRoZSB2YWx1ZSBhcyB1bnF1b3RlZC1zdHJpbmcgYmVjYXVzZSB0aGUg
b2xkIHZhbHVlcyBkaWQgbm90IHN1cHBvcnQgd2hpdGVzcGFjZQorICAgICAgICBjb25zdCBj
aGFyICp0b2tlbiA9IENvbmZpZ1BhcnNlcjo6TmV4dFF1b3RlZE9yVG9Fb2woKTsKKyAgICAg
ICAgdG1wLmFwcGVuZCh0b2tlbiwgc3RybGVuKHRva2VuKSk7CisgICAgICAgIFNlY3VyaXR5
OjpQcm94eU91dGdvaW5nQ29uZmlnLnBhcnNlKHRtcC5jX3N0cigpKTsKKyAgICB9CiB9CiAK
IC8qIFBhcnNlIGEgdGltZSBzcGVjaWZpY2F0aW9uIGZyb20gdGhlIGNvbmZpZyBmaWxlLiAg
U3RvcmUgdGhlCiAgKiByZXN1bHQgaW4gJ3RwdHInLCBhZnRlciBjb252ZXJ0aW5nIGl0IHRv
ICd1bml0cycgKi8KIHN0YXRpYyB2b2lkCiBwYXJzZVRpbWVMaW5lKHRpbWVfbXNlY190ICog
dHB0ciwgY29uc3QgY2hhciAqdW5pdHMsICBib29sIGFsbG93TXNlYywgIGJvb2wgZXhwZWN0
TW9yZUFyZ3VtZW50cyA9IGZhbHNlKQogewogICAgIGNoYXIgKnRva2VuOwogICAgIGRvdWJs
ZSBkOwogICAgIHRpbWVfbXNlY190IG07CiAgICAgdGltZV9tc2VjX3QgdTsKIAogICAgIGlm
ICgodSA9IHBhcnNlVGltZVVuaXRzKHVuaXRzLCBhbGxvd01zZWMpKSA9PSAwKQogICAgICAg
ICBzZWxmX2Rlc3RydWN0KCk7CiAKICAgICBpZiAoKHRva2VuID0gQ29uZmlnUGFyc2VyOjpO
ZXh0VG9rZW4oKSkgPT0gTlVMTCkKICAgICAgICAgc2VsZl9kZXN0cnVjdCgpOwogCiAgICAg
ZCA9IHhhdG9mKHRva2VuKTsKIApAQCAtMjIzMiw3NyArMjI2Nyw0OSBAQAogI2lmIFVTRV9D
QUNIRV9ESUdFU1RTCiAgICAgICAgIH0gZWxzZSBpZiAoIXN0cm5jbXAodG9rZW4sICJkaWdl
c3QtdXJsPSIsIDExKSkgewogICAgICAgICAgICAgcC0+ZGlnZXN0X3VybCA9IHhzdHJkdXAo
dG9rZW4gKyAxMSk7CiAjZW5kaWYKIAogICAgICAgICB9IGVsc2UgaWYgKCFzdHJjbXAodG9r
ZW4sICJhbGxvdy1taXNzIikpIHsKICAgICAgICAgICAgIHAtPm9wdGlvbnMuYWxsb3dfbWlz
cyA9IHRydWU7CiAgICAgICAgIH0gZWxzZSBpZiAoIXN0cm5jbXAodG9rZW4sICJtYXgtY29u
bj0iLCA5KSkgewogICAgICAgICAgICAgcC0+bWF4X2Nvbm4gPSB4YXRvaSh0b2tlbiArIDkp
OwogICAgICAgICB9IGVsc2UgaWYgKCFzdHJuY21wKHRva2VuLCAic3RhbmRieT0iLCA4KSkg
ewogICAgICAgICAgICAgcC0+c3RhbmRieS5saW1pdCA9IHhhdG9pKHRva2VuICsgOCk7CiAg
ICAgICAgIH0gZWxzZSBpZiAoIXN0cmNtcCh0b2tlbiwgIm9yaWdpbnNlcnZlciIpKSB7CiAg
ICAgICAgICAgICBwLT5vcHRpb25zLm9yaWdpbnNlcnZlciA9IHRydWU7CiAgICAgICAgIH0g
ZWxzZSBpZiAoIXN0cm5jbXAodG9rZW4sICJuYW1lPSIsIDUpKSB7CiAgICAgICAgICAgICBz
YWZlX2ZyZWUocC0+bmFtZSk7CiAKICAgICAgICAgICAgIGlmICh0b2tlbls1XSkKICAgICAg
ICAgICAgICAgICBwLT5uYW1lID0geHN0cmR1cCh0b2tlbiArIDUpOwogICAgICAgICB9IGVs
c2UgaWYgKCFzdHJuY21wKHRva2VuLCAiZm9yY2VkZG9tYWluPSIsIDEzKSkgewogICAgICAg
ICAgICAgc2FmZV9mcmVlKHAtPmRvbWFpbik7Ci0KICAgICAgICAgICAgIGlmICh0b2tlblsx
M10pCiAgICAgICAgICAgICAgICAgcC0+ZG9tYWluID0geHN0cmR1cCh0b2tlbiArIDEzKTsK
IAotI2lmIFVTRV9PUEVOU1NMCi0KLSAgICAgICAgfSBlbHNlIGlmIChzdHJjbXAodG9rZW4s
ICJzc2wiKSA9PSAwKSB7Ci0gICAgICAgICAgICBwLT51c2Vfc3NsID0gMTsKLSAgICAgICAg
fSBlbHNlIGlmIChzdHJuY21wKHRva2VuLCAic3NsY2VydD0iLCA4KSA9PSAwKSB7Ci0gICAg
ICAgICAgICBzYWZlX2ZyZWUocC0+c3NsY2VydCk7Ci0gICAgICAgICAgICBwLT5zc2xjZXJ0
ID0geHN0cmR1cCh0b2tlbiArIDgpOwotICAgICAgICB9IGVsc2UgaWYgKHN0cm5jbXAodG9r
ZW4sICJzc2xrZXk9IiwgNykgPT0gMCkgewotICAgICAgICAgICAgc2FmZV9mcmVlKHAtPnNz
bGtleSk7Ci0gICAgICAgICAgICBwLT5zc2xrZXkgPSB4c3RyZHVwKHRva2VuICsgNyk7Ci0g
ICAgICAgIH0gZWxzZSBpZiAoc3RybmNtcCh0b2tlbiwgInNzbHZlcnNpb249IiwgMTEpID09
IDApIHsKLSAgICAgICAgICAgIHAtPnNzbHZlcnNpb24gPSB4YXRvaSh0b2tlbiArIDExKTsK
LSAgICAgICAgfSBlbHNlIGlmIChzdHJuY21wKHRva2VuLCAic3Nsb3B0aW9ucz0iLCAxMSkg
PT0gMCkgewotICAgICAgICAgICAgc2FmZV9mcmVlKHAtPnNzbG9wdGlvbnMpOwotICAgICAg
ICAgICAgcC0+c3Nsb3B0aW9ucyA9IHhzdHJkdXAodG9rZW4gKyAxMSk7Ci0gICAgICAgIH0g
ZWxzZSBpZiAoc3RybmNtcCh0b2tlbiwgInNzbGNpcGhlcj0iLCAxMCkgPT0gMCkgewotICAg
ICAgICAgICAgc2FmZV9mcmVlKHAtPnNzbGNpcGhlcik7Ci0gICAgICAgICAgICBwLT5zc2xj
aXBoZXIgPSB4c3RyZHVwKHRva2VuICsgMTApOwotICAgICAgICB9IGVsc2UgaWYgKHN0cm5j
bXAodG9rZW4sICJzc2xjYWZpbGU9IiwgMTApID09IDApIHsKLSAgICAgICAgICAgIHNhZmVf
ZnJlZShwLT5zc2xjYWZpbGUpOwotICAgICAgICAgICAgcC0+c3NsY2FmaWxlID0geHN0cmR1
cCh0b2tlbiArIDEwKTsKLSAgICAgICAgfSBlbHNlIGlmIChzdHJuY21wKHRva2VuLCAic3Ns
Y2FwYXRoPSIsIDEwKSA9PSAwKSB7Ci0gICAgICAgICAgICBzYWZlX2ZyZWUocC0+c3NsY2Fw
YXRoKTsKLSAgICAgICAgICAgIHAtPnNzbGNhcGF0aCA9IHhzdHJkdXAodG9rZW4gKyAxMCk7
Ci0gICAgICAgIH0gZWxzZSBpZiAoc3RybmNtcCh0b2tlbiwgInNzbGNybGZpbGU9IiwgMTEp
ID09IDApIHsKLSAgICAgICAgICAgIHNhZmVfZnJlZShwLT5zc2xjcmxmaWxlKTsKLSAgICAg
ICAgICAgIHAtPnNzbGNybGZpbGUgPSB4c3RyZHVwKHRva2VuICsgMTEpOwotICAgICAgICB9
IGVsc2UgaWYgKHN0cm5jbXAodG9rZW4sICJzc2xmbGFncz0iLCA5KSA9PSAwKSB7Ci0gICAg
ICAgICAgICBzYWZlX2ZyZWUocC0+c3NsZmxhZ3MpOwotICAgICAgICAgICAgcC0+c3NsZmxh
Z3MgPSB4c3RyZHVwKHRva2VuICsgOSk7Ci0gICAgICAgIH0gZWxzZSBpZiAoc3RybmNtcCh0
b2tlbiwgInNzbGRvbWFpbj0iLCAxMCkgPT0gMCkgewotICAgICAgICAgICAgc2FmZV9mcmVl
KHAtPnNzbGRvbWFpbik7Ci0gICAgICAgICAgICBwLT5zc2xkb21haW4gPSB4c3RyZHVwKHRv
a2VuICsgMTApOworICAgICAgICB9IGVsc2UgaWYgKHN0cm5jbXAodG9rZW4sICJzc2wiLCAz
KSA9PSAwKSB7CisjaWYgIVVTRV9PUEVOU1NMCisgICAgICAgICAgICBkZWJ1Z3MoMCwgREJH
X0NSSVRJQ0FMLCAiV0FSTklORzogY2FjaGVfcGVlciBvcHRpb24gJyIgPDwgdG9rZW4gPDwg
IicgcmVxdWlyZXMgLS13aXRoLW9wZW5zc2wiKTsKKyNlbHNlCisgICAgICAgICAgICBwLT5z
ZWN1cmUuZW5jcnlwdFRyYW5zcG9ydCA9IHRydWU7CisgICAgICAgICAgICBwLT5zZWN1cmUu
cGFyc2UodG9rZW4rMyk7CiAjZW5kaWYKIAogICAgICAgICB9IGVsc2UgaWYgKHN0cmNtcCh0
b2tlbiwgImZyb250LWVuZC1odHRwcyIpID09IDApIHsKICAgICAgICAgICAgIHAtPmZyb250
X2VuZF9odHRwcyA9IDE7CiAgICAgICAgIH0gZWxzZSBpZiAoc3RyY21wKHRva2VuLCAiZnJv
bnQtZW5kLWh0dHBzPW9uIikgPT0gMCkgewogICAgICAgICAgICAgcC0+ZnJvbnRfZW5kX2h0
dHBzID0gMTsKICAgICAgICAgfSBlbHNlIGlmIChzdHJjbXAodG9rZW4sICJmcm9udC1lbmQt
aHR0cHM9YXV0byIpID09IDApIHsKICAgICAgICAgICAgIHAtPmZyb250X2VuZF9odHRwcyA9
IDI7CiAgICAgICAgIH0gZWxzZSBpZiAoc3RyY21wKHRva2VuLCAiY29ubmVjdGlvbi1hdXRo
PW9mZiIpID09IDApIHsKICAgICAgICAgICAgIHAtPmNvbm5lY3Rpb25fYXV0aCA9IDA7CiAg
ICAgICAgIH0gZWxzZSBpZiAoc3RyY21wKHRva2VuLCAiY29ubmVjdGlvbi1hdXRoIikgPT0g
MCkgewogICAgICAgICAgICAgcC0+Y29ubmVjdGlvbl9hdXRoID0gMTsKICAgICAgICAgfSBl
bHNlIGlmIChzdHJjbXAodG9rZW4sICJjb25uZWN0aW9uLWF1dGg9b24iKSA9PSAwKSB7CiAg
ICAgICAgICAgICBwLT5jb25uZWN0aW9uX2F1dGggPSAxOwogICAgICAgICB9IGVsc2UgaWYg
KHN0cmNtcCh0b2tlbiwgImNvbm5lY3Rpb24tYXV0aD1hdXRvIikgPT0gMCkgewogICAgICAg
ICAgICAgcC0+Y29ubmVjdGlvbl9hdXRoID0gMjsKICAgICAgICAgfSBlbHNlIGlmICh0b2tl
blswXSA9PSAnIycpIHsKICAgICAgICAgICAgIC8vIHN0YXJ0IG9mIGEgdGV4dCBjb21tZW50
LiBzdG9wIHJlYWRpbmcgdGhpcyBsaW5lLgogICAgICAgICAgICAgYnJlYWs7CiAgICAgICAg
IH0gZWxzZSB7Cgo9PT0gbW9kaWZpZWQgZmlsZSAnc3JjL2NmLmRhdGEuZGVwZW5kJwotLS0g
c3JjL2NmLmRhdGEuZGVwZW5kCTIwMTUtMDEtMTMgMDc6MjU6MzYgKzAwMDAKKysrIHNyYy9j
Zi5kYXRhLmRlcGVuZAkyMDE1LTAxLTE0IDE1OjA1OjQ3ICswMDAwCkBAIC00OSw0MCArNDks
NDEgQEAKIGljYXBfc2VydmljZV90eXBlCiBpY2FwX3NlcnZpY2VfZmFpbHVyZV9saW1pdAog
ZWNhcF9zZXJ2aWNlX3R5cGUKIGludAoga2JfaW50NjRfdAoga2Jfc2l6ZV90CiBsb2dmb3Jt
YXQKIFllc05vTm9uZQogbWVtY2FjaGVtb2RlCiBub3RlCQkJYWNsCiBvYnNvbGV0ZQogb25v
ZmYKIHBlZXIKIHBlZXJfYWNjZXNzCQljYWNoZV9wZWVyIGFjbAogcGlwZWxpbmVQcmVmZXRj
aAogUG9ydENmZwogUW9zQ29uZmlnCiBUb2tlbk9yUXVvdGVkU3RyaW5nCiByZWZyZXNocGF0
dGVybgogcmVtb3ZhbHBvbGljeQorc2VjdXJlUGVlck9wdGlvbnMKIHNpemVfdAogSXBBZGRy
ZXNzX2xpc3QKIHN0cmluZwogc3RyaW5nCiB0aW1lX21zZWMKIHRpbWVfdAogdHJpc3RhdGUK
IHVyaV93aGl0ZXNwYWNlCiBVcmxIZWxwZXJUaW1lb3V0CWFjbAogdV9zaG9ydAogd2NjcDJf
bWV0aG9kCiB3Y2NwMl9hbWV0aG9kCiB3Y2NwMl9zZXJ2aWNlCiB3Y2NwMl9zZXJ2aWNlX2lu
Zm8KIHdvcmRsaXN0CiBzc2xwcm94eV9zc2xfYnVtcAlhY2wKIHNzbHByb3h5X3NzbF9idW1w
X3BlZWtlZCBhY2wKIHNzbHByb3h5X2NlcnRfc2lnbglhY2wKIHNzbHByb3h5X2NlcnRfYWRh
cHQJYWNsCiBmdHBfZXBzdiAgICAgICAgICAgICAgICBhY2wKCj09PSBtb2RpZmllZCBmaWxl
ICdzcmMvY2YuZGF0YS5wcmUnCi0tLSBzcmMvY2YuZGF0YS5wcmUJMjAxNS0wMS0xMyAwNzoy
NTozNiArMDAwMAorKysgc3JjL2NmLmRhdGEucHJlCTIwMTUtMDItMDggMDQ6MzU6MjQgKzAw
MDAKQEAgLTEzMSw0MCArMTMxLDg5IEBACiBET0NfRU5ECiAKIE5BTUU6IGV4dGVybmFsX3Jl
ZnJlc2hfY2hlY2sKIFRZUEU6IG9ic29sZXRlCiBET0NfU1RBUlQKIAlUaGlzIG9wdGlvbiBp
cyBub3QgeWV0IHN1cHBvcnRlZCBieSBTcXVpZC0zLgogRE9DX0VORAogCiBOQU1FOiBsb2Nh
dGlvbl9yZXdyaXRlX3Byb2dyYW0gbG9jYXRpb25fcmV3cml0ZV9hY2Nlc3MgbG9jYXRpb25f
cmV3cml0ZV9jaGlsZHJlbiBsb2NhdGlvbl9yZXdyaXRlX2NvbmN1cnJlbmN5CiBUWVBFOiBv
YnNvbGV0ZQogRE9DX1NUQVJUCiAJVGhpcyBvcHRpb24gaXMgbm90IHlldCBzdXBwb3J0ZWQg
YnkgU3F1aWQtMy4KIERPQ19FTkQKIAogTkFNRTogcmVmcmVzaF9zdGFsZV9oaXQKIFRZUEU6
IG9ic29sZXRlCiBET0NfU1RBUlQKIAlUaGlzIG9wdGlvbiBpcyBub3QgeWV0IHN1cHBvcnRl
ZCBieSBTcXVpZC0zLgogRE9DX0VORAogCisjIE9wdGlvbnMgcmVtb3ZlZCBpbiAzLjYKK05B
TUU6IHNzbHByb3h5X2NhZmlsZQorVFlQRTogb2Jzb2xldGUKK0RPQ19TVEFSVAorCVJlbW92
ZSB0aGlzIGxpbmUuIFVzZSB0bHNfb3V0Z29pbmdfb3B0aW9ucyBjYWZpbGU9IGluc3RlYWQu
CitET0NfRU5ECisKK05BTUU6IHNzbHByb3h5X2NhcGF0aAorVFlQRTogb2Jzb2xldGUKK0RP
Q19TVEFSVAorCVJlbW92ZSB0aGlzIGxpbmUuIFVzZSB0bHNfb3V0Z29pbmdfb3B0aW9ucyBj
YXBhdGg9IGluc3RlYWQuCitET0NfRU5ECisKK05BTUU6IHNzbHByb3h5X2NpcGhlcgorVFlQ
RTogb2Jzb2xldGUKK0RPQ19TVEFSVAorCVJlbW92ZSB0aGlzIGxpbmUuIFVzZSB0bHNfb3V0
Z29pbmdfb3B0aW9ucyBjaXBoZXI9IGluc3RlYWQuCitET0NfRU5ECisKK05BTUU6IHNzbHBy
b3h5X2NsaWVudF9jZXJ0aWZpY2F0ZQorVFlQRTogb2Jzb2xldGUKK0RPQ19TVEFSVAorCVJl
bW92ZSB0aGlzIGxpbmUuIFVzZSB0bHNfb3V0Z29pbmdfb3B0aW9ucyBjZXJ0PSBpbnN0ZWFk
LgorRE9DX0VORAorCitOQU1FOiBzc2xwcm94eV9jbGllbnRfa2V5CitUWVBFOiBvYnNvbGV0
ZQorRE9DX1NUQVJUCisJUmVtb3ZlIHRoaXMgbGluZS4gVXNlIHRsc19vdXRnb2luZ19vcHRp
b25zIGtleT0gaW5zdGVhZC4KK0RPQ19FTkQKKworTkFNRTogc3NscHJveHlfZmxhZ3MKK1RZ
UEU6IG9ic29sZXRlCitET0NfU1RBUlQKKwlSZW1vdmUgdGhpcyBsaW5lLiBVc2UgdGxzX291
dGdvaW5nX29wdGlvbnMgZmxhZ3M9IGluc3RlYWQuCitET0NfRU5ECisKK05BTUU6IHNzbHBy
b3h5X29wdGlvbnMKK1RZUEU6IG9ic29sZXRlCitET0NfU1RBUlQKKwlSZW1vdmUgdGhpcyBs
aW5lLiBVc2UgdGxzX291dGdvaW5nX29wdGlvbnMgb3B0aW9ucz0gaW5zdGVhZC4KK0RPQ19F
TkQKKworTkFNRTogc3NscHJveHlfdmVyc2lvbgorVFlQRTogb2Jzb2xldGUKK0RPQ19TVEFS
VAorCVJlbW92ZSB0aGlzIGxpbmUuIFVzZSB0bHNfb3V0Z29pbmdfb3B0aW9ucyB2ZXJzaW9u
PSBpbnN0ZWFkLgorRE9DX0VORAorCiAjIE9wdGlvbnMgcmVtb3ZlZCBpbiAzLjUKIE5BTUU6
IGhpZXJhcmNoeV9zdG9wbGlzdAogVFlQRTogb2Jzb2xldGUKIERPQ19TVEFSVAogCVJlbW92
ZSB0aGlzIGxpbmUuIFVzZSBhbHdheXNfZGlyZWN0IG9yIGNhY2hlX3BlZXJfYWNjZXNzIEFD
THMgaW5zdGVhZCBpZiB5b3UgbmVlZCB0byBwcmV2ZW50IGNhY2hlX3BlZXIgdXNlLgogRE9D
X0VORAogCiBOQU1FOiBsb2dfYWNjZXNzCiBUWVBFOiBvYnNvbGV0ZQogRE9DX1NUQVJUCiAJ
UmVtb3ZlIHRoaXMgbGluZS4gVXNlIGFjbHMgd2l0aCBhY2Nlc3NfbG9nIGRpcmVjdGl2ZXMg
dG8gY29udHJvbCBhY2Nlc3MgbG9nZ2luZwogRE9DX0VORAogCiBOQU1FOiBsb2dfaWNhcAog
VFlQRTogb2Jzb2xldGUKIERPQ19TVEFSVAogCVJlbW92ZSB0aGlzIGxpbmUuIFVzZSBhY2xz
IHdpdGggaWNhcF9sb2cgZGlyZWN0aXZlcyB0byBjb250cm9sIGljYXAgbG9nZ2luZwogRE9D
X0VORAogCiAjIE9wdGlvbnMgUmVtb3ZlZCBpbiAzLjMKQEAgLTE3NDIsNDUgKzE3OTEsNTYg
QEAKIAkJCWlmIG5vdCBzcGVjaWZpZWQsIHRoZSBjZXJ0aWZpY2F0ZSBmaWxlIGlzCiAJCQlh
c3N1bWVkIHRvIGJlIGEgY29tYmluZWQgY2VydGlmaWNhdGUgYW5kCiAJCQlrZXkgZmlsZS4K
IAogCSAgIHZlcnNpb249CVRoZSB2ZXJzaW9uIG9mIFNTTC9UTFMgc3VwcG9ydGVkCiAJCQkg
ICAgMQlhdXRvbWF0aWMgKGRlZmF1bHQpCiAJCQkgICAgMwlTU0x2MyBvbmx5CiAJCQkgICAg
NAlUTFN2MS4wIG9ubHkKIAkJCSAgICA1CVRMU3YxLjEgb25seQogCQkJICAgIDYJVExTdjEu
MiBvbmx5CiAKIAkgICBjaXBoZXI9CUNvbG9uIHNlcGFyYXRlZCBsaXN0IG9mIHN1cHBvcnRl
ZCBjaXBoZXJzLgogCQkJTk9URTogc29tZSBjaXBoZXJzIHN1Y2ggYXMgRURIIGNpcGhlcnMg
ZGVwZW5kIG9uCiAJCQkgICAgICBhZGRpdGlvbmFsIHNldHRpbmdzLiBJZiB0aG9zZSBzZXR0
aW5ncyBhcmUKIAkJCSAgICAgIG9taXR0ZWQgdGhlIGNpcGhlcnMgbWF5IGJlIHNpbGVudGx5
IGlnbm9yZWQKIAkJCSAgICAgIGJ5IHRoZSBPcGVuU1NMIGxpYnJhcnkuCiAKIAkgICBvcHRp
b25zPQlWYXJpb3VzIFNTTCBpbXBsZW1lbnRhdGlvbiBvcHRpb25zLiBUaGUgbW9zdCBpbXBv
cnRhbnQKIAkJCWJlaW5nOgogCQkJICAgIE5PX1NTTHYzICAgIERpc2FsbG93IHRoZSB1c2Ug
b2YgU1NMdjMKKwogCQkJICAgIE5PX1RMU3YxICAgIERpc2FsbG93IHRoZSB1c2Ugb2YgVExT
djEuMAorCiAJCQkgICAgTk9fVExTdjFfMSAgRGlzYWxsb3cgdGhlIHVzZSBvZiBUTFN2MS4x
CisKIAkJCSAgICBOT19UTFN2MV8yICBEaXNhbGxvdyB0aGUgdXNlIG9mIFRMU3YxLjIKKwog
CQkJICAgIFNJTkdMRV9ESF9VU0UgQWx3YXlzIGNyZWF0ZSBhIG5ldyBrZXkgd2hlbiB1c2lu
ZwogCQkJCSAgICAgIHRlbXBvcmFyeS9lcGhlbWVyYWwgREgga2V5IGV4Y2hhbmdlcworCisJ
CQkgICAgU1NMX09QX05PX1RJQ0tFVAorCQkJCSAgICAgIERpc2FibGUgdXNlIG9mIFJGQzUw
Nzcgc2Vzc2lvbiB0aWNrZXRzLgorCQkJCSAgICAgIFNvbWUgc2VydmVycyBtYXkgaGF2ZSBw
cm9ibGVtcworCQkJCSAgICAgIHVuZGVyc3RhbmRpbmcgdGhlIFRMUyBleHRlbnNpb24gZHVl
CisJCQkJICAgICAgdG8gYW1iaWd1b3VzIHNwZWNpZmljYXRpb24gaW4gUkZDNDUwNy4KKwog
CQkJICAgIEFMTCAgICAgICBFbmFibGUgdmFyaW91cyBidWcgd29ya2Fyb3VuZHMKIAkJCQkg
ICAgICBzdWdnZXN0ZWQgYXMgImhhcm1sZXNzIiBieSBPcGVuU1NMCiAJCQkJICAgICAgQmUg
d2FybmVkIHRoYXQgdGhpcyByZWR1Y2VzIFNTTC9UTFMKIAkJCQkgICAgICBzdHJlbmd0aCB0
byBzb21lIGF0dGFja3MuCiAJCQlTZWUgT3BlblNTTCBTU0xfQ1RYX3NldF9vcHRpb25zIGRv
Y3VtZW50YXRpb24gZm9yIGEKIAkJCWNvbXBsZXRlIGxpc3Qgb2Ygb3B0aW9ucy4KIAogCSAg
IGNsaWVudGNhPQlGaWxlIGNvbnRhaW5pbmcgdGhlIGxpc3Qgb2YgQ0FzIHRvIHVzZSB3aGVu
CiAJCQlyZXF1ZXN0aW5nIGEgY2xpZW50IGNlcnRpZmljYXRlLgogCiAJICAgY2FmaWxlPQlG
aWxlIGNvbnRhaW5pbmcgYWRkaXRpb25hbCBDQSBjZXJ0aWZpY2F0ZXMgdG8KIAkJCXVzZSB3
aGVuIHZlcmlmeWluZyBjbGllbnQgY2VydGlmaWNhdGVzLiBJZiB1bnNldAogCQkJY2xpZW50
Y2Egd2lsbCBiZSB1c2VkLgogCiAJICAgY2FwYXRoPQlEaXJlY3RvcnkgY29udGFpbmluZyBh
ZGRpdGlvbmFsIENBIGNlcnRpZmljYXRlcwogCQkJYW5kIENSTCBsaXN0cyB0byB1c2Ugd2hl
biB2ZXJpZnlpbmcgY2xpZW50IGNlcnRpZmljYXRlcy4KIAogCSAgIGNybGZpbGU9CUZpbGUg
b2YgYWRkaXRpb25hbCBDUkwgbGlzdHMgdG8gdXNlIHdoZW4gdmVyaWZ5aW5nCiAJCQl0aGUg
Y2xpZW50IGNlcnRpZmljYXRlLCBpbiBhZGRpdGlvbiB0byBDUkxzIHN0b3JlZCBpbgogCQkJ
dGhlIGNhcGF0aC4gSW1wbGllcyBWRVJJRllfQ1JMIGZsYWcgYmVsb3cuCkBAIC0yMzQ5LDE2
MCArMjQwOSwxMzkgQEAKIAlkaXJlY3RseSB0byB0aGUgb3JpZ2luYWwgY2xpZW50IGRlc3Rp
bmF0aW9uIElQIG9yIHNlZWsgYSBmYXN0ZXIKIAlzb3VyY2UgdXNpbmcgdGhlIEhUVFAgSG9z
dCBoZWFkZXIuCiAJCiAJVXNpbmcgSG9zdCB0byBsb2NhdGUgYWx0ZXJuYXRpdmUgc2VydmVy
cyBjYW4gcHJvdmlkZSBmYXN0ZXIKIAljb25uZWN0aXZpdHkgd2l0aCBhIHJhbmdlIG9mIGZh
aWx1cmUgcmVjb3Zlcnkgb3B0aW9ucy4KIAlCdXQgY2FuIGFsc28gbGVhZCB0byBjb25uZWN0
aXZpdHkgdHJvdWJsZSB3aGVuIHRoZSBjbGllbnQgYW5kCiAJc2VydmVyIGFyZSBhdHRlbXB0
aW5nIHN0YXRlZnVsIGludGVyYWN0aW9ucyB1bmF3YXJlIG9mIHRoZSBwcm94eS4KIAkKIAlU
aGlzIG9wdGlvbiAob24gYnkgZGVmYXVsdCkgcHJldmVudHMgYWx0ZXJuYXRpdmUgRE5TIGVu
dHJpZXMgYmVpbmcKIAlsb2NhdGVkIHRvIHNlbmQgaW50ZXJjZXB0ZWQgdHJhZmZpYyBESVJF
Q1QgdG8gYW4gb3JpZ2luIHNlcnZlci4KIAlUaGUgY2xpZW50cyBvcmlnaW5hbCBkZXN0aW5h
dGlvbiBJUCBhbmQgcG9ydCB3aWxsIGJlIHVzZWQgaW5zdGVhZC4KIAkKIAlSZWdhcmRsZXNz
IG9mIHRoaXMgb3B0aW9uIHNldHRpbmcsIHdoZW4gZGVhbGluZyB3aXRoIGludGVyY2VwdGVk
CiAJdHJhZmZpYyBTcXVpZCB3aWxsIHZlcmlmeSB0aGUgSG9zdDogaGVhZGVyIGFuZCBhbnkg
dHJhZmZpYyB3aGljaAogCWZhaWxzIEhvc3QgdmVyaWZpY2F0aW9uIHdpbGwgYmUgdHJlYXRl
ZCBhcyBpZiB0aGlzIG9wdGlvbiB3ZXJlIE9OLgogCQogCXNlZSBob3N0X3ZlcmlmeV9zdHJp
Y3QgZm9yIGRldGFpbHMgb24gdGhlIHZlcmlmaWNhdGlvbiBwcm9jZXNzLgogRE9DX0VORAog
CiBDT01NRU5UX1NUQVJUCisgVExTIE9QVElPTlMKKyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LQorQ09NTUVOVF9FTkQKKworTkFNRTogdGxzX291dGdvaW5nX29wdGlvbnMKK0lGREVGOiBV
U0VfR05VVExTfHxVU0VfT1BFTlNTTAorVFlQRTogc2VjdXJlUGVlck9wdGlvbnMKK0RFRkFV
TFQ6IGRpc2FibGUKK0xPQzogU2VjdXJpdHk6OlByb3h5T3V0Z29pbmdDb25maWcKK0RPQ19T
VEFSVAorCWRpc2FibGUJCURvIG5vdCBzdXBwb3J0IGh0dHBzOi8vIFVSTHMuCisJCisJY2Vy
dD0vcGF0aC90by9jbGllbnQvY2VydGlmaWNhdGUKKwkJCUEgY2xpZW50IFRMUyBjZXJ0aWZp
Y2F0ZSB0byB1c2Ugd2hlbiBjb25uZWN0aW5nLgorCQorCWtleT0vcGF0aC90by9jbGllbnQv
cHJpdmF0ZV9rZXkKKwkJCVRoZSBwcml2YXRlIFRMUyBrZXkgY29ycmVzcG9uZGluZyB0byB0
aGUgY2VydD0gYWJvdmUuCisJCQlJZiBrZXk9IGlzIG5vdCBzcGVjaWZpZWQgY2VydD0gaXMg
YXNzdW1lZCB0byByZWZlcmVuY2UKKwkJCWEgUEVNIGZpbGUgY29udGFpbmluZyBib3RoIHRo
ZSBjZXJ0aWZpY2F0ZSBhbmQgdGhlIGtleS4KKwkKKwl2ZXJzaW9uPTF8M3w0fDV8NgorCQkJ
VGhlIFRMUy9TU0wgdmVyc2lvbiB0byB1c2Ugd2hlbiBjb25uZWN0aW5nCisJCQkJMSA9IGF1
dG9tYXRpYyAoZGVmYXVsdCkKKwkJCQkzID0gU1NMIHYzIG9ubHkKKwkJCQk0ID0gVExTIHYx
LjAgb25seQorCQkJCTUgPSBUTFMgdjEuMSBvbmx5CisJCQkJNiA9IFRMUyB2MS4yIG9ubHkK
KwkKKwljaXBoZXI9Li4uCVRoZSBsaXN0IG9mIHZhbGlkIFRMUyBjaXBoZXJzIHRvIHVzZS4K
KwkKKwlvcHRpb25zPS4uLiAJU3BlY2lmeSB2YXJpb3VzIFRMUy9TU0wgaW1wbGVtZW50YXRp
b24gb3B0aW9uczoKKworCQkJICAgIE5PX1NTTHYzICAgIERpc2FsbG93IHRoZSB1c2Ugb2Yg
U1NMdjMKKwkJCSAgICBOT19UTFN2MSAgICBEaXNhbGxvdyB0aGUgdXNlIG9mIFRMU3YxLjAK
KwkJCSAgICBOT19UTFN2MV8xICBEaXNhbGxvdyB0aGUgdXNlIG9mIFRMU3YxLjEKKwkJCSAg
ICBOT19UTFN2MV8yICBEaXNhbGxvdyB0aGUgdXNlIG9mIFRMU3YxLjIKKwkJCSAgICBTSU5H
TEVfREhfVVNFCisJCQkJICAgICAgQWx3YXlzIGNyZWF0ZSBhIG5ldyBrZXkgd2hlbiB1c2lu
ZworCQkJCSAgICAgIHRlbXBvcmFyeS9lcGhlbWVyYWwgREgga2V5IGV4Y2hhbmdlcworCQkJ
ICAgIEFMTCAgICAgICBFbmFibGUgdmFyaW91cyBidWcgd29ya2Fyb3VuZHMKKwkJCQkgICAg
ICBzdWdnZXN0ZWQgYXMgImhhcm1sZXNzIiBieSBPcGVuU1NMCisJCQkJICAgICAgQmUgd2Fy
bmVkIHRoYXQgdGhpcyByZWR1Y2VzIFRMUy9TU0wKKwkJCQkgICAgICBzdHJlbmd0aCB0byBz
b21lIGF0dGFja3MuCisKKwkJCVNlZSB0aGUgT3BlblNTTCBTU0xfQ1RYX3NldF9vcHRpb25z
IGRvY3VtZW50YXRpb24gZm9yIGEKKwkJCW1vcmUgY29tcGxldGUgbGlzdC4KKwkKKwljYWZp
bGU9Li4uIAlBIGZpbGUgY29udGFpbmluZyBhZGRpdGlvbmFsIENBIGNlcnRpZmljYXRlcyB0
byB1c2UKKwkJCXdoZW4gdmVyaWZ5aW5nIHRoZSBwZWVyIGNlcnRpZmljYXRlLgorCQorCWNh
cGF0aD0uLi4JQSBkaXJlY3RvcnkgY29udGFpbmluZyBhZGRpdGlvbmFsIENBIGNlcnRpZmlj
YXRlcyB0bworCQkJdXNlIHdoZW4gdmVyaWZ5aW5nIHRoZSBwZWVyIGNlcnRpZmljYXRlLgor
CQorCWNybGZpbGU9Li4uIAlBIGNlcnRpZmljYXRlIHJldm9jYXRpb24gbGlzdCBmaWxlIHRv
IHVzZSB3aGVuCisJCQl2ZXJpZnlpbmcgdGhlIHBlZXIgY2VydGlmaWNhdGUuCisJCisJZmxh
Z3M9Li4uCVNwZWNpZnkgdmFyaW91cyBmbGFncyBtb2RpZnlpbmcgdGhlIFRMUyBpbXBsZW1l
bnRhdGlvbjoKKwkKKwkJCURPTlRfVkVSSUZZX1BFRVIKKwkJCQlBY2NlcHQgY2VydGlmaWNh
dGVzIGV2ZW4gaWYgdGhleSBmYWlsIHRvCisJCQkJdmVyaWZ5LgorCQkJTk9fREVGQVVMVF9D
QQorCQkJCURvbid0IHVzZSB0aGUgZGVmYXVsdCBDQSBsaXN0IGJ1aWx0IGluCisJCQkJdG8g
T3BlblNTTC4KKwkJCURPTlRfVkVSSUZZX0RPTUFJTgorCQkJCURvbid0IHZlcmlmeSB0aGUg
cGVlciBjZXJ0aWZpY2F0ZQorCQkJCW1hdGNoZXMgdGhlIHNlcnZlciBuYW1lCisJCisJZG9t
YWluPSAJVGhlIHBlZXIgbmFtZSBhcyBhZHZlcnRpc2VkIGluIGl0cyBjZXJ0aWZpY2F0ZS4K
KwkJCVVzZWQgZm9yIHZlcmlmeWluZyB0aGUgY29ycmVjdG5lc3Mgb2YgdGhlIHJlY2VpdmVk
IHBlZXIKKwkJCWNlcnRpZmljYXRlLiBJZiBub3Qgc3BlY2lmaWVkIHRoZSBwZWVyIGhvc3Ru
YW1lIHdpbGwgYmUKKwkJCXVzZWQuCitET0NfRU5ECisKK0NPTU1FTlRfU1RBUlQKICBTU0wg
T1BUSU9OUwogIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiBDT01NRU5UX0VORAogCiBOQU1F
OiBzc2xfdW5jbGVhbl9zaHV0ZG93bgogSUZERUY6IFVTRV9PUEVOU1NMCiBUWVBFOiBvbm9m
ZgogREVGQVVMVDogb2ZmCiBMT0M6IENvbmZpZy5TU0wudW5jbGVhbl9zaHV0ZG93bgogRE9D
X1NUQVJUCiAJU29tZSBicm93c2VycyAoZXNwZWNpYWxseSBNU0lFKSBidWdzIG91dCBvbiBT
U0wgc2h1dGRvd24KIAltZXNzYWdlcy4KIERPQ19FTkQKIAogTkFNRTogc3NsX2VuZ2luZQog
SUZERUY6IFVTRV9PUEVOU1NMCiBUWVBFOiBzdHJpbmcKIExPQzogQ29uZmlnLlNTTC5zc2xf
ZW5naW5lCiBERUZBVUxUOiBub25lCiBET0NfU1RBUlQKIAlUaGUgT3BlblNTTCBlbmdpbmUg
dG8gdXNlLiBZb3Ugd2lsbCBuZWVkIHRvIHNldCB0aGlzIGlmIHlvdQogCXdvdWxkIGxpa2Ug
dG8gdXNlIGhhcmR3YXJlIFNTTCBhY2NlbGVyYXRpb24gZm9yIGV4YW1wbGUuCiBET0NfRU5E
CiAKLU5BTUU6IHNzbHByb3h5X2NsaWVudF9jZXJ0aWZpY2F0ZQotSUZERUY6IFVTRV9PUEVO
U1NMCi1ERUZBVUxUOiBub25lCi1MT0M6IENvbmZpZy5zc2xfY2xpZW50LmNlcnQKLVRZUEU6
IHN0cmluZwotRE9DX1NUQVJUCi0JQ2xpZW50IFNTTCBDZXJ0aWZpY2F0ZSB0byB1c2Ugd2hl
biBwcm94eWluZyBodHRwczovLyBVUkxzCi1ET0NfRU5ECi0KLU5BTUU6IHNzbHByb3h5X2Ns
aWVudF9rZXkKLUlGREVGOiBVU0VfT1BFTlNTTAotREVGQVVMVDogbm9uZQotTE9DOiBDb25m
aWcuc3NsX2NsaWVudC5rZXkKLVRZUEU6IHN0cmluZwotRE9DX1NUQVJUCi0JQ2xpZW50IFNT
TCBLZXkgdG8gdXNlIHdoZW4gcHJveHlpbmcgaHR0cHM6Ly8gVVJMcwotRE9DX0VORAotCi1O
QU1FOiBzc2xwcm94eV92ZXJzaW9uCi1JRkRFRjogVVNFX09QRU5TU0wKLURFRkFVTFQ6IDEK
LURFRkFVTFRfRE9DOiBhdXRvbWF0aWMgU1NML1RMUyB2ZXJzaW9uIG5lZ290aWF0aW9uCi1M
T0M6IENvbmZpZy5zc2xfY2xpZW50LnZlcnNpb24KLVRZUEU6IGludAotRE9DX1NUQVJUCi0J
U1NMIHZlcnNpb24gbGV2ZWwgdG8gdXNlIHdoZW4gcHJveHlpbmcgaHR0cHM6Ly8gVVJMcwot
Ci0JVGhlIHZlcnNpb25zIG9mIFNTTC9UTFMgc3VwcG9ydGVkOgotCi0JICAgIDEJYXV0b21h
dGljIChkZWZhdWx0KQotCSAgICAzCVNTTHYzIG9ubHkKLQkgICAgNAlUTFN2MS4wIG9ubHkK
LQkgICAgNQlUTFN2MS4xIG9ubHkKLQkgICAgNglUTFN2MS4yIG9ubHkKLURPQ19FTkQKLQot
TkFNRTogc3NscHJveHlfb3B0aW9ucwotSUZERUY6IFVTRV9PUEVOU1NMCi1ERUZBVUxUOiBu
b25lCi1MT0M6IENvbmZpZy5zc2xfY2xpZW50Lm9wdGlvbnMKLVRZUEU6IHN0cmluZwotRE9D
X1NUQVJUCi0JU1NMIGltcGxlbWVudGF0aW9uIG9wdGlvbnMgdG8gdXNlIHdoZW4gcHJveHlp
bmcgaHR0cHM6Ly8gVVJMcwotCQotCVRoZSBtb3N0IGltcG9ydGFudCBiZWluZzoKLQotCSAg
ICBOT19TU0x2MyAgICBEaXNhbGxvdyB0aGUgdXNlIG9mIFNTTHYzCi0JICAgIE5PX1RMU3Yx
ICAgIERpc2FsbG93IHRoZSB1c2Ugb2YgVExTdjEuMAotCSAgICBOT19UTFN2MV8xICBEaXNh
bGxvdyB0aGUgdXNlIG9mIFRMU3YxLjEKLQkgICAgTk9fVExTdjFfMiAgRGlzYWxsb3cgdGhl
IHVzZSBvZiBUTFN2MS4yCi0JICAgIFNJTkdMRV9ESF9VU0UKLQkJICAgICAgQWx3YXlzIGNy
ZWF0ZSBhIG5ldyBrZXkgd2hlbiB1c2luZyB0ZW1wb3JhcnkvZXBoZW1lcmFsCi0JCSAgICAg
IERIIGtleSBleGNoYW5nZXMKLQkgICAgU1NMX09QX05PX1RJQ0tFVAotCQkgICAgICBEaXNh
YmxlIHVzZSBvZiBSRkM1MDc3IHNlc3Npb24gdGlja2V0cy4gU29tZSBzZXJ2ZXJzCi0JCSAg
ICAgIG1heSBoYXZlIHByb2JsZW1zIHVuZGVyc3RhbmRpbmcgdGhlIFRMUyBleHRlbnNpb24g
ZHVlCi0JCSAgICAgIHRvIGFtYmlndW91cyBzcGVjaWZpY2F0aW9uIGluIFJGQzQ1MDcuCi0J
ICAgIEFMTCAgICAgICBFbmFibGUgdmFyaW91cyBidWcgd29ya2Fyb3VuZHMgc3VnZ2VzdGVk
IGFzICJoYXJtbGVzcyIKLQkJICAgICAgYnkgT3BlblNTTC4gQmUgd2FybmVkIHRoYXQgdGhp
cyBtYXkgcmVkdWNlIFNTTC9UTFMKLQkJICAgICAgc3RyZW5ndGggdG8gc29tZSBhdHRhY2tz
LgotCQotCVNlZSB0aGUgT3BlblNTTCBTU0xfQ1RYX3NldF9vcHRpb25zIGRvY3VtZW50YXRp
b24gZm9yIGEKLQljb21wbGV0ZSBsaXN0IG9mIHBvc3NpYmxlIG9wdGlvbnMuCi1ET0NfRU5E
Ci0KLU5BTUU6IHNzbHByb3h5X2NpcGhlcgotSUZERUY6IFVTRV9PUEVOU1NMCi1ERUZBVUxU
OiBub25lCi1MT0M6IENvbmZpZy5zc2xfY2xpZW50LmNpcGhlcgotVFlQRTogc3RyaW5nCi1E
T0NfU1RBUlQKLQlTU0wgY2lwaGVyIGxpc3QgdG8gdXNlIHdoZW4gcHJveHlpbmcgaHR0cHM6
Ly8gVVJMcwotCi0JQ29sb24gc2VwYXJhdGVkIGxpc3Qgb2Ygc3VwcG9ydGVkIGNpcGhlcnMu
Ci1ET0NfRU5ECi0KLU5BTUU6IHNzbHByb3h5X2NhZmlsZQotSUZERUY6IFVTRV9PUEVOU1NM
Ci1ERUZBVUxUOiBub25lCi1MT0M6IENvbmZpZy5zc2xfY2xpZW50LmNhZmlsZQotVFlQRTog
c3RyaW5nCi1ET0NfU1RBUlQKLQlmaWxlIGNvbnRhaW5pbmcgQ0EgY2VydGlmaWNhdGVzIHRv
IHVzZSB3aGVuIHZlcmlmeWluZyBzZXJ2ZXIKLQljZXJ0aWZpY2F0ZXMgd2hpbGUgcHJveHlp
bmcgaHR0cHM6Ly8gVVJMcwotRE9DX0VORAotCi1OQU1FOiBzc2xwcm94eV9jYXBhdGgKLUlG
REVGOiBVU0VfT1BFTlNTTAotREVGQVVMVDogbm9uZQotTE9DOiBDb25maWcuc3NsX2NsaWVu
dC5jYXBhdGgKLVRZUEU6IHN0cmluZwotRE9DX1NUQVJUCi0JZGlyZWN0b3J5IGNvbnRhaW5p
bmcgQ0EgY2VydGlmaWNhdGVzIHRvIHVzZSB3aGVuIHZlcmlmeWluZwotCXNlcnZlciBjZXJ0
aWZpY2F0ZXMgd2hpbGUgcHJveHlpbmcgaHR0cHM6Ly8gVVJMcwotRE9DX0VORAotCiBOQU1F
OiBzc2xwcm94eV9zZXNzaW9uX3R0bAogSUZERUY6IFVTRV9PUEVOU1NMCiBERUZBVUxUOiAz
MDAKIExPQzogQ29uZmlnLlNTTC5zZXNzaW9uX3R0bAogVFlQRTogaW50CiBET0NfU1RBUlQK
IAlTZXRzIHRoZSB0aW1lb3V0IHZhbHVlIGZvciBTU0wgc2Vzc2lvbnMKIERPQ19FTkQKIAog
TkFNRTogc3NscHJveHlfc2Vzc2lvbl9jYWNoZV9zaXplCiBJRkRFRjogVVNFX09QRU5TU0wK
IERFRkFVTFQ6IDIgTUIKIExPQzogQ29uZmlnLlNTTC5zZXNzaW9uQ2FjaGVTaXplCiBUWVBF
OiBiX3NpemVfdAogRE9DX1NUQVJUCiAgICAgICAgIFNldHMgdGhlIGNhY2hlIHNpemUgdG8g
dXNlIGZvciBzc2wgc2Vzc2lvbgogRE9DX0VORAogCiBOQU1FOiBzc2xwcm94eV9jZXJ0X3Np
Z25faGFzaAogSUZERUY6IFVTRV9PUEVOU1NMCkBAIC0yNTkwLDUzICsyNjI5LDQwIEBACiAJ
c3RlcHMuICBSdWxlcyB3aXRoIGFjdGlvbnMgdGhhdCBhcmUgaW1wb3NzaWJsZSBhdCB0aGUg
Y3VycmVudCBzdGVwIGFyZQogCWlnbm9yZWQuIFRoZSBmaXJzdCBtYXRjaGluZyBzc2xfYnVt
cCBhY3Rpb24gd2lucyBhbmQgaXMgYXBwbGllZCBhdCB0aGUKIAllbmQgb2YgdGhlIGN1cnJl
bnQgc3RlcC4gSWYgbm8gcnVsZXMgbWF0Y2gsIHRoZSBzcGxpY2UgYWN0aW9uIGlzIHVzZWQu
CiAJU2VlIHRoZSBhdF9zdGVwIEFDTCBmb3IgYSBsaXN0IG9mIHRoZSBzdXBwb3J0ZWQgU3Ns
QnVtcCBzdGVwcy4KIAogCVRoaXMgY2xhdXNlIHN1cHBvcnRzIGJvdGggZmFzdCBhbmQgc2xv
dyBhY2wgdHlwZXMuCiAJU2VlIGh0dHA6Ly93aWtpLnNxdWlkLWNhY2hlLm9yZy9TcXVpZEZh
cS9TcXVpZEFjbCBmb3IgZGV0YWlscy4KIAogCVNlZSBhbHNvOiBodHRwX3BvcnQgc3NsLWJ1
bXAsIGh0dHBzX3BvcnQgc3NsLWJ1bXAsIGFuZCBhY2wgYXRfc3RlcC4KIAogCiAJIyBFeGFt
cGxlOiBCdW1wIGFsbCByZXF1ZXN0cyBleGNlcHQgdGhvc2Ugb3JpZ2luYXRpbmcgZnJvbQog
CSMgbG9jYWxob3N0IG9yIHRob3NlIGdvaW5nIHRvIGV4YW1wbGUuY29tLgogCiAJYWNsIGJy
b2tlbl9zaXRlcyBkc3Rkb21haW4gLmV4YW1wbGUuY29tCiAJc3NsX2J1bXAgc3BsaWNlIGxv
Y2FsaG9zdAogCXNzbF9idW1wIHNwbGljZSBicm9rZW5fc2l0ZXMKIAlzc2xfYnVtcCBidW1w
IGFsbAogRE9DX0VORAogCi1OQU1FOiBzc2xwcm94eV9mbGFncwotSUZERUY6IFVTRV9PUEVO
U1NMCi1ERUZBVUxUOiBub25lCi1MT0M6IENvbmZpZy5zc2xfY2xpZW50LmZsYWdzCi1UWVBF
OiBzdHJpbmcKLURPQ19TVEFSVAotCVZhcmlvdXMgZmxhZ3MgbW9kaWZ5aW5nIHRoZSB1c2Ug
b2YgU1NMIHdoaWxlIHByb3h5aW5nIGh0dHBzOi8vIFVSTHM6Ci0JICAgIERPTlRfVkVSSUZZ
X1BFRVIJQWNjZXB0IGNlcnRpZmljYXRlcyB0aGF0IGZhaWwgdmVyaWZpY2F0aW9uLgotCQkJ
CUZvciByZWZpbmVkIGNvbnRyb2wsIHNlZSBzc2xwcm94eV9jZXJ0X2Vycm9yLgotCSAgICBO
T19ERUZBVUxUX0NBCURvbid0IHVzZSB0aGUgZGVmYXVsdCBDQSBsaXN0IGJ1aWx0IGluCi0J
CQkJdG8gT3BlblNTTC4KLURPQ19FTkQKLQogTkFNRTogc3NscHJveHlfY2VydF9lcnJvcgog
SUZERUY6IFVTRV9PUEVOU1NMCiBERUZBVUxUOiBub25lCiBERUZBVUxUX0RPQzogU2VydmVy
IGNlcnRpZmljYXRlIGVycm9ycyB0ZXJtaW5hdGUgdGhlIHRyYW5zYWN0aW9uLgogTE9DOiBD
b25maWcuc3NsX2NsaWVudC5jZXJ0X2Vycm9yCiBUWVBFOiBhY2xfYWNjZXNzCiBET0NfU1RB
UlQKIAlVc2UgdGhpcyBBQ0wgdG8gYnlwYXNzIHNlcnZlciBjZXJ0aWZpY2F0ZSB2YWxpZGF0
aW9uIGVycm9ycy4KIAogCUZvciBleGFtcGxlLCB0aGUgZm9sbG93aW5nIGxpbmVzIHdpbGwg
YnlwYXNzIGFsbCB2YWxpZGF0aW9uIGVycm9ycwogCXdoZW4gdGFsa2luZyB0byBzZXJ2ZXJz
IGZvciBleGFtcGxlLmNvbS4gQWxsIG90aGVyCiAJdmFsaWRhdGlvbiBlcnJvcnMgd2lsbCBy
ZXN1bHQgaW4gRVJSX1NFQ1VSRV9DT05ORUNUX0ZBSUwgZXJyb3IuCiAKIAkJYWNsIEJyb2tl
bkJ1dFRydXN0ZWRTZXJ2ZXJzIGRzdGRvbWFpbiBleGFtcGxlLmNvbQogCQlzc2xwcm94eV9j
ZXJ0X2Vycm9yIGFsbG93IEJyb2tlbkJ1dFRydXN0ZWRTZXJ2ZXJzCiAJCXNzbHByb3h5X2Nl
cnRfZXJyb3IgZGVueSBhbGwKIAogCVRoaXMgY2xhdXNlIG9ubHkgc3VwcG9ydHMgZmFzdCBh
Y2wgdHlwZXMuCiAJU2VlIGh0dHA6Ly93aWtpLnNxdWlkLWNhY2hlLm9yZy9TcXVpZEZhcS9T
cXVpZEFjbCBmb3IgZGV0YWlscy4KIAlVc2luZyBzbG93IGFjbCB0eXBlcyBtYXkgcmVzdWx0
IGluIHNlcnZlciBjcmFzaGVzCkBAIC0zMTQ1LDcxICszMTcxLDg0IEBACiAJc3Nsa2V5PS9w
YXRoL3RvL3NzbC9rZXkKIAkJCVRoZSBwcml2YXRlIFNTTCBrZXkgY29ycmVzcG9uZGluZyB0
byBzc2xjZXJ0IGFib3ZlLgogCQkJSWYgJ3NzbGtleScgaXMgbm90IHNwZWNpZmllZCAnc3Ns
Y2VydCcgaXMgYXNzdW1lZCB0bwogCQkJcmVmZXJlbmNlIGEgY29tYmluZWQgZmlsZSBjb250
YWluaW5nIGJvdGggdGhlCiAJCQljZXJ0aWZpY2F0ZSBhbmQgdGhlIGtleS4KIAkKIAlzc2x2
ZXJzaW9uPTF8M3w0fDV8NgogCQkJVGhlIFNTTCB2ZXJzaW9uIHRvIHVzZSB3aGVuIGNvbm5l
Y3RpbmcgdG8gdGhpcyBwZWVyCiAJCQkJMSA9IGF1dG9tYXRpYyAoZGVmYXVsdCkKIAkJCQkz
ID0gU1NMIHYzIG9ubHkKIAkJCQk0ID0gVExTIHYxLjAgb25seQogCQkJCTUgPSBUTFMgdjEu
MSBvbmx5CiAJCQkJNiA9IFRMUyB2MS4yIG9ubHkKIAkKIAlzc2xjaXBoZXI9Li4uCVRoZSBs
aXN0IG9mIHZhbGlkIFNTTCBjaXBoZXJzIHRvIHVzZSB3aGVuIGNvbm5lY3RpbmcKIAkJCXRv
IHRoaXMgcGVlci4KIAkKIAlzc2xvcHRpb25zPS4uLiAJU3BlY2lmeSB2YXJpb3VzIFNTTCBp
bXBsZW1lbnRhdGlvbiBvcHRpb25zOgogCiAJCQkgICAgTk9fU1NMdjMgICAgRGlzYWxsb3cg
dGhlIHVzZSBvZiBTU0x2MworCiAJCQkgICAgTk9fVExTdjEgICAgRGlzYWxsb3cgdGhlIHVz
ZSBvZiBUTFN2MS4wCisKIAkJCSAgICBOT19UTFN2MV8xICBEaXNhbGxvdyB0aGUgdXNlIG9m
IFRMU3YxLjEKKwogCQkJICAgIE5PX1RMU3YxXzIgIERpc2FsbG93IHRoZSB1c2Ugb2YgVExT
djEuMgorCiAJCQkgICAgU0lOR0xFX0RIX1VTRQogCQkJCSAgICAgIEFsd2F5cyBjcmVhdGUg
YSBuZXcga2V5IHdoZW4gdXNpbmcKIAkJCQkgICAgICB0ZW1wb3JhcnkvZXBoZW1lcmFsIERI
IGtleSBleGNoYW5nZXMKKworCQkJICAgIFNTTF9PUF9OT19USUNLRVQKKwkJCQkgICAgICBE
aXNhYmxlIHVzZSBvZiBSRkM1MDc3IHNlc3Npb24gdGlja2V0cy4KKwkJCQkgICAgICBTb21l
IHNlcnZlcnMgbWF5IGhhdmUgcHJvYmxlbXMKKwkJCQkgICAgICB1bmRlcnN0YW5kaW5nIHRo
ZSBUTFMgZXh0ZW5zaW9uIGR1ZQorCQkJCSAgICAgIHRvIGFtYmlndW91cyBzcGVjaWZpY2F0
aW9uIGluIFJGQzQ1MDcuCisKIAkJCSAgICBBTEwgICAgICAgRW5hYmxlIHZhcmlvdXMgYnVn
IHdvcmthcm91bmRzCiAJCQkJICAgICAgc3VnZ2VzdGVkIGFzICJoYXJtbGVzcyIgYnkgT3Bl
blNTTAogCQkJCSAgICAgIEJlIHdhcm5lZCB0aGF0IHRoaXMgcmVkdWNlcyBTU0wvVExTCiAJ
CQkJICAgICAgc3RyZW5ndGggdG8gc29tZSBhdHRhY2tzLgogCiAJCQlTZWUgdGhlIE9wZW5T
U0wgU1NMX0NUWF9zZXRfb3B0aW9ucyBkb2N1bWVudGF0aW9uIGZvciBhCiAJCQltb3JlIGNv
bXBsZXRlIGxpc3QuCiAJCiAJc3NsY2FmaWxlPS4uLiAJQSBmaWxlIGNvbnRhaW5pbmcgYWRk
aXRpb25hbCBDQSBjZXJ0aWZpY2F0ZXMgdG8gdXNlCiAJCQl3aGVuIHZlcmlmeWluZyB0aGUg
cGVlciBjZXJ0aWZpY2F0ZS4KIAkKIAlzc2xjYXBhdGg9Li4uCUEgZGlyZWN0b3J5IGNvbnRh
aW5pbmcgYWRkaXRpb25hbCBDQSBjZXJ0aWZpY2F0ZXMgdG8KIAkJCXVzZSB3aGVuIHZlcmlm
eWluZyB0aGUgcGVlciBjZXJ0aWZpY2F0ZS4KIAkKIAlzc2xjcmxmaWxlPS4uLiAJQSBjZXJ0
aWZpY2F0ZSByZXZvY2F0aW9uIGxpc3QgZmlsZSB0byB1c2Ugd2hlbgogCQkJdmVyaWZ5aW5n
IHRoZSBwZWVyIGNlcnRpZmljYXRlLgogCQogCXNzbGZsYWdzPS4uLglTcGVjaWZ5IHZhcmlv
dXMgZmxhZ3MgbW9kaWZ5aW5nIHRoZSBTU0wgaW1wbGVtZW50YXRpb246CiAJCiAJCQlET05U
X1ZFUklGWV9QRUVSCiAJCQkJQWNjZXB0IGNlcnRpZmljYXRlcyBldmVuIGlmIHRoZXkgZmFp
bCB0bwogCQkJCXZlcmlmeS4KKwogCQkJTk9fREVGQVVMVF9DQQogCQkJCURvbid0IHVzZSB0
aGUgZGVmYXVsdCBDQSBsaXN0IGJ1aWx0IGluCiAJCQkJdG8gT3BlblNTTC4KKwogCQkJRE9O
VF9WRVJJRllfRE9NQUlOCiAJCQkJRG9uJ3QgdmVyaWZ5IHRoZSBwZWVyIGNlcnRpZmljYXRl
CiAJCQkJbWF0Y2hlcyB0aGUgc2VydmVyIG5hbWUKIAkKIAlzc2xkb21haW49IAlUaGUgcGVl
ciBuYW1lIGFzIGFkdmVydGlzZWQgaW4gaXQncyBjZXJ0aWZpY2F0ZS4KIAkJCVVzZWQgZm9y
IHZlcmlmeWluZyB0aGUgY29ycmVjdG5lc3Mgb2YgdGhlIHJlY2VpdmVkIHBlZXIKIAkJCWNl
cnRpZmljYXRlLiBJZiBub3Qgc3BlY2lmaWVkIHRoZSBwZWVyIGhvc3RuYW1lIHdpbGwgYmUK
IAkJCXVzZWQuCiAJCiAJZnJvbnQtZW5kLWh0dHBzCiAJCQlFbmFibGUgdGhlICJGcm9udC1F
bmQtSHR0cHM6IE9uIiBoZWFkZXIgbmVlZGVkIHdoZW4KIAkJCXVzaW5nIFNxdWlkIGFzIGEg
U1NMIGZyb250ZW5kIGluIGZyb250IG9mIE1pY3Jvc29mdCBPV0EuCiAJCQlTZWUgTVMgS0Ig
ZG9jdW1lbnQgUTMwNzM0NyBmb3IgZGV0YWlscyBvbiB0aGlzIGhlYWRlci4KIAkJCUlmIHNl
dCB0byBhdXRvIHRoZSBoZWFkZXIgd2lsbCBvbmx5IGJlIGFkZGVkIGlmIHRoZQogCQkJcmVx
dWVzdCBpcyBmb3J3YXJkZWQgYXMgYSBodHRwczovLyBVUkwuCiAJCiAJCiAJPT09PSBHRU5F
UkFMIE9QVElPTlMgPT09PQogCQogCWNvbm5lY3QtdGltZW91dD1OCgo9PT0gbW9kaWZpZWQg
ZmlsZSAnc3JjL2NmX2dlbl9kZWZpbmVzJwotLS0gc3JjL2NmX2dlbl9kZWZpbmVzCTIwMTUt
MDEtMTMgMDc6MjU6MzYgKzAwMDAKKysrIHNyYy9jZl9nZW5fZGVmaW5lcwkyMDE1LTAxLTE0
IDE1OjA1OjQ3ICswMDAwCkBAIC0xNyw0MCArMTcsNDEgQEAKIAlwcmludCAiICogUGxlYXNl
IHNlZSB0aGUgQ09QWUlORyBhbmQgQ09OVFJJQlVUT1JTIGZpbGVzIGZvciBkZXRhaWxzLiIK
IAlwcmludCAiICovIgogCXByaW50ICIiCiAJcHJpbnQgIiNpbmNsdWRlIFwiYXV0b2NvbmYu
aFwiIgogCXByaW50ICJzdGF0aWMgc3RydWN0IHsgY29uc3QgY2hhciAqbmFtZTsgY29uc3Qg
Y2hhciAqZW5hYmxlOyBpbnQgZGVmaW5lZDt9IGRlZmluZXNbXSA9IHsiCiAJZGVmaW5lWyJf
U1FVSURfV0lORE9XU18iXT0iTVMgV2luZG93cyIKIAlkZWZpbmVbIkZPTExPV19YX0ZPUldB
UkRFRF9GT1IiXT0iLS1lbmFibGUtZm9sbG93LXgtZm9yd2FyZGVkLWZvciIKIAlkZWZpbmVb
IkZPTExPV19YX0ZPUldBUkRFRF9GT1ImJkxJTlVYX05FVEZJTFRFUiJdPSItLWVuYWJsZS1m
b2xsb3cteC1mb3J3YXJkZWQtZm9yIGFuZCAtLWVuYWJsZS1saW51eC1uZXRmaWx0ZXIiCiAJ
ZGVmaW5lWyJGT0xMT1dfWF9GT1JXQVJERURfRk9SJiZVU0VfQURBUFRBVElPTiJdPSItLWVu
YWJsZS1mb2xsb3cteC1mb3J3YXJkZWQtZm9yIGFuZCAoLS1lbmFibGUtaWNhcC1jbGllbnQg
YW5kL29yIC0tZW5hYmxlLWVjYXApIgogCWRlZmluZVsiRk9MTE9XX1hfRk9SV0FSREVEX0ZP
UiYmVVNFX0RFTEFZX1BPT0xTIl09Ii0tZW5hYmxlLWZvbGxvdy14LWZvcndhcmRlZC1mb3Ig
YW5kIC0tZW5hYmxlLWRlbGF5LXBvb2xzIgogCWRlZmluZVsiSEFWRV9NU1RBVFMmJkhBVkVf
R05VTUFMTE9DX0giXT0iR05VIE1hbGxvYyB3aXRoIG1zdGF0cygpIgogCWRlZmluZVsiSUNB
UF9DTElFTlQiXT0iLS1lbmFibGUtaWNhcC1jbGllbnQiCiAJZGVmaW5lWyJTT19NQVJLJiZV
U0VfTElCQ0FQIl09IlBhY2tldCBNQVJLIChMaW51eCkiCiAJZGVmaW5lWyJTUVVJRF9TTk1Q
Il09Ii0tZW5hYmxlLXNubXAiCiAJZGVmaW5lWyJVU0VfQURBUFRBVElPTiJdPSItLWVuYWJs
ZS1lY2FwIG9yIC0tZW5hYmxlLWljYXAtY2xpZW50IgogCWRlZmluZVsiVVNFX0FVVEgiXT0i
LS1lbmFibGUtYXV0aCIKIAlkZWZpbmVbIlVTRV9DQUNIRV9ESUdFU1RTIl09Ii0tZW5hYmxl
LWNhY2hlLWRpZ2VzdHMiCiAJZGVmaW5lWyJVU0VfREVMQVlfUE9PTFMiXT0iLS1lbmFibGUt
ZGVsYXktcG9vbHMiCiAJZGVmaW5lWyJVU0VfRUNBUCJdPSItLWVuYWJsZS1lY2FwIgogCWRl
ZmluZVsiVVNFX0VSUl9MT0NBTEVTIl09Ii0tZW5hYmxlLWF1dG8tbG9jYWxlIgorCWRlZmlu
ZVsiVVNFX0dOVVRMU3x8VVNFX09QRU5TU0wiXT0iLS13aXRoLWdudXRscyBvciAtLXdpdGgt
b3BlbnNzbCIKIAlkZWZpbmVbIlVTRV9IVENQIl09Ii0tZW5hYmxlLWh0Y3AiCiAJZGVmaW5l
WyJVU0VfSFRUUF9WSU9MQVRJT05TIl09Ii0tZW5hYmxlLWh0dHAtdmlvbGF0aW9ucyIKIAlk
ZWZpbmVbIlVTRV9JQ01QIl09Ii0tZW5hYmxlLWljbXAiCiAJZGVmaW5lWyJVU0VfSURFTlQi
XT0iLS1lbmFibGUtaWRlbnQtbG9va3VwcyIKIAlkZWZpbmVbIlVTRV9MT0FEQUJMRV9NT0RV
TEVTIl09Ii0tZW5hYmxlLWxvYWRhYmxlLW1vZHVsZXMiCiAJZGVmaW5lWyJVU0VfT1BFTlNT
TCJdPSItLXdpdGgtb3BlbnNzbCIKIAlkZWZpbmVbIlVTRV9RT1NfVE9TIl09Ii0tZW5hYmxl
LXpwaC1xb3MiCiAJZGVmaW5lWyJVU0VfU1FVSURfRVNJIl09Ii0tZW5hYmxlLWVzaSIKIAlk
ZWZpbmVbIlVTRV9TUVVJRF9FVUkiXT0iLS1lbmFibGUtZXVpIgogCWRlZmluZVsiVVNFX1NT
TF9DUlREIl09Ii0tZW5hYmxlLXNzbC1jcnRkIgogCWRlZmluZVsiVVNFX1VOTElOS0QiXT0i
LS1lbmFibGUtdW5saW5rZCIKIAlkZWZpbmVbIlVTRV9XQ0NQIl09Ii0tZW5hYmxlLXdjY3Ai
CiAJZGVmaW5lWyJVU0VfV0NDUHYyIl09Ii0tZW5hYmxlLXdjY3B2MiIKIH0KIC9eSUZERUY6
LyB7CiAJaWYgKGRlZmluZVskMl0gIT0gIiIpCiAJICAgIERFRklORT1kZWZpbmVbJDJdCiAJ
ZWxzZQogCSAgICBERUZJTkU9Ii1EIiAkMiAiIGRlZmluZSIKIAlwcmludCAie1wiIiAkMiAi
XCIsIFwiIiBERUZJTkUgIlwiLCAiCgo9PT0gYWRkZWQgZGlyZWN0b3J5ICdzcmMvc2VjdXJp
dHknCj09PSBhZGRlZCBmaWxlICdzcmMvc2VjdXJpdHkvQ29udGV4dC5oJwotLS0gc3JjL3Nl
Y3VyaXR5L0NvbnRleHQuaAkxOTcwLTAxLTAxIDAwOjAwOjAwICswMDAwCisrKyBzcmMvc2Vj
dXJpdHkvQ29udGV4dC5oCTIwMTUtMDEtMTQgMTU6MDQ6MjggKzAwMDAKQEAgLTAsMCArMSwy
OSBAQAorLyoKKyAqIENvcHlyaWdodCAoQykgMTk5Ni0yMDE0IFRoZSBTcXVpZCBTb2Z0d2Fy
ZSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnMKKyAqCisgKiBTcXVpZCBzb2Z0d2FyZSBp
cyBkaXN0cmlidXRlZCB1bmRlciBHUEx2MisgbGljZW5zZSBhbmQgaW5jbHVkZXMKKyAqIGNv
bnRyaWJ1dGlvbnMgZnJvbSBudW1lcm91cyBpbmRpdmlkdWFscyBhbmQgb3JnYW5pemF0aW9u
cy4KKyAqIFBsZWFzZSBzZWUgdGhlIENPUFlJTkcgYW5kIENPTlRSSUJVVE9SUyBmaWxlcyBm
b3IgZGV0YWlscy4KKyAqLworCisjaWZuZGVmIFNRVUlEX1NSQ19TRUNVUklUWV9DT05URVhU
X0gKKyNkZWZpbmUgU1FVSURfU1JDX1NFQ1VSSVRZX0NPTlRFWFRfSAorCisjaWYgVVNFX09Q
RU5TU0wKKyNpbmNsdWRlICJzc2wvZ2FkZ2V0cy5oIgorI2VuZGlmCisKK25hbWVzcGFjZSBT
ZWN1cml0eSB7CisKKyNpZiBVU0VfT1BFTlNTTAorLy8gWFhYOiBtYWtlIHRoaXMgYSBTU0xf
Q1RYX1BvaW50ZXIKK3R5cGVkZWYgU1NMX0NUWCogQ29udGV4dFBvaW50ZXI7CisKKyNlbHNl
CisvLyB1c2Ugdm9pZCogc28gd2UgY2FuIGNoZWNrIGFnYWluc3QgTlVMTAordHlwZWRlZiB2
b2lkKiBDb250ZXh0UG9pbnRlcjsKKyNlbmRpZgorCit9IC8vIG5hbWVzcGFjZSBTZWN1cml0
eQorCisjZW5kaWYgLyogU1FVSURfU1JDX1NFQ1VSSVRZX0NPTlRFWFRfSCAqLwoKPT09IGFk
ZGVkIGZpbGUgJ3NyYy9zZWN1cml0eS9NYWtlZmlsZS5hbScKLS0tIHNyYy9zZWN1cml0eS9N
YWtlZmlsZS5hbQkxOTcwLTAxLTAxIDAwOjAwOjAwICswMDAwCisrKyBzcmMvc2VjdXJpdHkv
TWFrZWZpbGUuYW0JMjAxNS0wMS0xNCAxNTowNDoyOCArMDAwMApAQCAtMCwwICsxLDE2IEBA
CisjIyBDb3B5cmlnaHQgKEMpIDE5OTYtMjAxNCBUaGUgU3F1aWQgU29mdHdhcmUgRm91bmRh
dGlvbiBhbmQgY29udHJpYnV0b3JzCisjIworIyMgU3F1aWQgc29mdHdhcmUgaXMgZGlzdHJp
YnV0ZWQgdW5kZXIgR1BMdjIrIGxpY2Vuc2UgYW5kIGluY2x1ZGVzCisjIyBjb250cmlidXRp
b25zIGZyb20gbnVtZXJvdXMgaW5kaXZpZHVhbHMgYW5kIG9yZ2FuaXphdGlvbnMuCisjIyBQ
bGVhc2Ugc2VlIHRoZSBDT1BZSU5HIGFuZCBDT05UUklCVVRPUlMgZmlsZXMgZm9yIGRldGFp
bHMuCisjIworCitpbmNsdWRlICQodG9wX3NyY2Rpcikvc3JjL0NvbW1vbi5hbQoraW5jbHVk
ZSAkKHRvcF9zcmNkaXIpL3NyYy9UZXN0SGVhZGVycy5hbQorCitub2luc3RfTFRMSUJSQVJJ
RVMgPSBsaWJzZWN1cml0eS5sYQorCitsaWJzZWN1cml0eV9sYV9TT1VSQ0VTPSBcCisJQ29u
dGV4dC5oIFwKKwlQZWVyT3B0aW9ucy5jYyBcCisJUGVlck9wdGlvbnMuaAoKPT09IGFkZGVk
IGZpbGUgJ3NyYy9zZWN1cml0eS9QZWVyT3B0aW9ucy5jYycKLS0tIHNyYy9zZWN1cml0eS9Q
ZWVyT3B0aW9ucy5jYwkxOTcwLTAxLTAxIDAwOjAwOjAwICswMDAwCisrKyBzcmMvc2VjdXJp
dHkvUGVlck9wdGlvbnMuY2MJMjAxNS0wMi0wOCAwNDo1MToyNyArMDAwMApAQCAtMCwwICsx
LDczIEBACisvKgorICogQ29weXJpZ2h0IChDKSAxOTk2LTIwMTQgVGhlIFNxdWlkIFNvZnR3
YXJlIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9ycworICoKKyAqIFNxdWlkIHNvZnR3YXJl
IGlzIGRpc3RyaWJ1dGVkIHVuZGVyIEdQTHYyKyBsaWNlbnNlIGFuZCBpbmNsdWRlcworICog
Y29udHJpYnV0aW9ucyBmcm9tIG51bWVyb3VzIGluZGl2aWR1YWxzIGFuZCBvcmdhbml6YXRp
b25zLgorICogUGxlYXNlIHNlZSB0aGUgQ09QWUlORyBhbmQgQ09OVFJJQlVUT1JTIGZpbGVz
IGZvciBkZXRhaWxzLgorICovCisKKyNpbmNsdWRlICJzcXVpZC5oIgorI2luY2x1ZGUgIkRl
YnVnLmgiCisjaW5jbHVkZSAiZ2xvYmFscy5oIgorI2luY2x1ZGUgIlBhcnNpbmcuaCIKKyNp
bmNsdWRlICJzZWN1cml0eS9QZWVyT3B0aW9ucy5oIgorCisjaWYgVVNFX09QRU5TU0wKKyNp
bmNsdWRlICJzc2wvc3VwcG9ydC5oIgorI2VuZGlmCisKK1NlY3VyaXR5OjpQZWVyT3B0aW9u
cyBTZWN1cml0eTo6UHJveHlPdXRnb2luZ0NvbmZpZzsKKwordm9pZAorU2VjdXJpdHk6OlBl
ZXJPcHRpb25zOjpwYXJzZShjb25zdCBjaGFyICp0b2tlbikKK3sKKyAgICBpZiAoc3RybmNt
cCh0b2tlbiwgImNlcnQ9IiwgNSkgPT0gMCkgeworICAgICAgICBjZXJ0RmlsZSA9IFNCdWYo
dG9rZW4gKyA1KTsKKyAgICAgICAgaWYgKHByaXZhdGVLZXlGaWxlLmlzRW1wdHkoKSkKKyAg
ICAgICAgICAgIHByaXZhdGVLZXlGaWxlID0gY2VydEZpbGU7CisgICAgfSBlbHNlIGlmIChz
dHJuY21wKHRva2VuLCAia2V5PSIsIDQpID09IDApIHsKKyAgICAgICAgcHJpdmF0ZUtleUZp
bGUgPSBTQnVmKHRva2VuICsgNCk7CisgICAgICAgIGlmIChjZXJ0RmlsZS5pc0VtcHR5KCkp
IHsKKyAgICAgICAgICAgIGRlYnVncygwLCBEQkdfUEFSU0VfTk9URSgxKSwgIldBUk5JTkc6
IGNlcnQ9IG9wdGlvbiBuZWVkcyB0byBiZSBzZXQgYmVmb3JlIGtleT0gaXMgdXNlZC4iKTsK
KyAgICAgICAgICAgIGNlcnRGaWxlID0gcHJpdmF0ZUtleUZpbGU7CisgICAgICAgIH0KKyAg
ICB9IGVsc2UgaWYgKHN0cm5jbXAodG9rZW4sICJ2ZXJzaW9uPSIsIDgpID09IDApIHsKKyAg
ICAgICAgc3NsVmVyc2lvbiA9IHhhdG9pKHRva2VuICsgOCk7CisgICAgfSBlbHNlIGlmIChz
dHJuY21wKHRva2VuLCAib3B0aW9ucz0iLCA4KSA9PSAwKSB7CisgICAgICAgIHNzbE9wdGlv
bnMgPSBTQnVmKHRva2VuICsgOCk7CisgICAgfSBlbHNlIGlmIChzdHJuY21wKHRva2VuLCAi
Y2lwaGVyPSIsIDcpID09IDApIHsKKyAgICAgICAgc3NsQ2lwaGVyID0gU0J1Zih0b2tlbiAr
IDcpOworICAgIH0gZWxzZSBpZiAoc3RybmNtcCh0b2tlbiwgImNhZmlsZT0iLCA3KSA9PSAw
KSB7CisgICAgICAgIGNhRmlsZSA9IFNCdWYodG9rZW4gKyA3KTsKKyAgICB9IGVsc2UgaWYg
KHN0cm5jbXAodG9rZW4sICJjYXBhdGg9IiwgNykgPT0gMCkgeworICAgICAgICBjYURpciA9
IFNCdWYodG9rZW4gKyA3KTsKKyAgICB9IGVsc2UgaWYgKHN0cm5jbXAodG9rZW4sICJjcmxm
aWxlPSIsIDgpID09IDApIHsKKyAgICAgICAgY3JsRmlsZSA9IFNCdWYodG9rZW4gKyA4KTsK
KyAgICB9IGVsc2UgaWYgKHN0cm5jbXAodG9rZW4sICJmbGFncz0iLCA2KSA9PSAwKSB7Cisg
ICAgICAgIHNzbEZsYWdzID0gU0J1Zih0b2tlbiArIDYpOworICAgIH0gZWxzZSBpZiAoc3Ry
bmNtcCh0b2tlbiwgImRvbWFpbj0iLCA3KSA9PSAwKSB7CisgICAgICAgIHNzbERvbWFpbiA9
IFNCdWYodG9rZW4gKyA3KTsKKyAgICB9Cit9CisKKy8vIFhYWDogbWFrZSBhIEdudVRMUyB2
YXJpYW50CitTZWN1cml0eTo6Q29udGV4dFBvaW50ZXIKK1NlY3VyaXR5OjpQZWVyT3B0aW9u
czo6Y3JlYXRlQ29udGV4dCgpCit7CisgICAgU2VjdXJpdHk6OkNvbnRleHRQb2ludGVyIHQg
PSBOVUxMOworCisjaWYgVVNFX09QRU5TU0wKKyAgICAvLyBYWFg6IHRlbXBvcmFyeSBwZXJm
b3JtYW5jZSByZWdyZXNzaW9uLiBjX3N0cigpIGRhdGEgY29waWVzIGFuZCBwcmV2ZW50cyB0
aGlzIGJlaW5nIGEgY29uc3QgbWV0aG9kCisgICAgdCA9IHNzbENyZWF0ZUNsaWVudENvbnRl
eHQoY2VydEZpbGUuY19zdHIoKSwgcHJpdmF0ZUtleUZpbGUuY19zdHIoKSwgc3NsVmVyc2lv
biwgc3NsQ2lwaGVyLmNfc3RyKCksCisgICAgICAgICAgICAgICAgICAgICAgICAgICBzc2xP
cHRpb25zLmNfc3RyKCksIHNzbEZsYWdzLmNfc3RyKCksIGNhRmlsZS5jX3N0cigpLCBjYURp
ci5jX3N0cigpLCBjcmxGaWxlLmNfc3RyKCkpOworI2VuZGlmCisgICAgcmV0dXJuIHQ7Cit9
CisKK3ZvaWQKK3BhcnNlX3NlY3VyZVBlZXJPcHRpb25zKFNlY3VyaXR5OjpQZWVyT3B0aW9u
cyAqb3B0KQoreworICAgIHdoaWxlKGNvbnN0IGNoYXIgKnRva2VuID0gQ29uZmlnUGFyc2Vy
OjpOZXh0VG9rZW4oKSkKKyAgICAgICAgb3B0LT5wYXJzZSh0b2tlbik7Cit9CisKCj09PSBh
ZGRlZCBmaWxlICdzcmMvc2VjdXJpdHkvUGVlck9wdGlvbnMuaCcKLS0tIHNyYy9zZWN1cml0
eS9QZWVyT3B0aW9ucy5oCTE5NzAtMDEtMDEgMDA6MDA6MDAgKzAwMDAKKysrIHNyYy9zZWN1
cml0eS9QZWVyT3B0aW9ucy5oCTIwMTUtMDItMDggMDQ6NDk6MTQgKzAwMDAKQEAgLTAsMCAr
MSw2MSBAQAorLyoKKyAqIENvcHlyaWdodCAoQykgMTk5Ni0yMDE0IFRoZSBTcXVpZCBTb2Z0
d2FyZSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnMKKyAqCisgKiBTcXVpZCBzb2Z0d2Fy
ZSBpcyBkaXN0cmlidXRlZCB1bmRlciBHUEx2MisgbGljZW5zZSBhbmQgaW5jbHVkZXMKKyAq
IGNvbnRyaWJ1dGlvbnMgZnJvbSBudW1lcm91cyBpbmRpdmlkdWFscyBhbmQgb3JnYW5pemF0
aW9ucy4KKyAqIFBsZWFzZSBzZWUgdGhlIENPUFlJTkcgYW5kIENPTlRSSUJVVE9SUyBmaWxl
cyBmb3IgZGV0YWlscy4KKyAqLworCisjaWZuZGVmIFNRVUlEX1NSQ19TRUNVUklUWV9QRUVS
T1BUSU9OU19ICisjZGVmaW5lIFNRVUlEX1NSQ19TRUNVUklUWV9QRUVST1BUSU9OU19ICisK
KyNpbmNsdWRlICJDb25maWdQYXJzZXIuaCIKKyNpbmNsdWRlICJTQnVmLmgiCisjaW5jbHVk
ZSAic2VjdXJpdHkvQ29udGV4dC5oIgorCituYW1lc3BhY2UgU2VjdXJpdHkKK3sKKworLy8v
IFRMUyBzcXVpZC5jb25mIHNldHRpbmdzIGZvciBhIHJlbW90ZSBzZXJ2ZXIgcGVlcgorY2xh
c3MgUGVlck9wdGlvbnMKK3sKK3B1YmxpYzoKKyAgICBQZWVyT3B0aW9ucygpIDogc3NsVmVy
c2lvbigwKSwgZW5jcnlwdFRyYW5zcG9ydChmYWxzZSkge30KKworICAgIC8vLyBwYXJzZSBh
IFRMUyBzcXVpZC5jb25mIG9wdGlvbgorICAgIHZvaWQgcGFyc2UoY29uc3QgY2hhciAqKTsK
KworICAgIC8vLyByZXNldCB0aGUgY29uZmlndXJhdGlvbiBkZXRhaWxzIHRvIGRlZmF1bHQK
KyAgICB2b2lkIGNsZWFyKCkgeyp0aGlzID0gUGVlck9wdGlvbnMoKTt9CisKKyAgICAvLy8g
Z2VuZXJhdGUgYSBzZWN1cml0eSBjb250ZXh0IGZyb20gdGhlc2UgY29uZmlndXJlZCBvcHRp
b25zCisgICAgU2VjdXJpdHk6OkNvbnRleHRQb2ludGVyIGNyZWF0ZUNvbnRleHQoKTsKKwor
ICAgIFNCdWYgY2VydEZpbGU7ICAgICAgIC8vLzwgcGF0aCBvZiBmaWxlIGNvbnRhaW5pbmcg
UEVNIGZvcm1hdCBYNTA5IGNlcnRpZmljYXRlCisgICAgU0J1ZiBwcml2YXRlS2V5RmlsZTsg
Ly8vPCBwYXRoIG9mIGZpbGUgY29udGFpbmluZyBwcml2YXRlIGtleSBpbiBQRU0gZm9ybWF0
CisgICAgU0J1ZiBzc2xPcHRpb25zOyAgICAgLy8vPCBsaWJyYXJ5LXNwZWNpZmljIG9wdGlv
bnMgc3RyaW5nCisgICAgU0J1ZiBjYUZpbGU7ICAgICAgICAgLy8vPCBwYXRoIG9mIGZpbGUg
Y29udGFpbmluZyB0cnVzdGVkIENlcnRpZmljYXRlIEF1dGhvcml0eQorICAgIFNCdWYgY2FE
aXI7ICAgICAgICAgIC8vLzwgcGF0aCBvZiBkaXJlY3RvcnkgY29udGFpbmluZyBhIHNldCBv
ZiB0cnVzdGVkIENlcnRpZmljYXRlIEF1dGhvcml0aWVzCisgICAgU0J1ZiBjcmxGaWxlOyAg
ICAgICAgLy8vPCBwYXRoIG9mIGZpbGUgY29udGFpbmluZyBDZXJ0aWZpY2F0ZSBSZXZva2Ug
TGlzdAorCisgICAgU0J1ZiBzc2xDaXBoZXI7CisgICAgU0J1ZiBzc2xGbGFnczsKKyAgICBT
QnVmIHNzbERvbWFpbjsKKworICAgIGludCBzc2xWZXJzaW9uOworCisgICAgLy8vIHdoZXRo
ZXIgdHJhbnNwb3J0IGVuY3J5cHRpb24gKFRMUy9TU0wpIGlzIHRvIGJlIHVzZWQgb24gY29u
bmVjdGlvbnMgdG8gdGhlIHBlZXIKKyAgICBib29sIGVuY3J5cHRUcmFuc3BvcnQ7Cit9Owor
CisvLy8gY29uZmlndXJhdGlvbiBvcHRpb25zIGZvciBESVJFQ1Qgc2VydmVyIGFjY2Vzcwor
ZXh0ZXJuIFBlZXJPcHRpb25zIFByb3h5T3V0Z29pbmdDb25maWc7CisKK30gLy8gbmFtZXNw
YWNlIFNlY3VyaXR5CisKKy8vIHBhcnNlIHRoZSB0bHNfb3V0Z29pbmdfb3B0aW9ucyBkaXJl
Y3RpdmUKK3ZvaWQgcGFyc2Vfc2VjdXJlUGVlck9wdGlvbnMoU2VjdXJpdHk6OlBlZXJPcHRp
b25zICopOworI2RlZmluZSBmcmVlX3NlY3VyZVBlZXJPcHRpb25zKHgpIFNlY3VyaXR5OjpQ
cm94eU91dGdvaW5nQ29uZmlnLmNsZWFyKCkKKyNkZWZpbmUgZHVtcF9zZWN1cmVQZWVyT3B0
aW9ucyhlLG4seCkgLy8gbm90IHN1cHBvcnRlZCB5ZXQKKworI2VuZGlmIC8qIFNRVUlEX1NS
Q19TRUNVUklUWV9QRUVST1BUSU9OU19IICovCgo9PT0gbW9kaWZpZWQgZmlsZSAnc3JjL3Nz
bC9QZWVyQ29ubmVjdG9yLmNjJwotLS0gc3JjL3NzbC9QZWVyQ29ubmVjdG9yLmNjCTIwMTUt
MDEtMTMgMDc6MjU6MzYgKzAwMDAKKysrIHNyYy9zc2wvUGVlckNvbm5lY3Rvci5jYwkyMDE1
LTAyLTA4IDA3OjA5OjU2ICswMDAwCkBAIC05NCw3MCArOTQsNjUgQEAKICAgICBpZiAoIUNv
bW06OklzQ29ubk9wZW4oc2VydmVyQ29ubikgfHwgZmRfdGFibGVbc2VydmVyQ29ubi0+ZmRd
LmNsb3NpbmcoKSkgewogICAgICAgICBjb25uZWN0aW9uQ2xvc2VkKCJTc2w6OlBlZXJDb25u
ZWN0b3I6OnByZXBhcmVTb2NrZXQiKTsKICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgIH0K
IAogICAgIC8vIHdhdGNoIGZvciBleHRlcm5hbCBjb25uZWN0aW9uIGNsb3N1cmVzCiAgICAg
dHlwZWRlZiBDb21tQ2JNZW1GdW5UPFNzbDo6UGVlckNvbm5lY3RvciwgQ29tbUNsb3NlQ2JQ
YXJhbXM+IERpYWxlcjsKICAgICBjbG9zZUhhbmRsZXIgPSBKb2JDYWxsYmFjayg5LCA1LCBE
aWFsZXIsIHRoaXMsIFNzbDo6UGVlckNvbm5lY3Rvcjo6Y29tbUNsb3NlSGFuZGxlcik7CiAg
ICAgY29tbV9hZGRfY2xvc2VfaGFuZGxlcihmZCwgY2xvc2VIYW5kbGVyKTsKICAgICByZXR1
cm4gdHJ1ZTsKIH0KIAogdm9pZAogU3NsOjpQZWVyQ29ubmVjdG9yOjppbml0aWFsaXplU3Ns
KCkKIHsKICAgICBTU0xfQ1RYICpzc2xDb250ZXh0ID0gTlVMTDsKICAgICBjb25zdCBDYWNo
ZVBlZXIgKnBlZXIgPSBzZXJ2ZXJDb25uZWN0aW9uKCktPmdldFBlZXIoKTsKICAgICBjb25z
dCBpbnQgZmQgPSBzZXJ2ZXJDb25uZWN0aW9uKCktPmZkOwogCiAgICAgaWYgKHBlZXIpIHsK
LSAgICAgICAgYXNzZXJ0KHBlZXItPnVzZV9zc2wpOworICAgICAgICBhc3NlcnQocGVlci0+
c2VjdXJlLmVuY3J5cHRUcmFuc3BvcnQpOwogICAgICAgICBzc2xDb250ZXh0ID0gcGVlci0+
c3NsQ29udGV4dDsKICAgICB9IGVsc2UgeworICAgICAgICAvLyBYWFg6IGxvY2F0ZSBhIHBl
ci1zZXJ2ZXIgY29udGV4dCBpbiBTZWN1cml0eTo6IGluc3RlYWQKICAgICAgICAgc3NsQ29u
dGV4dCA9IDo6Q29uZmlnLnNzbF9jbGllbnQuc3NsQ29udGV4dDsKICAgICB9CiAKICAgICBh
c3NlcnQoc3NsQ29udGV4dCk7CiAKICAgICBTU0wgKnNzbCA9IFNzbDo6Q3JlYXRlQ2xpZW50
KHNzbENvbnRleHQsIGZkLCAic2VydmVyIGh0dHBzIHN0YXJ0Iik7CiAgICAgaWYgKCFzc2wp
IHsKICAgICAgICAgRXJyb3JTdGF0ZSAqYW5FcnIgPSBuZXcgRXJyb3JTdGF0ZShFUlJfU09D
S0VUX0ZBSUxVUkUsIEh0dHA6OnNjSW50ZXJuYWxTZXJ2ZXJFcnJvciwgcmVxdWVzdC5nZXRS
YXcoKSk7CiAgICAgICAgIGFuRXJyLT54ZXJybm8gPSBlcnJubzsKICAgICAgICAgZGVidWdz
KDgzLCBEQkdfSU1QT1JUQU5ULCAiRXJyb3IgYWxsb2NhdGluZyBTU0wgaGFuZGxlOiAiIDw8
IEVSUl9lcnJvcl9zdHJpbmcoRVJSX2dldF9lcnJvcigpLCBOVUxMKSk7CiAgICAgICAgIGJh
aWwoYW5FcnIpOwogICAgICAgICByZXR1cm47CiAgICAgfQogCiAgICAgaWYgKHBlZXIpIHsK
LSAgICAgICAgaWYgKHBlZXItPnNzbGRvbWFpbikKLSAgICAgICAgICAgIFNTTF9zZXRfZXhf
ZGF0YShzc2wsIHNzbF9leF9pbmRleF9zZXJ2ZXIsIHBlZXItPnNzbGRvbWFpbik7CisgICAg
ICAgIC8vIE5QOiBkb21haW4gbWF5IGJlIGEgcmF3LUlQIGJ1dCBpdCBpcyBub3cgYWx3YXlz
IHNldAorICAgICAgICBhc3NlcnQoIXBlZXItPnNlY3VyZS5zc2xEb21haW4uaXNFbXB0eSgp
KTsKIAotI2lmIE5PVF9ZRVQKLQotICAgICAgICBlbHNlIGlmIChwZWVyLT5uYW1lKQotICAg
ICAgICAgICAgU1NMX3NldF9leF9kYXRhKHNzbCwgc3NsX2V4X2luZGV4X3NlcnZlciwgcGVl
ci0+bmFtZSk7Ci0KLSNlbmRpZgotCi0gICAgICAgIGVsc2UKLSAgICAgICAgICAgIFNTTF9z
ZXRfZXhfZGF0YShzc2wsIHNzbF9leF9pbmRleF9zZXJ2ZXIsIHBlZXItPmhvc3QpOworICAg
ICAgICAvLyBjb25zdCBsb3NzIGlzIG9rYXkgaGVyZSwgc3NsX2V4X2luZGV4X3NlcnZlciBp
cyBvbmx5IHJlYWQgYW5kIG5vdCBhc3NpZ25lZCBhIGRlc3RydWN0b3IKKyAgICAgICAgY29u
c3QgY2hhciAqaG9zdCA9IGNvbnN0X2Nhc3Q8U0J1Zio+KCZwZWVyLT5zZWN1cmUuc3NsRG9t
YWluKS0+Y19zdHIoKTsKKyAgICAgICAgU1NMX3NldF9leF9kYXRhKHNzbCwgc3NsX2V4X2lu
ZGV4X3NlcnZlciwgY29uc3RfY2FzdDxjaGFyKj4oaG9zdCkpOwogCiAgICAgICAgIGlmIChw
ZWVyLT5zc2xTZXNzaW9uKQogICAgICAgICAgICAgU1NMX3NldF9zZXNzaW9uKHNzbCwgcGVl
ci0+c3NsU2Vzc2lvbik7CiAKICAgICB9IGVsc2UgaWYgKHJlcXVlc3QtPmNsaWVudENvbm5l
Y3Rpb25NYW5hZ2VyLT5zc2xCdW1wTW9kZSA9PSBTc2w6OmJ1bXBQZWVrIHx8IHJlcXVlc3Qt
PmNsaWVudENvbm5lY3Rpb25NYW5hZ2VyLT5zc2xCdW1wTW9kZSA9PSBTc2w6OmJ1bXBTdGFy
ZSkgewogICAgICAgICAvLyBjbGllbnQgY29ubmVjdGlvbiBpcyByZXF1aXJlZCBmb3IgUGVl
ayBvciBTdGFyZSBtb2RlIGluIHRoZSBjYXNlIHdlIG5lZWQgdG8gc3BsaWNlCiAgICAgICAg
IC8vIG9yIHRlcm1pbmF0ZSBjbGllbnQgYW5kIHNlcnZlciBjb25uZWN0aW9ucwogICAgICAg
ICBhc3NlcnQoY2xpZW50Q29ubiAhPSBOVUxMKTsKICAgICAgICAgU1NMICpjbGllbnRTc2wg
PSBmZF90YWJsZVtyZXF1ZXN0LT5jbGllbnRDb25uZWN0aW9uTWFuYWdlci0+Y2xpZW50Q29u
bmVjdGlvbi0+ZmRdLnNzbDsKICAgICAgICAgQklPICpiID0gU1NMX2dldF9yYmlvKGNsaWVu
dFNzbCk7CiAgICAgICAgIFNzbDo6Q2xpZW50QmlvICpjbG5CaW8gPSBzdGF0aWNfY2FzdDxT
c2w6OkNsaWVudEJpbyAqPihiLT5wdHIpOwogICAgICAgICBjb25zdCBTc2w6OkJpbzo6c3Ns
RmVhdHVyZXMgJmZlYXR1cmVzID0gY2xuQmlvLT5nZXRGZWF0dXJlcygpOwogICAgICAgICBp
ZiAoZmVhdHVyZXMuc3NsVmVyc2lvbiAhPSAtMSkgewogICAgICAgICAgICAgZmVhdHVyZXMu
YXBwbHlUb1NTTChzc2wpOwogICAgICAgICAgICAgLy8gU2hvdWxkIHdlIGFsbG93IGl0IGZv
ciBhbGwgcHJvdG9jb2xzPwogICAgICAgICAgICAgaWYgKGZlYXR1cmVzLnNzbFZlcnNpb24g
Pj0gMykgewogICAgICAgICAgICAgICAgIGIgPSBTU0xfZ2V0X3JiaW8oc3NsKTsKICAgICAg
ICAgICAgICAgICBTc2w6OlNlcnZlckJpbyAqc3J2QmlvID0gc3RhdGljX2Nhc3Q8U3NsOjpT
ZXJ2ZXJCaW8gKj4oYi0+cHRyKTsKICAgICAgICAgICAgICAgICBzcnZCaW8tPnNldENsaWVu
dEZlYXR1cmVzKGZlYXR1cmVzKTsKICAgICAgICAgICAgICAgICBzcnZCaW8tPnJlY29yZElu
cHV0KHRydWUpOwoKPT09IG1vZGlmaWVkIGZpbGUgJ3NyYy9zc2wvc3VwcG9ydC5jYycKLS0t
IHNyYy9zc2wvc3VwcG9ydC5jYwkyMDE1LTAxLTEzIDA3OjI1OjM2ICswMDAwCisrKyBzcmMv
c3NsL3N1cHBvcnQuY2MJMjAxNS0wMi0wOCAwNDo0MDowMCArMDAwMApAQCAtMTA5MSwxMTUg
KzEwOTEsMTA5IEBACiAgICAgZGVmYXVsdDoKICAgICAgICAgZGVidWdzKDgzLCA1LCAiVXNp
bmcgU1NMdjIvU1NMdjMuIik7CiAgICAgICAgIHJldHVybiBTU0x2MjNfc2VydmVyX21ldGhv
ZCgpOwogICAgICAgICBicmVhazsKICAgICB9CiAKICAgICAvL05vdCByZWFjaGVkCiAgICAg
cmV0dXJuIE5VTEw7CiB9CiAKIFNTTF9DVFggKgogc3NsQ3JlYXRlQ2xpZW50Q29udGV4dChj
b25zdCBjaGFyICpjZXJ0ZmlsZSwgY29uc3QgY2hhciAqa2V5ZmlsZSwgaW50IHZlcnNpb24s
IGNvbnN0IGNoYXIgKmNpcGhlciwgY29uc3QgY2hhciAqb3B0aW9ucywgY29uc3QgY2hhciAq
ZmxhZ3MsIGNvbnN0IGNoYXIgKkNBZmlsZSwgY29uc3QgY2hhciAqQ0FwYXRoLCBjb25zdCBj
aGFyICpDUkxmaWxlKQogewogICAgIGludCBzc2xfZXJyb3I7CiAgICAgU3NsOjpDb250ZXh0
TWV0aG9kIG1ldGhvZDsKICAgICBTU0xfQ1RYICogc3NsQ29udGV4dDsKICAgICBsb25nIGZs
ID0gU3NsOjpwYXJzZV9mbGFncyhmbGFncyk7CiAKICAgICBzc2xfaW5pdGlhbGl6ZSgpOwog
Ci0gICAgaWYgKCFrZXlmaWxlKQotICAgICAgICBrZXlmaWxlID0gY2VydGZpbGU7Ci0KLSAg
ICBpZiAoIWNlcnRmaWxlKQotICAgICAgICBjZXJ0ZmlsZSA9IGtleWZpbGU7Ci0KICAgICBp
ZiAoIShtZXRob2QgPSBTc2w6Om1ldGhvZCh2ZXJzaW9uKSkpCiAgICAgICAgIHJldHVybiBO
VUxMOwogCiAgICAgc3NsQ29udGV4dCA9IFNTTF9DVFhfbmV3KG1ldGhvZCk7CiAKICAgICBp
ZiAoc3NsQ29udGV4dCA9PSBOVUxMKSB7CiAgICAgICAgIHNzbF9lcnJvciA9IEVSUl9nZXRf
ZXJyb3IoKTsKICAgICAgICAgZmF0YWxmKCJGYWlsZWQgdG8gYWxsb2NhdGUgU1NMIGNvbnRl
eHQ6ICVzXG4iLAogICAgICAgICAgICAgICAgRVJSX2Vycm9yX3N0cmluZyhzc2xfZXJyb3Is
IE5VTEwpKTsKICAgICB9CiAKICAgICBTU0xfQ1RYX3NldF9vcHRpb25zKHNzbENvbnRleHQs
IFNzbDo6cGFyc2Vfb3B0aW9ucyhvcHRpb25zKSk7CiAKLSAgICBpZiAoY2lwaGVyKSB7Cisg
ICAgaWYgKCpjaXBoZXIpIHsKICAgICAgICAgZGVidWdzKDgzLCA1LCAiVXNpbmcgY2hpcGVy
IHN1aXRlICIgPDwgY2lwaGVyIDw8ICIuIik7CiAKICAgICAgICAgaWYgKCFTU0xfQ1RYX3Nl
dF9jaXBoZXJfbGlzdChzc2xDb250ZXh0LCBjaXBoZXIpKSB7CiAgICAgICAgICAgICBzc2xf
ZXJyb3IgPSBFUlJfZ2V0X2Vycm9yKCk7CiAgICAgICAgICAgICBmYXRhbGYoIkZhaWxlZCB0
byBzZXQgU1NMIGNpcGhlciBzdWl0ZSAnJXMnOiAlc1xuIiwKICAgICAgICAgICAgICAgICAg
ICBjaXBoZXIsIEVSUl9lcnJvcl9zdHJpbmcoc3NsX2Vycm9yLCBOVUxMKSk7CiAgICAgICAg
IH0KICAgICB9CiAKLSAgICBpZiAoY2VydGZpbGUpIHsKKyAgICBpZiAoKmNlcnRmaWxlKSB7
CiAgICAgICAgIGRlYnVncyg4MywgREJHX0lNUE9SVEFOVCwgIlVzaW5nIGNlcnRpZmljYXRl
IGluICIgPDwgY2VydGZpbGUpOwogCiAgICAgICAgIGlmICghU1NMX0NUWF91c2VfY2VydGlm
aWNhdGVfY2hhaW5fZmlsZShzc2xDb250ZXh0LCBjZXJ0ZmlsZSkpIHsKICAgICAgICAgICAg
IHNzbF9lcnJvciA9IEVSUl9nZXRfZXJyb3IoKTsKICAgICAgICAgICAgIGZhdGFsZigiRmFp
bGVkIHRvIGFjcXVpcmUgU1NMIGNlcnRpZmljYXRlICclcyc6ICVzXG4iLAogICAgICAgICAg
ICAgICAgICAgIGNlcnRmaWxlLCBFUlJfZXJyb3Jfc3RyaW5nKHNzbF9lcnJvciwgTlVMTCkp
OwogICAgICAgICB9CiAKICAgICAgICAgZGVidWdzKDgzLCBEQkdfSU1QT1JUQU5ULCAiVXNp
bmcgcHJpdmF0ZSBrZXkgaW4gIiA8PCBrZXlmaWxlKTsKICAgICAgICAgc3NsX2Fza19wYXNz
d29yZChzc2xDb250ZXh0LCBrZXlmaWxlKTsKIAogICAgICAgICBpZiAoIVNTTF9DVFhfdXNl
X1ByaXZhdGVLZXlfZmlsZShzc2xDb250ZXh0LCBrZXlmaWxlLCBTU0xfRklMRVRZUEVfUEVN
KSkgewogICAgICAgICAgICAgc3NsX2Vycm9yID0gRVJSX2dldF9lcnJvcigpOwogICAgICAg
ICAgICAgZmF0YWxmKCJGYWlsZWQgdG8gYWNxdWlyZSBTU0wgcHJpdmF0ZSBrZXkgJyVzJzog
JXNcbiIsCiAgICAgICAgICAgICAgICAgICAga2V5ZmlsZSwgRVJSX2Vycm9yX3N0cmluZyhz
c2xfZXJyb3IsIE5VTEwpKTsKICAgICAgICAgfQogCiAgICAgICAgIGRlYnVncyg4MywgNSwg
IkNvbXBhcmluZyBwcml2YXRlIGFuZCBwdWJsaWMgU1NMIGtleXMuIik7CiAKICAgICAgICAg
aWYgKCFTU0xfQ1RYX2NoZWNrX3ByaXZhdGVfa2V5KHNzbENvbnRleHQpKSB7CiAgICAgICAg
ICAgICBzc2xfZXJyb3IgPSBFUlJfZ2V0X2Vycm9yKCk7CiAgICAgICAgICAgICBmYXRhbGYo
IlNTTCBwcml2YXRlIGtleSAnJXMnIGRvZXMgbm90IG1hdGNoIHB1YmxpYyBrZXkgJyVzJzog
JXNcbiIsCiAgICAgICAgICAgICAgICAgICAgY2VydGZpbGUsIGtleWZpbGUsIEVSUl9lcnJv
cl9zdHJpbmcoc3NsX2Vycm9yLCBOVUxMKSk7CiAgICAgICAgIH0KICAgICB9CiAKICAgICBk
ZWJ1Z3MoODMsIDksICJTZXR0aW5nIFJTQSBrZXkgZ2VuZXJhdGlvbiBjYWxsYmFjay4iKTsK
ICAgICBTU0xfQ1RYX3NldF90bXBfcnNhX2NhbGxiYWNrKHNzbENvbnRleHQsIHNzbF90ZW1w
X3JzYV9jYik7CiAKICAgICBpZiAoZmwgJiBTU0xfRkxBR19ET05UX1ZFUklGWV9QRUVSKSB7
CiAgICAgICAgIGRlYnVncyg4MywgMiwgIk5PVElDRTogUGVlciBjZXJ0aWZpY2F0ZXMgYXJl
IG5vdCB2ZXJpZmllZCBmb3IgdmFsaWRpdHkhIik7CiAgICAgICAgIFNTTF9DVFhfc2V0X3Zl
cmlmeShzc2xDb250ZXh0LCBTU0xfVkVSSUZZX05PTkUsIE5VTEwpOwogICAgIH0gZWxzZSB7
CiAgICAgICAgIGRlYnVncyg4MywgOSwgIlNldHRpbmcgY2VydGlmaWNhdGUgdmVyaWZpY2F0
aW9uIGNhbGxiYWNrLiIpOwogICAgICAgICBTU0xfQ1RYX3NldF92ZXJpZnkoc3NsQ29udGV4
dCwgU1NMX1ZFUklGWV9QRUVSIHwgU1NMX1ZFUklGWV9GQUlMX0lGX05PX1BFRVJfQ0VSVCwg
c3NsX3ZlcmlmeV9jYik7CiAgICAgfQogCiAgICAgZGVidWdzKDgzLCA5LCAiU2V0dGluZyBD
QSBjZXJ0aWZpY2F0ZSBsb2NhdGlvbnMuIik7CiAKLSAgICBpZiAoKENBZmlsZSB8fCBDQXBh
dGgpICYmICFTU0xfQ1RYX2xvYWRfdmVyaWZ5X2xvY2F0aW9ucyhzc2xDb250ZXh0LCBDQWZp
bGUsIENBcGF0aCkpIHsKKyAgICBpZiAoKCpDQWZpbGUgfHwgKkNBcGF0aCkgJiYgIVNTTF9D
VFhfbG9hZF92ZXJpZnlfbG9jYXRpb25zKHNzbENvbnRleHQsIENBZmlsZSwgQ0FwYXRoKSkg
ewogICAgICAgICBzc2xfZXJyb3IgPSBFUlJfZ2V0X2Vycm9yKCk7CiAgICAgICAgIGRlYnVn
cyg4MywgREJHX0lNUE9SVEFOVCwgIldBUk5JTkc6IElnbm9yaW5nIGVycm9yIHNldHRpbmcg
Q0EgY2VydGlmaWNhdGUgbG9jYXRpb25zOiAiIDw8IEVSUl9lcnJvcl9zdHJpbmcoc3NsX2Vy
cm9yLCBOVUxMKSk7CiAgICAgfQogCi0gICAgaWYgKENSTGZpbGUpIHsKKyAgICBpZiAoKkNS
TGZpbGUpIHsKICAgICAgICAgc3NsX2xvYWRfY3JsKHNzbENvbnRleHQsIENSTGZpbGUpOwog
ICAgICAgICBmbCB8PSBTU0xfRkxBR19WRVJJRllfQ1JMOwogICAgIH0KIAogI2lmIFg1MDlf
Vl9GTEFHX0NSTF9DSEVDSwogICAgIGlmIChmbCAmIFNTTF9GTEFHX1ZFUklGWV9DUkxfQUxM
KQogICAgICAgICBYNTA5X1NUT1JFX3NldF9mbGFncyhTU0xfQ1RYX2dldF9jZXJ0X3N0b3Jl
KHNzbENvbnRleHQpLCBYNTA5X1ZfRkxBR19DUkxfQ0hFQ0t8WDUwOV9WX0ZMQUdfQ1JMX0NI
RUNLX0FMTCk7CiAgICAgZWxzZSBpZiAoZmwgJiBTU0xfRkxBR19WRVJJRllfQ1JMKQogICAg
ICAgICBYNTA5X1NUT1JFX3NldF9mbGFncyhTU0xfQ1RYX2dldF9jZXJ0X3N0b3JlKHNzbENv
bnRleHQpLCBYNTA5X1ZfRkxBR19DUkxfQ0hFQ0spOwogCiAjZW5kaWYKIAogICAgIGlmICgh
KGZsICYgU1NMX0ZMQUdfTk9fREVGQVVMVF9DQSkgJiYKICAgICAgICAgICAgICFTU0xfQ1RY
X3NldF9kZWZhdWx0X3ZlcmlmeV9wYXRocyhzc2xDb250ZXh0KSkgewogICAgICAgICBzc2xf
ZXJyb3IgPSBFUlJfZ2V0X2Vycm9yKCk7CiAgICAgICAgIGRlYnVncyg4MywgREJHX0lNUE9S
VEFOVCwgIldBUk5JTkc6IElnbm9yaW5nIGVycm9yIHNldHRpbmcgZGVmYXVsdCBDQSBjZXJ0
aWZpY2F0ZSBsb2NhdGlvbjogIiA8PCBFUlJfZXJyb3Jfc3RyaW5nKHNzbF9lcnJvciwgTlVM
TCkpOwogICAgIH0KIAogICAgIHJldHVybiBzc2xDb250ZXh0OwogfQoKPT09IGFkZGVkIGZp
bGUgJ3NyYy90ZXN0cy9zdHViX2xpYnNlY3VyaXR5LmNjJwotLS0gc3JjL3Rlc3RzL3N0dWJf
bGlic2VjdXJpdHkuY2MJMTk3MC0wMS0wMSAwMDowMDowMCArMDAwMAorKysgc3JjL3Rlc3Rz
L3N0dWJfbGlic2VjdXJpdHkuY2MJMjAxNS0wMi0wOCAwNDo1NjoyNiArMDAwMApAQCAtMCww
ICsxLDE4IEBACisvKgorICogQ29weXJpZ2h0IChDKSAxOTk2LTIwMTQgVGhlIFNxdWlkIFNv
ZnR3YXJlIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9ycworICoKKyAqIFNxdWlkIHNvZnR3
YXJlIGlzIGRpc3RyaWJ1dGVkIHVuZGVyIEdQTHYyKyBsaWNlbnNlIGFuZCBpbmNsdWRlcwor
ICogY29udHJpYnV0aW9ucyBmcm9tIG51bWVyb3VzIGluZGl2aWR1YWxzIGFuZCBvcmdhbml6
YXRpb25zLgorICogUGxlYXNlIHNlZSB0aGUgQ09QWUlORyBhbmQgQ09OVFJJQlVUT1JTIGZp
bGVzIGZvciBkZXRhaWxzLgorICovCisKKyNpbmNsdWRlICJzcXVpZC5oIgorCisjZGVmaW5l
IFNUVUJfQVBJICJzZWN1cml0eS9saWJzZWN1cml0eS5sYSIKKyNpbmNsdWRlICJ0ZXN0cy9T
VFVCLmgiCisKKyNpbmNsdWRlICJzZWN1cml0eS9QZWVyT3B0aW9ucy5oIgorU2VjdXJpdHk6
OlBlZXJPcHRpb25zIFNlY3VyaXR5OjpQcm94eU91dGdvaW5nQ29uZmlnOwordm9pZCBTZWN1
cml0eTo6UGVlck9wdGlvbnM6OnBhcnNlKGNoYXIgY29uc3QqKSBTVFVCCitTZWN1cml0eTo6
Q29udGV4dFBvaW50ZXIgU2VjdXJpdHk6OlBlZXJPcHRpb25zOjpjcmVhdGVDb250ZXh0KCkg
U1RVQl9SRVRWQUwoTlVMTCkKK3ZvaWQgcGFyc2Vfc2VjdXJlUGVlck9wdGlvbnMoU2VjdXJp
dHk6OlBlZXJPcHRpb25zICopIFNUVUIKCj09PSBtb2RpZmllZCBmaWxlICdzcmMvdHVubmVs
LmNjJwotLS0gc3JjL3R1bm5lbC5jYwkyMDE1LTAxLTEzIDA3OjI1OjM2ICswMDAwCisrKyBz
cmMvdHVubmVsLmNjCTIwMTUtMDItMDggMDY6MjQ6MTMgKzAwMDAKQEAgLTkzNiw0MSArOTM2
LDQxIEBACiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0dW5uZWxDbGllbnRDbG9zZWQs
CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0dW5uZWxTdGF0ZSk7CiAKICAgICBBc3lu
Y0NhbGw6OlBvaW50ZXIgdGltZW91dENhbGwgPSBjb21tQ2JDYWxsKDUsIDQsICJ0dW5uZWxU
aW1lb3V0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb21tVGlt
ZW91dENiUHRyRnVuKHR1bm5lbFRpbWVvdXQsIHR1bm5lbFN0YXRlKSk7CiAgICAgY29tbVNl
dENvbm5UaW1lb3V0KHR1bm5lbFN0YXRlLT5jbGllbnQuY29ubiwgQ29uZmlnLlRpbWVvdXQu
bGlmZXRpbWUsIHRpbWVvdXRDYWxsKTsKIAogICAgIHBlZXJTZWxlY3QoJih0dW5uZWxTdGF0
ZS0+c2VydmVyRGVzdGluYXRpb25zKSwgcmVxdWVzdCwgYWwsCiAgICAgICAgICAgICAgICBO
VUxMLAogICAgICAgICAgICAgICAgdHVubmVsUGVlclNlbGVjdENvbXBsZXRlLAogICAgICAg
ICAgICAgICAgdHVubmVsU3RhdGUpOwogfQogCiB2b2lkCiBUdW5uZWxTdGF0ZURhdGE6OmNv
bm5lY3RUb1BlZXIoKQogewogICAgIGNvbnN0IENvbW06OkNvbm5lY3Rpb25Qb2ludGVyICZz
cnYgPSBzZXJ2ZXIuY29ubjsKIAogI2lmIFVTRV9PUEVOU1NMCiAgICAgaWYgKENhY2hlUGVl
ciAqcCA9IHNydi0+Z2V0UGVlcigpKSB7Ci0gICAgICAgIGlmIChwLT51c2Vfc3NsKSB7Cisg
ICAgICAgIGlmIChwLT5zZWN1cmUuZW5jcnlwdFRyYW5zcG9ydCkgewogICAgICAgICAgICAg
QXN5bmNDYWxsOjpQb2ludGVyIGNhbGxiYWNrID0gYXN5bmNDYWxsKDUsNCwKICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiVHVubmVsU3Rh
dGVEYXRhOjpDb25uZWN0ZWRUb1BlZXIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIE15QW5zd2VyRGlhbGVyKCZUdW5uZWxTdGF0ZURh
dGE6OmNvbm5lY3RlZFRvUGVlciwgdGhpcykpOwogICAgICAgICAgICAgU3NsOjpQZWVyQ29u
bmVjdG9yICpjb25uZWN0b3IgPQogICAgICAgICAgICAgICAgIG5ldyBTc2w6OlBlZXJDb25u
ZWN0b3IocmVxdWVzdCwgc3J2LCBjbGllbnQuY29ubiwgY2FsbGJhY2spOwogICAgICAgICAg
ICAgQXN5bmNKb2I6OlN0YXJ0KGNvbm5lY3Rvcik7IC8vIHdpbGwgY2FsbCBvdXIgY2FsbGJh
Y2sKICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgfQogICAgIH0KICNlbmRpZgogCiAg
ICAgdHVubmVsUmVsYXlDb25uZWN0UmVxdWVzdChzcnYsIHRoaXMpOwogfQogCiAjaWYgVVNF
X09QRU5TU0wKIC8vLyBTc2w6OlBlZXJDb25uZWN0b3IgY2FsbGJhY2sKIHZvaWQKIFR1bm5l
bFN0YXRlRGF0YTo6Y29ubmVjdGVkVG9QZWVyKFNzbDo6UGVlckNvbm5lY3RvckFuc3dlciAm
YW5zd2VyKQogewogICAgIGlmIChFcnJvclN0YXRlICplcnJvciA9IGFuc3dlci5lcnJvci5n
ZXQoKSkgewoK
--------------090508080200040803040202--
]