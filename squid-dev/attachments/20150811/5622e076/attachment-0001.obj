=== modified file 'lib/profiler/Profiler.h'
--- lib/profiler/Profiler.h	2015-01-13 07:25:36 +0000
+++ lib/profiler/Profiler.h	2015-08-10 22:39:42 +0000
@@ -9,8 +9,8 @@
 #ifndef _PROFILER_H_
 #define _PROFILER_H_
 
-#ifdef __cplusplus
-extern "C" {
+#ifndef __cplusplus
+#error "Profiler now requires c++"
 #endif
 
 // NP: CPU support for get_tick() determines whether we can profile.
@@ -23,6 +23,13 @@
 
 #define PROF_start(probename) ((void)0)
 #define PROF_stop(probename) ((void)0)
+#define PROF_profiler(probename) Profiler(XPROF_##probename, #probename)
+
+class Profiler {
+public:
+	Profiler(xprof_type, const char *) {}
+	~Profiler() {}
+};
 
 #else /* USE_XPROF_STATS */
 
@@ -62,10 +69,20 @@
 #define PROF_start(probename) xprof_start(XPROF_##probename, #probename)
 #define PROF_stop(probename) xprof_stop(XPROF_##probename, #probename)
 
+#define PROF_profiler(probename) Profiler(XPROF_##probename, #probename)
+class Profiler {
+public:
+	Profiler(xprof_type type, const char *timer) : type_(type), timer_(timer){
+		xprof_start(type, timer);
+	}
+	~Profiler() {
+		xprof_stop(type_, timer_);
+	}
+private:
+	xprof_type type_;
+	const char *timer_;
+};
 #endif /* USE_XPROF_STATS */
 
-#ifdef __cplusplus
-}
-#endif
-#endif /* _PROFILING_H_ */
+#endif /* _PROFILER_H_ */
 

=== modified file 'src/HttpHeader.cc'
--- src/HttpHeader.cc	2015-08-10 22:24:57 +0000
+++ src/HttpHeader.cc	2015-08-10 22:39:15 +0000
@@ -438,7 +438,7 @@
     HttpHeaderEntry *e, *e2;
     int warnOnError = (Config.onoff.relaxed_header_parser <= 0 ? DBG_IMPORTANT : 2);
 
-    PROF_start(HttpHeaderParse);
+    auto p = PROF_profiler(HttpHeaderParse);
 
     assert(header_start && header_end);
     debugs(55, 7, "parsing hdr: (" << this << ")" << std::endl << getStringPrefix(header_start, hdrLen));
@@ -448,7 +448,6 @@
     if ((nulpos = (char*)memchr(header_start, '\0', hdrLen))) {
         debugs(55, DBG_IMPORTANT, "WARNING: HTTP header contains NULL characters {" <<
                getStringPrefix(header_start, nulpos-header_start) << "}\nNULL\n{" << getStringPrefix(nulpos+1, hdrLen-(nulpos-header_start)-1));
-        PROF_stop(HttpHeaderParse);
         clean();
         return 0;
     }
@@ -465,7 +464,6 @@
 
             if (!field_ptr) {
                 // missing <LF>
-                PROF_stop(HttpHeaderParse);
                 clean();
                 return 0;
             }
@@ -487,7 +485,6 @@
                         debugs(55, DBG_IMPORTANT, "SECURITY WARNING: Rejecting HTTP request with a CR+ "
                                "header field to prevent request smuggling attacks: {" <<
                                getStringPrefix(header_start, hdrLen) << "}");
-                        PROF_stop(HttpHeaderParse);
                         clean();
                         return 0;
                     }
@@ -507,7 +504,6 @@
                         ++p;
                     }
                 } else {
-                    PROF_stop(HttpHeaderParse);
                     clean();
                     return 0;
                 }
@@ -516,7 +512,6 @@
             if (this_line + 1 == field_end && this_line > field_start) {
                 debugs(55, warnOnError, "WARNING: Blank continuation line in HTTP header {" <<
                        getStringPrefix(header_start, hdrLen) << "}");
-                PROF_stop(HttpHeaderParse);
                 clean();
                 return 0;
             }
@@ -526,7 +521,6 @@
             if (field_ptr < header_end) {
                 debugs(55, warnOnError, "WARNING: unparseable HTTP header field near {" <<
                        getStringPrefix(field_start, hdrLen-(field_start-header_start)) << "}");
-                PROF_stop(HttpHeaderParse);
                 clean();
                 return 0;
             }
@@ -542,7 +536,6 @@
             if (Config.onoff.relaxed_header_parser)
                 continue;
 
-            PROF_stop(HttpHeaderParse);
             clean();
             return 0;
         }
@@ -555,7 +548,6 @@
 
                 if (!Config.onoff.relaxed_header_parser) {
                     delete e;
-                    PROF_stop(HttpHeaderParse);
                     clean();
                     return 0;
                 }
@@ -580,7 +572,6 @@
                 if (Config.onoff.relaxed_header_parser)
                     continue;
 
-                PROF_stop(HttpHeaderParse);
                 clean();
                 return 0;
             }
@@ -592,7 +583,6 @@
 
             if (!Config.onoff.relaxed_header_parser) {
                 delete e;
-                PROF_stop(HttpHeaderParse);
                 clean();
                 return 0;
             }
@@ -606,7 +596,6 @@
         delById(Http::HdrType::CONTENT_LENGTH);
     }
 
-    PROF_stop(HttpHeaderParse);
     return 1;           /* even if no fields where found, it is a valid header */
 }
 

