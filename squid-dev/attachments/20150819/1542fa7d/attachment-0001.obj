# Bazaar merge directive format 2 (Bazaar 0.90)
# revision_id: kinkie@squid-cache.org-20150819185841-pxvkmt8n2oe7wq7u
# target_branch: file:///Users/kinkie/src/trunk/
# testament_sha1: 4360710230c7c773559714bb1f994e008c669693
# timestamp: 2015-08-19 20:59:01 +0200
# base_revision_id: chtsanti@users.sourceforge.net-20150819101802-\
#   gxd93l8oocat7l2b
# 
# Begin patch
=== modified file 'src/Debug.h'
--- src/Debug.h	2015-08-11 06:15:34 +0000
+++ src/Debug.h	2015-08-19 12:16:51 +0000
@@ -11,6 +11,8 @@
 #ifndef SQUID_DEBUG_H
 #define SQUID_DEBUG_H
 
+#include "mem/AllocatorProxy.h"
+
 #include <iostream>
 #undef assert
 #include <sstream>
@@ -71,12 +73,10 @@
     /// with the libc++6 std::ostringstream definitions
     class OutStream : public std::ostringstream
     {
-        // XXX: use MEMPROXY_CLASS() once that no longer pulls in typedefs.h and enums.h and globals.h
+        MEMPROXY_CLASS(OutStream);
     public:
-        void *operator new(size_t size) throw(std::bad_alloc) {return xmalloc(size);}
-        void operator delete(void *address) throw() {xfree(address);}
-        void *operator new[] (size_t size) throw(std::bad_alloc) ; //{return xmalloc(size);}
-        void operator delete[] (void *address) throw() ; // {xfree(address);}
+        void *operator new[] (size_t size) throw(std::bad_alloc) = delete; //{return xmalloc(size);}
+        void operator delete[] (void *address) throw() = delete; // {xfree(address);}
     };
 
     static OutStream *CurrentDebug;

=== modified file 'src/ExternalACLEntry.cc'
--- src/ExternalACLEntry.cc	2015-01-13 07:25:36 +0000
+++ src/ExternalACLEntry.cc	2015-08-18 16:46:54 +0000
@@ -17,13 +17,8 @@
  */
 
 ExternalACLEntry::ExternalACLEntry() :
-    notes()
-{
-    lru.next = lru.prev = NULL;
-    result = ACCESS_DENIED;
-    date = 0;
-    def = NULL;
-}
+    result(ACCESS_DENIED), date(0), def(nullptr)
+{}
 
 ExternalACLEntry::~ExternalACLEntry()
 {

=== modified file 'src/HttpHdrRange.cc'
--- src/HttpHdrRange.cc	2015-03-05 06:44:43 +0000
+++ src/HttpHdrRange.cc	2015-08-18 16:46:54 +0000
@@ -45,8 +45,6 @@
  * Range-Spec
  */
 
-HttpHdrRangeSpec::HttpHdrRangeSpec() : offset(UnknownPosition), length(UnknownPosition) {}
-
 /* parses range-spec and returns new object on success */
 HttpHdrRangeSpec *
 HttpHdrRangeSpec::Create(const char *field, int flen)

=== modified file 'src/HttpHeader.cc'
--- src/HttpHeader.cc	2015-08-11 00:12:10 +0000
+++ src/HttpHeader.cc	2015-08-17 07:09:19 +0000
@@ -1806,4 +1806,3 @@
             refreshMask();
     }
 }
-

=== modified file 'src/HttpHeaderRange.h'
--- src/HttpHeaderRange.h	2015-05-26 09:18:13 +0000
+++ src/HttpHeaderRange.h	2015-08-19 04:36:31 +0000
@@ -28,7 +28,7 @@
     typedef Range<int64_t, uint64_t> HttpRange;
     static int64_t const UnknownPosition;
 
-    HttpHdrRangeSpec();
+    HttpHdrRangeSpec() : offset(UnknownPosition), length(UnknownPosition) {}
     static HttpHdrRangeSpec *Create(const char *field, int fieldLen);
 
     bool parseInit(const char *field, int flen);

=== modified file 'src/HttpRequest.cc'
--- src/HttpRequest.cc	2015-08-04 19:57:07 +0000
+++ src/HttpRequest.cc	2015-08-18 16:46:54 +0000
@@ -35,17 +35,23 @@
 #include "adaptation/icap/icap_log.h"
 #endif
 
+// keep initializers in sync with init
 HttpRequest::HttpRequest() :
-    HttpMsg(hoRequest)
+    HttpMsg(hoRequest), method(Http::METHOD_NONE), range(nullptr), ims(-1),
+    imslen(0), dnsWait(-1), errType(ERR_NONE), errDetail(ERR_DETAIL_NONE),
+    peer_login(nullptr), peer_host(nullptr), lastmod(-1), vary_headers(nullptr),
+    peer_domain(nullptr), forcedBodyContinuation(false),
+    rangeOffsetLimit(-2) //a value of -2 means not checked yet
 {
-    init();
+    memset(&flags, '\0', sizeof(flags));
 }
 
+// XXX rework to use initializer list to avoid rewriting same memory so many times
 HttpRequest::HttpRequest(const HttpRequestMethod& aMethod, AnyP::ProtocolType aProtocol, const char *aUrlpath) :
     HttpMsg(hoRequest)
 {
     static unsigned int id = 1;
-    debugs(93,7, HERE << "constructed, this=" << this << " id=" << ++id);
+    debugs(93,7, "constructed, this=" << this << " id=" << ++id);
     init();
     initHTTP(aMethod, aProtocol, aUrlpath);
 }
@@ -53,7 +59,7 @@
 HttpRequest::~HttpRequest()
 {
     clean();
-    debugs(93,7, HERE << "destructed, this=" << this);
+    debugs(93,7, "destructed, this=" << this);
 }
 
 void
@@ -64,6 +70,7 @@
     url.path(aUrlpath);
 }
 
+// keep in sync with default constructor
 void
 HttpRequest::init()
 {

=== modified file 'src/Makefile.am'
--- src/Makefile.am	2015-08-03 03:50:25 +0000
+++ src/Makefile.am	2015-08-19 12:16:51 +0000
@@ -1142,6 +1142,7 @@
 	tests/stub_libcomm.cc \
 	tests/stub_libdiskio.cc \
 	tests/stub_libformat.cc \
+	tests/stub_libmem.cc \
 	tests/stub_libsslsquid.cc \
 	tests/stub_MemObject.cc \
 	tests/stub_MemStore.cc \
@@ -1165,7 +1166,6 @@
 	tests/stub_time.cc \
 	url.cc \
 	URL.h \
-	tests/stub_libmem.cc \
 	MemBuf.cc \
 	wordlist.h \
 	wordlist.cc
@@ -1206,6 +1206,7 @@
 	tests/testBoilerplate.cc \
 	tests/testBoilerplate.h \
 	tests/stub_debug.cc \
+	tests/stub_libmem.cc \
 	tests/stub_time.cc
 nodist_tests_testBoilerplate_SOURCES = \
 	tests/stub_cbdata.cc \
@@ -1230,6 +1231,7 @@
 	$(TESTSOURCES) \
 	tests/stub_cbdata.cc \
 	tests/stub_debug.cc \
+	tests/stub_libmem.cc \
 	tests/stub_MemBuf.cc
 tests_testCharacterSet_LDFLAGS = $(LIBADD_DL)
 tests_testCharacterSet_LDADD= \
@@ -1666,6 +1668,7 @@
 nodist_tests_testDns_SOURCES= \
 	tests/stub_debug.cc \
 	tests/stub_SBuf.cc \
+	tests/stub_libmem.cc \
 	tests/stub_tools.cc
 tests_testDns_LDADD= \
 	dns/libdns.la \
@@ -2427,7 +2430,6 @@
 	MemBuf.cc \
 	MemBuf.h \
 	tests/stub_MemObject.cc \
-	tests/stub_libmem.cc \
 	mime_header.cc \
 	mime_header.h \
 	String.cc \
@@ -2442,6 +2444,7 @@
 	tests/stub_debug.cc \
 	tests/stub_event.cc \
 	tests/stub_HelperChildConfig.cc \
+	tests/stub_libmem.cc \
 	tests/stub_libsecurity.cc \
 	tests/stub_stmem.cc \
 	tests/stub_store.cc \
@@ -2720,6 +2723,7 @@
 	icmp/Icmp.h \
 	SquidTime.h \
 	tests/stub_debug.cc \
+	tests/stub_libmem.cc \
 	time.cc \
 	globals.cc
 tests_testIcmp_LDFLAGS = $(LIBADD_DL)
@@ -2739,6 +2743,7 @@
 nodist_tests_testIpAddress_SOURCES= \
 	ip/Address.h \
 	tests/stub_debug.cc \
+	tests/stub_libmem.cc \
 	tests/stub_tools.cc
 tests_testIpAddress_LDADD= \
 	ip/libip.la \
@@ -2925,7 +2930,6 @@
 ## libsquid pulls in SquidConfig and children. stub them.
 tests_testString_SOURCES = \
 	ClientInfo.h \
-	tests/stub_libmem.cc \
 	MemBuf.cc \
 	String.cc \
 	$(SBUF_SOURCE) \
@@ -2940,6 +2944,7 @@
 	tests/stub_cbdata.cc \
 	tests/stub_debug.cc \
 	tests/stub_HelperChildConfig.cc \
+	tests/stub_libmem.cc \
 	tools.h \
 	tests/stub_tools.cc \
 	tests/stub_time.cc \
@@ -3158,6 +3163,7 @@
 	base/RefCount.h \
 	tests/stub_cbdata.cc \
 	tests/stub_debug.cc \
+	tests/stub_libmem.cc \
 	tests/stub_MemBuf.cc \
 	tests/testRefCount.cc
 testRefCount_LDADD = \
@@ -3426,7 +3432,6 @@
 	MasterXaction.h \
 	multicast.h \
 	multicast.cc \
-	tests/stub_libmem.cc \
 	mem_node.cc \
 	MemBuf.cc \
 	MemObject.cc \
@@ -3499,6 +3504,7 @@
 	tests/stub_libauth_acls.cc \
 	tests/stub_libauth.cc \
 	tests/stub_libdiskio.cc \
+	tests/stub_libmem.cc \
 	tests/stub_libsecurity.cc \
 	tests/stub_main_cc.cc \
 	tests/stub_ipc_Forwarder.cc \
@@ -3658,7 +3664,6 @@
 
 tests_testConfigParser_SOURCES = \
 	ClientInfo.h \
-	tests/stub_libmem.cc \
 	tests/stub_MemBuf.cc \
 	tests/stub_time.cc \
 	$(SBUF_SOURCE) \
@@ -3676,6 +3681,7 @@
 	tests/stub_cache_manager.cc \
 	tests/stub_cbdata.cc \
 	tests/stub_debug.cc \
+	tests/stub_libmem.cc \
 	tests/stub_HelperChildConfig.cc \
 	tools.h \
 	tests/stub_tools.cc \

=== modified file 'src/MemObject.cc'
--- src/MemObject.cc	2015-05-26 17:25:04 +0000
+++ src/MemObject.cc	2015-08-18 10:11:41 +0000
@@ -93,24 +93,18 @@
 }
 
 MemObject::MemObject() :
-    inmem_lo(0),
-    nclients(0),
-    smpCollapsed(false),
-    request(NULL),
-    ping_reply_callback(NULL),
-    ircb_data(NULL),
-    id(0),
-    object_sz(-1),
-    swap_hdr_sz(0),
+    inmem_lo(0), nclients(0), 
+    smpCollapsed(false), request(nullptr),
+    ping_reply_callback(nullptr), ircb_data(nullptr),
+    id(0), object_sz(-1), swap_hdr_sz(0),
 #if URL_CHECKSUM_DEBUG
     chksum(0),
 #endif
-    vary_headers(NULL)
+    vary_headers(nullptr), _reply(new HttpReply)
 {
     debugs(20, 3, "new MemObject " << this);
     memset(&start_ping, 0, sizeof(start_ping));
     memset(&abort, 0, sizeof(abort));
-    _reply = new HttpReply;
     HTTPMSGLOCK(_reply);
 }
 

=== modified file 'src/StoreMeta.h'
--- src/StoreMeta.h	2015-01-13 07:25:36 +0000
+++ src/StoreMeta.h	2015-08-19 04:24:13 +0000
@@ -111,6 +111,8 @@
 /// \ingroup SwapStoreAPI
 class StoreMeta
 {
+protected:
+	StoreMeta() : length(-1), value(nullptr), next(nullptr) { }
 public:
     static bool validType(char);
     static int const MaximumTLVLength;

=== modified file 'src/StoreMetaURL.h'
--- src/StoreMetaURL.h	2015-01-13 07:25:36 +0000
+++ src/StoreMetaURL.h	2015-08-19 04:36:31 +0000
@@ -13,7 +13,7 @@
 
 class StoreMetaURL : public StoreMeta
 {
-    MEMPROXY_CLASS(StoreMetaURL);
+	MEMPROXY_CLASS(StoreMetaURL); // needs mempool-managed zeroing.
 
 public:
     char getType() const {return STORE_META_URL;}

=== modified file 'src/StoreMetaVary.h'
--- src/StoreMetaVary.h	2015-01-13 07:25:36 +0000
+++ src/StoreMetaVary.h	2015-08-19 04:36:31 +0000
@@ -13,7 +13,7 @@
 
 class StoreMetaVary : public StoreMeta
 {
-    MEMPROXY_CLASS(StoreMetaVary);
+	MEMPROXY_CLASS(StoreMetaVary); //needs mempool-managed zeroing.
 
 public:
     char getType() const {return STORE_META_VARY_HEADERS;}

=== modified file 'src/URL.h'
--- src/URL.h	2015-07-31 00:16:40 +0000
+++ src/URL.h	2015-08-19 04:36:31 +0000
@@ -26,8 +26,10 @@
     MEMPROXY_CLASS(URL);
 
 public:
-    URL() : scheme_(), hostIsNumeric_(false), port_(0) {*host_=0;}
-    URL(AnyP::UriScheme const &aScheme) : scheme_(aScheme), hostIsNumeric_(false), port_(0) {*host_=0;}
+    URL() :
+        hostIsNumeric_(false), port_(0), absolute_() {*host_=0;}
+    URL(AnyP::UriScheme const &aScheme) :
+        scheme_(aScheme), hostIsNumeric_(false), port_(0) {*host_=0;}
 
     void clear() {
         scheme_=AnyP::PROTO_NONE;

=== modified file 'src/acl/Acl.cc'
--- src/acl/Acl.cc	2015-01-13 08:42:16 +0000
+++ src/acl/Acl.cc	2015-08-17 12:40:24 +0000
@@ -334,9 +334,7 @@
         link = link->next;
     }
 
-    auth_match = new acl_proxy_auth_match_cache();
-    auth_match->matchrv = matchForCache (checklist);
-    auth_match->acl_data = this;
+    auth_match = new acl_proxy_auth_match_cache(matchForCache(checklist), this);
     dlinkAddTail(auth_match, &auth_match->link, cache);
     debugs(28, 4, "ACL::cacheMatchAcl: miss for '" << name << "'. Adding result " << auth_match->matchrv);
     return auth_match->matchrv;

=== modified file 'src/acl/Acl.h'
--- src/acl/Acl.h	2015-08-17 07:16:17 +0000
+++ src/acl/Acl.h	2015-08-19 18:58:41 +0000
@@ -216,6 +216,9 @@
     MEMPROXY_CLASS(acl_proxy_auth_match_cache);
 
 public:
+    acl_proxy_auth_match_cache(int matchRv, void * aclData) :
+        matchrv(matchRv), acl_data(aclData) {}
+
     dlink_node link;
     int matchrv;
     void *acl_data;

=== modified file 'src/acl/Asn.h'
--- src/acl/Asn.h	2015-01-13 07:25:36 +0000
+++ src/acl/Asn.h	2015-08-19 04:36:31 +0000
@@ -29,6 +29,7 @@
     MEMPROXY_CLASS(ACLASN);
 
 public:
+    ACLASN() : data(nullptr) {}
     virtual ~ACLASN();
 
     virtual bool match(Ip::Address);

=== modified file 'src/acl/DomainData.h'
--- src/acl/DomainData.h	2015-04-10 08:54:13 +0000
+++ src/acl/DomainData.h	2015-08-19 04:36:31 +0000
@@ -18,6 +18,7 @@
     MEMPROXY_CLASS(ACLDomainData);
 
 public:
+    ACLDomainData() : domains(nullptr) {}
     virtual ~ACLDomainData();
     virtual bool match(char const *);
     virtual SBufList dump() const;

=== modified file 'src/acl/ExtUser.h'
--- src/acl/ExtUser.h	2015-01-13 07:25:36 +0000
+++ src/acl/ExtUser.h	2015-08-19 04:36:31 +0000
@@ -20,7 +20,7 @@
     MEMPROXY_CLASS(ACLExtUser);
 
 public:
-    ACLExtUser(ACLData<char const *> *newData, char const *);
+    ACLExtUser(ACLData<char const *> *newData, char const * type);
     ACLExtUser (ACLExtUser const &old);
     ACLExtUser & operator= (ACLExtUser const &rhs);
     ~ACLExtUser();

=== modified file 'src/acl/UserData.cc'
--- src/acl/UserData.cc	2015-05-16 08:41:00 +0000
+++ src/acl/UserData.cc	2015-08-17 14:22:29 +0000
@@ -60,13 +60,7 @@
     return (lhs.caseCmp(rhs) < 0);
 }
 
-static bool
-CaseSensitveSBufCompare(const SBuf &lhs, const SBuf &rhs)
-{
-    return (lhs < rhs);
-}
-
-ACLUserData::ACLUserData() : userDataNames(CaseSensitveSBufCompare)
+ACLUserData::ACLUserData() : userDataNames()
 {
     flags.case_insensitive = false;
     flags.required = false;

=== modified file 'src/auth/AclProxyAuth.cc'
--- src/auth/AclProxyAuth.cc	2015-01-13 07:25:36 +0000
+++ src/auth/AclProxyAuth.cc	2015-08-18 16:46:54 +0000
@@ -25,7 +25,9 @@
     delete data;
 }
 
-ACLProxyAuth::ACLProxyAuth(ACLData<char const *> *newData, char const *theType) : data(newData), type_(theType) {}
+ACLProxyAuth::ACLProxyAuth(ACLData<char const *> *newData, char const *theType) :
+    data(newData), type_(theType)
+{}
 
 ACLProxyAuth::ACLProxyAuth(ACLProxyAuth const &old) : data(old.data->clone()), type_(old.type_)
 {}

=== modified file 'src/auth/Gadgets.cc'
--- src/auth/Gadgets.cc	2015-01-13 07:25:36 +0000
+++ src/auth/Gadgets.cc	2015-08-18 16:46:54 +0000
@@ -118,7 +118,7 @@
     auth_user(anAuth_user)
 {
     key = (void *)anAuth_user->userKey();
-    next = NULL;
+    next = nullptr;
     hash_join(proxy_auth_username_cache, (hash_link *) this);
 }
 

=== modified file 'src/auth/Gadgets.h'
--- src/auth/Gadgets.h	2015-01-13 07:25:36 +0000
+++ src/auth/Gadgets.h	2015-08-19 04:36:31 +0000
@@ -33,7 +33,7 @@
 
 public:
     AuthUserHashPointer(Auth::User::Pointer);
-    ~AuthUserHashPointer() { auth_user = NULL; };
+    ~AuthUserHashPointer() { auth_user = nullptr; }
 
     Auth::User::Pointer user() const;
 

=== modified file 'src/auth/QueueNode.h'
--- src/auth/QueueNode.h	2015-01-13 07:25:36 +0000
+++ src/auth/QueueNode.h	2015-08-19 04:36:31 +0000
@@ -35,7 +35,7 @@
 
 public:
     QueueNode(Auth::UserRequest *aRequest, AUTHCB *aHandler, void *aData) :
-        next(NULL),
+        next(nullptr),
         auth_user_request(aRequest),
         handler(aHandler),
         data(cbdataReference(aData)) {}

=== modified file 'src/auth/User.cc'
--- src/auth/User.cc	2015-02-08 11:40:30 +0000
+++ src/auth/User.cc	2015-08-18 16:46:54 +0000
@@ -28,9 +28,8 @@
     config(aConfig),
     ipcount(0),
     expiretime(0),
-    notes(),
     credentials_state(Auth::Unchecked),
-    username_(NULL),
+    username_(nullptr),
     requestRealm_(aRequestRealm)
 {
     proxy_match_cache.head = proxy_match_cache.tail = NULL;

=== modified file 'src/auth/negotiate/UserRequest.cc'
--- src/auth/negotiate/UserRequest.cc	2015-08-04 19:57:07 +0000
+++ src/auth/negotiate/UserRequest.cc	2015-08-18 16:46:54 +0000
@@ -24,14 +24,10 @@
 #include "MemBuf.h"
 #include "SquidTime.h"
 
-Auth::Negotiate::UserRequest::UserRequest()
-{
-    waiting=0;
-    client_blob=0;
-    server_blob=0;
-    authserver=NULL;
-    request=NULL;
-}
+Auth::Negotiate::UserRequest::UserRequest() :
+    authserver(nullptr), server_blob(nullptr), client_blob(nullptr),
+    waiting(0), request(nullptr)
+{}
 
 Auth::Negotiate::UserRequest::~UserRequest()
 {

=== modified file 'src/auth/ntlm/UserRequest.cc'
--- src/auth/ntlm/UserRequest.cc	2015-08-04 19:57:07 +0000
+++ src/auth/ntlm/UserRequest.cc	2015-08-18 16:46:54 +0000
@@ -23,14 +23,10 @@
 #include "MemBuf.h"
 #include "SquidTime.h"
 
-Auth::Ntlm::UserRequest::UserRequest()
-{
-    waiting=0;
-    client_blob=0;
-    server_blob=0;
-    authserver=NULL;
-    request=NULL;
-}
+Auth::Ntlm::UserRequest::UserRequest() :
+    authserver(nullptr), server_blob(nullptr), client_blob(nullptr),
+    waiting(0), request(nullptr)
+{}
 
 Auth::Ntlm::UserRequest::~UserRequest()
 {

=== modified file 'src/comm/Connection.cc'
--- src/comm/Connection.cc	2015-06-02 10:15:06 +0000
+++ src/comm/Connection.cc	2015-08-18 16:46:54 +0000
@@ -24,14 +24,12 @@
 }
 
 Comm::Connection::Connection() :
-    local(),
-    remote(),
     peerType(HIER_NONE),
     fd(-1),
     tos(0),
     nfmark(0),
     flags(COMM_NONBLOCKING),
-    peer_(NULL),
+    peer_(nullptr),
     startTime_(squid_curtime)
 {
     *rfc931 = 0; // quick init the head. the rest does not matter.

=== modified file 'src/esi/Esi.cc'
--- src/esi/Esi.cc	2015-08-04 19:57:07 +0000
+++ src/esi/Esi.cc	2015-08-19 04:36:31 +0000
@@ -1484,11 +1484,9 @@
     cbdataReferenceDone (varState);
 }
 
-esiLiteral::esiLiteral(ESISegment::Pointer aSegment)
+esiLiteral::esiLiteral(ESISegment::Pointer aSegment) :
+    buffer(aSegment), varState(nullptr)
 {
-    buffer = aSegment;
-    /* we've been handed a complete, processed string */
-    varState = NULL;
     /* Nothing to do */
     flags.donevars = 1;
 }
@@ -1881,7 +1879,8 @@
     debugs(86, 5, "esiChoose::~esiChoose " << this);
 }
 
-esiChoose::esiChoose(esiTreeParentPtr aParent) : elements (), chosenelement (-1),parent (aParent)
+esiChoose::esiChoose(esiTreeParentPtr aParent) :
+    elements(), chosenelement(-1), parent(aParent)
 {}
 
 void

=== modified file 'src/external_acl.cc'
--- src/external_acl.cc	2015-08-04 21:04:09 +0000
+++ src/external_acl.cc	2015-08-19 04:36:31 +0000
@@ -73,7 +73,10 @@
 public:
     typedef RefCount<external_acl_format> Pointer;
 
-    external_acl_format() : type(Format::LFT_NONE), header(NULL), member(NULL), separator(' '), header_id(Http::HdrType::BAD_HDR) {}
+    external_acl_format() :
+        type(Format::LFT_NONE), header(nullptr), member(nullptr),
+        separator(' '), header_id(Http::HdrType::BAD_HDR)
+    {}
     ~external_acl_format() {
         xfree(header);
         xfree(member);

=== modified file 'src/fs/ufs/UFSStoreState.h'
--- src/fs/ufs/UFSStoreState.h	2015-05-16 08:41:00 +0000
+++ src/fs/ufs/UFSStoreState.h	2015-08-19 04:36:31 +0000
@@ -48,7 +48,10 @@
     {
         MEMPROXY_CLASS(UFSStoreState::_queued_read);
     public:
-        _queued_read() : buf(NULL), size(0), offset(0), callback(NULL), callback_data(NULL) {}
+        _queued_read() :
+            buf(nullptr), size(0), offset(0), callback(nullptr),
+            callback_data(nullptr)
+        {}
 
         char *buf;
         size_t size;

=== modified file 'src/icmp/Makefile.am'
--- src/icmp/Makefile.am	2015-08-03 03:44:59 +0000
+++ src/icmp/Makefile.am	2015-08-19 12:16:51 +0000
@@ -44,6 +44,8 @@
 	SquidConfig.cc \
 	SquidNew.cc \
 	stub_HelperChildConfig.cc \
+	stub_libmem.cc \
+	STUB.h \
 	time.cc
 
 # ICMP lookup helper
@@ -58,6 +60,7 @@
 	pinger.cc
 nodist_pinger_SOURCES = $(COPIED_SOURCE)
 pinger_LDFLAGS = $(LIBADD_DL)
+#libmem is needed for MemAllocatorProxy, libmiscutil for splayLastResult
 pinger_LDADD=\
 	libicmp-core.la \
 	$(top_builddir)/src/ip/libip.la \
@@ -83,19 +86,26 @@
 ## files we need to pull in from other locations
 ## copied like this to avoid subdir-objects collisions on 'make clean'
 debug.cc: $(top_srcdir)/src/debug.cc
-	cp $(top_srcdir)/src/debug.cc .
+	cp $< $@
 
 globals.cc: $(top_srcdir)/src/globals.h
 	cp $(top_builddir)/src/globals.cc .
 
 time.cc: $(top_srcdir)/src/time.cc
-	cp $(top_srcdir)/src/time.cc .
+	cp $< $@
 
 SquidConfig.cc: $(top_srcdir)/src/SquidConfig.cc
-	cp $(top_srcdir)/src/SquidConfig.cc .
+	cp $< $@
 
 SquidNew.cc: $(top_srcdir)/src/SquidNew.cc
-	cp $(top_srcdir)/src/SquidNew.cc .
+	cp $< $@
 
 stub_HelperChildConfig.cc: $(top_srcdir)/src/tests/stub_HelperChildConfig.cc
-	cp $(top_srcdir)/src/tests/stub_HelperChildConfig.cc .
+	cp $< $@
+
+stub_libmem.cc: $(top_srcdir)/src/tests/stub_libmem.cc STUB.h
+	cp $< $@
+
+STUB.h: $(top_srcdir)/src/tests/STUB.h
+	cp $< $@
+	
\ No newline at end of file

=== modified file 'src/ident/AclIdent.h'
--- src/ident/AclIdent.h	2015-01-13 07:25:36 +0000
+++ src/ident/AclIdent.h	2015-08-19 04:36:31 +0000
@@ -47,7 +47,7 @@
     virtual int match(ACLChecklist *checklist);
     virtual SBufList dump() const;
     virtual bool empty () const;
-    virtual ACL *clone()const;
+    virtual ACL *clone() const;
 
 private:
     static Prototype UserRegistryProtoype;

=== modified file 'src/mem/AllocatorProxy.cc'
--- src/mem/AllocatorProxy.cc	2015-01-13 07:25:36 +0000
+++ src/mem/AllocatorProxy.cc	2015-08-17 07:09:19 +0000
@@ -28,8 +28,10 @@
 MemAllocator *
 Mem::AllocatorProxy::getAllocator() const
 {
-    if (!theAllocator)
+    if (!theAllocator) {
         theAllocator = MemPools::GetInstance().create(objectType(), size);
+        theAllocator->zeroBlocks(doZero);
+    }
     return theAllocator;
 }
 
@@ -42,6 +44,12 @@
         return memPoolInUseCount(theAllocator);
 }
 
+void
+Mem::AllocatorProxy::zeroBlocks(bool doIt)
+{
+	getAllocator()->zeroBlocks(doIt);
+}
+
 MemPoolMeter const &
 Mem::AllocatorProxy::getMeter() const
 {

=== modified file 'src/mem/AllocatorProxy.h'
--- src/mem/AllocatorProxy.h	2015-01-13 07:25:36 +0000
+++ src/mem/AllocatorProxy.h	2015-08-19 04:36:31 +0000
@@ -18,11 +18,14 @@
  *
  * Pool and account the memory used for the CLASS object.
  * This macro is intended for use within the declaration of a class.
+ * The store allocated by new is not zeroed; it is the users'
+ * responsibility to ensure that constructors correctly initialize
+ * all data members.
  */
 #define MEMPROXY_CLASS(CLASS) \
     private: \
     static inline Mem::AllocatorProxy &Pool() { \
-        static Mem::AllocatorProxy thePool(#CLASS, sizeof(CLASS)); \
+        static Mem::AllocatorProxy thePool(#CLASS, sizeof(CLASS), false); \
         return thePool; \
     } \
     public: \
@@ -43,10 +46,11 @@
 class AllocatorProxy
 {
 public:
-    AllocatorProxy(char const *aLabel, size_t const &aSize):
+    AllocatorProxy(char const *aLabel, size_t const &aSize, bool doZeroBlocks = true):
         label(aLabel),
         size(aSize),
-        theAllocator(NULL)
+        theAllocator(NULL),
+		doZero(doZeroBlocks)
     {}
 
     /// Allocate one element from the pool
@@ -67,12 +71,15 @@
      */
     int getStats(MemPoolStats * stats);
 
+    void zeroBlocks(bool doIt);
+
 private:
     MemAllocator *getAllocator() const;
 
     const char *label;
     size_t size;
     mutable MemAllocator *theAllocator;
+    bool doZero;
 };
 
 } // namespace Mem

=== modified file 'src/mime.cc'
--- src/mime.cc	2015-07-07 11:53:08 +0000
+++ src/mime.cc	2015-08-19 04:36:31 +0000
@@ -116,9 +116,8 @@
 }
 
 MimeIcon::MimeIcon(const char *aName) :
-    icon_(aName)
+    icon_(aName), url_(xstrdup(internalLocalUri("/squid-internal-static/icons/", icon_)))
 {
-    url_ = xstrdup(internalLocalUri("/squid-internal-static/icons/", icon_));
 }
 
 MimeIcon::~MimeIcon()

=== modified file 'src/wordlist.cc'
--- src/wordlist.cc	2015-03-05 06:44:43 +0000
+++ src/wordlist.cc	2015-08-17 17:01:11 +0000
@@ -32,12 +32,7 @@
     while (*list)
         list = &(*list)->next;
 
-    *list = new wordlist;
-
-    (*list)->key = xstrdup(key);
-
-    (*list)->next = NULL;
-
+    *list = new wordlist(key);
     return (*list)->key;
 }
 
@@ -59,9 +54,7 @@
         list = &(*list)->next;
 
     for (; wl; wl = wl->next, list = &(*list)->next) {
-        *list = new wordlist();
-        (*list)->key = xstrdup(wl->key);
-        (*list)->next = NULL;
+        *list = new wordlist(wl->key);
     }
 }
 

=== modified file 'src/wordlist.h'
--- src/wordlist.h	2015-01-13 07:25:36 +0000
+++ src/wordlist.h	2015-08-19 04:36:31 +0000
@@ -22,6 +22,9 @@
     MEMPROXY_CLASS(wordlist);
 
 public:
+    wordlist() : key(nullptr), next(nullptr) {}
+    // create a new wordlist node, with a copy of k as key
+    wordlist(const char *k) : key(xstrdup(k)), next(nullptr) {}
     char *key;
     wordlist *next;
 };

=== modified file 'test-suite/Makefile.am'
--- test-suite/Makefile.am	2015-08-03 03:50:25 +0000
+++ test-suite/Makefile.am	2015-08-19 12:16:51 +0000
@@ -57,34 +57,42 @@
 
 tcp_banger2_LDADD = $(top_builddir)/lib/libmiscutil.la
 
-STUBS = stub_cbdata.cc stub_debug.cc stub_MemBuf.cc stub_SBuf.cc stub_tools.cc stub_fatal.cc
+STUBS = stub_cbdata.cc stub_debug.cc stub_MemBuf.cc \
+	stub_SBuf.cc stub_tools.cc stub_fatal.cc
+LIBMEM_STUBS = stub_libmem.cc STUB.h
 DEBUG_SOURCE = test_tools.cc $(STUBS)
-CLEANFILES += $(STUBS)
+CLEANFILES += $(STUBS) $(LIBMEM_STUBS)
 
 stub_cbdata.cc: $(top_srcdir)/src/tests/stub_cbdata.cc
-	cp $(top_srcdir)/src/tests/stub_cbdata.cc .
+	cp $< $@
 
 stub_debug.cc: $(top_srcdir)/src/tests/stub_debug.cc
-	cp $(top_srcdir)/src/tests/stub_debug.cc .
+	cp $< $@
 
 stub_MemBuf.cc: $(top_srcdir)/src/tests/stub_MemBuf.cc
-	cp $(top_srcdir)/src/tests/stub_MemBuf.cc .
+	cp $< $@
 
 stub_SBuf.cc: $(top_srcdir)/src/tests/stub_SBuf.cc
-	cp $(top_srcdir)/src/tests/stub_SBuf.cc .
+	cp $< $@
 
 stub_tools.cc: $(top_srcdir)/src/tests/stub_tools.cc
-	cp $(top_srcdir)/src/tests/stub_tools.cc .
+	cp $< $@
 
 stub_fatal.cc: $(top_srcdir)/src/tests/stub_fatal.cc
-	cp $(top_srcdir)/src/tests/stub_fatal.cc .
+	cp $< $@
+
+stub_libmem.cc : $(top_srcdir)/src/tests/stub_libmem.cc STUB.h
+	cp $< $@
+	
+STUB.h : $(top_srcdir)/src/tests/STUB.h
+	cp $< $@
 
 ## XXX: somewhat broken. Its meant to test our debugs() implementation.
 ## but it has never been linked to the actual src/debug.cc implementation !!
 ## all it tests are the stream operators and macro in src/Debug.h
-debug_SOURCES = debug.cc $(DEBUG_SOURCE)
+debug_SOURCES = debug.cc $(DEBUG_SOURCE) $(LIBMEM_STUBS)
 
-ESIExpressions_SOURCES = ESIExpressions.cc $(DEBUG_SOURCE)
+ESIExpressions_SOURCES = ESIExpressions.cc $(DEBUG_SOURCE) $(LIBMEM_STUBS)
 ESIExpressions_LDADD = $(top_builddir)/src/esi/Expression.o \
 		$(LDADD)
 
@@ -102,12 +110,15 @@
 	$(LDADD)
 
 MemPoolTest_SOURCES = MemPoolTest.cc $(DEBUG_SOURCE)
-
-splay_SOURCES = splay.cc $(DEBUG_SOURCE)
-
-syntheticoperators_SOURCES = syntheticoperators.cc $(DEBUG_SOURCE)
-
-VirtualDeleteOperator_SOURCES = VirtualDeleteOperator.cc $(DEBUG_SOURCE)
+MemPoolTest_LDADD = \
+	$(top_builddir)/src/mem/libmem.la \
+	$(LDADD)
+
+splay_SOURCES = splay.cc $(DEBUG_SOURCE) $(LIBMEM_STUBS)
+
+syntheticoperators_SOURCES = syntheticoperators.cc $(DEBUG_SOURCE) $(LIBMEM_STUBS)
+
+VirtualDeleteOperator_SOURCES = VirtualDeleteOperator.cc $(DEBUG_SOURCE) $(LIBMEM_STUBS)
 
 ## membanger won't link today. Bitrot..
 ##CC	= gcc

=== modified file 'tools/Makefile.am'
--- tools/Makefile.am	2015-08-03 03:50:25 +0000
+++ tools/Makefile.am	2015-08-19 12:16:51 +0000
@@ -29,25 +29,30 @@
 ## Several files need to be shared but we cannot depend on the other
 ## directories to be built.
 test_tools.cc: $(top_srcdir)/test-suite/test_tools.cc
-	cp $(top_srcdir)/test-suite/test_tools.cc .
+	cp $< $@
 
 stub_debug.cc: $(top_srcdir)/src/tests/stub_debug.cc
-	cp $(top_srcdir)/src/tests/stub_debug.cc .
+	cp $< $@
 
 time.cc: $(top_srcdir)/src/time.cc
-	cp $(top_srcdir)/src/time.cc .
+	cp $< $@
+
+stub_libmem.cc : $(top_srcdir)/src/tests/stub_libmem.cc STUB.h
+	cp $< $@
+	
+STUB.h : $(top_srcdir)/src/tests/STUB.h
+	cp $< $@
 
 # stock tools for unit tests - library independent versions of dlink_list
 # etc.
 # globals.cc is needed by test_tools.cc.
 # Neither of these should be disted from here.
 TESTSOURCES= test_tools.cc
-CLEANFILES += test_tools.cc stub_debug.cc time.cc
+CLEANFILES += test_tools.cc stub_debug.cc time.cc stub_libmem.cc STUB.h
 
 ## Test Scripts
 EXTRA_DIST += helper-ok-dying.pl helper-ok.pl
 
-
 ## ##### cachemgr.cgi  #####
 
 DEFAULT_CACHEMGR_CONFIG = $(sysconfdir)/cachemgr.conf
@@ -57,7 +62,9 @@
 cachemgr__CGIEXT__SOURCES = cachemgr.cc \
 	stub_debug.cc \
 	test_tools.cc \
-	time.cc
+	time.cc \
+	stub_libmem.cc \
+	STUB.h
 
 cachemgr__CGIEXT__CXXFLAGS = -DDEFAULT_CACHEMGR_CONFIG=\"$(DEFAULT_CACHEMGR_CONFIG)\" $(AM_CXXFLAGS)
 
@@ -68,8 +75,6 @@
 cachemgr.cgi.8: $(srcdir)/cachemgr.cgi.8.in Makefile
 	$(SUBSTITUTE) < $(srcdir)/cachemgr.cgi.8.in > $@
 
-
-
 ## Shared
 
 install-data-local:

=== modified file 'tools/squidclient/Makefile.am'
--- tools/squidclient/Makefile.am	2015-08-03 03:50:25 +0000
+++ tools/squidclient/Makefile.am	2015-08-19 12:16:51 +0000
@@ -27,20 +27,27 @@
 ## Several files need to be shared but we cannot depend on the other
 ## directories to be built.
 test_tools.cc: $(top_srcdir)/test-suite/test_tools.cc
-	cp $(top_srcdir)/test-suite/test_tools.cc .
+	cp $< $@
 
 stub_debug.cc: $(top_srcdir)/src/tests/stub_debug.cc
-	cp $(top_srcdir)/src/tests/stub_debug.cc .
+	cp $< $@
 
 time.cc: $(top_srcdir)/src/time.cc
-	cp $(top_srcdir)/src/time.cc .
+	cp $< $@
+
+stub_libmem.cc : $(top_srcdir)/src/tests/stub_libmem.cc STUB.h
+	cp $< $@
+	
+STUB.h : $(top_srcdir)/src/tests/STUB.h
+	cp $< $@
+	
 
 # stock tools for unit tests - library independent versions of dlink_list
 # etc.
 # globals.cc is needed by test_tools.cc.
 # Neither of these should be disted from here.
 TESTSOURCES= test_tools.cc
-CLEANFILES += test_tools.cc stub_debug.cc time.cc
+CLEANFILES += test_tools.cc stub_debug.cc time.cc stub_libmem.cc STUB.h
 
 ## ##### squidclient  #####
 
@@ -55,6 +62,8 @@
 	squidclient.cc \
 	stub_debug.cc \
 	test_tools.cc \
+	stub_libmem.cc \
+	STUB.h \
 	time.cc \
 	Transport.cc \
 	Transport.h

# Begin bundle
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
siER2lEL0S8mmnxLCwbpG3v2jDF8yoMQV4UKNU0fGU4D4NGHL0sUlNVV26ZbLum4y2s09aMuVGI+
KNFrO/c3LZhNy6fhv8VYSTTShVx6itv6ElZZOXpue2WFYs93fXGkCIUa/FHi9myJOXhxosSPEyP8
YRZ8+cO2zx08Z+lG7XWfp3yhEThKc3GEslo1enKqSrLxp5os44qzZ19Hups2UY4n1Rvom5UeJyWZ
Vfvkwq9vfvKz3skSZnDzbCK5FxxwaIiGqrZpGjX6cN4pN0uqcuXC7EcOzLdy4lKt23yjeVGiZNwv
ly4cKLOnLKibH+JXXeE5b6qS5rSk1Bqj2/J1z6e9GWr2WJYgiIq1UJ+/v9TTCTRlSJYdO1F9ixub
2r2RDi6DYwb2Leo0ZKuE1pvssinnHz5P17dJtmWybh7fXO+/X4XfThw7XUT14u3SX/dRo15aPGFm
6yijCXa0Qg79LkpJfK++bOFKUZbaYEl3iz98cvVC9Hps4aqr2lw3ZbK0my7c9pt1Wzpe77iIRIa+
RKJQlEuXV9L0qbtM92xiJuHLt0+vrBd16dJPjGO6nSXDlu0We01qIR1BCG10REIo+1U1FGjCzLlo
2Yq9sLqRo2be03psw776enjhde9o5dL3OWrp0k11xZSmV100k3nTRvB4vds6ZYquwwkwmss4dlHZ
n9zbG54elK6uGmzZu5UUZT5ZWXbuWVGGGq7ejhVh04WcMuFGXOGxo3YbsNfSzlhZuqo0at3DLZpu
9esK+XbuCZw5dt2jxhRqom3322awytbpsk6dqNUmHbpuxanDxo1UjlZs1ZsfqKMeN12rLKyKsxnw
nYL4h2fCRDvc00p0Hft6jUlpzHvNoPZrGoaRi8y8xdW5WtVeVjmP0Hn2FUn3/hnXy+dytTp04eHn
ejQwey3bYPLcbHNYMJ36pj9HM5qbdm2Q61XBQyU2ejszSbNM9bL1RTW9F1bqysh5dVUcigIFYFFr
mcsKhFZnKc1krkJmbXR44LcsqWRMqmS3h29mjNop+xnHYb2dFTImYCViZ2KCRIcHOjcrfyUSLuEk
k0WLTMUSRzsbWZnsSDWsrLDQubrTq97M9nL/Q2wjCU/H+ChRH2nETNE1U/fVYpKLygwyqUhCyQhE
Exsy9KIUZdJtXi7xq/uoy3drJf4/4/Xf3B2vEEoeSivDX3bet+/ddPXfqed9ISJDaa7R40+0sNdU
0bNCY1kJIFHpVe2W7hhc6btPVYcuGjpuLenU/XlvmvakE72e3UnphvfLR4mUiJHr2mu1aJN0hRq2
aOPGjpdkp0m8cP4xER0sk8cKc8N5T3Sk3RI3iEEhadcufkrw4wpkVIkoo1SRzQdNO1IiEcqNHrLf
hq3RTRO/DL0nsq3N2yuzliezp4VU998+orKUJaQREayS0Q2TYPWXCkOWB20VMLPmpdd01uo9NHvd
Kr5CIvIlKIJShZlmKZhmDMoZlMyZljtdro4nK7HHw/mdPr3f0+lPUSlE7+cyKlrq9qN2FlzQkO4S
Ium24Sw9VWSXdvFvn03YbsKRh1doq5dOE1Xtxxs30P3Ap2zHp7iSSJvUULAnuqNtXXHpZ9qPb2j0
y2cLx4uw50YXfx/EER181L89dOWqU2zl2zyp7Yq9yS1vWNXtSIfbnNO/mjCmF3KWa+eNV0zx9xo2
Sfqa2btHHSTLlj24Vym0cFHbvvpdwcMcpPSuq33uri3zRKOXbtKxqeLM6qSbDvvG2UpNm6Tfe7g7
ZduvGicztzz/pCDPLR06bNzp/d7R9qXn6+bereY4Xus+0lX04fVH0yYaPqSXG6jDh4w9vx0XxvJN
JrV0nom6XXavjfLpSyibykIqySYSTiTZq5eaaPPvpn0w3bqrNm7h25b72dtuFHbR3u3wn08ZSXXU
XcO4iE3TZo1MJsLOGFmjZhV277wo0dtXPXSU/Fkkm6yjKe5hvvy0Sq5XdNU3LyKN3ClXLlZWa7uz
TVJZhukTYamFVEWuq0XbN0fxbt4l4m/rdefDd/hswu37bJRs8aJuXWqiT4w8vzZ2wlVdwtRJVRhV
VZu5Lrtl2GySj05VZaOV2FHTiq8nCrKaSbR/U4B6Gw32aCXs6ZSVhJlNrsfGRDIUHu/M/YaPuToQ
9z9rdFH7Wz6fu65rp18StEW/R1syD7KE2nKPQpm5YM22GBcQJSDAcQGhPILgbAUCsfrUPGAQLDBj
lAiRiHOPOiojlvoecKThg766HZ0dZs1cGlDE6OuvOyCxwjcqXBJEVClUvAFgiAF30R6vpX2L2/pe
2cxjzaLf0t9S2MMNWLybJGxhxSxrSUtBzNrBKSy3PR1qLgNdKrZENEfuXoqwqq1bF10RKUHx4mNX
xsUGiqZLdOtIiMtmDVRss3el2HQ6ikl6sq3WjU8Y4ApBkh41MQzlec3Vy/fLwypwKiUYmmh4kjS9
4T1Us30WLOGW7fdlw1b+qtn8EehPn2Y9zSiQnzTPrvOV11IQdPF6Zt6wbWrJV4l6XTo1W88dGDRt
f+Mfs/tGyrV2qzNiq5VnbVzmTejJc4qKN7fzcNzc4tDk0gRCUM6/SEdrMJJvSxy3/KbJhuy4Y/R8
VdNsOVX5PqSTFGyajRVZI+I0+R0kr61+C/WG6lpduVk02h7Zt6dvVdMp7KTlBERN6Up6Tuy/LKvy
6xu6UcOknjtN7jmJyiWHslKJT67tKRs+KUiCVlrqu395qPuIREbrqKKVEzt005xG76aK6fSz5tL5
Z43fG7Lhus1bfHpxx29vGSQ+z29oj97z4p4tT7pKS7q3jOPVrJrKp8t2jua05MNOfT1FbfdfTVvw
uSaNUnLLyC7ySWZ6+lFKcn21SUaq1XevOEvSXz6VXScyyym2cNfPnq6qarZy55q7avUQ9z3l33OX
nHe9lKfbx2wdvSvWHbbZhOOmzWfGZUbGzLzLmSST20WbpOPNmzh6iGcvUkq05305nVvfd7ScqOk3
S7VZdw9ruHjdVooosujVu9suG28PX4hHcSSJbCTtkXURe0LmN1GLLqZ1Gti1Lly7dq2XbNGXTVsy
8dsvr3N7du388N1G0bvTPKb2hzJsuz3ok9MpuVons4aMNlX+aKfHxu/gm1fPnJlLvlrHD07VSTe2
En9H6qXS9Pw6aN2j449pXWZUWZdNZsPo1ZykhBVOaWqZTS7B1SbVjtsTVZXYWcv4ycqMNHLhlsmu
s2e/eGq58ZaxB8P1ROiXB8btXKyyymzlQuu+RNZld8TVcsOXt6as7prPmv9YEQ2WXdLNmJrtnTej
DZyu7UTWuy3ywoUVaaOllv1P9ERH5TVNb2m6GyEnCG/TWdkDc497bxopsrurXNRq83mgVo8nJwjz
dO2Qjq8OqFTLJoMcoyRxFHdQWQwQc16OudRzRzlPY2cnDrOjw5p7GEcoQLsYRIIAWVyBUJhGJDbG
SGbm7lDrJ7M5YLR05SpGUUskwugEhZ43ttBc4dZfjPR5lKLDBr0MZpkWEsXQeKNm6XLia250LF37
knajYeuHCn62T6WV/W1IhJCLScyRGqhE1U0RG7l9rTbKpsxuszwq/e/p7j2t76oqhwc/rVnWE3Ts
cuSvRBE0/jyu0OCta/GGZyERDAlBIokSdsVA1WSYdNViKtzhCD6brNN/ps1YUdP7E1ksH+EfWsn0
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
GU8M89tqNHxoaJNmpdV8bFbluV+HluaIq5avEmjplJRwkscrOXL6/YX9PuIe5szlObftr7e2ivKj
3xn4+PFrTVYXetwT1S6iEvb2w27XxNft0smvzV8XSe3PMN96S23iEFUnFlFtfSjHD0qo7V08los6
bqLNmcPedzDD06as2apKedz0bJ7OKHDZZw59e3DZt08YxRxfpderrlLxu9OXPbCZVVJ6SU9XjxOS
cTeq35xUjLga34dJRrrss1Y0bzYOt9k9DZVqupR22SbNVvElHjxxKestTfTrn1y2dNS3WNNOdO9X
vUou134TbrmrxmEQdMPrNaJzIvu8aGhNo+Lqpqtni70k9uFnrhllQm/aEWlCKzaPSj/IGycaOGjv
z30o8bF1XjVy3LduHj6VTfbVRV2bcpuHCzVuWetEHMkYXdOS212rdsqquqkokq5Tsll+5wu1ZcKy
1nROdKTcOe3KqjKrvd2my7m9evHTVhw1TdOXDlZ6aqZV7eOmrvZsmolqyq+NqrPPOXpJl10m5auX
fJwo8Tmu0iO2iN1k1GE1Xibto1VSbNU3K7VZbV6YTWbMKJNm7dr0mm3Vb2WXdMNV3DZJsXnP/Ia1
Skw1ZaO1EnCzEnPDtVq3ZTdRlJjR00apMlGRc1sVjhIeckTjpvaPgW3zPjHO5E9TQd5i8PAl8Ej1
PezGfOcOH2c5GikdFtKyTsJ1UcolAH6NphTqmMsKqGuealSbLKulhYyMjQsKqrFiyqlDVR4qunwI
1udTu5RaXm36Lww1tu2b8ld1LMtSxG8euWg4slvMDUvTLO9Sm5yS5JblUuEtUlZLjlw1iqXHVb4r
j0Urj1LJcfnu7IJ2ZR6cp2ZZ2auzhz22Y/3/0iy9B6H61UtS/jlPxw0xyet5k6pdIQqSKEBYRQYJ
FBRYooMBirGKgxEFFQQWERSIqIIgkFAVEEYMUUVgqiQQQQYIpEViMVQYhAIwm5QZMqsrFllYMZWL
KsrJYppjGVpWGmKfbWZmQzEzMyjMZiZkTMjMJMxZjE0wYwkZmMf0OL3l+wVMyL9z6JfpuyL6/bUu
WZgZiSj56r7R9vN4vS2d78tNmGCTE1BKhoTQhMEETExNiQ0oW0W/4PtP/P85+okTgTrYKq6plZmu
7jSW6cDZmHTj/NjlMMfGt5dfFo1rT/bD/4joo3qZizEqYyxmRlgVmCmYkzTLJbDXFhTSeo5YtMmP
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
25TPDr0s6e1HRoomm33s4fY7m3eE6bNVmzP6O2UlXjpq+duFmW72uq++E2nP0PFkIN/2GrKnbLZq
o4WbqOXJ9qtVmjVR88eFVlk13+Pi/LWh97aPj0+3tqR/qPqEfWMJT4w4dHt0u+KLMtHD6NmU2yyr
ea1xY5rT06dkSor3P+71K5kkkRdKrPE904HKRde6xpWs1pljwWRNVVl30KWFP4r4jaN6R+eDDAys
qc1hc+JeO12tlP59bSjaMXp6e8fRFXySMcUvdVe06Za+i8Jfm5Hv3fqNNNuunpzbDZj/GE2HaLTy
PAv8+Uk2nvViKYqSm86bqgdPebUTQmMikpSievL2Vyeuzl8MNXazOtW0stVfQshJEVdBQ4Ph18vg
2vadrUoUW6G1nPj0ym4Po3ZM5us3Yat2/C+r84Qcv9uybpWEdX+/xzXOdbcVmoo/o7artVCrL2os
4ZXZUau3jhdh4zy/8ThOzLLhwoXZV4YbK1ZXaOmHbVywt04YVUbunLlNlhJdZq5Sb8pNvuIiJmHH
DdRw0WNlH/Prtni703WtbZNJ01aMKpsOPv72YYSa3SYplZ0owbPblPh2umsx6UbKlGjhRPRq7/3l
mVKruXLdc1dKPcIum0dZZYNll6u2FXr140aNGX5KKar/qivx8WdOnTnnKjVd9v4RERCKKvp2mmk3
YePSrRy+Mt1EmWXRZJnD6aO+6va7tN+kQhEcLPazhq6TWeO5F8up9sNFPTRlwuwoTSd98mq7Y8eb
JKvcI2eNGGiSTR4o6eN0nto1XfrGWjxz7MrJvarXVZNff372aNGyjVqxjx4dsNF76pz3ee/uJfgI
hEv3xH2n+us4e3HKqTUk5ePUJviaqr6VSasuYIjKsZuCrY8Pq/ClaGn2T6FDsMDgUPBPJNCJFxUY
NXn2+JvmjuUv1S/VRP8v1bpKKZSTfmq97vtZ+cVTbPydMuXSjlxyuuosdOWeYqlOrZy0ns3VTVa1
VaGiXDlaG6iTd+f6/r6N3DDCXSTdyw005brPGXWjH70aTvuMrQ2bXT8mg9OGhKqSUUShQwYrcTK3
Mty1uVbW3Bg1LW9lZy5iztzo5T38fHm7HFvo1aTrM034f69nZceLkooZkFlJOw1+B2OhRRJyum7e
H5PyYSs/NJNV9P9miqjDxr+5sqzsGZQzKvKElk/0O+SPFJIm/cclF+rsHpR4Hoe6DY6B5ZDGEmQz
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
