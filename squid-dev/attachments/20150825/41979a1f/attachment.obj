=== modified file 'acinclude/ax_cxx_0x_types.m4'
--- acinclude/ax_cxx_0x_types.m4	2015-05-23 20:17:16 +0000
+++ acinclude/ax_cxx_0x_types.m4	2015-08-25 11:45:06 +0000
@@ -53,25 +53,29 @@
 
 ## Hand crafted for Squid under GPL version 2
 AC_DEFUN([AX_CXX_TYPE_UNIFORM_DISTRIBUTIONS],[
+AC_REQUIRE([AC_PROG_CXX])
+AC_LANG_PUSH([C++])
+AC_CACHE_CHECK([whether std::uniform_int_distribution<T> is supported],
+               [squid_cv_std_uniform_int_distribution_works],[
+  AC_TRY_COMPILE([#include <random>],[std::uniform_int_distribution<int> c;],
+    [squid_cv_std_uniform_int_distribution_works=yes],
+    [squid_cv_std_uniform_int_distribution_works=no])
+  ])
+SQUID_DEFINE_BOOL([HAVE_STD_UNIFORM_INT_DISTRIBUTION],
+    [$squid_cv_std_uniform_int_distribution_works],
+    [Define if c++11 std::uniform_int_distribution is supported])
+
+AC_CACHE_CHECK([whether std::uniform_real_distribution<T> is supported],
+               [squid_cv_std_uniform_real_distribution_works],[
   AC_REQUIRE([AC_PROG_CXX])
   AC_LANG_PUSH([C++])
-  AC_MSG_CHECKING([whether std::uniform_int_distribution<T> is supported])
-  AC_TRY_COMPILE([#include <random>],[std::uniform_int_distribution<int> c;], [
-    HAVE_UNIFORM_INT_DISTRIBUTION=yes
-    AC_MSG_RESULT(yes)], [
-    HAVE_UNIFORM_INT_DISTRIBUTION=no
-    AC_MSG_RESULT(no)])
-  if test "x$HAVE_UNIFORM_INT_DISTRIBUTION" = xno; then
-    AC_DEFINE(uniform_int_distributon, tr1::uniform_int, [Leave undefined if std::uniform_int_distribution<T> is supported])
-  fi
-  AC_MSG_CHECKING([whether std::uniform_real_distribution<T> is supported])
-  AC_TRY_COMPILE([#include <random>],[std::uniform_real_distribution<double> c;], [
-    HAVE_UNIFORM_REAL_DISTRIBUTION=yes
-    AC_MSG_RESULT(yes)], [
-    HAVE_UNIFORM_REAL_DISTRIBUTION=no
-    AC_MSG_RESULT(no)])
-  if test "x$HAVE_UNIFORM_REAL_DISTRIBUTION" = xno; then
-    AC_DEFINE(uniform_real_distributon, tr1::uniform_real, [Leave undefined if std::uniform_real_distribution<T> is supported])
-  fi
-  AC_LANG_POP
+  AC_TRY_COMPILE([#include <random>],[std::uniform_real_distribution<real> c;],
+    [squid_cv_std_uniform_real_distribution_works=yes],
+    [squid_cv_std_uniform_real_distribution_works=no])
+  ])
+SQUID_DEFINE_BOOL([HAVE_STD_UNIFORM_REAL_DISTRIBUTION],
+    [$squid_cv_std_uniform_real_distribution_works],
+    [Define if c++11 std::uniform_real_distribution is supported])
+
+AC_LANG_POP
 ])

=== modified file 'compat/types.h'
--- compat/types.h	2015-05-23 12:24:21 +0000
+++ compat/types.h	2015-08-25 12:11:55 +0000
@@ -45,6 +45,12 @@
 #include <netinet/in_systm.h>
 #endif
 
+#if __cplusplus && HAVE_TR1_RANDOM
+#if !HAVE_STD_UNIFORM_INT_DISTRIBUTION && !HAVE_STD_UNIFORM_REAL_DISTRIBUTION
+#include <tr1/random>
+#endif
+#endif
+
 /******************************************************/
 /* Typedefs for missing entries on a system           */
 /******************************************************/
@@ -160,5 +166,20 @@
 #define NULL 0
 #endif
 
+/***********************************************************/
+/* uniform_int_distribution backward compatibility wrapper */
+/***********************************************************/
+#if HAVE_STD_UNIFORM_INT_DISTRIBUTION
+#define uniform_int_distribution std::uniform_int_distribution
+#else
+#define uniform_int_distribution std::tr1::uniform_int
+#endif
+
+#if HAVE_STD_UNIFORM_REAL_DISTRIBUTION
+#define uniform_real_distribution std::uniform_real_distribution
+#else
+#define uniform_real_distribution std::tr1::uniform_real
+#endif
+
 #endif /* SQUID_TYPES_H */
 

=== modified file 'configure.ac'
--- configure.ac	2015-08-23 11:53:54 +0000
+++ configure.ac	2015-08-25 11:53:22 +0000
@@ -2889,6 +2889,10 @@
 #endif
 ])
 
+AC_CHECK_HEADERS( \
+  tr1/random
+)
+
 dnl Override rusage() detect on MinGW because is emulated in source code
 case "$squid_host_os" in
   mingw)

=== modified file 'helpers/basic_auth/RADIUS/basic_radius_auth.cc'
--- helpers/basic_auth/RADIUS/basic_radius_auth.cc	2015-02-08 16:53:46 +0000
+++ helpers/basic_auth/RADIUS/basic_radius_auth.cc	2015-08-25 12:06:33 +0000
@@ -207,7 +207,7 @@
 random_vector(char *aVector)
 {
     static std::mt19937 mt(time(0));
-    static std::uniform_int_distribution<uint8_t> dist;
+    static uniform_int_distribution<uint8_t> dist;
 
     for (int i = 0; i < AUTH_VECTOR_LEN; ++i)
         aVector[i] = static_cast<char>(dist(mt) & 0xFF);

=== modified file 'lib/hash.cc'
--- lib/hash.cc	2015-02-08 16:24:31 +0000
+++ lib/hash.cc	2015-08-25 12:06:52 +0000
@@ -344,7 +344,7 @@
     printf("done creating hash table: %d\n", hid);
 
     std::mt19937 mt;
-    std::uniform_int_distribution<> dist(0,16);
+    uniform_int_distribution<> dist(0,16);
 
     while (fgets(buf, BUFSIZ, stdin)) {
         buf[strlen(buf) - 1] = '\0';

=== modified file 'lib/ntlmauth/ntlmauth.cc'
--- lib/ntlmauth/ntlmauth.cc	2015-02-08 16:53:31 +0000
+++ lib/ntlmauth/ntlmauth.cc	2015-08-25 12:06:47 +0000
@@ -185,7 +185,7 @@
 ntlm_make_nonce(char *nonce)
 {
     static std::mt19937 mt(time(0));
-    static std::uniform_int_distribution<uint8_t> dist;
+    static uniform_int_distribution<uint8_t> dist;
 
     for (int i = 0; i < NTLM_NONCE_LEN; ++i)
         nonce[i] = static_cast<char>(dist(mt) & 0xFF);

=== modified file 'src/acl/Random.cc'
--- src/acl/Random.cc	2015-02-08 13:55:29 +0000
+++ src/acl/Random.cc	2015-08-25 12:07:15 +0000
@@ -108,7 +108,7 @@
     // actually matching whether the random value is above
     // or below the configured threshold ratio.
     static std::mt19937 mt;
-    static std::uniform_real_distribution<> dist(0, 1);
+    static uniform_real_distribution<> dist(0, 1);
 
     const double random = dist(mt);
 

=== modified file 'src/auth/digest/Config.cc'
--- src/auth/digest/Config.cc	2015-08-04 19:57:07 +0000
+++ src/auth/digest/Config.cc	2015-08-25 12:07:09 +0000
@@ -159,7 +159,7 @@
     // NP: this will likely produce the same randomness sequences for each worker
     // since they should all start within the 1-second resolution of seed value.
     static std::mt19937 mt(static_cast<uint32_t>(getCurrentTime() & 0xFFFFFFFF));
-    static std::uniform_int_distribution<uint32_t> newRandomData;
+    static uniform_int_distribution<uint32_t> newRandomData;
 
     /* create a new nonce */
     newnonce->nc = 0;

=== modified file 'src/base/RegexPattern.h'
--- src/base/RegexPattern.h	2015-07-29 07:11:17 +0000
+++ src/base/RegexPattern.h	2015-08-25 12:18:24 +0000
@@ -24,7 +24,11 @@
     RegexPattern() = delete;
     RegexPattern(int aFlags, const char *aPattern);
     RegexPattern(const RegexPattern &) = delete;
+    RegexPattern& operator = (const RegexPattern &) = delete;
+#if __cplusplus >= 201103L
     RegexPattern(RegexPattern &&) = default;
+    RegexPattern& operator = (const RegexPattern &&) = delete;
+#endif
     ~RegexPattern();
 
     const char * c_str() const {return pattern;}

=== modified file 'src/event.cc'
--- src/event.cc	2015-05-22 09:59:09 +0000
+++ src/event.cc	2015-08-25 12:07:20 +0000
@@ -120,7 +120,7 @@
         // relative to each other to prevent waves of synchronised activity.
         static std::mt19937 rng;
         auto third = (delta_ish/3.0);
-        std::uniform_real_distribution<> thirdIsh(delta_ish - third, delta_ish + third);
+        uniform_real_distribution<> thirdIsh(delta_ish - third, delta_ish + third);
         delta_ish = thirdIsh(rng);
     }
 

=== modified file 'src/fs/ufs/UFSSwapDir.cc'
--- src/fs/ufs/UFSSwapDir.cc	2015-02-08 06:26:06 +0000
+++ src/fs/ufs/UFSSwapDir.cc	2015-08-25 12:07:18 +0000
@@ -1044,7 +1044,7 @@
          * swap directories
          */
         std::mt19937 mt(static_cast<uint32_t>(getCurrentTime() & 0xFFFFFFFF));
-        std::uniform_int_distribution<> dist(0, j);
+        uniform_int_distribution<> dist(0, j);
         swap_index = dist(mt);
     }
 

=== modified file 'src/tests/SBufFindTest.cc'
--- src/tests/SBufFindTest.cc	2015-02-08 16:17:29 +0000
+++ src/tests/SBufFindTest.cc	2015-08-25 12:07:12 +0000
@@ -385,7 +385,7 @@
     // sizeof() counts the terminating zero at the end of characters
     // and the distribution is an 'inclusive' value range, so -2
     // TODO: add \0 character (needs reporting adjustments to print it as \0)
-    static std::uniform_int_distribution<uint8_t> dist(0, sizeof(characters)-2);
+    static uniform_int_distribution<uint8_t> dist(0, sizeof(characters)-2);
 
     SBuf buf;
     buf.reserveCapacity(length);

=== modified file 'test-suite/hash.c'
--- test-suite/hash.c	2015-02-08 16:25:58 +0000
+++ test-suite/hash.c	2015-08-25 12:06:23 +0000
@@ -355,7 +355,7 @@
     printf("done creating hash table: %d\n", hid);
 
     std::mt19937 mt;
-    std::uniform_int_distribution<> dist(0,16);
+    uniform_int_distribution<> dist(0,16);
 
     while (fgets(buf, BUFSIZ, stdin)) {
         buf[strlen(buf) - 1] = '\0';

=== modified file 'test-suite/splay.cc'
--- test-suite/splay.cc	2015-02-08 05:39:52 +0000
+++ test-suite/splay.cc	2015-08-25 12:06:28 +0000
@@ -130,7 +130,7 @@
 main(int argc, char *argv[])
 {
     std::mt19937 generator;
-    std::uniform_int_distribution<int> distribution;
+    uniform_int_distribution<int> distribution;
     auto nextRandom = std::bind (distribution, generator);
 
     {

