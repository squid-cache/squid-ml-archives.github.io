=== modified file 'src/auth/digest/Config.cc'
--- src/auth/digest/Config.cc	2015-09-27 17:36:15 +0000
+++ src/auth/digest/Config.cc	2015-09-28 06:12:58 +0000
@@ -646,7 +646,7 @@
         if (tmplink->data == nonce) {
             dlinkDelete(tmplink, &digest_user->nonces);
             authDigestNonceUnlink(static_cast < digest_nonce_h * >(tmplink->data));
-            dlinkNodeDelete(tmplink);
+            delete tmplink;
             link = NULL;
         }
     }
@@ -676,7 +676,7 @@
     if (node)
         return;
 
-    node = dlinkNodeNew();
+    node = new dlink_node;
 
     dlinkAddTail(nonce, node, &digest_user->nonces);
 

=== modified file 'src/auth/digest/User.cc'
--- src/auth/digest/User.cc	2015-01-13 07:25:36 +0000
+++ src/auth/digest/User.cc	2015-09-28 06:12:58 +0000
@@ -32,7 +32,7 @@
         dlinkDelete(tmplink, &nonces);
         authDigestNoncePurge(static_cast < digest_nonce_h * >(tmplink->data));
         authDigestNonceUnlink(static_cast < digest_nonce_h * >(tmplink->data));
-        dlinkNodeDelete(tmplink);
+        delete tmplink;
     }
 }
 

=== modified file 'src/dlink.cc'
--- src/dlink.cc	2015-01-13 07:25:36 +0000
+++ src/dlink.cc	2015-09-28 06:12:58 +0000
@@ -9,23 +9,12 @@
 #include "squid.h"
 #include "dlink.h"
 
-/* dlink_node use explicit alloc()/freeOne()
- * XXX: convert to MEMPROXY_CLASS() API
- */
-#include "mem/Pool.h"
-
 dlink_list ClientActiveRequests;
 
-MemAllocator *dlink_node_pool = NULL;
-
 dlink_node *
 dlinkNodeNew()
 {
-    if (dlink_node_pool == NULL)
-        dlink_node_pool = memPoolCreate("Dlink list nodes", sizeof(dlink_node));
-
-    /* where should we call delete dlink_node_pool;dlink_node_pool = NULL; */
-    return (dlink_node *)dlink_node_pool->alloc();
+	return new dlink_node;
 }
 
 /** The node needs to be unlinked FIRST */
@@ -35,7 +24,7 @@
     if (m == NULL)
         return;
 
-    dlink_node_pool->freeOne(m);
+    delete m;
 }
 
 void

=== modified file 'src/dlink.h'
--- src/dlink.h	2015-01-13 07:25:36 +0000
+++ src/dlink.h	2015-09-28 06:12:58 +0000
@@ -9,11 +9,13 @@
 #ifndef SQUID_DLINK_H
 #define SQUID_DLINK_H
 
+#include "mem/forward.h"
+
 class dlink_node
 {
-
+	MEMPROXY_CLASS(dlink_node);
 public:
-    dlink_node() : data(NULL), prev(NULL), next(NULL) {}
+    dlink_node() : data(nullptr), prev(nullptr), next(nullptr) {}
 
     void *data;
     dlink_node *prev;
@@ -35,8 +37,6 @@
 void dlinkAddAfter(void *, dlink_node *, dlink_node *, dlink_list *);
 void dlinkAddTail(void *data, dlink_node *, dlink_list *);
 void dlinkDelete(dlink_node * m, dlink_list * list);
-void dlinkNodeDelete(dlink_node * m);
-dlink_node *dlinkNodeNew(void);
 
 #endif /* SQUID_DLINK_H */
 

=== modified file 'src/htcp.cc'
--- src/htcp.cc	2015-09-05 18:53:14 +0000
+++ src/htcp.cc	2015-09-28 06:22:19 +0000
@@ -26,6 +26,7 @@
 #include "icmp/net_db.h"
 #include "ip/tools.h"
 #include "md5.h"
+#include "mem/forward.h"
 #include "MemBuf.h"
 #include "refresh.h"
 #include "SquidConfig.h"
@@ -37,11 +38,6 @@
 #include "tools.h"
 #include "URL.h"
 
-/** htcpDetail uses explicit alloc()/freeOne()
- * XXX: convert to MEMPROXY_CLASS() API
- */
-#include "mem/Pool.h"
-
 typedef struct _Countstr Countstr;
 
 typedef struct _htcpHeader htcpHeader;
@@ -52,8 +48,6 @@
 
 typedef struct _htcpAuthHeader htcpAuthHeader;
 
-typedef struct _htcpDetail htcpDetail;
-
 struct _Countstr {
     uint16_t length;
     char *text;
@@ -163,7 +157,10 @@
     htcpDataHeader *dhdr;
 };
 
-struct _htcpDetail {
+class htcpDetail {
+	MEMPROXY_CLASS(htcpDetail);
+public:
+	htcpDetail() : resp_hdrs(nullptr), respHdrsSz(0), entity_hdrs(nullptr), entityHdrsSz(0), cache_hdrs(nullptr), cacheHdrsSz(0) {}
     char *resp_hdrs;
     size_t respHdrsSz;
 
@@ -246,7 +243,6 @@
 static cache_key queried_keys[N_QUERIED_KEYS][SQUID_MD5_DIGEST_LENGTH];
 
 static Ip::Address queried_addr[N_QUERIED_KEYS];
-static MemAllocator *htcpDetailPool = NULL;
 
 static int old_squid_format = 0;
 
@@ -261,7 +257,6 @@
 static ssize_t htcpBuildSpecifier(char *buf, size_t buflen, htcpStuff * stuff);
 static ssize_t htcpBuildTstOpData(char *buf, size_t buflen, htcpStuff * stuff);
 static void htcpFreeSpecifier(htcpSpecifier * s);
-static void htcpFreeDetail(htcpDetail * s);
 
 static void htcpHandleMsg(char *buf, int sz, Ip::Address &from);
 
@@ -614,12 +609,6 @@
     delete s;
 }
 
-static void
-htcpFreeDetail(htcpDetail * d)
-{
-    htcpDetailPool->freeOne(d);
-}
-
 /*
  * Unpack an HTCP SPECIFIER in place
  * This will overwrite any following AUTH block
@@ -737,7 +726,7 @@
 static htcpDetail *
 htcpUnpackDetail(char *buf, int sz)
 {
-    htcpDetail *d = static_cast<htcpDetail *>(htcpDetailPool->alloc());
+    htcpDetail *d = new htcpDetail;
 
     /* Find length of RESP-HDRS */
     uint16_t l = ntohs(*(uint16_t *) buf);
@@ -746,7 +735,7 @@
 
     if (l > sz) {
         debugs(31, 3, "htcpUnpackDetail: failed to unpack RESP_HDRS");
-        htcpFreeDetail(d);
+        delete d;
         return NULL;
     }
 
@@ -763,7 +752,7 @@
 
     if (l > sz) {
         debugs(31, 3, "htcpUnpackDetail: failed to unpack ENTITY_HDRS");
-        htcpFreeDetail(d);
+        delete d;
         return NULL;
     }
 
@@ -785,7 +774,7 @@
 
     if (l > sz) {
         debugs(31, 3, "htcpUnpackDetail: failed to unpack CACHE_HDRS");
-        htcpFreeDetail(d);
+        delete d;
         return NULL;
     }
 
@@ -1111,7 +1100,7 @@
     htcpReply.hdr.clean();
 
     if (d)
-        htcpFreeDetail(d);
+        delete d;
 }
 
 static void
@@ -1467,9 +1456,6 @@
         debugs(31, DBG_IMPORTANT, "Sending HTCP messages from " << htcpOutgoingConn->local);
     }
 
-    if (!htcpDetailPool) {
-        htcpDetailPool = memPoolCreate("htcpDetail", sizeof(htcpDetail));
-    }
 }
 
 static void

