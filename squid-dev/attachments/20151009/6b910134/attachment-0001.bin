diff --git a/src/clients/FtpClient.cc b/src/clients/FtpClient.cc
index 49fdd10..88b80fe 100644
--- a/src/clients/FtpClient.cc
+++ b/src/clients/FtpClient.cc
@@ -243,13 +243,25 @@ Ftp::Client::doneWithServer() const
 }
 
 void
-Ftp::Client::failed(err_type error, int xerrno)
+Ftp::Client::failed(err_type error, int xerrno,  ErrorState *err)
 {
     debugs(9, 3, "entry-null=" << (entry?entry->isEmpty():0) << ", entry=" << entry);
 
+    if(err)
+	debugs(9, 6, "error=" << err->type << ", code=" << xerrno <<
+			", status=" << err->httpStatus);
+
     const char *command, *reply;
-    const Http::StatusCode httpStatus = failedHttpStatus(error);
-    ErrorState *const ftperr = new ErrorState(error, httpStatus, fwd->request);
+    ErrorState *ftperr;
+
+    if(err) {
+	error  = err->type;
+	ftperr = err;
+    } else {
+	Http::StatusCode httpStatus = failedHttpStatus(error);
+	ftperr = new ErrorState(error, httpStatus, fwd->request);
+    }
+
     ftperr->xerrno = xerrno;
 
     ftperr->ftp.server_msg = ctrl.message;
@@ -274,10 +286,11 @@ Ftp::Client::failed(err_type error, int xerrno)
     if (reply)
         ftperr->ftp.reply = xstrdup(reply);
 
-    fwd->request->detailError(error, xerrno);
-    fwd->fail(ftperr);
-
-    closeServer(); // we failed, so no serverComplete()
+    if(!err) {
+	fwd->request->detailError(error, xerrno);
+	fwd->fail(ftperr);
+	closeServer(); // we failed, so no serverComplete()
+    }
 }
 
 Http::StatusCode
diff --git a/src/clients/FtpClient.h b/src/clients/FtpClient.h
index ef2aa98..e2dac6a 100644
--- a/src/clients/FtpClient.h
+++ b/src/clients/FtpClient.h
@@ -96,7 +96,8 @@ public:
     virtual ~Client();
 
     /// handle a fatal transaction error, closing the control connection
-    virtual void failed(err_type error = ERR_NONE, int xerrno = 0);
+    virtual void failed(err_type error = ERR_NONE, int xerrno = 0,
+			ErrorState *ftperr = NULL);		    
 
     /// read timeout handler
     virtual void timeout(const CommTimeoutCbParams &io);
diff --git a/src/clients/FtpGateway.cc b/src/clients/FtpGateway.cc
index 524eebb..6fe71b6 100644
--- a/src/clients/FtpGateway.cc
+++ b/src/clients/FtpGateway.cc
@@ -1246,7 +1246,6 @@ void
 Ftp::Gateway::loginFailed()
 {
     ErrorState *err = NULL;
-    const char *command, *reply;
 
     if ((state == SENT_USER || state == SENT_PASS) && ctrl.replycode >= 400) {
         if (ctrl.replycode == 421 || ctrl.replycode == 426) {
@@ -1263,35 +1262,11 @@ Ftp::Gateway::loginFailed()
                 err = new ErrorState(ERR_FTP_FORBIDDEN, Http::scUnauthorized, fwd->request);
         }
     }
+    
+    if (!err) return;
 
+    failed(ERR_NONE, ctrl.replycode, err);
     // any other problems are general falures.
-    if (!err) {
-        ftpFail(this);
-        return;
-    }
-
-    err->ftp.server_msg = ctrl.message;
-
-    ctrl.message = NULL;
-
-    if (old_request)
-        command = old_request;
-    else
-        command = ctrl.last_command;
-
-    if (command && strncmp(command, "PASS", 4) == 0)
-        command = "PASS <yourpassword>";
-
-    if (old_reply)
-        reply = old_reply;
-    else
-        reply = ctrl.last_reply;
-
-    if (command)
-        err->ftp.request = xstrdup(command);
-
-    if (reply)
-        err->ftp.reply = xstrdup(reply);
 
     HttpReply *newrep = err->BuildHttpReply();
     delete err;
@@ -2438,7 +2413,11 @@ Ftp::Gateway::hackShortcut(FTPSM * nextState)
 static void
 ftpFail(Ftp::Gateway *ftpState)
 {
-    debugs(9, 6, HERE << "flags(" <<
+    int code = ftpState->ctrl.replycode;
+    err_type  error_code = ERR_NONE;
+
+    debugs(9, 6, HERE << "state " << ftpState->state <<
+	   " reply code " << code << "flags(" <<
            (ftpState->flags.isdir?"IS_DIR,":"") <<
            (ftpState->flags.try_slash_hack?"TRY_SLASH_HACK":"") << "), " <<
            "mdtm=" << ftpState->mdtm << ", size=" << ftpState->theSize <<
@@ -2464,8 +2443,19 @@ ftpFail(Ftp::Gateway *ftpState)
         }
     }
 
-    ftpState->failed(ERR_NONE, 0);
-    /* failed() closes ctrl.conn and frees this */
+    Http::StatusCode sc = ftpState->failedHttpStatus(error_code);
+
+    ErrorState *ftperr = new ErrorState(error_code, sc, ftpState->fwd->request);
+
+    ftpState->failed(error_code, code, ftperr);
+
+    if(ftperr) {
+	ftperr->detailError(code);
+	HttpReply *newrep = ftperr->BuildHttpReply();
+	delete ftperr;
+	ftpState->entry->replaceHttpReply(newrep);
+        ftpSendQuit(ftpState);
+    }
 }
 
 Http::StatusCode
