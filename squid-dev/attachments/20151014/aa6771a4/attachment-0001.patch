1xx response terminates Squid-to-server connection, breaking many PUTs.

Since trunk revision 13688.1.6 (Use Http1::ResponseParser to process
HTTP server responses), HttpStateData::processReplyHeader() sets
flags.headers_parsed after successfully parsing a 1xx control message.
The rest of the code interprets that flag as "parsed the final response"
and throws a !flags.headers_parsed exception because we have not parsed
the final (non-1xx) response yet. The exception kills virtually any PUT
or similar transaction that triggers an HTTP 100 (Continue) response
from the origin server.

This fix restores the original position of the flags.headers_parsed
update.

=== modified file 'src/http.cc'
--- src/http.cc	2015-04-09 07:08:47 +0000
+++ src/http.cc	2015-10-14 20:18:39 +0000
@@ -712,45 +712,44 @@ HttpStateData::processReplyHeader()
         inBuf = hp->remaining();
 
         if (hp->needsMoreData()) {
             if (eof) { // no more data coming
                 /* Bug 2879: Replies may terminate with \r\n then EOF instead of \r\n\r\n.
                  * We also may receive truncated responses.
                  * Ensure here that we have at minimum two \r\n when EOF is seen.
                  */
                 inBuf.append("\r\n\r\n", 4);
                 // retry the parse
                 parsedOk = hp->parse(inBuf);
                 // sync the buffers after parsing.
                 inBuf = hp->remaining();
             } else {
                 debugs(33, 5, "Incomplete response, waiting for end of response headers");
                 ctx_exit(ctx);
                 return;
             }
         }
 
-        flags.headers_parsed = true;
-
         if (!parsedOk) {
             // unrecoverable parsing error
             debugs(11, 3, "Non-HTTP-compliant header:\n---------\n" << inBuf << "\n----------");
+            flags.headers_parsed = true;
             HttpReply *newrep = new HttpReply;
             newrep->sline.set(Http::ProtocolVersion(), hp->messageStatus());
             HttpReply *vrep = setVirginReply(newrep);
             entry->replaceHttpReply(vrep);
             // XXX: close the server connection ?
             ctx_exit(ctx);
             return;
         }
     }
 
     /* We know the whole response is in parser now */
     debugs(11, 2, "HTTP Server " << serverConnection);
     debugs(11, 2, "HTTP Server RESPONSE:\n---------\n" <<
            hp->messageProtocol() << " " << hp->messageStatus() << " " << hp->reasonPhrase() << "\n" <<
            hp->mimeHeader() <<
            "----------");
 
     // reset payload tracking to begin after message headers
     payloadSeen = inBuf.length();
 

