=== modified file 'src/cf.data.pre'
--- src/cf.data.pre	2015-10-11 14:08:47 +0000
+++ src/cf.data.pre	2015-10-22 12:59:54 +0000
@@ -3168,6 +3168,16 @@
 			clients. Negotiate often assumes end-to-end authentication
 			and a single-client. Which is not strictly true here.
 	
+	login=NEGOTIATE:principal_name:NOKEYTAB
+			If this is a personal/workgroup proxy and your parent
+			requires a secure proxy authentication. 
+			The principal principal_name from the default ticket
+			cache or other means provided by GSSAPI will be used.
+	
+			WARNING: The connection may transmit requests from multiple
+			clients. Negotiate often assumes end-to-end authentication
+			and a single-client. Which is not strictly true here.
+	
 	connection-auth=on|off
 			Tell Squid that this peer does or not support Microsoft
 			connection oriented authentication, and any such

=== modified file 'src/http.cc'
--- src/http.cc	2015-10-15 02:52:58 +0000
+++ src/http.cc	2015-10-22 13:01:18 +0000
@@ -1721,14 +1721,33 @@
 #if HAVE_AUTH_MODULE_NEGOTIATE && HAVE_KRB5 && HAVE_GSSAPI
     if (strncmp(request->peer_login, "NEGOTIATE",strlen("NEGOTIATE")) == 0) {
         char *Token=NULL;
-        char *PrincipalName=NULL,*p;
+        char *PrincipalName=NULL,*p,*pOpt;
+        int negotiate_flags = 0;
+        size_t PrincipalNameLen;
+
         if ((p=strchr(request->peer_login,':')) != NULL ) {
-            PrincipalName=++p;
+            ++p;
+            if ((pOpt = strchr(p, ':')) != NULL) {
+                ++pOpt;
+                if (strcmp(pOpt, "NOKEYTAB") == 0)
+                    negotiate_flags |= PEER_PROXY_NEGOTIATE_NOKEYTAB;
+                PrincipalNameLen = (size_t) (pOpt - p - 1);
+            } else {
+                PrincipalNameLen = strlen(p);
+            }
+
+            if (PrincipalNameLen != 0) {
+                PrincipalName = (char*)xmalloc(PrincipalNameLen + 1);
+                strncpy(PrincipalName, p, PrincipalNameLen);
+                PrincipalName[PrincipalNameLen] = '\0';
+            }
         }
-        Token = peer_proxy_negotiate_auth(PrincipalName, request->peer_host);
+        Token = peer_proxy_negotiate_auth(PrincipalName, request->peer_host, negotiate_flags);
         if (Token) {
             httpHeaderPutStrf(hdr_out, header, "Negotiate %s",Token);
         }
+        if (PrincipalName != NULL)
+            xfree(PrincipalName);
         return;
     }
 #endif /* HAVE_KRB5 && HAVE_GSSAPI */

=== modified file 'src/peer_proxy_negotiate_auth.cc'
--- src/peer_proxy_negotiate_auth.cc	2015-04-21 04:50:22 +0000
+++ src/peer_proxy_negotiate_auth.cc	2015-10-22 12:47:32 +0000
@@ -499,7 +499,7 @@
  * peer_proxy_negotiate_auth gets a GSSAPI token for principal_name
  * and base64 encodes it.
  */
-char *peer_proxy_negotiate_auth(char *principal_name, char *proxy) {
+char *peer_proxy_negotiate_auth(char *principal_name, char *proxy, int flags) {
     int rc = 0;
     OM_uint32 major_status, minor_status;
     gss_ctx_id_t gss_context = GSS_C_NO_CONTEXT;
@@ -517,16 +517,18 @@
         return NULL;
     }
 
-    if (principal_name)
-        debugs(11, 5,
-               HERE << "Creating credential cache for " << principal_name);
-    else
-        debugs(11, 5, HERE << "Creating credential cache");
-    rc = krb5_create_cache(NULL, principal_name);
-    if (rc) {
-        debugs(11, 5, HERE << "Error : Failed to create Kerberos cache");
-        krb5_cleanup();
-        return NULL;
+    if (!(flags & PEER_PROXY_NEGOTIATE_NOKEYTAB)) {
+        if (principal_name)
+            debugs(11, 5,
+                   HERE << "Creating credential cache for " << principal_name);
+        else
+            debugs(11, 5, HERE << "Creating credential cache");
+        rc = krb5_create_cache(NULL, principal_name);
+        if (rc) {
+            debugs(11, 5, HERE << "Error : Failed to create Kerberos cache");
+            krb5_cleanup();
+            return NULL;
+        }
     }
 
     service.value = (void *) xmalloc(strlen("HTTP") + strlen(proxy) + 2);

=== modified file 'src/peer_proxy_negotiate_auth.h'
--- src/peer_proxy_negotiate_auth.h	2015-01-13 07:25:36 +0000
+++ src/peer_proxy_negotiate_auth.h	2015-10-22 12:10:42 +0000
@@ -10,8 +10,11 @@
 #define SQUID_PEER_PROXY_NEGOTIATE_AUTH_H_
 
 #if HAVE_AUTH_MODULE_NEGOTIATE && HAVE_KRB5 && HAVE_GSSAPI
+
+#define PEER_PROXY_NEGOTIATE_NOKEYTAB	1
+
 /* upstream proxy authentication */
-SQUIDCEXTERN char *peer_proxy_negotiate_auth(char *principal_name, char *proxy);
+SQUIDCEXTERN char *peer_proxy_negotiate_auth(char *principal_name, char *proxy, int flags);
 #endif
 
 #endif /* SQUID_PEER_PROXY_NEGOTIATE_AUTH_H_ */

