--- src/ssl/cert_validate_message.cc	2015-12-11 13:59:25.740059535 -0200
+++ src/ssl/cert_validate_message.cc	2015-12-24 11:11:31.771467927 -0200
@@ -19,6 +19,7 @@ Ssl::CertValidationMsg::composeRequest(C
 {
     body.clear();
     body += Ssl::CertValidationMsg::param_host + "=" + vcert.domainName;
+    body += "\n" + Ssl::CertValidationMsg::param_source + "=" + vcert.source;
     STACK_OF(X509) *peerCerts = static_cast<STACK_OF(X509) *>(SSL_get_ex_data(vcert.ssl, ssl_ex_index_ssl_cert_chain));
 
     if (const char *sslVersion = SSL_get_version(vcert.ssl))
@@ -239,4 +240,5 @@ const std::string Ssl::CertValidationMsg
 const std::string Ssl::CertValidationMsg::param_error_cert("error_cert_");
 const std::string Ssl::CertValidationMsg::param_proto_version("proto_version");
 const std::string Ssl::CertValidationMsg::param_cipher("cipher");
+const std::string Ssl::CertValidationMsg::param_source("source");
 
--- src/ssl/cert_validate_message.h	2015-12-24 10:45:53.019569055 -0200
+++ src/ssl/cert_validate_message.h	2015-12-24 11:12:35.931463711 -0200
@@ -29,6 +29,7 @@ public:
     SSL *ssl;
     CertErrors *errors; ///< The list of errors detected
     std::string domainName; ///< The server name
+    std::string source; ///< The source user or client address
     CertValidationRequest() : ssl(NULL), errors(NULL) {}
 };
 
@@ -120,6 +121,8 @@ public:
     static const std::string param_proto_version;
     /// Parameter name for SSL cipher
     static const std::string param_cipher;
+    /// Parameter name for source user or source ip
+    static const std::string param_source;
 };
 
 }//namespace Ssl
--- src/ssl/PeerConnector.cc	2015-12-24 10:45:53.018569055 -0200
+++ src/ssl/PeerConnector.cc	2015-12-24 11:08:39.339479260 -0200
@@ -311,6 +311,7 @@ Ssl::PeerConnector::sslFinalized()
 {
     const int fd = serverConnection()->fd;
     SSL *ssl = fd_table[fd].ssl;
+    LOCAL_ARRAY(char, ntoabuf, MAX_IPSTRLEN);
 
     // In the case the session is resuming, the certificates does not exist and
     // we did not do any cert validation
@@ -335,6 +336,11 @@ Ssl::PeerConnector::sslFinalized()
         // Ssl::CertValidationHelper::submit method.
         validationRequest.ssl = ssl;
         validationRequest.domainName = request->GetHost();
+        // Add the source user or ip address to the validation request protocol
+        if (request->auth_user_request != NULL)
+            validationRequest.source = request->auth_user_request->username();
+        else
+            validationRequest.source = request->client_addr.toStr(ntoabuf, MAX_IPSTRLEN);
         if (Ssl::CertErrors *errs = static_cast<Ssl::CertErrors *>(SSL_get_ex_data(ssl, ssl_ex_index_ssl_errors)))
             // validationRequest disappears on return so no need to cbdataReference
             validationRequest.errors = errs;
