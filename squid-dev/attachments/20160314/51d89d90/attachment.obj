# Bazaar merge directive format 2 (Bazaar 0.90)
# revision_id: kinkie@squid-cache.org-20160314195111-v95a45yidode67ay
# target_branch: file:///home/kinkie/squid/workspace/trunk/
# testament_sha1: 27fd6ec9196ba608c1d566ec3cb47cc8e61395f5
# timestamp: 2016-03-14 20:52:31 +0100
# base_revision_id: rousskov@measurement-factory.com-20160313044719-\
#   89ct0i8efw8t5sxh
# 
# Begin patch
=== modified file 'src/Makefile.am'
--- src/Makefile.am	2016-02-29 10:33:39 +0000
+++ src/Makefile.am	2016-03-09 10:54:45 +0000
@@ -931,7 +931,7 @@
 #	X.h \
 #	X.cc
 #nodist_tests_testX_SOURCES=\
-#   tests/stubs_as_needed.cc\
+#	 tests/stubs_as_needed.cc\
 #	$(TESTSOURCES)
 #tests_testX_LDFLAGS = $(LIBADD_DL)
 #tests_testX_LDADD=\
@@ -1120,7 +1120,6 @@
 	tests/stub_libcomm.cc \
 	tests/stub_libdiskio.cc \
 	tests/stub_libformat.cc \
-	tests/stub_libmem.cc \
 	tests/stub_libsslsquid.cc \
 	tests/stub_MemObject.cc \
 	tests/stub_MemStore.cc \
@@ -1166,6 +1165,7 @@
 	ipc/libipc.la \
 	mgr/libmgr.la \
 	sbuf/libsbuf.la \
+	mem/libmem.la \
 	$(top_builddir)/lib/libmisccontainers.la \
 	$(top_builddir)/lib/libmiscencoding.la \
 	$(top_builddir)/lib/libmiscutil.la \
@@ -1749,7 +1749,6 @@
 	SquidList.cc \
 	MasterXaction.cc \
 	MasterXaction.h \
-	tests/stub_libmem.cc \
 	mem_node.cc \
 	MemBuf.cc \
 	MemObject.cc \
@@ -1878,6 +1877,7 @@
 	mgr/libmgr.la \
 	store/libstore.la \
 	sbuf/libsbuf.la \
+	mem/libmem.la \
 	$(SNMP_LIBS) \
 	$(NETTLELIB) \
 	$(REGEXLIB) \
@@ -1990,7 +1990,6 @@
 	MasterXaction.h \
 	MemBuf.cc \
 	MemObject.cc \
-	tests/stub_libmem.cc \
 	mem_node.cc \
 	mime.h \
 	mime.cc \
@@ -2115,6 +2114,7 @@
 	$(top_builddir)/lib/libmiscutil.la \
 	ipc/libipc.la \
 	mgr/libmgr.la \
+	mem/libmem.la \
 	sbuf/libsbuf.la \
 	store/libstore.la \
 	$(SNMP_LIBS) \
@@ -2225,7 +2225,6 @@
 	MasterXaction.h \
 	MemBuf.cc \
 	MemObject.cc \
-	tests/stub_libmem.cc \
 	mem_node.cc \
 	mime.h \
 	mime.cc \
@@ -2347,6 +2346,7 @@
 	dns/libdns.la \
 	base/libbase.la \
 	mgr/libmgr.la \
+	mem/libmem.la \
 	sbuf/libsbuf.la \
 	store/libstore.la \
 	$(SNMP_LIBS) \
@@ -2372,8 +2372,10 @@
 	SquidString.h \
 	String.cc \
 	$(TESTSOURCES) \
+	tests/stub_cache_manager.cc \
 	tests/stub_debug.cc \
-	tests/stub_libmem.cc \
+	tests/stub_event.cc \
+	tests/stub_HelperChildConfig.cc \
 	tests/stub_time.cc \
 	tests/stub_SBufDetailedStats.cc
 tests_testTokenizer_LDFLAGS = $(LIBADD_DL)
@@ -2381,6 +2383,10 @@
 	parser/libparser.la \
 	base/libbase.la \
 	sbuf/libsbuf.la \
+	mem/libmem.la \
+	libsquid.la \
+	ip/libip.la \
+	$(top_builddir)/lib/libmisccontainers.la \
 	$(top_builddir)/lib/libmiscutil.la \
 	$(COMPAT_LIB) \
 	$(SQUID_CPPUNIT_LA) \
@@ -2404,7 +2410,6 @@
 	tests/stub_debug.cc \
 	tests/stub_event.cc \
 	tests/stub_HelperChildConfig.cc \
-	tests/stub_libmem.cc \
 	tests/stub_libsecurity.cc \
 	tests/stub_stmem.cc \
 	tests/stub_store.cc \
@@ -2423,9 +2428,10 @@
 	parser/libparser.la \
 	anyp/libanyp.la \
 	SquidConfig.o \
+	sbuf/libsbuf.la \
+	mem/libmem.la \
 	base/libbase.la \
 	ip/libip.la \
-	sbuf/libsbuf.la \
 	$(top_builddir)/lib/libmiscutil.la \
 	$(SQUID_CPPUNIT_LIBS) \
 	$(SQUID_CPPUNIT_LA) \
@@ -2440,7 +2446,6 @@
 	RequestFlags.h \
 	RequestFlags.cc \
 	HttpRequest.cc \
-	tests/stub_libmem.cc \
 	String.cc \
 	tests/testHttpRequest.h \
 	tests/testHttpRequest.cc \
@@ -2655,6 +2660,7 @@
 	log/liblog.la \
 	format/libformat.la \
 	store/libstore.la \
+	mem/libmem.la \
 	sbuf/libsbuf.la \
 	$(REPL_OBJS) \
 	$(ADAPTATION_LIBS) \
@@ -2895,7 +2901,6 @@
 	tests/stub_cbdata.cc \
 	tests/stub_debug.cc \
 	tests/stub_HelperChildConfig.cc \
-	tests/stub_libmem.cc \
 	tools.h \
 	tests/stub_tools.cc \
 	tests/stub_time.cc \
@@ -2905,6 +2910,7 @@
 	$(TESTSOURCES)
 tests_testString_LDADD = \
 	base/libbase.la \
+	mem/libmem.la \
 	libsquid.la \
 	ip/libip.la \
 	sbuf/libsbuf.la \
@@ -3262,9 +3268,9 @@
 	$(SSL_LIBS) \
 	ipc/libipc.la \
 	base/libbase.la \
-	mem/libmem.la \
 	store/libstore.la \
 	sbuf/libsbuf.la \
+	mem/libmem.la \
 	$(top_builddir)/lib/libmisccontainers.la \
 	$(top_builddir)/lib/libmiscencoding.la \
 	$(top_builddir)/lib/libmiscutil.la \
@@ -3448,7 +3454,6 @@
 	tests/stub_libauth_acls.cc \
 	tests/stub_libauth.cc \
 	tests/stub_libdiskio.cc \
-	tests/stub_libmem.cc \
 	tests/stub_libsecurity.cc \
 	tests/stub_main_cc.cc \
 	tests/stub_ipc_Forwarder.cc \
@@ -3502,6 +3507,7 @@
 	log/liblog.la \
 	format/libformat.la \
 	store/libstore.la \
+	mem/libmem.la \
 	sbuf/libsbuf.la \
 	$(REGEXLIB) \
 	$(REPL_OBJS) \
@@ -3525,16 +3531,22 @@
 	tests/testSBuf.cc \
 	tests/SBufFindTest.h \
 	tests/SBufFindTest.cc \
+	tests/stub_cache_manager.cc \
+	tests/stub_HelperChildConfig.cc \
 	tests/stub_SBufDetailedStats.cc \
 	tests/stub_time.cc \
 	tests/stub_debug.cc \
-	tests/stub_fatal.cc \
-	tests/stub_libmem.cc
+	tests/stub_fatal.cc
 nodist_tests_testSBuf_SOURCES=$(TESTSOURCES)
 tests_testSBuf_LDFLAGS = $(LIBADD_DL)
 tests_testSBuf_LDADD= \
 	sbuf/libsbuf.la \
+	mem/libmem.la \
+	libsquid.la \
+	ip/libip.la \
 	base/libbase.la \
+	$(top_builddir)/lib/libmisccontainers.la \
+	$(top_builddir)/lib/libmiscutil.la \
 	$(SQUID_CPPUNIT_LIBS) \
 	$(COMPAT_LIB) \
 	$(XTRA_LIBS) \
@@ -3543,16 +3555,21 @@
 tests_testSBufList_SOURCES= \
 	tests/testSBufList.h \
 	tests/testSBufList.cc \
+	tests/stub_HelperChildConfig.cc \
 	tests/stub_SBufDetailedStats.cc \
 	tests/stub_time.cc \
 	tests/stub_debug.cc \
-	tests/stub_fatal.cc \
-	tests/stub_libmem.cc
+	tests/stub_fatal.cc
 nodist_tests_testSBufList_SOURCES=$(TESTSOURCES)
 tests_testSBufList_LDFLAGS = $(LIBADD_DL)
 tests_testSBufList_LDADD=\
 	sbuf/libsbuf.la \
+	mem/libmem.la \
+	libsquid.la \
+	ip/libip.la \
 	base/libbase.la \
+	$(top_builddir)/lib/libmisccontainers.la \
+	$(top_builddir)/lib/libmiscutil.la \
 	$(SQUID_CPPUNIT_LIBS) \
 	$(COMPAT_LIB) \
 	$(XTRA_LIBS) \
@@ -3571,9 +3588,9 @@
 	tests/testConfigParser.h \
 	cache_cf.h \
 	tests/stub_cache_cf.cc \
+	tests/stub_cache_manager.cc \
 	tests/stub_cbdata.cc \
 	tests/stub_debug.cc \
-	tests/stub_libmem.cc \
 	tests/stub_HelperChildConfig.cc \
 	tools.h \
 	tests/stub_tools.cc \
@@ -3582,6 +3599,7 @@
 nodist_tests_testConfigParser_SOURCES = \
 	$(TESTSOURCES)
 tests_testConfigParser_LDADD = \
+	mem/libmem.la \
 	libsquid.la \
 	ip/libip.la \
 	sbuf/libsbuf.la \
@@ -3608,8 +3626,8 @@
 	tests/stub_comm.cc \
 	tests/stub_debug.cc \
 	tests/stub_DelayId.cc \
+	tests/stub_event.cc \
 	tests/stub_HelperChildConfig.cc \
-	tests/stub_libmem.cc \
 	tests/stub_MemObject.cc \
 	mime.h \
 	tests/stub_mime.cc \
@@ -3627,6 +3645,9 @@
 	$(TESTSOURCES)
 tests_testStatHist_LDFLAGS = $(LIBADD_DL)
 tests_testStatHist_LDADD = \
+	mem/libmem.la \
+	libsquid.la \
+	ip/libip.la \
 	sbuf/libsbuf.la \
 	base/libbase.la \
 	$(top_builddir)/lib/libmiscutil.la \
@@ -3639,14 +3660,18 @@
 	tests/testLookupTable.h \
 	tests/testLookupTable.cc \
 	tests/stub_debug.cc \
-	tests/stub_libmem.cc \
+	tests/stub_time.cc \
 	tests/stub_SBufDetailedStats.cc \
 	base/LookupTable.h
 nodist_tests_testLookupTable_SOURCES = $(TESTSOURCES)
 tests_testLookupTable_LDFLAGS = $(LIBADD_DL)
 tests_testLookupTable_LDADD = \
+	mem/libmem.la \
+	libsquid.la \
+	ip/libip.la \
 	sbuf/libsbuf.la \
 	base/libbase.la \
+	$(top_builddir)/lib/libmiscutil.la \
 	$(SQUID_CPPUNIT_LIBS) \
 	$(COMPAT_LIB) \
 	$(XTRA_LIBS) \

=== modified file 'src/sbuf/MemBlob.cc'
--- src/sbuf/MemBlob.cc	2016-03-01 10:25:13 +0000
+++ src/sbuf/MemBlob.cc	2016-03-14 19:51:11 +0000
@@ -9,12 +9,14 @@
 #include "squid.h"
 #include "base/TextException.h"
 #include "Debug.h"
+#include "mem/Pool.h"
 #include "sbuf/DetailedStats.h"
 #include "sbuf/MemBlob.h"
 
 #include <iostream>
 
 MemBlobStats MemBlob::Stats;
+std::vector<std::pair<size_t,MemAllocator*> > MemBlob::Pools;
 InstanceIdDefinitions(MemBlob, "blob");
 
 /* MemBlobStats */
@@ -46,12 +48,23 @@
     return os;
 }
 
-/* MemBlob */
+/* pool labels and sizes. These MUST be in ascending order by size */
+static const struct {
+	const char *name;
+	size_t size;
+}
+MemBlobPoolsAttrs[] = {
+		{ "MemBlob: 32 bytes", 32 } ,
+		{ "MemBlob: 128 bytes", 128 } ,
+		{ "MemBlob: 512 bytes", 512 } ,
+		{ "MemBlob: 4096 bytes", 4096 } ,
+		{ nullptr, 0 }
+};
 
 MemBlob::MemBlob(const MemBlob::size_type reserveSize) :
     mem(NULL), capacity(0), size(0) // will be set by memAlloc
 {
-    debugs(MEMBLOB_DEBUGSECTION,9, HERE << "constructed, this="
+    debugs(MEMBLOB_DEBUGSECTION, 8, "constructed, this="
            << static_cast<void*>(this) << " id=" << id
            << " reserveSize=" << reserveSize);
     memAlloc(reserveSize);
@@ -60,7 +73,7 @@
 MemBlob::MemBlob(const char *buffer, const MemBlob::size_type bufSize) :
     mem(NULL), capacity(0), size(0) // will be set by memAlloc
 {
-    debugs(MEMBLOB_DEBUGSECTION,9, HERE << "constructed, this="
+    debugs(MEMBLOB_DEBUGSECTION, 8, "constructed, this="
            << static_cast<void*>(this) << " id=" << id
            << " buffer=" << static_cast<const void*>(buffer)
            << " bufSize=" << bufSize);
@@ -70,13 +83,24 @@
 
 MemBlob::~MemBlob()
 {
-    if (mem || capacity)
-        memFreeString(capacity,mem);
+    if (mem || capacity) {
+        for ( const auto &p : Pools) {
+        	if (capacity == p.first) {
+        		p.second->freeOne(mem);
+        		mem = nullptr;
+        		break;
+        	}
+        }
+        if (mem) {
+        	xfree(mem);
+        	mem = nullptr;
+        }
+    }
     Stats.liveBytes -= capacity;
     --Stats.live;
     recordMemBlobSizeAtDestruct(capacity);
 
-    debugs(MEMBLOB_DEBUGSECTION,9, HERE << "destructed, this="
+    debugs(MEMBLOB_DEBUGSECTION, 8, "destructed, this="
            << static_cast<void*>(this) << " id=" << id
            << " capacity=" << capacity
            << " size=" << size);
@@ -88,13 +112,33 @@
 void
 MemBlob::memAlloc(const size_type minSize)
 {
-    size_t actualAlloc = minSize;
+    if (!Pools.size()) { // initialize pools if not yet done
+    	for (auto p = MemBlobPoolsAttrs; p->name; ++p) {
+    	    debugs(MEMBLOB_DEBUGSECTION, 8, "creating pool " << p->name <<
+    	        "size " << p->size);
+    		auto pool = memPoolCreate(p->name,p->size);
+    		pool->zeroBlocks(false);
+    		Pools.push_back(std::make_pair(p->size, pool));
+    	}
+   }
 
     Must(!mem);
-    mem = static_cast<char*>(memAllocString(actualAlloc, &actualAlloc));
+    for ( const auto &p : Pools) {
+    	if (minSize <= p.first) {
+    		debugs(MEMBLOB_DEBUGSECTION, 8, "selected pool of capacity " << p.first);
+    		mem = static_cast<char *>(p.second->alloc());
+            capacity = p.first;
+            break;
+    	}
+    }
+    if (!mem) {
+    	//TODO: round on 4kb boundary?
+        debugs(MEMBLOB_DEBUGSECTION, 8, "no pool found.");
+    	mem = static_cast<char *>(xmalloc(minSize));
+    	capacity = minSize;
+    }
     Must(mem);
 
-    capacity = actualAlloc;
     size = 0;
     debugs(MEMBLOB_DEBUGSECTION, 8,
            id << " memAlloc: requested=" << minSize <<
@@ -140,4 +184,3 @@
        << ",refs:" << LockCount() << "; ";
     return os;
 }
-

=== modified file 'src/sbuf/MemBlob.h'
--- src/sbuf/MemBlob.h	2016-02-23 08:51:22 +0000
+++ src/sbuf/MemBlob.h	2016-03-08 06:09:28 +0000
@@ -106,6 +106,7 @@
 
 private:
     static MemBlobStats Stats; ///< class-wide statistics
+    static std::vector<std::pair<size_t,MemAllocator*> > Pools;
 
     void memAlloc(const size_type memSize);
 

# Begin bundle
IyBCYXphYXIgcmV2aXNpb24gYnVuZGxlIHY0CiMKQlpoOTFBWSZTWXHV6QwAEAHfgERwfX/////n
3g6////+YBV8B32GrtadR7xsa3sD3sCgACgUBTXnfHp7bV98vPr0V6PsfbK4n10M2V04q7YadhJI
QBMJpoelNMnpCDR6o9qmQDIAGgM0mgSSACaGiaRpEmE9NJpk9RoAGgAAAASp6jTTREp6mhtIaeka
ADRoDQAAAAAEhJMgSATFT3ojRJ5E3qnoRk00ZqDIZA9QNMEUoNJqGnqHqmm0n6o9AT9SekGmnppM
mgeo0AAMQKkkIBMEaammmNKep5DTQT1EemRpHqAGgA9TIEhkY23kgZnBS6bjlnQiqdUgINCqIKj5
Q62fe+w+hdtoI/JcLBTSy8JTppd3cd2Klre8l1aN6bQJYGC9rBsRXm5MfhgJnV8TL+25vu+A4Hub
+0oPvPcS/qOkj9+ddOtr83OSHX+a1fzn56Lo36s6lnJcbcjqm7Sko11MC/Ty0bySrP4cSet6edII
0uh3YN5tGHXRMnq4wVmU0myMQ3qMQoIvni76Ms7l93fXO0mM7XZpxa06zqFilwIZ0xFq0RQxhUHd
GFhYAx5qZKvqs2nR1kDJBwqCqhb8+TfyDoLqcT/QfcN8GsqXDgln50HoQdaBgNtjYgbQNpNpA22h
Nrb3f4AF2Hk7ezy5f701XQwajQ+P6OGXdVSjTTXSxHkzZq+mKeMPusZOprra+l45wtFybUat2hjB
GxjszesSt0sssPN53rDkeaHRnidVCdXV8861d0sIjORe17uYqTSDCmmynGox5uKPXOZOPZxm1bX0
Zntta+Jny566Ws073araLTL1ijRFmyvFIkUnkCDNMmoKsEmhpJHywUzJvaGvSmqSfll7Rhj2OzPT
vSo/1v7k+fWDpv6Eu5g0xNptNttnj7mefzM+c/vlb1dpx8/obr1/htsrLctcgyBvCUCGzXg4m93o
6R80HYbtfQQ6kDVYeSQp0D5WxLs9ZQJGjOQWc8eOppz1ri3kAuNqiWg2qWdG++cQeGvGxX7LbnUW
NzSH9/dmZ5nFzsym9iQ5SOmPjdSnByRGhloCUgMMtAGe5x6G9NdU+qrTDyy3X91gGAmni1X6sufX
khxyKqkiqiqivfY+51JeOGFQnjMnjPd28vN9YnRnOfDc9zO1cOFbdegT5+1xKpzlsxqPlSfprUl+
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
6vSGAA==
