# Bazaar merge directive format 2 (Bazaar 0.90)
# revision_id: kinkie@squid-cache.org-20160315123845-v70ullpj0590vg9s
# target_branch: ../trunk
# testament_sha1: c779b1cd4ea57fffa8fa7307e0b51cc4da749500
# timestamp: 2016-03-15 13:57:11 +0100
# base_revision_id: squid3@treenet.co.nz-20160315062249-\
#   v5guw5poq6l86et1
# 
# Begin patch
=== modified file 'src/Makefile.am'
--- src/Makefile.am	2016-02-29 10:33:39 +0000
+++ src/Makefile.am	2016-03-15 09:42:27 +0000
@@ -3683,6 +3683,30 @@
 	$(XTRA_LIBS)
 tests_testYesNoNone_LDFLAGS = $(LIBADD_DL)
 
+check_PROGRAMS += tests/testRFC3986
+tests_testRFC3986_SOURCES= \
+	tests/stub_debug.cc \
+	tests/stub_libmem.cc \
+	tests/stub_SBufDetailedStats.cc \
+	tests/testRFC3986.h \
+	tests/testRFC3986.cc
+nodist_tests_testRFC3986_SOURCES= \
+	String.cc \
+	$(TESTSOURCES)
+tests_testRFC3986_LDADD= \
+	mem/libmem.la \
+	sbuf/libsbuf.la \
+	anyp/libanyp.la \
+	base/libbase.la \
+	$(top_builddir)/lib/libmisccontainers.la \
+	$(top_builddir)/lib/libmiscencoding.la \
+	$(top_builddir)/lib/libmiscutil.la \
+	$(COMPAT_LIB) \
+	$(SQUID_CPPUNIT_LA) \
+	$(SQUID_CPPUNIT_LIBS) \
+	$(XTRA_LIBS)
+tests_testRFC3986_LDFLAGS= $(LIBADD_DL)
+
 TESTS += testHeaders
 
 ## Special Universal .h dependency test script

=== modified file 'src/anyp/Makefile.am'
--- src/anyp/Makefile.am	2016-01-01 00:12:18 +0000
+++ src/anyp/Makefile.am	2016-02-07 17:55:22 +0000
@@ -17,6 +17,8 @@
 	ProtocolType.cc \
 	ProtocolType.h \
 	ProtocolVersion.h \
+	Rfc3986.cc \
+	Rfc3986.h \
 	TrafficMode.h \
 	UriScheme.cc \
 	UriScheme.h

=== added file 'src/anyp/Rfc3986.cc'
--- src/anyp/Rfc3986.cc	1970-01-01 00:00:00 +0000
+++ src/anyp/Rfc3986.cc	2016-03-15 12:38:45 +0000
@@ -0,0 +1,170 @@
+/*
+ * Copyright (C) 1996-2016 The Squid Software Foundation and contributors
+ *
+ * Squid software is distributed under GPLv2+ license and includes
+ * contributions from numerous individuals and organizations.
+ * Please see the COPYING and CONTRIBUTORS files for details.
+ */
+
+#include "squid.h"
+#include "anyp/Rfc3986.h"
+#include "sbuf/SBuf.h"
+
+const CharacterSet
+Rfc1738::Unsafe("rfc1738:unsafe", "<>\"# %{}|\\^~[]`'"),
+Rfc1738::Ctrls("rfc1738:ctrls", {{0x00, 0x1f}, {0x7f,0xff}}),
+Rfc1738::Reserved("rfc1738:reserved", ";/?:@=&"),
+Rfc1738::UnsafeAndCtrls = Rfc1738::Unsafe + Rfc1738::Ctrls,
+         Rfc1738::Unescaped = (Rfc1738::UnsafeAndCtrls - CharacterSet(nullptr,"%") ).rename("rfc1738:unescaped")
+                              ;
+
+const CharacterSet
+Rfc3986::GenDelims("rfc3986:gen-delims",":/?#[]@"),
+        Rfc3986::SubDelims("rfc3986:sub-delims","!$&'()*+,;="),
+        Rfc3986::Reserved = (Rfc3986::GenDelims + Rfc3986::SubDelims).rename("rfc3986:reserved"),
+                 Rfc3986::Unreserved = CharacterSet("rfc3986:unreserved","-._~") +
+                                       CharacterSet::ALPHA + CharacterSet::DIGIT,
+                                       Rfc3986::All = (Rfc1738::UnsafeAndCtrls + Rfc3986::Reserved).rename("rfc3986:all")
+                                               ;
+
+const char *Rfc1738::toHexTable[256] = {
+    "00", "01", "02", "03", "04", "05", "06", "07",
+    "08", "09", "0A", "0B", "0C", "0D", "0E", "0F",
+    "10", "11", "12", "13", "14", "15", "16", "17",
+    "18", "19", "1A", "1B", "1C", "1D", "1E", "1F",
+    "20", "21", "22", "23", "24", "25", "26", "27",
+    "28", "29", "2A", "2B", "2C", "2D", "2E", "2F",
+    "30", "31", "32", "33", "34", "35", "36", "37",
+    "38", "39", "3A", "3B", "3C", "3D", "3E", "3F",
+    "40", "41", "42", "43", "44", "45", "46", "47",
+    "48", "49", "4A", "4B", "4C", "4D", "4E", "4F",
+    "50", "51", "52", "53", "54", "55", "56", "57",
+    "58", "59", "5A", "5B", "5C", "5D", "5E", "5F",
+    "60", "61", "62", "63", "64", "65", "66", "67",
+    "68", "69", "6A", "6B", "6C", "6D", "6E", "6F",
+    "70", "71", "72", "73", "74", "75", "76", "77",
+    "78", "79", "7A", "7B", "7C", "7D", "7E", "7F",
+    "80", "81", "82", "83", "84", "85", "86", "87",
+    "88", "89", "8A", "8B", "8C", "8D", "8E", "8F",
+    "90", "91", "92", "93", "94", "95", "96", "97",
+    "98", "99", "9A", "9B", "9C", "9D", "9E", "9F",
+    "A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7",
+    "A8", "A9", "AA", "AB", "AC", "AD", "AE", "AF",
+    "B0", "B1", "B2", "B3", "B4", "B5", "B6", "B7",
+    "B8", "B9", "BA", "BB", "BC", "BD", "BE", "BF",
+    "C0", "C1", "C2", "C3", "C4", "C5", "C6", "C7",
+    "C8", "C9", "CA", "CB", "CC", "CD", "CE", "CF",
+    "D0", "D1", "D2", "D3", "D4", "D5", "D6", "D7",
+    "D8", "D9", "DA", "DB", "DC", "DD", "DE", "DF",
+    "E0", "E1", "E2", "E3", "E4", "E5", "E6", "E7",
+    "E8", "E9", "EA", "EB", "EC", "ED", "EE", "EF",
+    "F0", "F1", "F2", "F3", "F4", "F5", "F6", "F7",
+    "F8", "F9", "FA", "FB", "FC", "FD", "FE", "FF"
+};
+
+const int16_t Rfc1738::fromHexTable[256] = {
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1, -1, -1, -1, -1,
+    -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
+};
+
+SBuf
+Rfc3986::Escape(const SBuf &s, const CharacterSet &escapeChars)
+{
+    SBuf rv;
+    bool didEscape = false;
+    // XXX: SBuf lacking reserve(N)
+    // rv.reserve(s.length()*2); //TODO: optimize arbitrary constant
+    for (const auto c : s) {
+        if (escapeChars[c]) {
+            rv.push_back('%');
+            const char *hex = Rfc1738::ToHex(c);
+            rv.push_back(hex[0]);
+            rv.push_back(hex[1]);
+            didEscape = true;
+        } else {
+            rv.push_back(c);
+        }
+    }
+    if (didEscape)
+        return rv;
+    else
+        return s;
+}
+
+SBuf
+Rfc3986::Unescape(const SBuf &s)
+{
+    const auto pos = s.find('%');
+    if (pos == SBuf::npos)
+        return s;
+    SBuf rv;
+    // rv.reserve(s.length()); // XXX: SBuf lacking reserve(N)
+    const auto e = s.end();
+    for (auto in = s.begin(); in != e; ++in) {
+        if (*in != '%') { // normal case, copy and continue
+            rv.push_back(*in);
+            continue;
+        }
+        auto ti = in;
+        ++ti;
+        if (ti == e) { // String ends in %
+            rv.push_back(*in);
+            break;
+        }
+        if (*ti == '%') { //double '%' escaping
+            rv.push_back(*in);
+            ++in;
+            continue;
+        }
+        const int v1 = Rfc1738::FromHex(*ti);
+        if (v1 < 0) { // decoding failed at first hextdigit
+            rv.push_back(*in);
+            continue;
+        }
+        ++ti;
+        if (ti == e) { // String ends in '%[[:hexdigit:]]'
+            rv.push_back(*in);
+            continue;
+        }
+        const int v2 = Rfc1738::FromHex(*ti);
+        if (v2 < 0) { // decoding failed at second hextdigit
+            rv.push_back(*in);
+            continue;
+        }
+        const int x = v1 << 4 | v2;
+        if (x > 0 && x <= 255) {
+            rv.push_back(static_cast<char>(x));
+            ++in;
+            ++in;
+            continue;
+        }
+        rv.push_back(*in);
+    }
+    return rv;
+}
+
+std::string
+Rfc3986::Escape(const std::string &s, const CharacterSet &escapeChars)
+{
+    return Rfc3986::Escape(SBuf(s), escapeChars).toStdString();
+}
+
+std::string
+Rfc3986::Unescape(const std::string &s)
+{
+    return Rfc3986::Unescape(SBuf(s)).toStdString();
+}

=== added file 'src/anyp/Rfc3986.h'
--- src/anyp/Rfc3986.h	1970-01-01 00:00:00 +0000
+++ src/anyp/Rfc3986.h	2016-03-15 12:38:45 +0000
@@ -0,0 +1,76 @@
+/*
+ * Copyright (C) 1996-2016 The Squid Software Foundation and contributors
+ *
+ * Squid software is distributed under GPLv2+ license and includes
+ * contributions from numerous individuals and organizations.
+ * Please see the COPYING and CONTRIBUTORS files for details.
+ */
+
+#ifndef SQUID_SRC_ANYP_RFC3986_H
+#define SQUID_SRC_ANYP_RFC3986_H
+
+#include "base/CharacterSet.h"
+#include "sbuf/forward.h"
+
+/// RFC 1738 symbol and charset definitions
+namespace Rfc1738
+{
+
+extern const CharacterSet
+Unsafe,         // RFC 1738 unsafe set
+Ctrls,          // CTL characters (\0x00 to \0x1f)
+UnsafeAndCtrls, // RFC 1738 Unsafe and Ctrls
+Unescaped,      // ctrls and unsafe (except for percent symbol)
+Reserved;       // RFC 1738 Reserved set
+
+extern const char *toHexTable[256];
+extern const int16_t fromHexTable[256];
+
+/// \return the numeric representation of the HEXDIG argument ch, or -1 if invalid.
+inline const int16_t
+FromHex(unsigned char ch)
+{
+    // no need to check bounds, the lookup table has 256 entries
+    return fromHexTable[ch];
+}
+
+/// \return a static 2-char zero-terminated buffer with a HEXDIG
+///         representation of argument c
+inline const char*
+ToHex(const unsigned char c)
+{
+    // no need to check bounds, the lookup table has 256 entries
+    return toHexTable[c];
+}
+
+} // namespace Rfc1738
+
+/// RFC 3986 symbol and charset definitions
+namespace Rfc3986
+{
+
+extern const CharacterSet
+GenDelims,// RFC 3986 gen-delims set
+SubDelims,// RFC 3986 sub-delims set
+Reserved, // RFC 3986 reserved characters set
+Unreserved, // RFC 3986 unreserved characters set
+All;
+
+SBuf
+Escape(const SBuf &s, const CharacterSet &escapeChars = Rfc1738::UnsafeAndCtrls);
+
+std::string
+Escape(const std::string &s, const CharacterSet &escapeChars = Rfc1738::UnsafeAndCtrls);
+
+/** unescape a percent-encoded string
+ */
+SBuf
+Unescape(const SBuf &s);
+
+std::string
+Unescape(const std::string &s);
+
+} // namespace Rfc3986
+
+#endif /* SQUID_SRC_ANYP_RFC3986_H */
+

=== modified file 'src/sbuf/SBuf.h'
--- src/sbuf/SBuf.h	2016-03-01 10:25:13 +0000
+++ src/sbuf/SBuf.h	2016-03-15 08:53:32 +0000
@@ -186,6 +186,7 @@
 
     /// Append a single character. The character may be NUL (\0).
     SBuf& append(const char c);
+    SBuf& push_back(const char c) {return append(c);}
 
     /** Append operation for C-style strings.
      *

=== added file 'src/tests/testRFC3986.cc'
--- src/tests/testRFC3986.cc	1970-01-01 00:00:00 +0000
+++ src/tests/testRFC3986.cc	2016-03-15 09:42:27 +0000
@@ -0,0 +1,124 @@
+/*
+ * Copyright (C) 1996-2016 The Squid Software Foundation and contributors
+ *
+ * Squid software is distributed under GPLv2+ license and includes
+ * contributions from numerous individuals and organizations.
+ * Please see the COPYING and CONTRIBUTORS files for details.
+ */
+
+#include "squid.h"
+#include "anyp/Rfc3986.h"
+#include "rfc1738.h"
+#include "sbuf/SBuf.h"
+#include "testRFC3986.h"
+#include "unitTestMain.h"
+
+#include <cassert>
+
+CPPUNIT_TEST_SUITE_REGISTRATION( testRFC3986 );
+
+static void
+performDecodingTest(const std::string &encoded_str, const std::string &plaintext_str)
+{
+    std::string decoded_str = Rfc3986::Unescape(encoded_str);
+    CPPUNIT_ASSERT_EQUAL(plaintext_str, decoded_str);
+
+    SBuf encoded_sbuf(encoded_str);
+    SBuf plaintext_sbuf(plaintext_str);
+    SBuf decoded_sbuf = Rfc3986::Unescape(encoded_sbuf);
+    CPPUNIT_ASSERT_EQUAL(plaintext_sbuf, decoded_sbuf);
+}
+
+/* Regular Format de-coding tests */
+void testRFC3986::testUrlDecode()
+{
+    performDecodingTest("%2Fdata%2Fsource%2Fpath","/data/source/path");
+    performDecodingTest("http://foo.invalid%2Fdata%2Fsource%2Fpath",
+                        "http://foo.invalid/data/source/path");
+    // TODO query string
+
+    performDecodingTest("1 w%0Ard","1 w\nrd"); // Newline %0A encoded
+    performDecodingTest("2 w%rd","2 w%rd"); // Un-encoded %
+    performDecodingTest("3 w%%rd","3 w%rd"); // encoded %
+    performDecodingTest("5 Bad String %1","5 Bad String %1"); // corrupt string
+    performDecodingTest("6 Bad String %1A%3","6 Bad String \032%3"); //partly corrupt string
+    performDecodingTest("7 Good String %1A","7 Good String \032"); // non corrupt string
+    //test various endings
+    performDecodingTest("8 word%","8 word%");
+    performDecodingTest("9 word%z","9 word%z");
+    performDecodingTest("10 word%1","10 word%1");
+    performDecodingTest("11 word%1q","11 word%1q");
+    performDecodingTest("12 word%1a","12 word\032");
+}
+
+// perform a test for std::string, SBuf and if rfc1738flag is != 0 compare
+//  against rfc1738 implementation
+static void
+performEncodingTest(const char *plaintext_str, const char *encoded_str, int rfc1738flag, const CharacterSet  &rfc3986CSet)
+{
+    CPPUNIT_ASSERT_EQUAL(std::string(encoded_str), Rfc3986::Escape(std::string(plaintext_str), rfc3986CSet));
+    CPPUNIT_ASSERT_EQUAL(SBuf(encoded_str), Rfc3986::Escape(SBuf(plaintext_str), rfc3986CSet));
+    if (!rfc1738flag)
+        return;
+    char *result = rfc1738_do_escape(plaintext_str, rfc1738flag);
+    CPPUNIT_ASSERT_EQUAL(std::string(encoded_str), std::string(result));
+}
+
+void testRFC3986::testUrlEncode()
+{
+    /* TEST: Escaping only unsafe characters */
+    performEncodingTest("http://foo.invalid/data/source/path",
+                        "http://foo.invalid/data/source/path",
+                        RFC1738_ESCAPE_UNSAFE, Rfc1738::Unsafe);
+
+    /* regular URL (no encoding needed) */
+    performEncodingTest("http://foo.invalid/data/source/path",
+                        "http://foo.invalid/data/source/path",
+                        RFC1738_ESCAPE_UNSAFE, Rfc1738::Unsafe);
+
+    /* long string of unsafe # characters */
+    performEncodingTest("################ ################ ################ ################ ################ ################ ################ ################",
+                        "%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%20%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%20%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%20%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%20%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%20%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%20%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%20%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23",
+                        RFC1738_ESCAPE_UNSAFE, Rfc1738::Unsafe);
+
+    /* TEST: escaping only reserved characters */
+
+    /* regular URL (full encoding requested) */
+    performEncodingTest("http://foo.invalid/data/source/path",
+                        "http%3A%2F%2Ffoo.invalid%2Fdata%2Fsource%2Fpath",
+                        RFC1738_ESCAPE_RESERVED, Rfc3986::Reserved);
+
+    /* regular path (encoding wanted for ALL special chars) */
+    performEncodingTest("/data/source/path",
+                        "%2Fdata%2Fsource%2Fpath",
+                        RFC1738_ESCAPE_RESERVED, Rfc3986::Reserved);
+
+    /* TEST: safety-escaping a string already partially escaped */
+
+    /* escaping of dangerous characters in a partially escaped string */
+    performEncodingTest("http://foo.invalid/data%2Fsource[]",
+                        "http://foo.invalid/data%2Fsource%5B%5D",
+                        RFC1738_ESCAPE_UNESCAPED, Rfc1738::Unescaped);
+
+    /* escaping of hexadecimal 0xFF characters in a partially escaped string */
+    performEncodingTest("http://foo.invalid/data%2Fsource\xFF\xFF",
+                        "http://foo.invalid/data%2Fsource%FF%FF",
+                        RFC1738_ESCAPE_UNESCAPED, Rfc1738::Unescaped);
+}
+
+/** SECURITY BUG TESTS: avoid null truncation attacks by skipping %00 bytes */
+void testRFC3986::PercentZeroNullDecoding()
+{
+    /* Attack with %00 encoded NULL */
+    performDecodingTest("w%00rd", "w%00rd");
+
+    /* Attack with %0 encoded NULL */
+    performDecodingTest("w%0rd", "w%0rd");
+
+    /* Handle '0' bytes embeded in encoded % */
+    performDecodingTest("w%%00%rd", "w%00%rd");
+
+    /* Handle NULL bytes with encoded % */
+    performDecodingTest("w%%%00%rd", "w%%00%rd");
+}
+

=== added file 'src/tests/testRFC3986.h'
--- src/tests/testRFC3986.h	1970-01-01 00:00:00 +0000
+++ src/tests/testRFC3986.h	2016-02-10 15:44:04 +0000
@@ -0,0 +1,34 @@
+/*
+ * Copyright (C) 1996-2016 The Squid Software Foundation and contributors
+ *
+ * Squid software is distributed under GPLv2+ license and includes
+ * contributions from numerous individuals and organizations.
+ * Please see the COPYING and CONTRIBUTORS files for details.
+ */
+
+#ifndef SQUID_LIB_TEST_RFC3986_H
+#define SQUID_LIB_TEST_RFC3986_H
+
+#include <cppunit/extensions/HelperMacros.h>
+
+/**
+ * Test the URL coder RFC 3986 Engine
+ */
+class testRFC3986 : public CPPUNIT_NS::TestFixture
+{
+    CPPUNIT_TEST_SUITE( testRFC3986 );
+    CPPUNIT_TEST( testUrlDecode );
+    CPPUNIT_TEST( testUrlEncode );
+    CPPUNIT_TEST( PercentZeroNullDecoding );
+    CPPUNIT_TEST_SUITE_END();
+
+protected:
+    void testUrlDecode();
+    void testUrlEncode();
+
+    // bugs.
+    void PercentZeroNullDecoding();
+};
+
+#endif /* SQUID_LIB_TEST_RFC3986_H */
+

# Begin bundle
IyBCYXphYXIgcmV2aXNpb24gYnVuZGxlIHY0CiMKQlpoOTFBWSZTWcnuWnIAOkD/gF92RBB/////
//f/f/////9gO973h9nddgG6ubLtAXd7xKDo7vXZ3wDvD74fem9zfR51p9RY1r73vX0pW87nPd94
6+saYeVS7sdaefc77Z9Sl2r73uC9ttdudaqqluLdVuVzpt6PsojmsqpLrt92p2ebPjzxKx27few7
5Sz5K19zfJ9O9jfVR6vffe+iQovrVIImn3OuVIeuuQHtbumjaKtvd0B0AwkkINA0EyANRoBKnlP0
npT9J6p+oanoeqaPNUaZD1NPUAGnkgJSAA9U0IQlPSZqb1PSmm1ADQAAAAAAAAAlNAhCTEamTTVP
1U/SZIaaNMbUnqbQQZAxAAA0NDRpoJNKQQRoBKfoJoYTJlPUNpDQaDTTTQ0AeiA9Q0AeoIlEE0Ew
TQTNABNJ6aajKntU/U2TTTUyammIepo2kemp6RoAIohACAmgJlPKap7KeKPVPRkjTR5RkeUDRpkA
AANG4ohhEFAip9w80nPQpKUoNT/2rz/f/OzktPNDRFD5c75Mj9Kdz3/2+58/ytfR73EpsT6vRvTh
k4xnz5x8Pl6+HwmPsx+06KUFRyp67hjty5kMznEHkvP7Fsdet2fZcc9utEJ18urTU7/n1PGHM04W
CXNy1SrwPmbDNrBdL/f4vHc/5ERCF+QxMiU+0/7JiqPYT6pQ//B9EiEayviI1Ti8Bes4j1uM0vfK
ma75KSvHvw9rU873oQxpNv2lWYQxhO60EQBXCJuMaeB68JMBnssFyA6kF47ZcbUzw7nEOvbLjhZt
c2Uck4Rl22dPvHA6sjwSDqYuwtMcHle9lwdYhDN+fVQcenWVKxKlxlhIGQhAwEsA7WWEAxlckwYQ
BgOZ0NjY+2OYswMjTNCBEIRjkzVpjzB1ppCJQKBl/lXJkwVe7uN9NXXyzSnZDxaEkCYIYwns8sMb
k5am+jb+HSlJygSQX02Qkw4nEM3lwX7/k7lcz8calfIY6PRq7q5pVFTYpF0crT7ry+P0k4Weh3LF
83fEafoGo9Mb59154yMwd8J/kQ3ghuial16xDUpl2pMYTYQd6y7tCwyG8ENOXBqQaQOmB7VvEnfg
zLZ0/mgAOEV5UZOHYkEckJDwhx03c+6TRNQt4O6ZkSUoqbzR3PFncY07ZRBnhhrly3SvGHvV1pRO
LlGMqtVO2MZt3xrLYX1NPtq4IIdO0sN0L+kQe7lxjJBDp255x+VMSvDbwOflVHyTvYccUu3gNkTe
y0rtt+gDzgCCFEUDNFEVSTumpYEhRxSyBDKVOhvYufl6Tr7FC9UBdIBAnzriPhwFxD/bll9A0vld
pzhZqI78d7EWtHYcQcQ34KLdlw6EwFgc02EykMOsBefm7Yoj4PjbWZO1U9nPSgU9vvMy2WRBPuwJ
NyFXofYaahcnkPX/TzaufgaQCKPb1ONAwg8wVDhspJUJ1koQIToAD5DnVOVNsIkURApBQWQRkVEI
ojEYjAYwURFICILJFBEUO78QcMz6PzFXnww8PDzeFfAxbM4GIDBhSgQJJCDASDgxkoIBajUC2H+r
9c4gnD5DON+S/Zt00lrHeMLQXDLcGjNQzuDAbsOm7G6rmG7LKuLzE2ERnDuZ3xk/EzFbRg4t1h2m
8/SDdgIvWtcsxg5HNnxxwjud+IHbW7upkfhKMQRLsWIqYjNXHY/SIjZGNnbQnFtW14qsUcNyqK4S
wdzuUxtge1KN1buWs07FpjKHl3MPS6MzUXuZMxqNew4N54zxycJaGdMaRvDyrd44Ye8aI4qoouIf
NXtWSHLd2cTJcJ1nLtl8EYi95NtOTsSiISTrbDju8qx30JsqVe03Ok2o4dXbWm105Q0N4nrz/Z3i
cZOcDv9YgoXXCIvaJ8nnOffmmGGZ3443t5jDkf5mBVgKGzfr99Px2Gor677gyhq9RpSkXkflec9i
5AwalMvr0ZUx0DUlCg2AVD5fY+YHigwUss2EUapYUS6KKcVTM1iEybuoJnzViEPZNhXQaMcrjafc
7u7u8BAOGSo4KCRHIKqjjDfav2R2DW/Btid+jZJA8J/TPJQ7xEOvalAP9g82wPTeJwmj5+x9WOwW
nHR3U/AiGcAiGxldbPME5XQEI70HC2t/vKNzYzeHz+2m714oqXZIkY4L4qdVXaTPSwGbe6l1Uib3
zR/bAVo5nXz1x2R3gLfKePUODIWe8EHlZ1zFo4lE28aAQMtgYKwJsAuQN/Iofv90/S/YXxrjeHeY
YrmZnLbQGScAHuDaTbrAeEfDssQpgjQFGVZv4YKmk7zOJUetruoUg/aDh1pJwPC6y1jt22pF2jpg
/uaAHt9QVz8J15cPxgB2QZtha9HLKb0CzkoUDOcz3FQYzBnTYAGnE4bpwfLTCJlb5/ueuhxxSlct
DyOCKdvX6uHSvSUziLH3sgvK9O1mZY5heNEmozCs3uHOAcyw+SAelnBUpeOF0YKlTyzUOTnHmc76
qZs6mMHWMPZmLNm0ACoMK6rzPGR5Kmw4z2Ly4B1nDptC95sbcsCE5bWQF/6NqfR5+1zO36dS7euV
t5wGPGesp1mcwOgHBhqN6iO1kfWfRzPcB0bDgj4oYXTv+b5t/E9E/ida8nqsxm5hO9wrWgsZBgap
bBnFxL7LUUtSoKtKq5TZsaWV2KBQk6SE6EzNjyPKlSgUx6fvv6Ye/oVBFU4vKmaiFVt+FGPKZ9P7
3vYdDYVdaY5Qc6qHJfpXBy4/rH+RQN8E9Ux5/B6Me1k5ZZW3LKz2D1dv/u7LtaTNvg6vCqqqqqqq
qqun40/BlQ/fdMGmFVVVVVkkkkkk5zGYFxtOI5zabT3H4H0Gc/iZjMZjMZhCEIQhCEIQhCEIQhCE
IQhCEIQhCEIQhCEIQhCEIQhCEIQhCEIQhCEIQhCEIQhCEIQhCEIQhCEIQhCEIQhCEIQhCEIQhCEI
QhCEIQhHRvFtGjRo0aNGjRo0aNGhCEIQhCEIQhCEIQhCEIQhCEIQhCEIQhCEIQhCEIQhCEIQhCEI
QhCEWlpaWlpaWkg/79BOWxr93m8fhZv4RXeHX+v5vESc7ugZpoUMNVPM0Q8QQhhVUEIGU1VS1DMo
iCBAymqqgKQJCCIggQNEQQJA0Q4zRNVVBSBMhIIhxmiaqpoZCAiHGaqmZBqEKIggEDImqqikJCQk
NFKUFta1rWFpSRaFmRu6a93x3/Dh8b7vvfHdu1FmZJLaSW0ktpJbSS2kltJLaSW0ktpJbSTkCCyc
rIUREnlwiPzWUwQMkgmAlJUCkiFghILAGqiv4QPPMUAtgfxmyQn8J+7JASZzqPUdpPpg2tKsLa0b
aSMdqqvctvJZSTv+QOMDgu+qzy3UuKi0Ya6wuXzL2sbU9H+aZAvxEZYDOqPf3fwVIuQwyvo158BL
QxwD/iT8/RQr2i78HzPl3ywCrGNi1e1sNcPAOJgU8bgtrCU+tL/jlKCwoMDuLoSkvxGAswLAyzia
4lMwLOLNwGRkznbZIceALGRbamxD3TTJ/WEgYLZywqUXB8rFBPd4N9WJoQGX03GxXKcvoKM6aef9
Qy2RC17i3sdWm0HL3B5d1fOfj4Mq6k9e8dmHYG0J4YrBuQ0hzT86CgL0GjIw7k5Cz4XKZzjzEdmV
JP750/IrPe+jqlrxK1LX9abDyNAdpqMYidBBBtMCmkQOiZRmu/j2mNlpZbPMDYa7+L5AQ+PBfdMp
QtKDkygxwIWVmKWbZlAiDqf8sKAIgJA3B+Xu4h6YKfyDfMGcA3FX3K5Dfj3wKQZLFaxVsVq6jhLm
fPcIgtyqJ4wWRUDmkikkiqh23uIXaiAMDBiEQ+APPpgQIET4H85WewPJMMsCh1aZoHkNZzUvnySi
2nY4hsYIVHZe8Dwrazo+FYotGSgmbAwEJCe530IhETth+sOsDTdwoY8CRkWO8vxENC+5ShsHyBvm
JMoFgJBKCgVRigEXTCjFXld4HeqwJ5AOY603CbpQa1OtFfF5fn8hDePMSRjkEJ5/256o1Ro4CkR0
Zxd5N5HcsjotzeK0F2zRxn+Y4uAGeKlKAHDtEp6zG7XUtwKmNY/S6ivymbjv7I8JrRF5oKF1GIaN
3VbvONaWpDFa0WWGBgEu5o9uWml9303UAvQULkV2Iu4hAIeVB8AEOcOgUe9LApMPpMv5iGXpr8ks
ZiyaqJKWnpENjMDLKDChmnoCOSAFnzTgfZ5uedJxQ7JPKMKdtCZdzw7i1aW0tp2JtL2vFNfb82+3
97w9fpXdmhlSvHLKtcK24XZWv+xDjx0GZkCZmZmZktttC27Zxs038W/G2+QPJfbPJr4suTMgUxrk
pkPdtRG+I32X1KSsUJhTCCBhLIjZEwgIwESapprQ0YbU8iaoGibkKwNqvwJsmtssQJISTDdaHIOC
zgwcHBwfuH7p857T6D4FqUg+lZA5eXpkGQYzvMMzxXiOBysEExC4XELQA5H4erMsdEoBkdeOOhBc
YYM0d4hlRskVWyyth0FeG64QC4cHq/1reKEUFcDI8NbakZIgYkKrKMK6HA1rwNCxjXfUkZJ1KFWD
V8lbWIvGA/S3NxvKjDbR0Os2AxNeBfYocDG+/YshsIW5Li4lc6HzI7IM5EZEOGDOGIk1OJIfqAjY
5VNqRXI45vEvdjhI45K1N9MwxcuYHl6Pwc0IuvceikYMzFmaaheZA8KGPwtapdS64qJeIxgcVobS
AYqYo6E3QbjV1wbxExhAyRerQiBP3WueJtB6OfrM0NtzzPebHBgMdjoUKGWTuB516uKIwVNjm7UR
yRocLG/cRpDQXoJYQw6oj9D8BD5F3QNgHE/ix5GjPlYhr167/0eJFMZntxKF8GA9zqCE/Ye9VChF
w44gyhsoYM7Ow/Z2hWm2yJhzEOEPqB0vN7QUtfXZt/eW3KGZjYbHYRMwaMGjRU0ZPUeo9R6j1HqN
zjkYGGeAdRuAajI7ojmXBCtB5nMAmSWfGRJhRgxF9ONwZmV3Rr1Q1usZxUQ5VPMwEp+IR7bzrOxH
RV4o5TihQMytq0sqKGfTUlUGxbtNANURLM4hjK255cu4n3RdCPcjrMGeJWyLAYHQfm8mYzsAtpmE
gvNhQ/y08cKNkp9EXpGhxaMIyzrurdQpnGY1jbacnK+IMNIuabkcHEvACBnixLAmyEXjKJxzLCDw
NOQeHv4uzIHiA3Zo8BFqZEWHYkuE0Klvec0ZpdDI96PWj28zM+pw00k59OBQNchHWAL5MyGcVHH3
FVLQdDW//5HMtiFdClFUWAq9Vwt+lQ1gynXsU2eG98ZxmxhcPntEECwgJhkUkgj6xYSt+XaarUBO
RjQMidzj3icNxt4b+zaSbv6np3Ht5PzTo7uQ+4tki/lk7ZM0rOSQuTsanIQutWCV4FNhxL5eBxMA
80eBXEtuRrWkgnzACo6jCPWnWnAvHG0dsqJTl2JeSCEZjTcOKJV6cNbTOiRNMluBZnc+EDzT6PWs
5bM5qTFUIQ29BXJLsBbyP60uiFbzKCIzHUYkMpcptPR8syQCaHhD97PMecCd0uyKbOMZwD7IzrnA
dojiUD7aUwE9zR56TlhEtHkisiRLiR6jsOp6j1HqMarfzBoGAbUYCJgWKSUKClp8sHMUhdHRes71
kUL85HthQVsdbijrSRL1E8ysgOCDDhmXengybQGxOZgAvXC9/h4bI77I4AGpAX1m2UmRUVwoWRxx
F8A3GfNpmprntTC80CuBbQOexCqt+3r0zKGAhyRk2ZrjTdQRxcCXBvM7M+JUbOjjF0aHbDmfyS7F
j12WQtkha/tXIFDlx5BgyaOhURUiV3deWx0FyuFu4EgOGhxr82ReueWZ0R4qb6TdF5iOJuqbrpVo
9gLnmOlsjmaxyd5zgj0uPYZQtocILzEwviDQ3EGhu7bIIXqL3mAPcIXYHeXM4uJ5Q5IGh5UkOOtq
lthxwVYaxM7jMR3pGERgUH95gqetGXn6O1EkOKnfsc0zIR0IEjkZZe5HApTLficyhhkW38ncA8nG
5Dg9yOGGUcN5nU8R1M2VJTKYGgnVVxk5+L6h1ErxM+VuTjiJYVlZEqKzuOJ3Hcdx3F9ySSWN4MeA
ljejxtoxxvORxcrcVuJcoVW3qzKDf3FxfHWYdxdf4GZ8gtNSHISohfkIGmeVxY4KVZXua78ocpmY
q5GZHEGLhQlHCg9x3TJgnDLEncDTGbJ59zMcnVqKuyy3awi9IW7DxF/dGORstA6FhDNG4x9Ko8y0
nEheJU4T59EeVxtpMsOa0eaaofS/Tbdat9mJuLCm8cLcbwMDC2ZO2YEWaupmW0dkduypkZTx6ipY
9fIVv12JiEd2RJzgLVMZBoRxoBpVVdO4sb6hm4MRmc6k7uQvMc+DU60Nx0nTH11mQVAWWwUBBICw
WRiSCICiIIiMBiqJFCIwXJrzruoKGY44J1Wmo1ab9KOO2GhnvF556FZSXrbbE0IT0jF0pyGRIiQk
NMbpleVltESW9hpFONZfNhJ7uYigsIlZeVHggXRCz+fPezoA/B+tGppHMmzfPOvD1ExSL6HKgwX8
qFgzWa6RWqtpS0nYd8lXj2q927XJwYNzBuaOCksPE1NTxPE8S4MS9BaIYQVXTCFNY03aWEXmEGCG
1/DLFcpFHuhA9VvHTyxuCKE3FjauPydeiY7b93XUT4A9hgbh0LxLgwg15KbZ2UORYuQnY9BzHreq
HRJvBs3HY3HWHe/9LHstnRUrxmQRsc9yG3Ew35m58hDPIqrpoZiQJpp10cC5tQ5L0wbFSFYN1v78
CeYxKj2G7mTkeB0MXoQkblXMNcC1zf2eKmZ8m2ak8MDbZnkmD5OKbH7IDvNBzwI4uYjIpKKZg47r
sC4yMzqccniw2YnYu95Y5uXyNkrFth9y0Ye8fEwI9bBboYMovU5vzjRMs2jnY5YZ12Qx8FhuGseM
mDeIYLiJvAcrzIaaYZT04wGFbbTWQvZKReXHFM2NgEmrKLl2jFvtKiCHIR1KxI3d4eHcSJkxCEZE
I8TwPE8TxPEubB1Nhg2Zm3Z7DdLvp2L6nt6nYRk8LOxo8d2cQNKZi/QoxvWMjgGyVaIGsLZd4xP4
HfNR6HOjoR30zMzq2Ia05dD6RJ0d8KQqDaF+iywexKFSLHuTQtLuleMplMQQpGe4FhrRsN1JnQRG
MSzS5IuLRGUToIQZalENhN5ea0wOuDmnOGPWSEwwSKF3lb8vxA3HMxsVOnQ2Y4GZnVCWd63rzlHP
QspjsFzYaQdb0NYPDifUwNYUsjzo2+zDP3W4xPd3SGB0cOwbs1WgZgdbSaZyyA2idYRRuXLe81xU
caQepw5w0y7cGxQscXRRjkUp0OriBsRKnRnHbi+99WtcsYRu40Z3NolXE6mHk66GxXG8rvOtqjYT
3Oqlhc0YAet+VHSF/A3OtuuV5KM25LXAdJvwjF0UicuTaRGPYJwgewD5+Z0OtyREsRKFi5UseJ5z
xPE8TxOCgVTMdhZBA2N108CEoIg3owdRCgV8Ott7VYnPQ7GW2O0OJGwj1rx536nIrhYOpyMYB/Bh
nGRwZbBkZuIENSwODDK5c3Nh+KVhxXUFnRlsqZvNvrMGullZH6EjoBtLobCPig7zV1ODHqEtQFVy
la1xuvLCG0Yw2YzKsqpao8xBLKKHJ3xHO80z0ZHkD3zZyaAtxPJbB3Q3Kua9zgsd8GccL5iKRNZN
esz1KAjUCDgjDQVIcCBzGEgZCQHFhwOoqVwN/EzLih1GpodeC36NvYNyYeBGjSMjjnejuanpux6W
cZ+mIfQ/DtAfaJ70M+hy3HdWmZ0pWacr+ut2+t2Nr7S1lB8iEutDwJVJ89u7M5z2vhZXl5/Ly8vL
Wta1rWta1rWtbuZojmIahsjRhTfWluZdyIuY3nIw31KHq4wPQBM7ZPXRp/frMPYrjY44AYiDEbZK
ZHccCNSeGZBbeZmHYVLZxmVd1rUxIRztOGyJBCgGjakyAiEty5kuDVONtMNUODWCR7lCeHDGZsZU
w7JEuFYIEz01ocOJTKsQZmEHItB38Eyczg6SoZcQJej2kU2Occ1JndyTfd+FZjrtIlvNjbzRpsY4
HLI6zAqXYw0J33YtZ9EZEW4G2H9zSDT9akQpvDLpmtc4NkYLFe3XmBeBDBd5M3OTIxG5EokF8k1m
pQfvvnyZzTNrjjsZJUtZ+KOoh2CGyNlW/0PYcGvbpMnLqwC6K25Rs0ZdsqcK8tJ3RnnWIYbwM3F6
gDjklx5eTmiyJcRLisuLjqcjqdTqdTHK69szySwgYJTInoGdQaHTIChmGmVLzpRQtFsG3bncDNu3
cbxi3KywkqkkRcLnVfI4rDXCvuQo3gK+UxJLMYQSWOU2wgk53ol7KqHxE9zs0gX4dNVVeyloLH5G
xU5gwaGZurNcJJOrflCppmSgh9aUhbrjSthgG4Ox4tvixQwW12JnRtyHBaw51m68kOhziZLfxtdt
zVCiMNuCMjgDABqam3ThmdWhQ61rk2Og61HDo4wcnEDY4MPI+bzbKEHEEZHTKmd9+sTa+7Lr4Z0D
JHmh8BPYj3bkegOqD9xeLMWMezy6nl3m0cw8vN1Ce+IopqQ6zG87YzhsX5kCEJqx5AiQJiJWVFR1
OR1Op1Op7sSQLAQzIFJXvler6MRxOOdikFMZcq6gITupITahCanKxvoTwvU9bM9FnHTkOYM6Zsk9
DaTmSVcMENwOoJoF4nVDdZUAFx231FV8xB8WgVG/ErK0jKo4jy4RUeA2ZDbtlDgRMk2isBkw14TM
MBmbcOodMkuhum3NZLZHVqPFs6RyaExgxgybHmA3KAOehux+KkGJbEjaUDeQbHExOPmMNYGyQKhQ
4odhX68y0PPFxm/NCxuit7FsGpJ789jRgwKUImpyE/MDaZXZxfZ5IfYpC+pEiwmKywb1COqrukkd
iXoI8kh1gjcVF36ftF9cE2/vTxSmYPc8Q7Y70YBD6DoHiEkjKQgiE47LBERBFGMBVnPzc7bzBCwW
/S+KUAhe/vkeugyJr4M1pINIQ8YRCu4smBdJVGMEcmULI30RkPwnBQMBaIpZuRoIsIzRucBGtyKW
OKCFxFFoCUbqBgjRGkasfep+r3yh88/nPun7I+KyGuuWAyw4x4PDQneLN2LGHN5aBXGlDM9sKHOM
yIe6MM8RSCIIkNMbtxkZdVxgoHGXJfVQ533tOsPyItjtCkInxRSC9f+R6D4dirnAypSBlHP6zQwG
cKAdtk+OdG+E5SipFWLFRBFRQRiKMkEOaQQHmERRRkmGCyFIoCqwkkCSIUWC/6N6Fd09+L06xPuF
IwTznnMD94VK1djRPgBcPG+V+wzqL6EFD8zqd46Sw854nnPQeB6D3n0HvOw957zczTxP38gLfhQP
MNn/aum8/D/pSEEByT/vZ5Mvm+0cBzSXKYYwORkcjkcjkcjkcjcbDecjkVfbyDINEe9hCcJkDxyB
EgiAIgJbKKMsSiVkpkkGOejkmCLPQIiITtDQ0NDQuNDQ0NDQ0NDeNJoP4Bp3QqLAigwXWIQDyBD8
G64DhXaUoPk1JUyYNFDqNv41NqkF8QOVhSEcTVNBb+h0Oh0OhMXnQ6HQ6HQ6HQ2nQ5OA5giyHRBx
EOhhX7DgOX7B6TCIWfSPlEPUP3DGOvwn7dTU1NTU1NTU1NTgampoczU/VBwugC7mPSH/h8gQoHdz
gWqYnrCotgY1fOQwDMwTtXaBy8hdF2Mww5PxWuuuuuuuuuuuvDPWRKUpSlKUpSlKUrJfL0AXEQmG
QAMERfQ4b9o0aPVFG78e4ahUaTwgcRYB3X9IU0wxB5tGB4x8DJcdg9RQow3Ok/aQISSEIS09AcAR
0qbAwf6B5f6NqozQF9wDypUDnYpV17mWTIrUy5qQZv93DmIvbZD2vdmEhCBpA2Di5sdbvHkPLhlA
FA+AfhEQZjG0J0BdmgLg3KWTZgwZJWpFVx0Bib4aEJ85JsCpD68WjERi0MoCF4XhrqGal+hEMMAe
J4zJNHx0pRZmWf8JB4dvcERAf4pvy+oJ8kDX88tgWSYW0g7u0CH/fx5hLzNndwgOFZVWDIrTAMmZ
4pEggbqRBPcshTOC8shL6lsvlAFH0UPJIG4O2APZ3F59IQMD1OAIDx85xmClMxwKDEJDJrguDhI0
OG8scw+QMPx9YSYAdyxjBQYX3Dj9Qjv9dEl3zP/q+18iVMnV4h8yBA/MHPJwB3G8VgdiuMSmMdjI
sYGWTQyZKY4EzOgJvkzA1IuAnA7JBeql+jQX5A+P7D8Q/1L71QnlgkfFdzi9MvwX+6+557afeXfq
P3B9S/OvsfP+hqF0GVq+C71zX3PNRfqFwQsa0J4SrPvuSnRJJR+7ZiL25e5jcJqVf4PUG6Y9zGf1
y0H9aQPIKSNAKAWRgMhJpkB7O72JoxgAIogkVVYKAOnHr7lzX1/E7ByTCHdjUge8ZA69XGH09lp/
SfcfWTmBBtghK4YAPsKzMmPj8488gg4Vk1paa1YuP9t7aNGDltCINxMKIgOkZxQ0Wo45H7HGJEdX
uuKbG5j94wcClWpXgiEhm4CLSOSpLpo6TCZsUPxatc2R1saLmOzegbg0YMlo6LknkPTjCK4UzJFe
4Zg+37FQ+UNjIV2O86Eun03cLyeeBvxnq3zyaYF8lqlxnlodfmqnkcgiUdSi/k7ghkDYmyfDBTdL
BP3In4QnsFnR0yjn6QyvYK9qA6c6OQKAl4AeJp7HUF4enOpxGKhP1fyQfy2ogWXjjQ4GL2UoqnZa
FpgCFQZf0dthapxSTvDI3JksiczIIR5IGNgtHUVqLZGOSNAukPeF+hTHCPK/jr7ISJAn1k68Xm19
vLzhzjAodprO87Sh5uTiKFxJflzPcHuIcvunXNqGehqrma4HItUqBVyKF0GGhihKKyOUkZJCNiYo
sOEeXhuVKlpkSc4BSI5FXaWzt1V74+wWubmihHJnRcr0BrkCg9xV8J5OcGx9hmZqLqP6Hp9OAj1z
TL4JzzojO5sNJzAqgWlFZEcPbhIlz9ERfNVcv9hFw87ArBdhq84GWUx1T+Vk9PUjb/gj4glnSPBq
D6UCYc2yn2ogljRIWDBgm9o4t7nvPwnYT76EjwAVCDj3nmgdyO4rtldLmPOptiPQkmfS4nIlhJTI
jYog0WW25pgALPjKCb3s+OSs7iWR1kOgMTyIUjxNws1yVIFoCwa1iN4lcl2cMRLND6jNhx/FUWsS
MqvBCSsr6IQG8/ZqJytttovMh+iFW4yh0SAgUEJG03jy/bNHcbLRjebThjxyEwnJkFxEwlhUZOKB
jwYyIEa7sswil7VJKrjUVOL0V+nfsMw4C7EwWIWt7wO9vFu1lQzShHnIgZkVh1det8pS2pEAyI0o
hddeDxgTYSTrk78CQMbNbVQEYxgsKWFN7RFQjBBeeEyywbJiBxyHAmMckysh3gSyW2UgwTXC4GK7
ngIbmj2ZaKhnKan6uWa5GvSXpjJPLtkphKdrAbzVXIzgCZpLBiIZ5FDAYBiS0jHX2L2UnryMQjGy
LcQqXIQrFCCrWI2Ze9BvOffzgq6pndhdA1cP29559tzyg8SoiebVE2YkskCQennk5QHDio8cRF9B
SGiZBXlOfOKFEw1pcPkbxU2LQbdWycsCp06xFpxb8TkbFDhqjoZ2MTGDDDQ48gSDiihmrCE0O2VD
odnZiZHUMTSC+laF95xElIyO8QdPzBqhezQMDExTFwP6GT7B483mwZjAFCkn4H1FWhOQeaGgxZov
kAPQg7JSevLf4b8imu8+9S/ATJcsJiFDkT0fsbi3PiCmCkqqChFxkVloxq6isgMupJoryXmrltRT
SHgaVQs2tMQarB3DZylR4Ue2BixRBUcifxVQ7wLADV+qneQNXA7AGsMUwy8wnqB9KBr1s0h0Fndl
QfWD4YpC2ADki5OA32LWJuyKBgHeGRfV8K2dh2CWEkzCMBxRIAhNwXIYlxX68xWuqKwSBGKEgOZ4
nId3hI60G3z7xBMURdTsydA/Pb+X2eMm0LzytPepFi9guT9E6e4HcQgV86bvKSJ6HFGnkeKXtlNG
HPi0R5semh6HTbw7S7iOSnf4R2nvJ1ynh69VbwuRrkULnWBnnmNlvddnRBiBcRNLUjIwKiPGcvBN
SekwwfLPKkvOFMC+lPGjNxtjAdRRGNx79TxSTdyPEAPAAL4pCTUIbgZA7goIrBkjaIHdSG6BewzA
BySEqh5nvMYj8is8NVWGZaRDiP51zOeVbZ+HDWegokVktkL14pwmYGBG8mxrJkv+UggiGT2dc9QY
FWyz2B2XedmcTrL08qNlIp2hIQmQylzinN7Zg0d6DBjXNB3jh7c00SmmNBjOOOtRvr9beHOrfwm2
ztfV398uC2DiEN78ELG/Z4X738J/GjHjP2X2IVKFwQJBsUDcQJztGNOVpyD+AEhJVo6I+NyoXFC/
I59GOl+l/lbCfXFC3kMS1Ne+1Z6Xo8uqSYw6dZ+tjt9qN4ju+ZqDCv1fsPud1nL2LyHCNlewfvQ6
zlQt9EST5hP4e6pXi9qYvW2TogobwLg3cGQ1RhgAJ6B61QwKiLtEgXM4ExSbWnjVHcijA+1ijA+v
NDWbDcfqeyoVV992KMCL9P0mgXSBhPIItQxeyJIMPIO7whLGEUhxR2Llyo25NghyBBIxCKRgc+od
F1Eey8/TICxAKozVAAwNZ/exkAhEiwimJBQh2sDJwDaawJ2/GSwIHmn6PanjEYKqiqKRXe4ChoUQ
gRH2+wOHMjuoW8KrQ6320iSOLAUsep+NA88Q+pLSB7uDYdR7xx9ZjZlu1cfxg+obNdGTR8E58Poy
YKMm/ImiiBNy0fb45W490E5tsBsbHrizQdsTfJqPtvfAlPREsbikWCMFoBQSKi8IOOKVMwz8L6cQ
Z5eeC1GYYEIgRgyECKEZFiJEWIBcX78i/f81gzKXaFyrQzact3EkuV5IpkRU6pa3mbWHCildjgB7
XrPrACoryABwgh6WqUdwMb28/winrQuU41WC8yNm6BVCsDLunQB12o2mR9Q+jjcbYimEVYSZVRpv
TSj1/fR7hMwLBeMCOEhACEBJo6shTKzzDqS0j6hWZDCboA/ILcGD4tBDefu/ceVCcZHehQViJUKC
MR7bHfEN9C8S67lVZBFOaij+tBgsGRIajYIZR8QgWIrvwLlx+xxHAckleQbMRA9+GM8qDNYfBG1H
oER9Q2gSDtWC7wm0A8BDzAPkjZF1mXBSIWQZCYCYJIIScEdQcwSBBsJRFaQikQUO9Hb86KHahYdd
qMD6VFxiZEfN+kIMCMExPARFPc3BQekL8j2Cq9KQIFuu0Vw0ivKUAPBPsCguE1IXzNhDxqmjxUWQ
xyqwmL63MH2xgoTlQ9bFOUSZQwVLvJgKKIkQECNaTnkUUXHFrGUgEKYemIvsLQp4o9SOJHruE4FQ
IDJgZZzZ3OZV2PGqBUeYVuJI8TQCX5wwRvDH5ywflsG4QN3TfA+UTkMoPcj0vytnijrFdxHMNRIK
5LxPlXYwC8gkgVj6EZRvRop5FJM7iaisSovRRbDP4D0YPEYJkZJYJSCWCgQowpyjfmBvcwvc96Pi
0zaWhRkjRIensBHGoB5313I2I+hiPoQgjV7GMe4DsA6g51NIaloPJo8RXS852FAAoEFX07sjUagB
7wiWYbgFQ06V2htZHlga5kcKhwi4hXu5ksLOv7HfKvnRq1d5YA2NwYZ1KdykBCpwCo0bjzRuR7gH
7kt+wY5oYiUgEyfgIZengjKPJb3wMhHJTo9jAwMRrVQNPemqDnsomfYfbzcPZKXDKOaM71EdiHZr
FdToMr3I3hoHgFdrqiQMSOhfIBNyZ0eVG00opYOT/GmlGor19It9ROdgiMoKzwWg4tDWwmJIUnoy
hMMHpX9DW6IWABchEYpnQDphJYefi1ANQH9jegwCwsUMREbW0You6raHcwJCQocILkY35tu0sNNc
wSZJJkyAf1wQUJ1YFW6AByDXhS4Cy9aPvzbOAZI0CiAFxzX8GxygPj2u35uLmMOSMsrADITlDGJa
QJxMgJwiYqViAkjGQCkJ661BqLVUIAgmZEWReC6bMJVEajcIYh70FC8Tf5V1gHXAhA4TMjYgoQHj
9QP0Dc3MPN8OLEYAh2wUMmLQg8eQn5A7Q1PYDm5uMsl/tWqporkNdJUQqdHzo+N63lwtyKm8j0A/
aXuVxGrQ0RyDE+oPutjNC0KSovcJ4IrUKqPAhPxQIxiF4dmJaioSHMCHSDCBJ6u4nINBw8KBvWyB
jZi5DLzqfMNaLoVvRgnHoyeAhajjwExg0bR3S3sRoAEEWPzRjqgQhLNyIp5AM5BGa6KYRAqbOLGn
0oHmizcRvLolwF3b+mJ9MMy7ncv1CvubMmF7wNDxEW86+2pI+QKd6FlVBULII5KU9BKPchEGA6RH
tN1o+zUOkXUIWiujKp6RcunV1AcYij2zj2945DvAMDlgNG7SMChSlmC2YlMkLFMbEqwCoFnCATOL
EapuCaoIfOpeGBcIwqGSix6L6C2CxUN4GwhRcT856oCT6JM0MIi+ANk8dD2+eyCh2N3qQxKg1/zj
xBBsA0NIQk5RoPT09bb6p/v8WyMYllKWGJHsRoqntFh+MbE93nt1gUSi0Gi0RO+5bgI8irxIAQPh
vPnRrjBn00PSB4hREeG88PoGwQMgq4HQJAgBEqYIdoEHuXL7MqOSerBKZApAg5ggECUoPgUrViMK
ZQOt1/uDjIqbSpISI4hFvxJEaQR+RxdPf5z9F53lwUDcreZ7RtttOJjcEgVAmXANuxipZs/d9whw
mEG4R9oNigxtFNAgIIm/YybDMsj8mrfUpMEcA9o1ua1AkwIbgkbmzdeQWHGzUj8iRxvwBnkYGQlk
UxHDgmItC5L1fmgrboR4wOrrY+Me36ScERRFQRgrEgD1lAWE6J4ezxhMneFWBh2JgLro53SHt3yI
twhyPoLlXToYoIrFkWKpFhEY9AAa7pwkgDgAMzQm8ghu6Q7aAsWAosFjEkJAkJGQkHaLx2J2jwIQ
z7g2fiizrOOGpZElJEsBAsglGkSjYCWJYCUbBLBCyJRsnxAJgDqJqLCPNCSpB6SyFQFGQmCMgFJ0
SjIZJ6fdDyICi0KJJUsXmSi9BSguAXJYJGMi1tiBmbGxqSiUtnSRxMFoEE4SyQvl7Apl4eAO/CRC
xAlsCD2NLQjlBdYlbNGtGRiDNJBL2BgDGosqKFrBRo/X2C/Spej+NGwYGI5o6yi0gcbAgAQ+KiEt
QNLtcSXWosT2zov5tgFwJcSZBYeKSjYztYx8wsezA8Aw0y+JuRvQdBaWhosF8XcwOOcZKRnKEgUM
0OMJbBTMMwYysnjlTQ0egyAAYHZhHkNySEfeBYTbql+k8wgbkezwAftDL1NkYRx5CF2hyOF4lQI3
RKQogEGj4oH70LAKEMMJIZdFfWeG/uuU0qLgGhUNKPMBYRgJpaHOHjgSBkQNCDAyBiqCIILJFifU
pqGIFhnA3bkMsGkCwRfaWY0Z5UewW56ONBiD1AaK8xm7j6UfiDsF8q/AQ8wZh30LXqMzb2AOveF3
3df7kPURQkJCJBikYGEqICxtXyiG9T9jpAo1R0FrVMdhgGwITeetpp+S8KtjAIw6PIPzNdm5e+Oz
MIb4j9lFridxV4xN4LOmgUQIGx+L7UzaSIhQ1GRO9oUf4hDQg5m49L8rAIjn4uaPgLj+Xm1FxIBS
CyKeIFfaHBUD5RDiQdY5Dw8vBKMN7Vr1b4hzOEZCO1eh26HweEB1LeXDwcQH9nHsEu+2AZNS8tRO
96kcwml4dLcYMN8pZxUUKk2jwdBQc4h8EKNs+JQQ6OM2qZLmgVtQBs8EHY7TiTvCIzonDXbWUEdo
D4I4LzMU7BMCwV1u53J4eUQypnDO60eltHOJ9pzi6VIEkiWICHQ6hPFGoHNwBghEE5zWjaJrR7L9
9eBve4Qgr9jF0sPzbBpH8onen2IFGNrkahilnnnqn/xdyRThQkMnuWnI
