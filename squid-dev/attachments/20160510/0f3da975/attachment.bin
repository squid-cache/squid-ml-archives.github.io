When DNS lookups for cache peers fail, try to resolve them again a little sooner than an hour.

This improves the situation for configurations where Squid forwards all
requests to a cache peer, and a temporary DNS failure left that cache peer
unresolved. Previously this would would have left users without web access for
an hour, without manual intervention.

This also introduces a configuration option for controlling how long to wait,
with a default of one minute.

This work is submitted on behalf of Bloomberg L.P.

=== modified file 'src/SquidConfig.h'
--- src/SquidConfig.h	2016-04-01 17:54:10 +0000
+++ src/SquidConfig.h	2016-05-04 01:29:07 +0000
@@ -240,6 +240,7 @@
     wordlist *dns_nameservers;
     CachePeer *peers;
     int npeers;
+    time_t cachePeerNegativeDnsTtl;
 
     struct {
         int size;

=== modified file 'src/cf.data.pre'
--- src/cf.data.pre	2016-04-19 10:40:05 +0000
+++ src/cf.data.pre	2016-05-04 06:42:41 +0000
@@ -3552,6 +3552,19 @@
 	instead of to your parents.
 DOC_END
 
+NAME: cache_peer_negative_dns_ttl
+COMMENT: time-units
+TYPE: time_t
+LOC: Config.cachePeerNegativeDnsTtl
+DEFAULT: 1 minutes
+DOC_START
+	How often to retry failed DNS lookups for cache peers.
+	
+	It is not recommended to set this lower than negative_dns_ttl, as the
+	cached negative responses will prevent prevent the DNS lookups from
+	succeeding.
+DOC_END
+
 NAME: forward_max_tries
 DEFAULT: 25
 TYPE: int

=== modified file 'src/neighbors.cc'
--- src/neighbors.cc	2016-01-01 00:12:18 +0000
+++ src/neighbors.cc	2016-05-04 01:23:18 +0000
@@ -58,6 +58,7 @@
 #endif
 static void neighborCountIgnored(CachePeer *);
 static void peerRefreshDNS(void *);
+static void peerRefreshFailedDNS(void *);
 static IPH peerDNSConfigure;
 static bool peerProbeConnect(CachePeer *);
 static CNCB peerProbeConnectDone;
@@ -1182,11 +1183,13 @@
 
     if (ia == NULL) {
         debugs(0, DBG_CRITICAL, "WARNING: DNS lookup for '" << p->host << "' failed!");
+        eventAdd("peerRefreshFailedDNS", peerRefreshFailedDNS, NULL, Config.cachePeerNegativeDnsTtl, 1);
         return;
     }
 
     if ((int) ia->count < 1) {
         debugs(0, DBG_CRITICAL, "WARNING: No IP address found for '" << p->host << "'!");
+        eventAdd("peerRefreshFailedDNS", peerRefreshFailedDNS, NULL, Config.cachePeerNegativeDnsTtl, 1);
         return;
     }
 
@@ -1216,6 +1219,21 @@
 }
 
 static void
+peerRefreshFailedDNS(void *data)
+{
+    CachePeer *p = NULL;
+
+    if (eventFind(peerRefreshFailedDNS, NULL))
+        eventDelete(peerRefreshFailedDNS, NULL);
+
+    for (p = Config.peers; p; p = p->next) {
+        if (p->in_addr.isAnyAddr()) {
+            ipcache_nbgethostbyname(p->host, peerDNSConfigure, p);
+        }
+    }
+}
+
+static void
 peerRefreshDNS(void *data)
 {
     CachePeer *p = NULL;

