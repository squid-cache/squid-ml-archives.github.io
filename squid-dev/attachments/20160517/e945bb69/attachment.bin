diff -urN -a --binary source-base/src/acl/AdaptationRepHeader.cc source-new/src/acl/AdaptationRepHeader.cc
--- source-base/src/acl/AdaptationRepHeader.cc	1970-01-01 01:00:00.000000000 +0100
+++ source-new/src/acl/AdaptationRepHeader.cc	2015-10-05 16:26:30.955871000 +0100
@@ -0,0 +1,34 @@
+/*
+ * Copyright (C) 1996-2015 The Squid Software Foundation and contributors
+ *
+ * Squid software is distributed under GPLv2+ license and includes
+ * contributions from numerous individuals and organizations.
+ * Please see the COPYING and CONTRIBUTORS files for details.
+ */
+
+#include "squid.h"
+#include "acl/Checklist.h"
+#include "acl/HttpHeaderData.h"
+#include "acl/AdaptationRepHeader.h"
+#include "HttpReply.h"
+
+int
+ACLAdaptationRepHeaderStrategy::match (ACLData<MatchType> * &data, ACLFilledChecklist *checklist, ACLFlags &)
+{
+    HttpRequest::Pointer request = checklist->request;
+    if (request == NULL)
+        return 0;
+    Adaptation::History::Pointer ah = request->adaptHistory();
+    if (ah == NULL)
+        return 0;
+    return data->match(&ah->allMeta);
+}
+
+ACLAdaptationRepHeaderStrategy *
+ACLAdaptationRepHeaderStrategy::Instance()
+{
+    return &Instance_;
+}
+
+ACLAdaptationRepHeaderStrategy ACLAdaptationRepHeaderStrategy::Instance_;
+
diff -urN -a --binary source-base/src/acl/AdaptationRepHeader.h source-new/src/acl/AdaptationRepHeader.h
--- source-base/src/acl/AdaptationRepHeader.h	1970-01-01 01:00:00.000000000 +0100
+++ source-new/src/acl/AdaptationRepHeader.h	2015-10-05 16:26:30.955871000 +0100
@@ -0,0 +1,50 @@
+/*
+ * Copyright (C) 1996-2015 The Squid Software Foundation and contributors
+ *
+ * Squid software is distributed under GPLv2+ license and includes
+ * contributions from numerous individuals and organizations.
+ * Please see the COPYING and CONTRIBUTORS files for details.
+ */
+
+#ifndef SQUID_ACLADAPTATIONREPHEADER_H
+#define SQUID_ACLADAPTATIONREPHEADER_H
+
+#include "acl/Strategised.h"
+#include "acl/Strategy.h"
+#include "HttpHeader.h"
+
+/// \ingroup ACLAPI
+class ACLAdaptationRepHeaderStrategy : public ACLStrategy<HttpHeader*>
+{
+
+public:
+    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *, ACLFlags &);
+    virtual bool requiresRequest() const { return true; }
+
+    static ACLAdaptationRepHeaderStrategy *Instance();
+    /**
+     * Not implemented to prevent copies of the instance.
+     \par
+     * Not private to prevent brain dead g+++ warnings about
+     * private constructors with no friends
+     */
+    ACLAdaptationRepHeaderStrategy(ACLAdaptationRepHeaderStrategy const &);
+
+private:
+    static ACLAdaptationRepHeaderStrategy Instance_;
+    ACLAdaptationRepHeaderStrategy() { }
+
+    ACLAdaptationRepHeaderStrategy&operator = (ACLAdaptationRepHeaderStrategy const &);
+};
+
+/// \ingroup ACLAPI
+class ACLAdaptationRepHeader
+{
+
+private:
+    static ACL::Prototype RegistryProtoype;
+    static ACLStrategised<HttpHeader*> RegistryEntry_;
+};
+
+#endif /* SQUID_ACLADAPTATIONREPHEADER_H */
+
diff -urN -a --binary source-base/src/acl/Makefile.am source-new/src/acl/Makefile.am
--- source-base/src/acl/Makefile.am	2016-02-01 15:28:46.188123000 +0000
+++ source-new/src/acl/Makefile.am	2016-02-01 16:41:08.099453000 +0000
@@ -71,6 +71,8 @@
 	HierCode.h \
 	HttpHeaderData.cc \
 	HttpHeaderData.h \
+	AdaptationRepHeader.cc \
+	AdaptationRepHeader.h \
 	HttpRepHeader.cc \
 	HttpRepHeader.h \
 	HttpReqHeader.cc \
diff -urN -a --binary source-base/src/AclRegs.cc source-new/src/AclRegs.cc
--- source-base/src/AclRegs.cc	2016-02-01 15:28:46.188123000 +0000
+++ source-new/src/AclRegs.cc	2016-02-01 16:41:08.099453000 +0000
@@ -16,6 +16,7 @@
 #if USE_ADAPTATION
 #include "acl/AdaptationService.h"
 #include "acl/AdaptationServiceData.h"
+#include "acl/AdaptationRepHeader.h"
 #endif
 #include "acl/AllOf.h"
 #include "acl/AnyOf.h"
@@ -223,5 +224,7 @@
 #if USE_ADAPTATION
 ACL::Prototype ACLAdaptationService::RegistryProtoype(&ACLAdaptationService::RegistryEntry_, "adaptation_service");
 ACLStrategised<const char *> ACLAdaptationService::RegistryEntry_(new ACLAdaptationServiceData, ACLAdaptationServiceStrategy::Instance(), "adaptation_service");
+ACL::Prototype ACLAdaptationRepHeader::RegistryProtoype(&ACLAdaptationRepHeader::RegistryEntry_, "adaptation_rep_header");
+ACLStrategised<HttpHeader*> ACLAdaptationRepHeader::RegistryEntry_(new ACLHTTPHeaderData, ACLAdaptationRepHeaderStrategy::Instance(), "adaptation_rep_header");
 #endif
 
diff -urN -a --binary source-base/src/cf.data.pre source-new/src/cf.data.pre
--- source-base/src/cf.data.pre	2016-05-16 15:15:47.984690000 +0100
+++ source-new/src/cf.data.pre	2016-05-17 14:44:33.262956000 +0100
@@ -1117,6 +1121,10 @@
 	  # adaptation_meta because it starts matching immediately after
 	  # the service has been selected for adaptation.
 
+	acl aclname adaptation_rep_header header-name [-i] any\.regex\.here
+	  # regex match against the adaptation reply headers.  e.g. ICAP
+	  # reply headers. [fast]
+
 IF USE_OPENSSL
 	acl aclname ssl_error errorname
 	  # match against SSL certificate validation error [fast]
diff -urN -a --binary source-base/src/HttpRequest.cc source-new/src/HttpRequest.cc
--- source-base/src/HttpRequest.cc	2016-05-16 15:15:47.984690000 +0100
+++ source-new/src/HttpRequest.cc	2016-05-17 14:44:33.262956000 +0100
@@ -436,7 +436,11 @@
 Adaptation::History::Pointer
 HttpRequest::adaptLogHistory() const
 {
-    return HttpRequest::adaptHistory(Log::TheConfig.hasAdaptToken);
+    // XXX Adaptation history creation is always turned on so that the
+    // adaptation_rep_header acl works.  Needs to be fixed to only
+    // turn on when a adaptation_rep_header is configured.
+    return HttpRequest::adaptHistory(true);
+//    return HttpRequest::adaptHistory(Log::TheConfig.hasAdaptToken);
 }
 
 void
