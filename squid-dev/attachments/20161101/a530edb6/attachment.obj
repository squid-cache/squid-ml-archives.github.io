=== modified file 'src/sbuf/Algorithms.h'
--- src/sbuf/Algorithms.h	2016-02-29 10:11:37 +0000
+++ src/sbuf/Algorithms.h	2016-11-01 18:55:52 +0000
@@ -57,27 +57,33 @@
 /// join all the SBuf in a container of SBuf into a single SBuf, separating with separator
 template <class Container>
 SBuf
-SBufContainerJoin(const Container &items, const SBuf& separator)
+SBufContainerJoin(const Container &items, const SBuf& separator,
+		const SBuf& prefix = SBuf(), const SBuf& suffix = SBuf())
 {
     // optimization: pre-calculate needed storage
     const SBuf::size_type sz = std::accumulate(items.begin(), items.end(), 0, SBufAddLength(separator));
+    SBuf rv;
 
     // sz can be zero in two cases: either items is empty, or all items
     //  are zero-length. In the former case, we must protect against
     //  dereferencing the iterator later on, and checking sz is more efficient
     //  than checking items.size(). This check also provides an optimization
     //  for the latter case without adding complexity.
-    if (sz == 0)
-        return SBuf();
-
-    SBuf rv;
-    rv.reserveSpace(sz);
-
+    if (sz == 0) {
+    	rv = prefix;
+    	rv.append(suffix);
+        return rv;
+    }
+
+    rv.reserveSpace(sz + prefix.length() + suffix.length());
+
+    rv.append(prefix);
     typename Container::const_iterator i(items.begin());
     rv.append(*i);
     ++i;
     for (; i != items.end(); ++i)
         rv.append(separator).append(*i);
+    rv.append(suffix);
     return rv;
 }
 

=== modified file 'src/tests/testSBufList.cc'
--- src/tests/testSBufList.cc	2016-03-01 09:58:44 +0000
+++ src/tests/testSBufList.cc	2016-11-01 19:45:47 +0000
@@ -38,10 +38,12 @@
 {
     SBufList foo;
     CPPUNIT_ASSERT_EQUAL(SBuf(""),SBufContainerJoin(foo,SBuf()));
-    CPPUNIT_ASSERT_EQUAL(SBuf(""),SBufContainerJoin(foo,SBuf()));
     for (int j = 0; j < sbuf_tokens_number; ++j)
         foo.push_back(tokens[j]);
     SBuf joined=SBufContainerJoin(foo,SBuf(" "));
     CPPUNIT_ASSERT_EQUAL(literal,joined);
+    SBuf s1("1"), s2("2"), s3("3"), full("(1,2,3)");
+    SBufList sl{s1,s2,s3};
+    CPPUNIT_ASSERT_EQUAL(full, SBufContainerJoin(sl, SBuf(","), SBuf("("), SBuf(")")));
 }
 

