Testing allocations in various JoinContainerIntoSBuf() implementations.

=== modified file 'src/AccessLogEntry.cc'
--- src/AccessLogEntry.cc	2016-10-28 11:55:44 +0000
+++ src/AccessLogEntry.cc	2016-11-04 17:47:11 +0000
@@ -15,6 +15,73 @@
 #if USE_OPENSSL
 #include "ssl/support.h"
 
+static SBuf value1("value1 ");
+static SBuf value2("value2 ");
+static SBuf value3("value3 ");
+static SBuf value4("value4 ");
+
+void JoinContainerIntoSBufPrep()
+{
+    debugs(1,1, value1 << value2 << value3);
+}
+
+#define progress(where) debugs(1,2, where)
+
+SBuf JoinContainerIntoSBuf1()
+{
+    progress("started");
+    SBuf buf;
+    progress("created empty buf");
+    buf.reserveSpace(100);
+    progress("reserved space");
+    buf.append(value1);
+    progress("appended first item");
+    buf.append(value1);
+    progress("appended second item");
+    return buf;
+}
+
+
+SBuf JoinContainerIntoSBuf2(SBuf &buf)
+{
+    progress("started");
+    progress("did not create an empty buf");
+    buf.reserveSpace(100);
+    progress("reserved space");
+    buf.append(value2);
+    progress("appended first item");
+    buf.append(value2);
+    progress("appended second item");
+    return buf;
+}
+
+SBuf &JoinContainerIntoSBuf3(SBuf &buf)
+{
+    progress("started");
+    buf.reserveSpace(100);
+    progress("reserved space");
+    buf.append(value3);
+    progress("appended first item");
+    buf.append(value3);
+    progress("appended second item");
+    return buf;
+}
+
+SBuf &JoinContainerIntoSBuf4(SBuf &buf)
+{
+    progress("started");
+    SBufReservationRequirements spaceRequirements;
+    spaceRequirements.idealSpace = 100;
+    spaceRequirements.minSpace = 100;
+    buf.reserve(spaceRequirements);
+    progress("reserved space");
+    buf.append(value4);
+    progress("appended first item");
+    buf.append(value4);
+    progress("appended second item");
+    return buf;
+}
+
 AccessLogEntry::SslDetails::SslDetails(): user(NULL), bumpMode(::Ssl::bumpEnd)
 {
 }

=== modified file 'src/main.cc'
--- src/main.cc	2016-10-03 04:33:08 +0000
+++ src/main.cc	2016-11-04 17:44:17 +0000
@@ -1408,6 +1408,12 @@
     }
 }
 
+extern void JoinContainerIntoSBufPrep();
+extern SBuf JoinContainerIntoSBuf1();
+extern SBuf JoinContainerIntoSBuf2(SBuf &buf);
+extern SBuf &JoinContainerIntoSBuf3(SBuf &buf);
+extern SBuf &JoinContainerIntoSBuf4(SBuf &buf);
+
 int
 SquidMain(int argc, char **argv)
 {
@@ -1616,6 +1622,31 @@
 
 #endif
 
+    JoinContainerIntoSBufPrep();
+    debugs(1,1, "test starts");
+    {
+        SBuf buffer;
+        buffer.reserveSpace(1024);
+        debugs(1,1, "test appended #0: " << buffer);
+
+        buffer.append("Foo: ", 5);
+        buffer.append(JoinContainerIntoSBuf1());
+        debugs(1,1, "test appended #1: " << buffer);
+
+        buffer.append("Bar: ", 5);
+        buffer.append(JoinContainerIntoSBuf2(buffer));
+        debugs(1,1, "test appended #2: " << buffer);
+
+        buffer.append("Baz: ", 5);
+        buffer.append(JoinContainerIntoSBuf3(buffer));
+        debugs(1,1, "test appended #3: " << buffer);
+
+        buffer.append("Boo: ", 5);
+        buffer.append(JoinContainerIntoSBuf4(buffer));
+        debugs(1,1, "test appended #4: " << buffer);
+    }
+    debugs(1,1, "test ends");
+
     /* main loop */
     EventLoop mainLoop;
 

