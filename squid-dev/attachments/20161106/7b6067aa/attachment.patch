Testing allocations in various JoinContainerIntoSBuf() implementations.

This version makes each test case independent from other test cases.

Also added JoinContainerIntoSBuf5() that uses trunk r14917 to provide a
simpler allocation-free implementation.

=== modified file 'src/AccessLogEntry.cc'
--- src/AccessLogEntry.cc	2016-10-28 11:55:44 +0000
+++ src/AccessLogEntry.cc	2016-11-07 00:20:05 +0000
@@ -15,6 +15,85 @@
 #if USE_OPENSSL
 #include "ssl/support.h"
 
+static SBuf value1("value1 ");
+static SBuf value2("value2 ");
+
+void JoinContainerIntoSBufPrep()
+{
+    debugs(1,1, value1 << value2);
+}
+
+#define progress(where) debugs(1,2, where)
+
+SBuf JoinContainerIntoSBuf1(SBuf &/*unused; present just to keep APIs the same for testing */)
+{
+    progress("started");
+    SBuf buf;
+    progress("created empty buf");
+    buf.reserveSpace(100);
+    progress("reserved space");
+    buf.append(value1);
+    progress("appended first item");
+    buf.append(value1);
+    progress("appended second item");
+    return buf;
+}
+
+
+SBuf JoinContainerIntoSBuf2(SBuf &buf)
+{
+    progress("started");
+    progress("did not create an empty buf");
+    buf.reserveSpace(100);
+    progress("reserved space");
+    buf.append(value2);
+    progress("appended first item");
+    buf.append(value2);
+    progress("appended second item");
+    return buf;
+}
+
+SBuf &JoinContainerIntoSBuf3(SBuf &buf)
+{
+    progress("started");
+    buf.reserveSpace(100);
+    progress("reserved space");
+    buf.append(value1);
+    progress("appended first item");
+    buf.append(value2);
+    progress("appended second item");
+    return buf;
+}
+
+SBuf &JoinContainerIntoSBuf4(SBuf &buf)
+{
+    progress("started");
+    SBufReservationRequirements spaceRequirements;
+    spaceRequirements.idealSpace = 100;
+    spaceRequirements.minSpace = 100;
+    buf.reserve(spaceRequirements);
+    progress("reserved space");
+    buf.append(value1);
+    progress("appended first item");
+    buf.append(value2);
+    progress("appended second item");
+    return buf;
+}
+
+SBuf &JoinContainerIntoSBuf5(SBuf &buf)
+{
+    progress("started");
+    SBufReservationRequirements spaceRequirements;
+    spaceRequirements.minSpace = 100;
+    buf.reserve(spaceRequirements);
+    progress("reserved space");
+    buf.append(value1);
+    progress("appended first item");
+    buf.append(value2);
+    progress("appended second item");
+    return buf;
+}
+
 AccessLogEntry::SslDetails::SslDetails(): user(NULL), bumpMode(::Ssl::bumpEnd)
 {
 }

=== modified file 'src/main.cc'
--- src/main.cc	2016-10-03 04:33:08 +0000
+++ src/main.cc	2016-11-07 00:16:06 +0000
@@ -1408,6 +1408,31 @@
     }
 }
 
+extern void JoinContainerIntoSBufPrep();
+extern SBuf JoinContainerIntoSBuf1(SBuf &);
+extern SBuf JoinContainerIntoSBuf2(SBuf &buf);
+extern SBuf &JoinContainerIntoSBuf3(SBuf &buf);
+extern SBuf &JoinContainerIntoSBuf4(SBuf &buf);
+extern SBuf &JoinContainerIntoSBuf5(SBuf &buf);
+
+template <class Function>
+static
+void
+testJoin(const char *label, Function join)
+{
+    debugs(1,1, "started testing " << label);
+
+    SBuf buffer;
+    buffer.reserveSpace(1024);
+    debugs(1,1, "reserved space for " << label);
+    buffer.append("Foo: ", 5);
+    debugs(1,1, "appended Foo for " << label);
+    const auto &result = join(buffer);
+    // to simplify, let's not append join() result;
+    // only JoinContainerIntoSBuf1() needs that anyway
+    debugs(1,1, "finished testing " << label << " with " << result);
+}
+
 int
 SquidMain(int argc, char **argv)
 {
@@ -1616,6 +1641,17 @@
 
 #endif
 
+    JoinContainerIntoSBufPrep();
+    debugs(1,1, "test starts");
+    {
+        testJoin("JoinContainerIntoSBuf1", JoinContainerIntoSBuf1);
+        testJoin("JoinContainerIntoSBuf2", JoinContainerIntoSBuf2);
+        testJoin("JoinContainerIntoSBuf3", JoinContainerIntoSBuf3);
+        testJoin("JoinContainerIntoSBuf4", JoinContainerIntoSBuf4);
+        testJoin("JoinContainerIntoSBuf5", JoinContainerIntoSBuf5);
+    }
+    debugs(1,1, "test ends");
+
     /* main loop */
     EventLoop mainLoop;
 

