Compilation errors fix after r15057.

=== modified file 'src/MessageBucket.h'
--- src/MessageBucket.h	2017-02-19 17:13:27 +0000
+++ src/MessageBucket.h	2017-02-20 07:20:53 +0000
@@ -2,40 +2,40 @@
  * Copyright (C) 1996-2017 The Squid Software Foundation and contributors
  *
  * Squid software is distributed under GPLv2+ license and includes
  * contributions from numerous individuals and organizations.
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #ifndef MESSAGEBUCKET_H
 #define MESSAGEBUCKET_H
 
 #if USE_DELAY_POOLS
 
 #include "BandwidthBucket.h"
 #include "base/RefCount.h"
 #include "comm/forward.h"
 #include "MessageDelayPools.h"
 
 /// Limits Squid-to-client bandwidth for each matching response
 class MessageBucket : public RefCountable, public BandwidthBucket
 {
     MEMPROXY_CLASS(MessageBucket);
 
 public:
     typedef RefCount<MessageBucket> Pointer;
 
     MessageBucket(const int speed, const int initialLevelPercent, const double sizeLimit, MessageDelayPool::Pointer pool);
 
     /* BandwidthBucket API */
     virtual int quota() override;
     virtual void scheduleWrite(Comm::IoCallback *state) override;
-    virtual void reduceBucket(int len);
+    virtual void reduceBucket(int len) override;
 
 private:
     MessageDelayPool::Pointer theAggregate;
 };
 
 #endif /* USE_DELAY_POOLS */
 
 #endif
 

=== modified file 'src/client_db.cc'
--- src/client_db.cc	2017-02-19 17:13:27 +0000
+++ src/client_db.cc	2017-02-20 07:26:00 +0000
@@ -249,61 +249,61 @@
 
     debugs(1, DBG_CRITICAL, "WARNING: Probable misconfigured neighbor at " << key);
 
     debugs(1, DBG_CRITICAL, "WARNING: " << ND << " of the last " << NR <<
            " ICP replies are DENIED");
 
     debugs(1, DBG_CRITICAL, "WARNING: No replies will be sent for the next " <<
            CUTOFF_SECONDS << " seconds");
 
     c->cutoff.time = squid_curtime;
 
     c->cutoff.n_req = c->Icp.n_requests;
 
     c->cutoff.n_denied = c->Icp.result_hist[LOG_UDP_DENIED];
 
     return 1;
 }
 
 void
 clientdbDump(StoreEntry * sentry)
 {
     const char *name;
     int icp_total = 0;
     int icp_hits = 0;
     int http_total = 0;
     int http_hits = 0;
     storeAppendPrintf(sentry, "Cache Clients:\n");
     hash_first(client_table);
 
     while (hash_link *hash = hash_next(client_table)) {
-        const ClientInfo *c = reinterpret_cast<const ClientInfo *>(hash);
+        const ClientInfo *c = static_cast<const ClientInfo *>(hash);
         storeAppendPrintf(sentry, "Address: %s\n", hashKeyStr(hash));
         if ( (name = fqdncache_gethostbyaddr(c->addr, 0)) ) {
             storeAppendPrintf(sentry, "Name:    %s\n", name);
         }
         storeAppendPrintf(sentry, "Currently established connections: %d\n",
                           c->n_established);
         storeAppendPrintf(sentry, "    ICP  Requests %d\n",
                           c->Icp.n_requests);
 
         for (LogTags_ot l = LOG_TAG_NONE; l < LOG_TYPE_MAX; ++l) {
             if (c->Icp.result_hist[l] == 0)
                 continue;
 
             icp_total += c->Icp.result_hist[l];
 
             if (LOG_UDP_HIT == l)
                 icp_hits += c->Icp.result_hist[l];
 
             storeAppendPrintf(sentry, "        %-20.20s %7d %3d%%\n", LogTags(l).c_str(), c->Icp.result_hist[l], Math::intPercent(c->Icp.result_hist[l], c->Icp.n_requests));
         }
 
         storeAppendPrintf(sentry, "    HTTP Requests %d\n", c->Http.n_requests);
 
         for (LogTags_ot l = LOG_TAG_NONE; l < LOG_TYPE_MAX; ++l) {
             if (c->Http.result_hist[l] == 0)
                 continue;
 
             http_total += c->Http.result_hist[l];
 
             if (LogTags(l).isTcpHit())

