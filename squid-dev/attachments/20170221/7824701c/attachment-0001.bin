Compilation error fix after r15057.

=== modified file 'src/client_db.cc'
--- src/client_db.cc	2017-02-19 17:13:27 +0000
+++ src/client_db.cc	2017-02-20 21:24:10 +0000
@@ -413,61 +413,61 @@
 
         debugs(49, 2, "clientdbGC: Removed " << cleanup_removed << " entries");
     }
 }
 
 static void
 clientdbStartGC(void)
 {
     max_clients = statCounter.client_http.clients;
     cleanup_running = 1;
     cleanup_removed = 0;
     clientdbGC(NULL);
 }
 
 #if SQUID_SNMP
 
 Ip::Address *
 client_entry(Ip::Address *current)
 {
     char key[MAX_IPSTRLEN];
     hash_first(client_table);
 
     if (current) {
         current->toStr(key,MAX_IPSTRLEN);
         while (hash_link *hash = hash_next(client_table)) {
             if (!strcmp(key, hashKeyStr(hash)))
                 break;
         }
     }
 
-    ClientInfo *c = reinterpret_cast<ClientInfo *>(hash_next(client_table));
+    ClientInfo *c = static_cast<ClientInfo *>(hash_next(client_table));
 
     hash_last(client_table);
 
     return c ? &c->addr : nullptr;
 }
 
 variable_list *
 snmp_meshCtblFn(variable_list * Var, snint * ErrP)
 {
     char key[MAX_IPSTRLEN];
     ClientInfo *c = NULL;
     Ip::Address keyIp;
 
     *ErrP = SNMP_ERR_NOERROR;
     MemBuf tmp;
     debugs(49, 6, HERE << "Current : length=" << Var->name_length << ": " << snmpDebugOid(Var->name, Var->name_length, tmp));
     if (Var->name_length == 16) {
         oid2addr(&(Var->name[12]), keyIp, 4);
     } else if (Var->name_length == 28) {
         oid2addr(&(Var->name[12]), keyIp, 16);
     } else {
         *ErrP = SNMP_ERR_NOSUCHNAME;
         return NULL;
     }
 
     keyIp.toStr(key, sizeof(key));
     debugs(49, 5, HERE << "[" << key << "] requested!");
     c = (ClientInfo *) hash_lookup(client_table, key);
 
     if (c == NULL) {

