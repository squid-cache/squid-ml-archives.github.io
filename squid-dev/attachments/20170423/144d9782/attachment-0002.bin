=== modified file 'src/security/Session.cc'
--- src/security/Session.cc	2017-02-05 06:12:19 +0000
+++ src/security/Session.cc	2017-04-21 12:06:49 +0000
@@ -122,6 +122,8 @@
     gnutls_session_t tmp;
     errCode = gnutls_init(&tmp, static_cast<unsigned int>(type) | GNUTLS_NONBLOCK);
     Security::SessionPointer session(tmp, [](gnutls_session_t p) {
+        // free any Security::Extras object associated with this session
+        delete static_cast<Security::Extras *>(gnutls_session_get_ptr(p));
         debugs(83, 5, "gnutls_deinit session=" << (void*)p);
         gnutls_deinit(p);
     });
@@ -201,6 +203,49 @@
     }
 }
 
+#if USE_OPENSSL
+/// "free" function for Security::Extras
+static void
+free_Extras(void *, void *ptr, CRYPTO_EX_DATA *, int, long, void *)
+{
+    delete static_cast<Security::Extras *>(ptr);
+}
+#endif
+
+Security::Extras *
+Security::Extras::From(const SessionPointer &session)
+{
+    if (!session)
+        return nullptr;
+
+    Security::Extras *extras = nullptr;
+
+    // get any data we attached to the session earlier
+#if USE_OPENSSL
+    // initialize extended-data registration with OpenSSL if needed
+    static int extras_index = -1;
+    if (extras_index == -1) {
+        extras_index = SSL_get_ex_new_index(0, const_cast<char *>("Security::Extras"), nullptr, nullptr, free_Extras);
+    }
+
+    extras = static_cast<Security::Extras *>(SSL_get_ex_data(session.get(), extras_index));
+#elif USE_GNUTLS
+    extras = static_cast<Security::Extras *>(gnutls_session_get_ptr(session.get()));
+#endif
+
+    // allocate and attach a new data object if missing
+    if (!extras) {
+        extras = new Security::Extras;
+#if USE_OPENSSL
+        SSL_set_ex_data(session.get(), extras_index, extras);
+#elif USE_GNUTLS
+        gnutls_session_set_ptr(session.get(), extras);
+#endif
+    }
+
+    return extras;
+}
+
 bool
 Security::SessionIsResumed(const Security::SessionPointer &s)
 {

=== modified file 'src/security/Session.h'
--- src/security/Session.h	2017-02-10 13:35:05 +0000
+++ src/security/Session.h	2017-04-21 11:11:18 +0000
@@ -11,6 +11,7 @@
 
 #include "base/HardFun.h"
 #include "comm/forward.h"
+#include "sbuf/SBuf.h"
 #include "security/LockingPointer.h"
 
 #include <memory>
@@ -56,6 +57,20 @@
 
 #endif
 
+/// extra data which we attach to a TLS session
+class Extras
+{
+public:
+    SBuf serverName;
+
+public:
+    /// The extra data (if any) associated with a session.
+    /// \note Guaranteed to return an object if the session pointer is set,
+    ///       will create if necessary.
+    /// \retval nullptr only if session is nullptr
+    static Security::Extras *From(const SessionPointer &);
+};
+
 /// send the shutdown/bye notice for an active TLS session.
 void SessionSendGoodbye(const Security::SessionPointer &);
 

=== modified file 'src/tests/stub_libsecurity.cc'
--- src/tests/stub_libsecurity.cc	2017-02-05 06:12:19 +0000
+++ src/tests/stub_libsecurity.cc	2017-04-21 11:12:59 +0000
@@ -98,6 +98,7 @@
 bool CreateClientSession(const Security::ContextPointer &, const Comm::ConnectionPointer &, const char *) STUB_RETVAL(false)
 bool CreateServerSession(const Security::ContextPointer &, const Comm::ConnectionPointer &, const char *) STUB_RETVAL(false)
 void SessionSendGoodbye(const Security::SessionPointer &) STUB
+Security::Extras *Security::Extras::From(const Security::SessionPointer &) STUB_RETVAL(nullptr)
 bool SessionIsResumed(const Security::SessionPointer &) STUB_RETVAL(false)
 void MaybeGetSessionResumeData(const Security::SessionPointer &, Security::SessionStatePointer &) STUB
 void SetSessionResumeData(const Security::SessionPointer &, const Security::SessionStatePointer &) STUB

