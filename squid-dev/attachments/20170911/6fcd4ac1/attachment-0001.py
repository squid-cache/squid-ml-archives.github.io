#!/usr/bin/python

import socket
import struct
import ssl
import sys

HOSTNAME="nexus-websocket-b.intercom.io"
PORT=443

HANDSHAKE=[0x16, 0x03, 0x01, 0x00, 0xc9, 0x01, 0x00, 0x00, 
0xc5, 0x03, 0x03, 0x55, 0xb0, 0x25, 0xb8, 0x90, 
0xbd, 0x9e, 0x2a, 0x78, 0xc9, 0xca, 0xe7, 0x97, 
0xbd, 0x37, 0x1a, 0x4c, 0xa2, 0x4a, 0x2b, 0x12, 
0xca, 0x51, 0x42, 0xe4, 0x1a, 0x8b, 0x5b, 0x74, 
0xd1, 0xc2, 0xa3, 0x00, 0x00, 0x1e, 0xc0, 0x2b, 
0xc0, 0x2f, 0xcc, 0xa9, 0xcc, 0xa8, 0xc0, 0x2c, 
0xc0, 0x30, 0xc0, 0x0a, 0xc0, 0x09, 0xc0, 0x13, 
0xc0, 0x14, 0x00, 0x33, 0x00, 0x39, 0x00, 0x2f, 
0x00, 0x35, 0x00, 0x0a, 0x01, 0x00, 0x00, 0x7e, 
0x00, 0x00, 0x00, 0x22, 0x00, 0x20, 0x00, 0x00, 
0x1d, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x2d, 0x77, 
0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 
0x2d, 0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 
0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x6f, 0x00, 0x17, 
0x00, 0x00, 0xff, 0x01, 0x00, 0x01, 0x00, 0x00, 
0x0a, 0x00, 0x0a, 0x00, 0x08, 0x00, 0x1d, 0x00, 
0x17, 0x00, 0x18, 0x00, 0x19, 0x00, 0x0b, 0x00, 
0x02, 0x01, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 
0x10, 0x00, 0x0e, 0x00, 0x0c, 0x02, 0x68, 0x32, 
0x08, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x31, 0x2e, 
0x31, 0x00, 0x05, 0x00, 0x05, 0x01, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x0d, 0x00, 0x18, 0x00, 0x16, 
0x04, 0x03, 0x05, 0x03, 0x06, 0x03, 0x08, 0x04, 
0x08, 0x05, 0x08, 0x06, 0x04, 0x01, 0x05, 0x01, 
0x06, 0x01, 0x02, 0x03, 0x02, 0x01]

# Construct the binary handshake message.  HANDSHAKE contains a copy of an
# SSL client handshake which was captured with Wireshark.
HANDSHAKE_STR=""
for h in HANDSHAKE:
	HANDSHAKE_STR += chr(h)


count=0
max_connections = 1000
socks = []

# Open max_connections connections to the remote server and send the handshake.
while len(socks) < max_connections:
	count += 1
	if count % 100 == 0:
		print count

	HOST = socket.getaddrinfo(HOSTNAME, PORT)[0][4][0]
	sock=socket.socket()

	# Turn off SO_LINGER so the socket gets an RST when closed instead
	# of cleanly shutting down with a FIN.
	l_onoff = 1
	l_linger = 0
	sock.setsockopt(socket.SOL_SOCKET, socket.SO_LINGER, struct.pack('ii', l_onoff, l_linger))

	sock.connect((HOST, PORT))
	sock.send(HANDSHAKE_STR)
	socks.append(sock)
	del sock

while len(socks) > 0:
	# Wait until we've received something from all sockets - this should
	# be the server handshake.
	socks.pop(0).recv(1)

# Script exits here and the sockets will all be torn down, emitting RSTs.

