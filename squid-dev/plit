2014-November.txt:-     * the response splitting countermeasures is extremely likely to trigger on this,
2014-October.txt:> concerned. It would be possible to split this option into 4 or more
2014-October.txt:> should not be done until there is a specific use case for such a split.
2014-October.txt:of "in the middle of handling some transaction". We could split hairs
2014-October.txt:- Split Ssl::PeerConnector::checkForPeekAndSplice  to two methods
2014-October.txt:- Split Ssl::PeerConnector::checkForPeekAndSplice  to two methods
2014-October.txt:     // temporary hack to avoid splitting this huge function with sensitive code
2014-October.txt:     // temporary hack to avoid splitting this huge function with sensitive code
2014-September.txt:> rename/move (we do not need to split HTTP code out of it -- that
2015-April.txt:   - Splits Ssl::PeerConnector class into Ssl::PeerConnector parent and 
2015-April.txt:>   - Splits Ssl::PeerConnector class into Ssl::PeerConnector parent and
2015-April.txt:too fuzzy right now. Though I am liking the class split.
2015-April.txt:>>    - Splits Ssl::PeerConnector class into Ssl::PeerConnector parent and
2015-April.txt:> too fuzzy right now. Though I am liking the class split.
2015-August.txt:c) refactor the deepest memory allocators to split their working code
2015-August.txt:think it is (or should be) related to splitting headers into multiple
2015-August.txt:how we split the storage container in the future (if such a split is
2015-August.txt:this will probably save a lot more cycles than splitting header field
2015-August.txt:done to polish that split based on actual typical use cases.
2015-August.txt:FYI messages), then we may need to add a notice(kind) parameter or split
2015-August.txt:> done to polish that split based on actual typical use cases.
2015-August.txt:> FYI messages), then we may need to add a notice(kind) parameter or split
2015-August.txt:>> done to polish that split based on actual typical use cases.
2015-August.txt:>>> done to polish that split based on actual typical use cases.
2015-August.txt:I'm resisting the urge to request this be split to a different patch. :-P
2015-August.txt:* splits the exiting parse method into 3 distinct stages; ICAP-reply,
2015-August.txt:> I'm resisting the urge to request this be split to a different patch. :-P
2015-August.txt:linuxdoc -B html -T 2 --split=0 ../../.././test-suite/../doc/release-notes/release-4.sgml
2015-August.txt:linuxdoc -B html -T 2 --split=0 ../../.././test-suite/../doc/release-notes/release-4.sgml
2015-August.txt:linuxdoc -B html -T 2 --split=0 ../../.././test-suite/../doc/release-notes/release-4.sgml
2015-August.txt:linuxdoc -B html -T 2 --split=0 ../../.././test-suite/../doc/release-notes/release-4.sgml
2015-August.txt:linuxdoc -B html -T 2 --split=0 ../../.././test-suite/../doc/release-notes/release-4.sgml
2015-August.txt:linuxdoc -B html -T 2 --split=0 ../../.././test-suite/../doc/release-notes/release-4.sgml
2015-August.txt:Subject: [squid-dev] [PATCH] splitting typedefs.h and enums.h
2015-August.txt:  this is a snapshot of my current effort to split typedefs.h and enums.h,
2015-August.txt:Subject: [squid-dev] [PATCH] splitting typedefs.h and enums.h
2015-August.txt:>   this is a snapshot of my current effort to split typedefs.h and enums.h,
2015-August.txt:Subject: [squid-dev] [PATCH] splitting typedefs.h and enums.h
2015-August.txt:> >   this is a snapshot of my current effort to split typedefs.h and
2015-August.txt:Subject: [squid-dev] [PATCH] splitting typedefs.h and enums.h
2015-August.txt:>>>   this is a snapshot of my current effort to split typedefs.h and
2015-August.txt:Subject: [squid-dev] [PATCH] splitting typedefs.h and enums.h
2015-August.txt:Subject: [squid-dev] [PATCH] splitting typedefs.h and enums.h
2015-August.txt:>   this is a snapshot of my current effort to split typedefs.h and
2015-December.txt:split the misleading ACL into several ACLs with different names to avoid
2015-December.txt:> split the misleading ACL into several ACLs with different names to avoid
2015-December.txt:Not much less RAM to matter. Each of the split ACLs will have more
2015-December.txt:> Not much less RAM to matter. Each of the split ACLs will have more
2015-December.txt:>> Not much less RAM to matter. Each of the split ACLs will have more
2015-December.txt:Maybe we should deprecate +i and warn admins to split the line where the
2015-December.txt:> Maybe we should deprecate +i and warn admins to split the line where the
2015-December.txt:use? You would have to split the definition from the declaration to
2015-December.txt:> use? You would have to split the definition from the declaration to
2015-December.txt:>> use? You would have to split the definition from the declaration to
2015-December.txt:>>> use? You would have to split the definition from the declaration to
2015-December.txt:   - Split Client::abortTransaction to Client::abortOnData and to 
2015-January.txt:../../../tools/squidclient/Transport.cc:151:228: error: 'IPV6_SPECIAL_SPLITSTACK' was not declared in this scope
2015-January.txt:../../../tools/squidclient/Transport.cc:151:228: error: 'IPV6_SPECIAL_SPLITSTACK' was not declared in this scope
2015-January.txt:    while ((2) <= scParams.verbosityLevel) {std::cerr << "Transport detected: IPv4" << ((Ip::EnableIpv6 & IPV6_SPECIAL_V4MAPPING) ? "-mapped " : "") << (Ip::EnableIpv6 == IPV6_OFF ? "-only" : " and IPv6") << ((Ip::EnableIpv6 & IPV6_SPECIAL_SPLITSTACK) ? " split-stack" : "") << std::endl; break;};
2015-January.txt:    while ((2) <= scParams.verbosityLevel) {std::cerr << "Transport detected: IPv4" << ((Ip::EnableIpv6 & IPV6_SPECIAL_V4MAPPING) ? "-mapped " : "") << (Ip::EnableIpv6 == IPV6_OFF ? "-only" : " and IPv6") << ((Ip::EnableIpv6 & IPV6_SPECIAL_SPLITSTACK) ? " split-stack" : "") << std::endl; break;};
2015-January.txt:    while ((2) <= scParams.verbosityLevel) {std::cerr << "Transport detected: IPv4" << ((Ip::EnableIpv6 & IPV6_SPECIAL_V4MAPPING) ? "-mapped " : "") << (Ip::EnableIpv6 == IPV6_OFF ? "-only" : " and IPv6") << ((Ip::EnableIpv6 & IPV6_SPECIAL_SPLITSTACK) ? " split-stack" : "") << std::endl; break;};
2015-January.txt:    while ((2) <= scParams.verbosityLevel) {std::cerr << "Transport detected: IPv4" << ((Ip::EnableIpv6 & IPV6_SPECIAL_V4MAPPING) ? "-mapped " : "") << (Ip::EnableIpv6 == IPV6_OFF ? "-only" : " and IPv6") << ((Ip::EnableIpv6 & IPV6_SPECIAL_SPLITSTACK) ? " split-stack" : "") << std::endl; break;};
2015-January.txt:    while ((2) <= scParams.verbosityLevel) {std::cerr << "Transport detected: IPv4" << ((Ip::EnableIpv6 & IPV6_SPECIAL_V4MAPPING) ? "-mapped " : "") << (Ip::EnableIpv6 == IPV6_OFF ? "-only" : " and IPv6") << ((Ip::EnableIpv6 & IPV6_SPECIAL_SPLITSTACK) ? " split-stack" : "") << std::endl; break;};
2015-January.txt:../../../tools/squidclient/Transport.cc:151:228: error: use of undeclared identifier 'IPV6_SPECIAL_SPLITSTACK'
2015-January.txt:    while ((2) <= scParams.verbosityLevel) {std::cerr << "Transport detected: IPv4" << ((Ip::EnableIpv6 & IPV6_SPECIAL_V4MAPPING) ? "-mapped " : "") << (Ip::EnableIpv6 == IPV6_OFF ? "-only" : " and IPv6") << ((Ip::EnableIpv6 & IPV6_SPECIAL_SPLITSTACK) ? " split-stack" : "") << std::endl; break;};
2015-January.txt:../../../tools/squidclient/Transport.cc:151:228: error: use of undeclared identifier 'IPV6_SPECIAL_SPLITSTACK'
2015-January.txt:../../../tools/squidclient/Transport.cc:151:228: error: 'IPV6_SPECIAL_SPLITSTACK' was not declared in this scope
2015-January.txt:../../../tools/squidclient/Transport.cc:151:228: error: 'IPV6_SPECIAL_SPLITSTACK' was not declared in this scope
2015-January.txt:    while ((2) <= scParams.verbosityLevel) {std::cerr << "Transport detected: IPv4" << ((Ip::EnableIpv6 & IPV6_SPECIAL_V4MAPPING) ? "-mapped " : "") << (Ip::EnableIpv6 == IPV6_OFF ? "-only" : " and IPv6") << ((Ip::EnableIpv6 & IPV6_SPECIAL_SPLITSTACK) ? " split-stack" : "") << std::endl; break;};
2015-January.txt:    while ((2) <= scParams.verbosityLevel) {std::cerr << "Transport detected: IPv4" << ((Ip::EnableIpv6 & IPV6_SPECIAL_V4MAPPING) ? "-mapped " : "") << (Ip::EnableIpv6 == IPV6_OFF ? "-only" : " and IPv6") << ((Ip::EnableIpv6 & IPV6_SPECIAL_SPLITSTACK) ? " split-stack" : "") << std::endl; break;};
2015-January.txt:    while ((2) <= scParams.verbosityLevel) {std::cerr << "Transport detected: IPv4" << ((Ip::EnableIpv6 & IPV6_SPECIAL_V4MAPPING) ? "-mapped " : "") << (Ip::EnableIpv6 == IPV6_OFF ? "-only" : " and IPv6") << ((Ip::EnableIpv6 & IPV6_SPECIAL_SPLITSTACK) ? " split-stack" : "") << std::endl; break;};
2015-January.txt:    while ((2) <= scParams.verbosityLevel) {std::cerr << "Transport detected: IPv4" << ((Ip::EnableIpv6 & IPV6_SPECIAL_V4MAPPING) ? "-mapped " : "") << (Ip::EnableIpv6 == IPV6_OFF ? "-only" : " and IPv6") << ((Ip::EnableIpv6 & IPV6_SPECIAL_SPLITSTACK) ? " split-stack" : "") << std::endl; break;};
2015-January.txt:    while ((2) <= scParams.verbosityLevel) {std::cerr << "Transport detected: IPv4" << ((Ip::EnableIpv6 & IPV6_SPECIAL_V4MAPPING) ? "-mapped " : "") << (Ip::EnableIpv6 == IPV6_OFF ? "-only" : " and IPv6") << ((Ip::EnableIpv6 & IPV6_SPECIAL_SPLITSTACK) ? " split-stack" : "") << std::endl; break;};
2015-January.txt:../../../tools/squidclient/Transport.cc:151:228: error: use of undeclared identifier 'IPV6_SPECIAL_SPLITSTACK'
2015-January.txt:    while ((2) <= scParams.verbosityLevel) {std::cerr << "Transport detected: IPv4" << ((Ip::EnableIpv6 & IPV6_SPECIAL_V4MAPPING) ? "-mapped " : "") << (Ip::EnableIpv6 == IPV6_OFF ? "-only" : " and IPv6") << ((Ip::EnableIpv6 & IPV6_SPECIAL_SPLITSTACK) ? " split-stack" : "") << std::endl; break;};
2015-January.txt:../../../tools/squidclient/Transport.cc:151:228: error: use of undeclared identifier 'IPV6_SPECIAL_SPLITSTACK'
2015-January.txt:../../../tools/squidclient/Transport.cc:151:228: error: 'IPV6_SPECIAL_SPLITSTACK' was not declared in this scope
2015-January.txt:../../../tools/squidclient/Transport.cc:151:228: error: 'IPV6_SPECIAL_SPLITSTACK' was not declared in this scope
2015-January.txt:Fix by splitting out into multiple unit-test binaries as is done
2015-January.txt:Fix by splitting out into multiple unit-test binaries as is done
2015-January.txt:Fix by splitting out into multiple unit-test binaries as is done
2015-January.txt:Fix by splitting out into multiple unit-test binaries as is done
2015-January.txt:Fix by splitting out into multiple unit-test binaries as is done
2015-January.txt:Fix by splitting out into multiple unit-test binaries as is done
2015-January.txt:Fix by splitting out into multiple unit-test binaries as is done
2015-January.txt:[Amos Jeffries] Fix silent SSL/TLS failure on split-stack operating systems
2015-January.txt:-     * the response splitting countermeasures is extremely likely to trigger on this,
2015-January.txt:-     * the response splitting countermeasures is extremely likely to trigger on this,
2015-July.txt:code is trying to preserve the existing split between
2015-July.txt:think you interpret that [undocumented?] split differently, and I will
2015-July.txt:This disagreement may be related to how we interpret the split between
2015-July.txt:-/* Macros for dealing with the split strings in re_match_2.  */
2015-June.txt:split into several methods. It is too long, convoluted, and is getting
2015-May.txt:>>>    - Splits Ssl::PeerConnector class into Ssl::PeerConnector parent and
2015-May.txt:>> too fuzzy right now. Though I am liking the class split.
2015-May.txt:>>>>    - Splits Ssl::PeerConnector class into Ssl::PeerConnector parent and
2015-May.txt:>>> too fuzzy right now. Though I am liking the class split.
2015-May.txt:- Splits Ssl::PeerConnector class into Ssl::PeerConnector parent and two kids:
2015-November.txt:bzr cannot track file splits, and most of the moved code had to be
2015-November.txt:splitted across multiple files to untangle various messes. When deciding
2015-November.txt:> bzr cannot track file splits, and most of the moved code had to be
2015-November.txt:> splitted across multiple files to untangle various messes. When deciding
2015-November.txt:bzr cannot track file splits, and most of the moved code had to be split
2015-November.txt:that the client have a split personality issue.(from one side of the 
2015-November.txt:- answer any split personality with an IMS with a 304 did not modified 
2015-October.txt:-        /* Split in header and member */
2015-October.txt:-        /* Split in header and member */
2015-October.txt:Subject: [squid-dev] [squid-users] POST upload splits tcp stream in many
2015-October.txt:> * splits the exiting parse method into 3 distinct stages; ICAP-reply,
2015-October.txt:One possible future work is to split shutdown into two states:
2015-October.txt:> One possible future work is to split shutdown into two states:
2015-October.txt:>> One possible future work is to split shutdown into two states:
2015-September.txt:We can have N split runners controlling a cache each. Just doing nothing
2015-September.txt:Doing the split though leads to direct code duplication. Since the
2015-September.txt:> We can have N split runners controlling a cache each. Just doing nothing
2015-September.txt:> Doing the split though leads to direct code duplication. Since the
2015-September.txt:> * splits the exiting parse method into 3 distinct stages; ICAP-reply,
2015-September.txt:>> * splits the exiting parse method into 3 distinct stages; ICAP-reply,
2015-September.txt:>>> * splits the exiting parse method into 3 distinct stages; ICAP-reply,
2015-September.txt:Yes, especially if you have to duplicate or split your business logic
2015-September.txt:* split Cache and Runner into two objects. Creating a Cache spawns a
2015-September.txt:> * split Cache and Runner into two objects. Creating a Cache spawns a
2016-December.txt:implemented, we will proceed with splitting the patch into two parts, as
2016-December.txt:splitting TCP_IMS_HIT into two values.
2016-December.txt:> splitting TCP_IMS_HIT into two values.
2016-December.txt:> splitting TCP_IMS_HIT into two values.
2016-December.txt:Attached two patches for v5 after splitting. Please apply
2016-December.txt:> implemented, we will proceed with splitting the patch into two parts, as
2016-December.txt:> Attached two patches for v5 after splitting. Please apply
2016-December.txt:>> Attached two patches for v5 after splitting. Please apply
2016-December.txt:>>> Attached two patches for v5 after splitting. Please apply
2016-December.txt:>> Attached two patches for v5 after splitting. Please apply
2016-December.txt:>>>> Attached two patches for v5 after splitting.
2016-December.txt:-        ($u,$p) = split;
2016-February.txt:I was not able to find that posting yet. Have done the split into two
2016-February.txt:My current offer for testing is splitting the task into some kind of 
2016-February.txt:could split it into two versions, one to be used by helpers and one to
2016-February.txt:> could split it into two versions, one to be used by helpers and one to
2016-January.txt:Further enforcing the split and reducing the remaining build issues is 
2016-January.txt:The old "client-side" classes are now split along the following scopes:
2016-January.txt:>    - Split Client::abortTransaction to Client::abortOnData and to
2016-January.txt:> The old "client-side" classes are now split along the following scopes:
2016-January.txt:> The old "client-side" classes are now split along the following scopes:
2016-January.txt:>> The old "client-side" classes are now split along the following scopes:
2016-January.txt:The "split" is already existing, this is mostly documentation update to
2016-January.txt:>>    - Split Client::abortTransaction to Client::abortOnData and to
2016-January.txt:>>>     - Split Client::abortTransaction to Client::abortOnData and to
2016-January.txt:>>    - Split Client::abortTransaction to Client::abortOnData and to
2016-January.txt:Metalinks use-case is for resuming a broken fetch or splitting download
2016-July.txt:The absorb/lock/unlock split above may help with seamless GnuTLS
2016-July.txt:Tomorrow, we may split and/or rename ConnStateData, of course, but
2016-July.txt:would preserve all code improvements we have done after it was split. If
2016-July.txt:> Tomorrow, we may split and/or rename ConnStateData, of course, but
2016-July.txt:> would preserve all code improvements we have done after it was split. If
2016-July.txt:>> Tomorrow, we may split and/or rename ConnStateData, of course, but
2016-July.txt:existence or the ConnStateData split. The class in src/servers/Server.h
2016-July.txt:Exactly! The ConnStateData split forces us to do things backwards.
2016-July.txt:that misplaced code (rather than to split ConnStateData in two and then
2016-July.txt:True. The ConnStateData split forces us to add temporary complexity that
2016-July.txt:>> would preserve all code improvements we have done after it was split. If
2016-July.txt:ConnStateData. Splitting ConnStateData in two does not help with that.
2016-July.txt:> The absorb/lock/unlock split above may help with seamless GnuTLS
2016-July.txt:>>> Tomorrow, we may split and/or rename ConnStateData, of course, but
2016-July.txt:> existence or the ConnStateData split. The class in src/servers/Server.h
2016-July.txt:its current size with a much simpler Server <->BB2 split.
2016-July.txt:> Exactly! The ConnStateData split forces us to do things backwards.
2016-July.txt:> that misplaced code (rather than to split ConnStateData in two and then
2016-July.txt:> True. The ConnStateData split forces us to add temporary complexity that
2016-July.txt:>>> would preserve all code improvements we have done after it was split. If
2016-July.txt:> ConnStateData. Splitting ConnStateData in two does not help with that.
2016-July.txt:>> Exactly! The ConnStateData split forces us to do things backwards.
2016-July.txt:misplaced boulders elsewhere. You, on the other hand, are splitting one
2016-July.txt:Will the mountain need a split sometime in the future? We do not know
2016-July.txt:yet. What we do know that the split is not needed now, and that it
2016-July.txt:>> that misplaced code (rather than to split ConnStateData in two and then
2016-July.txt:protocol level. We may want to split ConnStateData to a new 
2016-July.txt:irrelevant to removing the current split of the class. The existence of
2016-July.txt:that split is the problem at hand. The details of misplaced code
2016-July.txt:currently on one side of that split are irrelevant because we do agree
2016-July.txt:ConnStateData tomorrow. Thus, the painful split will persist for quite
2016-July.txt:some time unless we remove it. Removing that split today is easy,
2016-July.txt:either. Removing that painful split today is a simple solution, and you
2016-July.txt:SslBump, the current class split can be removed. The two issues are
2016-July.txt:place that PROXY handling code, the current class split can be removed.
2016-July.txt:ConnStateData split into two classes.
2016-July.txt:them completely. I suspect we will need to split receivedFirstByte_ into
2016-July.txt:> them completely. I suspect we will need to split receivedFirstByte_ into
2016-July.txt: >> them completely. I suspect we will need to split receivedFirstByte_ into
2016-July.txt:>>> them completely. I suspect we will need to split receivedFirstByte_ into
2016-July.txt:Recently we split the PeerConnector classes from FwdState class, the 
2016-July.txt:Correction for the first line, splitting it into two lines:
2016-June.txt:     if (Ip::EnableIpv6&IPV6_SPECIAL_SPLITSTACK && s->s.isAnyAddr()) {
2016-June.txt:-        debugs(3, 3, AnyP::UriScheme(s->transport.protocol).c_str() << "_port: clone wildcard address for split-stack: " << s->s << " and " << s->next->s);
2016-June.txt:+        debugs(3, 3, AnyP::UriScheme(s->transport.protocol).image() << "_port: clone wildcard address for split-stack: " << s->s << " and " << s->next->s);
2016-June.txt:Doing some experimental builds of that now. Not quite a full split, but
2016-June.txt:This splits TidyPointer and LockingPointer by removing the inheritence
2016-June.txt:> This splits TidyPointer and LockingPointer by removing the inheritence
2016-June.txt:>> This splits TidyPointer and LockingPointer by removing the inheritence
2016-June.txt:>>> This splits TidyPointer and LockingPointer by removing the inheritence
2016-June.txt:>>>> This splits TidyPointer and LockingPointer by removing the inheritence
2016-March.txt:Please split the IndependentRunner and ConnStateData parts out of the
2016-March.txt:> Please split the IndependentRunner and ConnStateData parts out of the
2016-March.txt:> Please split the IndependentRunner and ConnStateData parts out of the
2016-March.txt:>> Please split the IndependentRunner and ConnStateData parts out of the
2016-March.txt:  - I split my big commend to one comment inside 
2016-March.txt:>  - I split my big commend to one comment inside
2016-March.txt:>>   - I split my big commend to one comment inside
2016-March.txt:functionality and split a single set of raw memory pools shared by all
2016-March.txt:> functionality and split a single set of raw memory pools shared by all
2016-March.txt:memAllocString, or splitting other callers altogether. The file name
2016-March.txt:>> functionality and split a single set of raw memory pools shared by all
2016-March.txt:> memAllocString, or splitting other callers altogether. The file name
2016-March.txt:case, do not make Mem::Init() public. If you are not sure, then split
2016-March.txt:> case, do not make Mem::Init() public. If you are not sure, then split
2016-November.txt:non-allow/deny actions are being proposed here. While splitting the code
2016-November.txt:> non-allow/deny actions are being proposed here. While splitting the code
2016-November.txt:actions possible anywhere. If that were split from the auth_schemes
2016-November.txt:> actions possible anywhere. If that were split from the auth_schemes
2016-November.txt:>> actions possible anywhere. If that were split from the auth_schemes
2016-November.txt:I still want the split. If it helps clarify my reasons are basically;
2016-November.txt:> I still want the split.
2016-October.txt:split it. However if you insist I will  apply as separate patch the 
2016-October.txt:> split it.
2016-October.txt:>> split it.
2016-September.txt:This patch splits ENTRY_REVALIDATE into:
2016-September.txt:> This patch splits ENTRY_REVALIDATE into:
2016-September.txt:> This patch splits ENTRY_REVALIDATE into:
2016-September.txt:configure: running /bin/bash ../.././test-suite/../libltdl/configure --disable-option-checking '--prefix=/usr/local/squid'  '--enable-loadable-modules' '--enable-gnuregex' '--enable-optimizations' '--enable-inline' '--enable-debug-cbdata' '--enable-xmalloc-statistics' '--enable-async-io' '--enable-storeio' '--enable-disk-io' '--enable-removal-policies' '--enable-icmp' '--enable-delay-pools' '--enable-icap-client' '--enable-useragent-log' '--enable-referer-log' '--enable-wccp' '--enable-wccpv2' '--enable-kill-parent-hack' '--enable-snmp' '--enable-cachemgr-hostname' '--enable-eui' '--enable-htcp' '--enable-forw-via-db' '--enable-cache-digests' '--enable-poll' '--enable-select' '--enable-http-violations' '--enable-ipfw-transparent' '--enable-leakfinder' '--enable-follow-x-forwarded-for' '--enable-ident-lookups' '--enable-default-hostsfile' '--enable-auth' '--enable-basic-auth-helpers' '--enable-ntlm-auth-helpers' '--enable-negotiate-auth-helpers' '--enable-digest-auth-helpers' '--enable-ntlm-fail-open' '--enable-external-acl-helpers' '--enable-url-rewrite-helpers' '--enable-mempools' '--enable-unlinkd' '--enable-stacktraces' '--enable-vary' '--enable-x-accelerator-vary' '--enable-ipv6' '--enable-auto-locale' '--enable-translation' '--enable-zph-qos' '--enable-esi' '--with-aio' '--with-build-environment=default' '--with-dl' '--with-dns-cname' '--with-gnu-ld' '--with-ipv6-split-stack' '--with-large-files' '--with-pic' '--with-pthreads' '--enable-build-info=squid test build' '--enable-ssl-crtd' '--with-openssl' 'CC=ccache clang' 'CXX=ccache clang++' --cache-file=/tmp/config.cache.7106 --srcdir=../.././test-suite/../libltdl
2016-September.txt:I have split the work into batches to prevent it being one huge hairy
2016-September.txt:> I have split the work into batches to prevent it being one huge hairy
2016-September.txt:configure: running /bin/sh ../.././test-suite/../libltdl/configure --disable-option-checking '--prefix=/usr/local/squid'  '--disable-build-info' '--disable-loadable-modules' '--disable-gnuregex' '--disable-optimizations' '--disable-inline' '--disable-debug-cbdata' '--disable-xmalloc-statistics' '--disable-async-io' '--disable-storeio' '--disable-disk-io' '--disable-removal-policies' '--disable-icmp' '--disable-delay-pools' '--disable-esi' '--disable-icap-client' '--disable-ecap' '--disable-useragent-log' '--disable-referer-log' '--disable-wccp' '--disable-wccpv2' '--disable-kill-parent-hack' '--disable-snmp' '--disable-cachemgr-hostname' '--disable-eui' '--disable-htcp' '--disable-ssl-crtd' '--disable-forw-via-db' '--disable-cache-digests' '--disable-poll' '--disable-select' '--disable-kqueue' '--disable-epoll' '--disable-http-violations' '--disable-ipfw-transparent' '--disable-ipf-transparent' '--disable-pf-transparent' '--disable-linux-netfilter' '--disable-linux-tproxy' '--disable-leakfinder' '--disable-follow-x-forwarded-for' '--disable-ident-lookups' '--disable-default-hostsfile' '--disable-auth' '--disable-basic-auth-helpers' '--disable-ntlm-auth-helpers' '--disable-negotiate-auth-helpers' '--disable-digest-auth-helpers' '--disable-ntlm-fail-open' '--disable-external-acl-helpers' '--disable-url-rewrite-helpers' '--disable-mempools' '--disable-win32-service' '--disable-unlinkd' '--disable-stacktraces' '--disable-cpu-profiling' '--disable-vary' '--disable-ipv6' '--disable-zph-qos' '--disable-auto-locale' '--disable-translation' '--without-pthreads' '--without-aio' '--without-dl' '--without-large-files' '--without-valgrind-debug' '--without-ipv6-split-stack' '--without-dns-cname' '--without-gnutls' '--without-openssl' '--without-po2html' 'CC=ccache clang' 'CXX=ccache clang++' --cache-file=/tmp/config.cache.31419 --srcdir=../.././test-suite/../libltdl
2016-September.txt:combining partial parsing with partial reading. Splitting them often
2016-September.txt:> combining partial parsing with partial reading. Splitting them often avoids
2017-January.txt:Please split SessionClose() into two different functions, one for each
2017-January.txt:> Please split SessionClose() into two different functions, one for each
2017-January.txt:>> Please split SessionClose() into two different functions, one for each
2017-January.txt:Okay. Splitting the changes into two. If we can agree on the below item
2017-January.txt: /// XXX: Misnamed. TODO: Split <h (and this function) to distinguish received
2017-January.txt:linuxdoc -B html -T 2 --split=0 ../../.././test-suite/../doc/release-notes/release-5.sgml
2017-January.txt:linuxdoc -B html -T 2 --split=0 ../../.././test-suite/../doc/release-notes/release-5.sgml
2017-January.txt:#no individual limiting, split aggregate bandwidth among clients
2017-July.txt:split) and drain our resources.
2017-July.txt:split) and drain our resources.
2017-July.txt:> split) and drain our resources.
2017-March.txt:There is a split of a second theoretical slow down but in practice I have
