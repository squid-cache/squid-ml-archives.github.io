From alex.kimble at viewpointe.com  Thu Dec  1 12:56:19 2022
From: alex.kimble at viewpointe.com (Alex Kimble)
Date: Thu, 1 Dec 2022 12:56:19 +0000
Subject: [squid-users] Screen Squid vs Squid Analyzer vs ?
Message-ID: <DS7PR22MB36703010FABB839532A257F18B149@DS7PR22MB3670.namprd22.prod.outlook.com>

Has anyone gotten Screen Squid to work? Following their install instructions, I get to the webserver over port 80 but no fancy graphics/charts, just plain old text links/directory.  Same deal with Squid Analyzer.

Why wouldn't there be at least some form of basic rudimentary built-in reporting that comes with squid proxy itself after all these years? Does no one generate daily/weekly reports of what websites their employees visit, get blocked, your top users, the largest files downloaded, etc.?


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-users/attachments/20221201/e68ebfc5/attachment.htm>

From gvilarino6 at gmail.com  Thu Dec  1 15:41:34 2022
From: gvilarino6 at gmail.com (=?UTF-8?Q?Gabriel_Vilari=C3=B1o?=)
Date: Thu, 1 Dec 2022 16:41:34 +0100
Subject: [squid-users] Logs not showing ssl::servername
In-Reply-To: <CAGSQugkYf5S80F4p8suW-w6SoXy208GQs3g1_fRqcxA5205dnQ@mail.gmail.com>
References: <CAGSQug=Ri2iZV+DVD45xCcVh2viP8d0ocs1u+yetZB3QPoXqKA@mail.gmail.com>
 <CAGSQugn9D=XvcX7V8nNji5fFTe-ddKEVtRLdc_aTqqfnDaGgjw@mail.gmail.com>
 <CAGSQugk-aQHNXZ9JC__S-XLxJ97-Xr6+A5rQ4KDdG-jkSswgRQ@mail.gmail.com>
 <CAGSQugkYf5S80F4p8suW-w6SoXy208GQs3g1_fRqcxA5205dnQ@mail.gmail.com>
Message-ID: <CAGSQugn5RQfUjqfk67U-g34C1yhAZO3bBN9jBEgZGDkjCL0Y=g@mail.gmail.com>

Hi there,

Sorry for the delay. I have problems to only log 1 request.

I removed the internal ip that makes the request and one internal dns, but
dont think that?s important. Also removed all machines that weren?t
producing this traffic so we should only have the AWS arsernal request (on
the access.log I only see one but could be a second one, however all of
those produce exact same result).

About the motivation Alex, really the only thing that concerns me is the
strange log (TCP_TUNNEL and error 500). On the usage side, I can not tell
if that call is working (going trough or not) since I don?t even use that
service. I was evaluating how Squid works and simply run in that strange
log. My final objective is to simply understand what?s going on (tunnel or
500) but there is nothing critical that I have to fix.

Link: https://privfile.com/download.php?fid=6388c98c4ad19-MTQ5ODM= is valid
for one day, password is "pepe" without "".

Thanks!








El mi?, 30 nov 2022 a las 9:16, Gabriel Vilari?o (<gvilarino6 at gmail.com>)
escribi?:

> Hi again!
>
> Thanks for the info!
>
> Log with error code and error detail at the end, both "-":
> 1669794718.051 INTERNAL_IP *TCP_TUNNEL/500*
> arsenal.us-west-2.amazonaws.com splice /CN=arsenal.us-west-2.amazonaws.com
> 54.240.254.131* - -*
>
> The cache.log with ALL,1 does not look to share a lot, in fact I don?t see
> any messages referencing this transaction:
>
> 22/11/30 07:51:39 kid1| Current Directory is /
> 2022/11/30 07:51:39 kid1| Creating missing swap directories
> 2022/11/30 07:51:39 kid1| No cache_dir stores are configured.
> 2022/11/30 07:51:39| Removing PID file (/run/squid.pid)
> 2022/11/30 07:51:39 kid1| Current Directory is /
> 2022/11/30 07:51:39 kid1| Starting Squid Cache version 5.7 for
> x86_64-pc-linux-gnu...
> 2022/11/30 07:51:39 kid1| Service Name: squid
> 2022/11/30 07:51:39 kid1| Process ID 64694
> 2022/11/30 07:51:39 kid1| Process Roles: worker
> 2022/11/30 07:51:39 kid1| With 1024 file descriptors available
> 2022/11/30 07:51:39 kid1| Initializing IP Cache...
> 2022/11/30 07:51:39 kid1| DNS Socket created at [::], FD 9
> 2022/11/30 07:51:39 kid1| DNS Socket created at 0.0.0.0, FD 10
> 2022/11/30 07:51:39 kid1| Adding nameserver 127.0.0.53 from
> /etc/resolv.conf
> 2022/11/30 07:51:39 kid1| Adding domain dev.ops.mitekcloud.local from
> /etc/resolv.conf
> 2022/11/30 07:51:39 kid1| helperOpenServers: Starting 5/32
> 'security_file_certgen' processes
> 2022/11/30 07:51:39 kid1| Logfile: opening log
> daemon:/var/log/squid/custom.log
> 2022/11/30 07:51:39 kid1| Logfile Daemon: opening log
> /var/log/squid/custom.log
> 2022/11/30 07:51:40 kid1| Local cache digest enabled; rebuild/rewrite
> every 3600/3600 sec
> 2022/11/30 07:51:40 kid1| Store logging disabled
> 2022/11/30 07:51:40 kid1| Swap maxSize 0 + 262144 KB, estimated 20164
> objects
> 2022/11/30 07:51:40 kid1| Target number of buckets: 1008
> 2022/11/30 07:51:40 kid1| Using 8192 Store buckets
> 2022/11/30 07:51:40 kid1| Max Mem  size: 262144 KB
> 2022/11/30 07:51:40 kid1| Max Swap size: 0 KB
> 2022/11/30 07:51:40 kid1| Using Least Load store dir selection
> 2022/11/30 07:51:40 kid1| Current Directory is /
> 2022/11/30 07:51:40 kid1| Finished loading MIME types and icons.
> 2022/11/30 07:51:40 kid1| HTCP Disabled.
> 2022/11/30 07:51:40 kid1| Pinger socket opened on FD 27
> 2022/11/30 07:51:40 kid1| Squid plugin modules loaded: 0
> 2022/11/30 07:51:40 kid1| Adaptation support is off.
> 2022/11/30 07:51:40 kid1| Accepting HTTP Socket connections at conn13
> local=[::]:3128 remote=[::] FD 23 flags=9
> 2022/11/30 07:51:40 kid1| Accepting NAT intercepted HTTP Socket
> connections at conn15 local=[::]:3129 remote=[::] FD 24 flags=41
> 2022/11/30 07:51:40 kid1| Accepting NAT intercepted SSL bumped HTTPS
> Socket connections at conn17 local=[::]:3130 remote=[::] FD 25 flags=41
> 2022/11/30 07:51:40| pinger: Initialising ICMP pinger ...
> 2022/11/30 07:51:40| pinger: ICMP socket opened.
> 2022/11/30 07:51:40| pinger: ICMPv6 socket opened
> 2022/11/30 07:51:41 kid1| storeLateRelease: released 0 objects
> 2022/11/30 07:52:09 kid1| Preparing for shutdown after 3 requests
> ... Starts ending the connections for shutdown, ends with next message...
> *2022/11/30 07:52:40 kid1| Squid Cache (Version 5.7): Exiting normally.*
>
> I checked with further log levels but it outputs a lot of data (I know
> this one is not for admins, I wanted to try to sent only the relevant logs
> since those aws agents do several calls and I was not to only record one
> transaction). Also if I needed, this is shared as an attachment?
>
> Thanks in advance!
>
>
> El mar, 29 nov 2022 a las 21:52, Gabriel Vilari?o (<gvilarino6 at gmail.com>)
> escribi?:
>
>> Thanks Alex!
>>
>> Here are the fixed logs:
>> 1669726977.734 INTERNAL_CLIENT_IP TCP_TUNNEL/500
>> arsenal.us-west-2.amazonaws.com splice /CN=
>> arsenal.us-west-2.amazonaws.com 54.240.251.223
>>
>> As you can see, the destination is an aws service, more interesting, it
>> effectively *logs the splice* action! That?s why I though it was letting
>> the traffic go trough. Also the debug logs from SSL show this:
>> 2022/11/29 10:32:38.943 kid1| 83,5| PeekingPeerConnector.cc(273) *startTunneling:
>> will tunnel instead of negotiating TLS* # Last line from previously
>> attached logs
>>
>> As far as I know this means *is getting to the TCP_TUNNEL, at that point
>> it can not know anything about the internal status on the connection
>> between client and host*. If not, *where I should be looking for this
>> error? *Should try to review further the debug ssl logs to se if I fend
>> something more useful? Maybe tcpdump? This could be just the end service
>> failing on the request? Or is an error between Squid and the end sever?
>>
>> If I understand right the request that fails is the fake connect and I
>> need to understand why. Also note almost same config logged this as
>> TCP_TUNNEL/200 on version 3.5. But as said before, I really not sure how
>> to check, since that service is just an agent installed on some aws
>> machines and don?t know how to reproduce this behavior.
>>
>>
>>
>>
>> Thanks again! Hope I answered fine since I didn?t get the answer email.
>>
>>
>> El mar, 29 nov 2022 a las 14:06, Gabriel Vilari?o (<gvilarino6 at gmail.com>)
>> escribi?:
>>
>>> Just got it solved. Was caused because of checking default access.log.
>>> Using a new file solves all the problems.
>>>
>>> However, in this context, what means TCP_TUNNEL/500? is it because the
>>> TLS handshake? I would like to know if it is tunneling correctly or is
>>> having some trouble (not easy to test right now).
>>>
>>> Thanks!
>>>
>>> El mar, 29 nov 2022 a las 13:16, Gabriel Vilari?o (<gvilarino6 at gmail.com>)
>>> escribi?:
>>>
>>>> Hi there,
>>>>
>>>> I am setting up an HTTP/HTTPS transparent proxy, meaning the clients
>>>> not need any certificates for using the proxy. This works fine on version
>>>> 3.5 of Squid, however after upgrading to 5.7 the behavior of the logs
>>>> change:
>>>>
>>>> 1669723133.174   8037 10.184.19.220 TCP_TUNNEL/500 6207 CONNECT
>>>> 54.240.253.128:443 - ORIGINAL_DST/54.240.253.128 -
>>>>
>>>> Directive: logformat squid %ts.%03tu %>a %Ss/%03>Hs %ssl::>sni
>>>> %ssl::bump_mode ssl::>cert_subject %<ru
>>>>
>>>> On version 3.5 we were obtaining the domain name (an aws service) in
>>>> the place of ORIGINAL_DST. Also now we are not seeing any information about
>>>> the bump_mode in no one of the connections while before we were seeing it.
>>>> One could trough that it could be because of the /500 message, however on a
>>>> 200 one to docs.ansble.com it also don?t show any data on the sni
>>>> field:
>>>>
>>>> 1669723513.363    332 10.184.19.220 TCP_TUNNEL/200 38192 CONNECT
>>>> 104.26.0.234:443 - ORIGINAL_DST/104.26.0.234 -
>>>>
>>>> Also the 500 looks to come from the squid not understanding something
>>>> on the SSL negotiation:
>>>>
>>>> 2022/11/29 10:32:38.943 kid1| 83,4| support.cc(248) check_domain:
>>>> Verifying server domain arsenal.us-west-2.amazonaws.com to certificate
>>>> name/subjectAltName arsenal.us-west-2.amazonaws.com 2022/11/29
>>>> 10:32:38.943 kid1| 83,5| bio.cc(136) read: FD 28 read 347 <= 65535 2022/11/29
>>>> 10:32:38.943 kid1| 83,5| Io.cc(91) Handshake: -1/0 for TLS connection
>>>> 0x558453168970 over conn99 local=SQUID-INTERNAL-IP:44264 remote=
>>>> 54.240.251.223:443 ORIGINAL_DST FD 28 flags=1 2022/11/29 10:32:38.943
>>>> kid1| 83,2| PeerConnector.cc(256) handleNegotiationResult: ERROR: failure
>>>> while establishing TLS connection on FD: 280x558452b68980*1 2022/11/29
>>>> 10:32:38.943 kid1| 83,5| NegotiationHistory.cc(85) retrieveNegotiatedInfo:
>>>> SSL connection info on FD 28 SSL version NONE/0.0 negotiated cipher 2022/11/29
>>>> 10:32:38.943 kid1| 83,5| PeekingPeerConnector.cc(84)
>>>> checkForPeekAndSpliceMatched: Will check for peek and splice on FD 28 2022/11/29
>>>> 10:32:38.943 kid1| 83,5| PeekingPeerConnector.cc(395)
>>>> serverCertificateVerified: HTTPS server CN:
>>>> arsenal.us-west-2.amazonaws.com bumped: conn99
>>>> local=SQUID-INTERNAL-IP:44264 remote=54.240.251.223:443 ORIGINAL_DST
>>>> FD 28 flags=1
>>>> 2022/11/29 10:32:38.943 kid1| 83,5| PeekingPeerConnector.cc(273)
>>>> startTunneling: will tunnel instead of negotiating TLS
>>>>
>>>> It is clear that in creates the tunnel so the 500 probably is that
>>>> error? Why the bump/sni messages never log anything (according to
>>>> https://wiki.squid-cache.org/Features/SslPeekAndSplice they should log
>>>> splice not -). This is the config for bumping:
>>>>
>>>>
>>>>
>>>> acl step1 at_step SslBump1
>>>> acl step2 at_step SslBump2
>>>> acl step3 at_step SslBump3
>>>> ssl_bump peek step1 all
>>>>
>>>> .... http rules ...
>>>>
>>>> acl allowed_https_sites ssl::server_name_regex
>>>> "/etc/squid/whitelist.txt"
>>>> ssl_bump peek step2 allowed_https_sites
>>>> ssl_bump splice step3 allowed_https_sites
>>>> ssl_bump terminate step2 all
>>>>
>>>>
>>>>
>>>>
>>>> Ip tables simply redirect:
>>>>
>>>> iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port
>>>> 3129
>>>> iptables -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-port
>>>> 3130 # https port on squid: https_port 3130 intercept ssl-bump
>>>> cert=/etc/squid/ssl/dummy.pem
>>>>
>>>> Thanks in advance, i have been trying this for a week now reading a lot
>>>> of posts but not luck...
>>>>
>>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-users/attachments/20221201/f2c95df8/attachment.htm>

From utbtrialuser at gmail.com  Thu Dec  1 16:20:46 2022
From: utbtrialuser at gmail.com (utb trialuser)
Date: Thu, 1 Dec 2022 11:20:46 -0500
Subject: [squid-users] Squid Degrading
In-Reply-To: <3ffc1451-7515-da0a-ac7f-be5463018279@measurement-factory.com>
References: <CAFuFF_K9SOttfwtfgAjQhfZ-Jz_31=cVuY-TXM5FnMboQ7ij2w@mail.gmail.com>
 <3ffc1451-7515-da0a-ac7f-be5463018279@measurement-factory.com>
Message-ID: <CAFuFF_LWt8REM44Y7no4MC0LcV3HdQ6ccqUrv=GLNQzL4OQ+Fw@mail.gmail.com>

Hi Alex,

What is your Squid version (squid --version)?

*5.2*

Any errors or warnings in cache.log?

*With squid degraded I get the following warning:*

*WARNING! Your cache is running out of filedescriptors*

*With squid working fine I get the following error with many different
ips: *

*SendEcho ERROR: sending to ICMPv6 packet to [ip]: (101) Network is
unreachable*

Do you have a cache_dir and/or cache_mem configured in squid.conf? Do
you have "workers" configured?

*I installed squid on 2 different pc's, one with cache_dir and one without
cache_dir. However if I ran the command to check whether or not the
cache_dir was filling up or not, in both cases they would show that they
were filling up. In the case with cache_dir disabled, coredump_dir was set
up on the same dir where cache_dir would go. In no case was cache_mem or
"workers" set up.*

How much free RAM is left on the box when "websites start to take really
long to load"?

*The system with cache_dir has 8GB of RAM and 6GB is left when it degrades.
The system without cache_dir has 4GB of RAM and 2GB is left when it
degrades.*

On Wed, Nov 30, 2022 at 6:12 PM Alex Rousskov <
rousskov at measurement-factory.com> wrote:

> On 11/30/22 16:57, utb trialuser wrote:
> > Hello, I'm running a basic Squid setup on the latest version of Ubuntu.
> > Could you help me figure out why when 15 people connect to my proxy it
> > starts degrading and websites start to take really long to load?
> > According to the log file, connections take up to 300000ms to load when
> > this happens. And via other networking tools I was able to realize that
> > packets were being dropped. Bandwidth usage tops at 6MB/s according to
> > another networking tool. Thanks.
>
> What is your Squid version (squid --version)?
>
> Any errors or warnings in cache.log?
>
> Do you have a cache_dir and/or cache_mem configured in squid.conf? Do
> you have "workers" configured?
>
> How much free RAM is left on the box when "websites start to take really
> long to load"?
>
> Alex.
>
> _______________________________________________
> squid-users mailing list
> squid-users at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-users
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-users/attachments/20221201/ae9f59cd/attachment.htm>

From rousskov at measurement-factory.com  Thu Dec  1 16:26:28 2022
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Thu, 1 Dec 2022 11:26:28 -0500
Subject: [squid-users] Logs not showing ssl::servername
In-Reply-To: <CAGSQugn5RQfUjqfk67U-g34C1yhAZO3bBN9jBEgZGDkjCL0Y=g@mail.gmail.com>
References: <CAGSQug=Ri2iZV+DVD45xCcVh2viP8d0ocs1u+yetZB3QPoXqKA@mail.gmail.com>
 <CAGSQugn9D=XvcX7V8nNji5fFTe-ddKEVtRLdc_aTqqfnDaGgjw@mail.gmail.com>
 <CAGSQugk-aQHNXZ9JC__S-XLxJ97-Xr6+A5rQ4KDdG-jkSswgRQ@mail.gmail.com>
 <CAGSQugkYf5S80F4p8suW-w6SoXy208GQs3g1_fRqcxA5205dnQ@mail.gmail.com>
 <CAGSQugn5RQfUjqfk67U-g34C1yhAZO3bBN9jBEgZGDkjCL0Y=g@mail.gmail.com>
Message-ID: <067bf043-a1ba-d1f9-eb6e-d125892ead51@measurement-factory.com>

On 12/1/22 10:41, Gabriel Vilari?o wrote:

> About the motivation Alex, really the only thing that concerns me is the 
> strange log (TCP_TUNNEL and error 500).

Based on your debugging cache.log (thank you!) and superficial Squid 
code analysis, I believe HTTP status code 500 in your use case is a 
Squid bug. The transaction was actually successful.

Squid did not send a CONNECT response because your Squid intercepts 
traffic (and the client does not send CONNECT requests and does not 
expect CONNECT responses). Instead of logging a "-" for the sent HTTP 
status code in this case, Squid logged 500. That is a bug.

Your next steps are summarized at 
https://wiki.squid-cache.org/SquidFaq/AboutSquid#How_to_add_a_new_Squid_feature.2C_enhance.2C_of_fix_something.3F


HTH,

Alex.


> On the usage side, I can not 
> tell if that call is working (going trough or not) since I don?t even 
> use that service. I was evaluating how Squid works and simply run in 
> that strange log. My final objective is to simply understand what?s 
> going on (tunnel or 500) but there is nothing critical that I have to fix.
> 
> Link: https://privfile.com/download.php?fid=6388c98c4ad19-MTQ5ODM= 
> <https://privfile.com/download.php?fid=6388c98c4ad19-MTQ5ODM=> is valid 
> for one day, password is "pepe" without "".
> 
> Thanks!
> 
> 
> 
> 
> 
> 
> 
> 
> El mi?, 30 nov 2022 a las 9:16, Gabriel Vilari?o (<gvilarino6 at gmail.com 
> <mailto:gvilarino6 at gmail.com>>) escribi?:
> 
>     Hi again!
> 
>     Thanks for the info!
> 
>     Log with error code and error detail at the end, both "-":
>     1669794718.051 INTERNAL_IP *TCP_TUNNEL/500*
>     arsenal.us-west-2.amazonaws.com
>     <http://arsenal.us-west-2.amazonaws.com> splice
>     /CN=arsenal.us-west-2.amazonaws.com
>     <http://arsenal.us-west-2.amazonaws.com> 54.240.254.131*- -*
> 
>     The cache.log with ALL,1 does not look to share a lot, in fact I
>     don?t see any messages referencing this transaction:
> 
>     22/11/30 07:51:39 kid1| Current Directory is /
>     2022/11/30 07:51:39 kid1| Creating missing swap directories
>     2022/11/30 07:51:39 kid1| No cache_dir stores are configured.
>     2022/11/30 07:51:39| Removing PID file (/run/squid.pid)
>     2022/11/30 07:51:39 kid1| Current Directory is /
>     2022/11/30 07:51:39 kid1| Starting Squid Cache version 5.7 for
>     x86_64-pc-linux-gnu...
>     2022/11/30 07:51:39 kid1| Service Name: squid
>     2022/11/30 07:51:39 kid1| Process ID 64694
>     2022/11/30 07:51:39 kid1| Process Roles: worker
>     2022/11/30 07:51:39 kid1| With 1024 file descriptors available
>     2022/11/30 07:51:39 kid1| Initializing IP Cache...
>     2022/11/30 07:51:39 kid1| DNS Socket created at [::], FD 9
>     2022/11/30 07:51:39 kid1| DNS Socket created at 0.0.0.0, FD 10
>     2022/11/30 07:51:39 kid1| Adding nameserver 127.0.0.53 from
>     /etc/resolv.conf
>     2022/11/30 07:51:39 kid1| Adding domain dev.ops.mitekcloud.local
>     from /etc/resolv.conf
>     2022/11/30 07:51:39 kid1| helperOpenServers: Starting 5/32
>     'security_file_certgen' processes
>     2022/11/30 07:51:39 kid1| Logfile: opening log
>     daemon:/var/log/squid/custom.log
>     2022/11/30 07:51:39 kid1| Logfile Daemon: opening log
>     /var/log/squid/custom.log
>     2022/11/30 07:51:40 kid1| Local cache digest enabled;
>     rebuild/rewrite every 3600/3600 sec
>     2022/11/30 07:51:40 kid1| Store logging disabled
>     2022/11/30 07:51:40 kid1| Swap maxSize 0 + 262144 KB, estimated
>     20164 objects
>     2022/11/30 07:51:40 kid1| Target number of buckets: 1008
>     2022/11/30 07:51:40 kid1| Using 8192 Store buckets
>     2022/11/30 07:51:40 kid1| Max Mem ?size: 262144 KB
>     2022/11/30 07:51:40 kid1| Max Swap size: 0 KB
>     2022/11/30 07:51:40 kid1| Using Least Load store dir selection
>     2022/11/30 07:51:40 kid1| Current Directory is /
>     2022/11/30 07:51:40 kid1| Finished loading MIME types and icons.
>     2022/11/30 07:51:40 kid1| HTCP Disabled.
>     2022/11/30 07:51:40 kid1| Pinger socket opened on FD 27
>     2022/11/30 07:51:40 kid1| Squid plugin modules loaded: 0
>     2022/11/30 07:51:40 kid1| Adaptation support is off.
>     2022/11/30 07:51:40 kid1| Accepting HTTP Socket connections at
>     conn13 local=[::]:3128 remote=[::] FD 23 flags=9
>     2022/11/30 07:51:40 kid1| Accepting NAT intercepted HTTP Socket
>     connections at conn15 local=[::]:3129 remote=[::] FD 24 flags=41
>     2022/11/30 07:51:40 kid1| Accepting NAT intercepted SSL bumped HTTPS
>     Socket connections at conn17 local=[::]:3130 remote=[::] FD 25 flags=41
>     2022/11/30 07:51:40| pinger: Initialising ICMP pinger ...
>     2022/11/30 07:51:40| pinger: ICMP socket opened.
>     2022/11/30 07:51:40| pinger: ICMPv6 socket opened
>     2022/11/30 07:51:41 kid1| storeLateRelease: released 0 objects
>     2022/11/30 07:52:09 kid1| Preparing for shutdown after 3 requests
>     ... Starts ending the connections for shutdown, ends with next
>     message...
>     *2022/11/30 07:52:40 kid1| Squid Cache (Version 5.7): Exiting normally.*
> 
>     I checked with further log levels but it outputs a lot of data (I
>     know this one is not for admins, I wanted to try to sent only the
>     relevant logs since those aws agents do several calls and I was not
>     to only record one transaction). Also if I needed, this is shared as
>     an attachment?
> 
>     Thanks in advance!
> 
> 
>     El mar, 29 nov 2022 a las 21:52, Gabriel Vilari?o
>     (<gvilarino6 at gmail.com <mailto:gvilarino6 at gmail.com>>) escribi?:
> 
>         Thanks Alex!
> 
>         Here are the fixed logs:
>         |1669726977.734 INTERNAL_CLIENT_IP TCP_TUNNEL/500
>         arsenal.us-west-2.amazonaws.com
>         <http://arsenal.us-west-2.amazonaws.com> splice
>         /CN=arsenal.us-west-2.amazonaws.com
>         <http://arsenal.us-west-2.amazonaws.com> 54.240.251.223|
>         |
>         |
>         |As you can see, the destination is an aws service, more
>         interesting, it effectively *logs the splice* action! That?s why
>         I though it was letting the traffic go trough. Also the debug
>         logs from SSL show this:|
>         ||2022/11/29 10:32:38.943 kid1| 83,5|
>         PeekingPeerConnector.cc(273) *startTunneling: will tunnel
>         instead of negotiating TLS* # Last line from previously attached
>         logs||
>         ||
>         ||
>         ||As far as I know this means *is getting to the TCP_TUNNEL, at
>         that point it can not know anything about the internal status on
>         the connection between client and host*. If not, *where I should
>         be looking for this error? *Should try to review further the
>         debug ssl logs to se if I fend something more useful? Maybe
>         tcpdump? This could be just the end service failing on the
>         request? Or is an error between Squid and the end sever?||
>         ||
>         ||
>         ||If I understand right the request that fails is the fake
>         connect and I need to understand why. Also note almost same
>         config logged this as TCP_TUNNEL/200 on version 3.5. But as said
>         before, I really not sure how to check, since that service is
>         just an agent installed on some aws machines and don?t know how
>         to reproduce this behavior.
>         ||
>         |
>         |
>         |
>         |
>         |
>         |
>         |
>         |
>         |Thanks again! Hope I answered fine since I didn?t get the
>         answer email.
>         |
> 
> 
>         El mar, 29 nov 2022 a las 14:06, Gabriel Vilari?o
>         (<gvilarino6 at gmail.com <mailto:gvilarino6 at gmail.com>>) escribi?:
> 
>             Just got it solved. Was caused because of checking default
>             access.log. Using a new file solves all the problems.
> 
>             However, in this context, what means TCP_TUNNEL/500? is it
>             because the TLS handshake? I would like to know if it is
>             tunneling correctly or is having some trouble (not easy to
>             test right now).
> 
>             Thanks!
> 
>             El mar, 29 nov 2022 a las 13:16, Gabriel Vilari?o
>             (<gvilarino6 at gmail.com <mailto:gvilarino6 at gmail.com>>) escribi?:
> 
>                 Hi there,
> 
>                 I am setting up an HTTP/HTTPS transparent proxy, meaning
>                 the clients not need any certificates for using the
>                 proxy. This works fine on version 3.5 of Squid, however
>                 after upgrading to 5.7 the behavior of the logs change:
> 
>                 1669723133.174 ? 8037 10.184.19.220 TCP_TUNNEL/500 6207
>                 CONNECT 54.240.253.128:443 <http://54.240.253.128:443> -
>                 ORIGINAL_DST/54.240.253.128 <http://54.240.253.128> -
> 
>                 Directive: logformat squid %ts.%03tu %>a %Ss/%03>Hs
>                 %ssl::>sni %ssl::bump_mode ssl::>cert_subject %<ru
> 
>                 On version 3.5 we were obtaining the domain name (an aws
>                 service) in the place of ORIGINAL_DST. Also now we are
>                 not seeing any information about the bump_mode in no one
>                 of the connections while before we were seeing it. One
>                 could trough that it could be because of the /500
>                 message, however on a 200 one to docs.ansble.com
>                 <http://docs.ansble.com> it also don?t show any data on
>                 the sni field:
> 
>                 1669723513.363 ? ?332 10.184.19.220 TCP_TUNNEL/200 38192
>                 CONNECT 104.26.0.234:443 <http://104.26.0.234:443> -
>                 ORIGINAL_DST/104.26.0.234 <http://104.26.0.234> -
> 
>                 Also the 500 looks to come from the squid not
>                 understanding something on the SSL negotiation:
> 
>                 |2022/11/29 10:32:38.943 kid1| 83,4| support.cc(248)
>                 check_domain: Verifying server domain
>                 arsenal.us-west-2.amazonaws.com
>                 <http://arsenal.us-west-2.amazonaws.com> to certificate
>                 name/subjectAltName arsenal.us-west-2.amazonaws.com
>                 <http://arsenal.us-west-2.amazonaws.com> ||2022/11/29
>                 10:32:38.943 kid1| 83,5| bio.cc(136) read: FD 28 read
>                 347 <= 65535 ||2022/11/29 10:32:38.943 kid1| 83,5|
>                 Io.cc(91) Handshake: -1/0 for TLS connection
>                 0x558453168970 over conn99 local=SQUID-INTERNAL-IP:44264
>                 remote=54.240.251.223:443 <http://54.240.251.223:443>
>                 ORIGINAL_DST FD 28 flags=1 ||2022/11/29 10:32:38.943
>                 kid1| 83,2| PeerConnector.cc(256)
>                 handleNegotiationResult: ERROR: failure while
>                 establishing TLS connection on FD: 280x558452b68980*1
>                 ||2022/11/29 10:32:38.943 kid1| 83,5|
>                 NegotiationHistory.cc(85) retrieveNegotiatedInfo: SSL
>                 connection info on FD 28 SSL version NONE/0.0 negotiated
>                 cipher ||2022/11/29 10:32:38.943 kid1| 83,5|
>                 PeekingPeerConnector.cc(84)
>                 checkForPeekAndSpliceMatched: Will check for peek and
>                 splice on FD 28 ||2022/11/29 10:32:38.943 kid1| 83,5|
>                 PeekingPeerConnector.cc(395) serverCertificateVerified:
>                 HTTPS server CN: arsenal.us-west-2.amazonaws.com
>                 <http://arsenal.us-west-2.amazonaws.com> bumped: conn99
>                 local=SQUID-INTERNAL-IP:44264 remote=54.240.251.223:443
>                 <http://54.240.251.223:443> ORIGINAL_DST FD 28 flags=1 |
>                 |2022/11/29 10:32:38.943 kid1| 83,5|
>                 PeekingPeerConnector.cc(273) startTunneling: will tunnel
>                 instead of negotiating TLS|
> 
>                 It is clear that in creates the tunnel so the 500
>                 probably is that error? Why the bump/sni messages never
>                 log anything (according to
>                 https://wiki.squid-cache.org/Features/SslPeekAndSplice
>                 <https://wiki.squid-cache.org/Features/SslPeekAndSplice>
>                 they should log splice not -). This is the config for
>                 bumping:
> 
> 
> 
>                 acl step1 at_step SslBump1
>                 acl step2 at_step SslBump2
>                 acl step3 at_step SslBump3
>                 ssl_bump peek step1 all
> 
>                 .... http rules ...
> 
>                 acl allowed_https_sites ssl::server_name_regex
>                 "/etc/squid/whitelist.txt"
>                 ssl_bump peek step2 allowed_https_sites
>                 ssl_bump splice step3 allowed_https_sites
>                 ssl_bump terminate step2 all
> 
> 
> 
> 
>                 Ip tables simply redirect:
> 
>                 iptables -t nat -A PREROUTING -p tcp --dport 80 -j
>                 REDIRECT --to-port 3129
>                 iptables -t nat -A PREROUTING -p tcp --dport 443 -j
>                 REDIRECT --to-port 3130 # https port on squid:
>                 https_port 3130 intercept ssl-bump
>                 cert=/etc/squid/ssl/dummy.pem
> 
>                 Thanks in advance, i have been trying this for a week
>                 now reading a lot of posts but not luck...
> 
> 
> _______________________________________________
> squid-users mailing list
> squid-users at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-users



From rousskov at measurement-factory.com  Thu Dec  1 16:30:55 2022
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Thu, 1 Dec 2022 11:30:55 -0500
Subject: [squid-users] Squid Degrading
In-Reply-To: <CAFuFF_LWt8REM44Y7no4MC0LcV3HdQ6ccqUrv=GLNQzL4OQ+Fw@mail.gmail.com>
References: <CAFuFF_K9SOttfwtfgAjQhfZ-Jz_31=cVuY-TXM5FnMboQ7ij2w@mail.gmail.com>
 <3ffc1451-7515-da0a-ac7f-be5463018279@measurement-factory.com>
 <CAFuFF_LWt8REM44Y7no4MC0LcV3HdQ6ccqUrv=GLNQzL4OQ+Fw@mail.gmail.com>
Message-ID: <67182b7c-7efc-f223-db88-46dc8330c00f@measurement-factory.com>

On 12/1/22 11:20, utb trialuser wrote:

>> What is your Squid version (squid --version)?

> 5.2

We can stop here. Please upgrade to Squid v5.7 or later. Squid v5.2 is 
just too buggy to be usable in most production environments (and to 
investigate any performance problems).


>> Any errors or warnings in cache.log?

> *WARNING! Your cache is running out of filedescriptors*

There are known Squid v5.2 bugs that may result in the above warnings 
and related performance degradation. I hope that these problems will be 
gone, and your Squid performance will be acceptable after you upgrade.


Good luck,

Alex.


> On Wed, Nov 30, 2022 at 6:12 PM Alex Rousskov wrote:
> 
>     On 11/30/22 16:57, utb trialuser wrote:
>      > Hello, I'm running a basic Squid setup on the latest version of
>     Ubuntu.
>      > Could you help?me figure out why when 15 people connect to my
>     proxy it
>      > starts degrading and websites start to take really long to load?
>      > According to the log file, connections take up to 300000ms to
>     load when
>      > this happens. And via other networking tools I was able to
>     realize?that
>      > packets were being dropped. Bandwidth usage tops at 6MB/s
>     according to
>      > another networking tool. Thanks.
> 
>     What is your Squid version (squid --version)?
> 
>     Any errors or warnings in cache.log?
> 
>     Do you have a cache_dir and/or cache_mem configured in squid.conf? Do
>     you have "workers" configured?
> 
>     How much free RAM is left on the box when "websites start to take
>     really
>     long to load"?
> 
>     Alex.
> 
>     _______________________________________________
>     squid-users mailing list
>     squid-users at lists.squid-cache.org
>     <mailto:squid-users at lists.squid-cache.org>
>     http://lists.squid-cache.org/listinfo/squid-users
>     <http://lists.squid-cache.org/listinfo/squid-users>
> 
> 
> _______________________________________________
> squid-users mailing list
> squid-users at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-users



From utbtrialuser at gmail.com  Thu Dec  1 21:57:27 2022
From: utbtrialuser at gmail.com (utb trialuser)
Date: Thu, 1 Dec 2022 16:57:27 -0500
Subject: [squid-users] Squid Degrading
In-Reply-To: <67182b7c-7efc-f223-db88-46dc8330c00f@measurement-factory.com>
References: <CAFuFF_K9SOttfwtfgAjQhfZ-Jz_31=cVuY-TXM5FnMboQ7ij2w@mail.gmail.com>
 <3ffc1451-7515-da0a-ac7f-be5463018279@measurement-factory.com>
 <CAFuFF_LWt8REM44Y7no4MC0LcV3HdQ6ccqUrv=GLNQzL4OQ+Fw@mail.gmail.com>
 <67182b7c-7efc-f223-db88-46dc8330c00f@measurement-factory.com>
Message-ID: <CAFuFF_JbRFv-KWbtHpQcLw6jK4vvE=Q9awFPJah4XW6pS==L3Q@mail.gmail.com>

Thank you for your help Alex. I changed the max file descriptor value to
4096 in the squid.conf file and now everything is working fine. I tried to
sudo apt install squid but it says that I'm on the latest version and
downloading it from the website is not as straightforward as I'd want it to
be so for now I will stick to 5.2 but I will keep an eye on it if I have
other issues down the line. Best.

On Thu, Dec 1, 2022 at 11:31 AM Alex Rousskov <
rousskov at measurement-factory.com> wrote:

> On 12/1/22 11:20, utb trialuser wrote:
>
> >> What is your Squid version (squid --version)?
>
> > 5.2
>
> We can stop here. Please upgrade to Squid v5.7 or later. Squid v5.2 is
> just too buggy to be usable in most production environments (and to
> investigate any performance problems).
>
>
> >> Any errors or warnings in cache.log?
>
> > *WARNING! Your cache is running out of filedescriptors*
>
> There are known Squid v5.2 bugs that may result in the above warnings
> and related performance degradation. I hope that these problems will be
> gone, and your Squid performance will be acceptable after you upgrade.
>
>
> Good luck,
>
> Alex.
>
>
> > On Wed, Nov 30, 2022 at 6:12 PM Alex Rousskov wrote:
> >
> >     On 11/30/22 16:57, utb trialuser wrote:
> >      > Hello, I'm running a basic Squid setup on the latest version of
> >     Ubuntu.
> >      > Could you help me figure out why when 15 people connect to my
> >     proxy it
> >      > starts degrading and websites start to take really long to load?
> >      > According to the log file, connections take up to 300000ms to
> >     load when
> >      > this happens. And via other networking tools I was able to
> >     realize that
> >      > packets were being dropped. Bandwidth usage tops at 6MB/s
> >     according to
> >      > another networking tool. Thanks.
> >
> >     What is your Squid version (squid --version)?
> >
> >     Any errors or warnings in cache.log?
> >
> >     Do you have a cache_dir and/or cache_mem configured in squid.conf? Do
> >     you have "workers" configured?
> >
> >     How much free RAM is left on the box when "websites start to take
> >     really
> >     long to load"?
> >
> >     Alex.
> >
> >     _______________________________________________
> >     squid-users mailing list
> >     squid-users at lists.squid-cache.org
> >     <mailto:squid-users at lists.squid-cache.org>
> >     http://lists.squid-cache.org/listinfo/squid-users
> >     <http://lists.squid-cache.org/listinfo/squid-users>
> >
> >
> > _______________________________________________
> > squid-users mailing list
> > squid-users at lists.squid-cache.org
> > http://lists.squid-cache.org/listinfo/squid-users
>
> _______________________________________________
> squid-users mailing list
> squid-users at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-users
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-users/attachments/20221201/89d6acf1/attachment.htm>

From ngtech1ltd at gmail.com  Thu Dec  1 23:50:51 2022
From: ngtech1ltd at gmail.com (ngtech1ltd at gmail.com)
Date: Fri, 2 Dec 2022 01:50:51 +0200
Subject: [squid-users] Squid Degrading
In-Reply-To: <67182b7c-7efc-f223-db88-46dc8330c00f@measurement-factory.com>
References: <CAFuFF_K9SOttfwtfgAjQhfZ-Jz_31=cVuY-TXM5FnMboQ7ij2w@mail.gmail.com>
 <3ffc1451-7515-da0a-ac7f-be5463018279@measurement-factory.com>
 <CAFuFF_LWt8REM44Y7no4MC0LcV3HdQ6ccqUrv=GLNQzL4OQ+Fw@mail.gmail.com>
 <67182b7c-7efc-f223-db88-46dc8330c00f@measurement-factory.com>
Message-ID: <003601d905df$bf02d4e0$3d087ea0$@gmail.com>

Hey Alex,

Do you think an ubuntu "squid" binary would be fit for such a use case?
IE replacing only the /usr/sbin/squid binary from another source?

For my simple usage (A simple forward proxy) on Ubuntu I am installing squid from the repo
and then just replace the squid binary.

I remember that there was someone that maintains squid repo for Ubuntu and maybe Debian but
I don't remember who it was.
Maybe it was it Raphael from diladele?

Thanks,
Eliezer

----
Eliezer Croitoru
NgTech, Tech Support
Mobile: +972-5-28704261
Email: ngtech1ltd at gmail.com
Web: https://ngtech.co.il/
My-Tube: https://tube.ngtech.co.il/

-----Original Message-----
From: squid-users <squid-users-bounces at lists.squid-cache.org> On Behalf Of Alex Rousskov
Sent: Thursday, 1 December 2022 18:31
To: squid-users at lists.squid-cache.org
Subject: Re: [squid-users] Squid Degrading

On 12/1/22 11:20, utb trialuser wrote:

>> What is your Squid version (squid --version)?

> 5.2

We can stop here. Please upgrade to Squid v5.7 or later. Squid v5.2 is 
just too buggy to be usable in most production environments (and to 
investigate any performance problems).


>> Any errors or warnings in cache.log?

> *WARNING! Your cache is running out of filedescriptors*

There are known Squid v5.2 bugs that may result in the above warnings 
and related performance degradation. I hope that these problems will be 
gone, and your Squid performance will be acceptable after you upgrade.


Good luck,

Alex.


> On Wed, Nov 30, 2022 at 6:12 PM Alex Rousskov wrote:
> 
>     On 11/30/22 16:57, utb trialuser wrote:
>      > Hello, I'm running a basic Squid setup on the latest version of
>     Ubuntu.
>      > Could you help me figure out why when 15 people connect to my
>     proxy it
>      > starts degrading and websites start to take really long to load?
>      > According to the log file, connections take up to 300000ms to
>     load when
>      > this happens. And via other networking tools I was able to
>     realize that
>      > packets were being dropped. Bandwidth usage tops at 6MB/s
>     according to
>      > another networking tool. Thanks.
> 
>     What is your Squid version (squid --version)?
> 
>     Any errors or warnings in cache.log?
> 
>     Do you have a cache_dir and/or cache_mem configured in squid.conf? Do
>     you have "workers" configured?
> 
>     How much free RAM is left on the box when "websites start to take
>     really
>     long to load"?
> 
>     Alex.
> 
>     _______________________________________________
>     squid-users mailing list
>     squid-users at lists.squid-cache.org
>     <mailto:squid-users at lists.squid-cache.org>
>     http://lists.squid-cache.org/listinfo/squid-users
>     <http://lists.squid-cache.org/listinfo/squid-users>
> 
> 
> _______________________________________________
> squid-users mailing list
> squid-users at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-users

_______________________________________________
squid-users mailing list
squid-users at lists.squid-cache.org
http://lists.squid-cache.org/listinfo/squid-users



From jointdogg at gmail.com  Fri Dec  2 07:00:49 2022
From: jointdogg at gmail.com (N)
Date: Fri, 2 Dec 2022 09:00:49 +0200
Subject: [squid-users] tcp_outgoing_address directive ignored,
 data goes out on default gateway
In-Reply-To: <7f975b7a-e34e-41c6-96df-ef7fe03845f7@treenet.co.nz>
References: <CAOB-uc=0+a_SVn+-fNKe=N-3yt-_z1-jrnESJJ6dkhfSC3qWzA@mail.gmail.com>
 <499c9974-1089-37b0-fcc0-b1376b1ffb8a@treenet.co.nz>
 <CAOB-ucngBrY8o1zGhitWzmwOackfXmWifCTCz1yoPS9VK-9igQ@mail.gmail.com>
 <7f975b7a-e34e-41c6-96df-ef7fe03845f7@treenet.co.nz>
Message-ID: <CAOB-uc=3fgT=J+G6GqPu71bbndPXvV5JGfdZ+WPEM_LaCueWKw@mail.gmail.com>

Amos, I opened a bug report:
https://bugs.squid-cache.org/show_bug.cgi?id=5251
hopefully I got the wording right, please edit it if needs be.

in the meantime, is there any workaround to be used?

On Wed, 30 Nov 2022 at 03:00, Amos Jeffries <squid3 at treenet.co.nz> wrote:

> On 29/11/2022 9:07 pm, N wrote:
> > Hi Amos,
> > thanks for the quick response.
> >
> > following your comments, my configuration now looks like this:
> > acl auth_users proxy_auth REQUIRED
> > http_access deny !auth_users
> > acl wg_uk note user uk
> > tcp_outgoing_address 10.200.0.70 wg_uk
> > tcp_outgoing_address fe80::bd02:7fd9:3f4b:4a22 wg_uk
> >
> > still, the traffic is not going through the wg_uk interface.
> >
> > the logs are huge when using squid -k debug, so I wasn't sure what I
> > should clip.
> > I decided to add the full log of the few requests that were tested,
> > hope it's ok, and that you can understand something from it.
>
> Log is great. It confirms a bug happening. The wg_uk ACL produces a
> non-matches on the first time it scans the tcp_outgoing_address list,
> then matches on the second IP tested. It should be always matching or
> always non-matching.
>
> Please report this to the project bugzilla
> (<http://bugs.squid-cache.org>) for tracking.
> I am about to try to replicate the issue here and will update the report
> with my findings in the next day or so.
>
>
> Cheers
> Amos
>
> _______________________________________________
> squid-users mailing list
> squid-users at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-users
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-users/attachments/20221202/bfdea02d/attachment.htm>

From ngtech1ltd at gmail.com  Fri Dec  2 08:27:06 2022
From: ngtech1ltd at gmail.com (ngtech1ltd at gmail.com)
Date: Fri, 2 Dec 2022 10:27:06 +0200
Subject: [squid-users] Logs not showing ssl::servername
In-Reply-To: <CAGSQug=Ri2iZV+DVD45xCcVh2viP8d0ocs1u+yetZB3QPoXqKA@mail.gmail.com>
References: <CAGSQug=Ri2iZV+DVD45xCcVh2viP8d0ocs1u+yetZB3QPoXqKA@mail.gmail.com>
Message-ID: <000001d90627$dd88c6c0$989a5440$@gmail.com>

Hey Gabriel,
 
Can you describe in words the desired state in squid 5.7?
I know that squid ssl bump works and in the case of splice it also works pretty good.
I can give you my logformat which results with the next:
## START
1669969405.114      9 10.200.191.117 NONE_NONE/000 0 CONNECT 3.126.56.137:443 - HIER_NONE/- - service.idsync.analytics.yahoo.com splice Yahoo - dell-desktop
1669969405.661     13 10.200.191.117 NONE_NONE/000 0 CONNECT 35.208.249.213:443 - HIER_NONE/- - trace.mediago.io splice - - dell-desktop
1669969405.675     11 10.200.191.117 NONE_NONE/000 0 CONNECT 54.254.84.61:443 - HIER_NONE/- - sync.tidaltv.com splice - - dell-desktop
1669969405.719     10 10.200.191.117 NONE_NONE/000 0 CONNECT 44.208.184.190:443 - HIER_NONE/- - rtb.adentifi.com splice - - dell-desktop
1669969405.864      8 10.200.191.117 NONE_NONE/000 0 CONNECT 152.199.20.14:443 - HIER_NONE/- - assets.video.yahoo.net splice - - dell-desktop
1669969406.143     11 10.200.191.117 NONE_NONE/000 0 CONNECT 184.73.174.132:443 - HIER_NONE/- - video.adaptv.advertising.com splice - - dell-desktop
## END
 
 
logformat localsquid %ts.%03tu %6tr %>a %Ss/%03>Hs %<st %rm %ru %[un %Sh/%<a %mt %ssl::>sni %ssl::bump_mode %{app_tag}note %{tls_probe_res}note %{ip_to_user}note
 
 
I am not sure how to re-produce the issue so it?s pretty hard for me to guess.
What logformat are you using?
Also, can you please describe how I might be able to re-produce the issue in a local testing environment.
 
Yours,
Eliezer
 
----
Eliezer Croitoru
NgTech, Tech Support
Mobile: +972-5-28704261
Email: ngtech1ltd at gmail.com <mailto:ngtech1ltd at gmail.com> 
Web: https://ngtech.co.il/
My-Tube: https://tube.ngtech.co.il/
 
From: squid-users <squid-users-bounces at lists.squid-cache.org> On Behalf Of Gabriel Vilari?o
Sent: Tuesday, 29 November 2022 14:17
To: squid-users at lists.squid-cache.org
Subject: [squid-users] Logs not showing ssl::servername
 
Hi there,
 
I am setting up an HTTP/HTTPS transparent proxy, meaning the clients not need any certificates for using the proxy. This works fine on version 3.5 of Squid, however after upgrading to 5.7 the behavior of the logs change:
 
1669723133.174   8037 10.184.19.220 TCP_TUNNEL/500 6207 CONNECT 54.240.253.128:443 <http://54.240.253.128:443>  - ORIGINAL_DST/54.240.253.128 <http://54.240.253.128>  -
 
Directive: logformat squid %ts.%03tu %>a %Ss/%03>Hs %ssl::>sni %ssl::bump_mode ssl::>cert_subject %<ru
 
On version 3.5 we were obtaining the domain name (an aws service) in the place of ORIGINAL_DST. Also now we are not seeing any information about the bump_mode in no one of the connections while before we were seeing it. One could trough that it could be because of the /500 message, however on a 200 one to docs.ansble.com <http://docs.ansble.com>  it also don?t show any data on the sni field:
 
1669723513.363    332 10.184.19.220 TCP_TUNNEL/200 38192 CONNECT 104.26.0.234:443 <http://104.26.0.234:443>  - ORIGINAL_DST/104.26.0.234 <http://104.26.0.234>  -
 
Also the 500 looks to come from the squid not understanding something on the SSL negotiation:
 
2022/11/29 10:32:38.943 kid1| 83,4| support.cc(248) check_domain: Verifying server domain arsenal.us-west-2.amazonaws.com <http://arsenal.us-west-2.amazonaws.com>  to certificate name/subjectAltName arsenal.us-west-2.amazonaws.com <http://arsenal.us-west-2.amazonaws.com> 
2022/11/29 10:32:38.943 kid1| 83,5| bio.cc(136) read: FD 28 read 347 <= 65535
2022/11/29 10:32:38.943 kid1| 83,5| Io.cc(91) Handshake: -1/0 for TLS connection 0x558453168970 over conn99 local=SQUID-INTERNAL-IP:44264 remote=54.240.251.223:443 <http://54.240.251.223:443>  ORIGINAL_DST FD 28 flags=1
2022/11/29 10:32:38.943 kid1| 83,2| PeerConnector.cc(256) handleNegotiationResult: ERROR: failure while establishing TLS connection on FD: 280x558452b68980*1
2022/11/29 10:32:38.943 kid1| 83,5| NegotiationHistory.cc(85) retrieveNegotiatedInfo: SSL connection info on FD 28 SSL version NONE/0.0 negotiated cipher 
2022/11/29 10:32:38.943 kid1| 83,5| PeekingPeerConnector.cc(84) checkForPeekAndSpliceMatched: Will check for peek and splice on FD 28
2022/11/29 10:32:38.943 kid1| 83,5| PeekingPeerConnector.cc(395) serverCertificateVerified: HTTPS server CN: arsenal.us-west-2.amazonaws.com <http://arsenal.us-west-2.amazonaws.com>  bumped: conn99 local=SQUID-INTERNAL-IP:44264 remote=54.240.251.223:443 <http://54.240.251.223:443>  ORIGINAL_DST FD 28 flags=1
2022/11/29 10:32:38.943 kid1| 83,5| PeekingPeerConnector.cc(273) startTunneling: will tunnel instead of negotiating TLS
 
It is clear that in creates the tunnel so the 500 probably is that error? Why the bump/sni messages never log anything (according to https://wiki.squid-cache.org/Features/SslPeekAndSplice they should log splice not -). This is the config for bumping:
 
 
 
acl step1 at_step SslBump1
acl step2 at_step SslBump2
acl step3 at_step SslBump3
ssl_bump peek step1 all
 
.... http rules ...
 
acl allowed_https_sites ssl::server_name_regex "/etc/squid/whitelist.txt"
ssl_bump peek step2 allowed_https_sites
ssl_bump splice step3 allowed_https_sites
ssl_bump terminate step2 all
 
 
 
 
Ip tables simply redirect:
 
iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 3129
iptables -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-port 3130 # https port on squid: https_port 3130 intercept ssl-bump cert=/etc/squid/ssl/dummy.pem
 
Thanks in advance, i have been trying this for a week now reading a lot of posts but not luck...
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-users/attachments/20221202/c3252e42/attachment.htm>

From gvilarino6 at gmail.com  Fri Dec  2 08:55:34 2022
From: gvilarino6 at gmail.com (=?UTF-8?Q?Gabriel_Vilari=C3=B1o?=)
Date: Fri, 2 Dec 2022 09:55:34 +0100
Subject: [squid-users] Logs not showing ssl::servername
In-Reply-To: <CAGSQugn5RQfUjqfk67U-g34C1yhAZO3bBN9jBEgZGDkjCL0Y=g@mail.gmail.com>
References: <CAGSQug=Ri2iZV+DVD45xCcVh2viP8d0ocs1u+yetZB3QPoXqKA@mail.gmail.com>
 <CAGSQugn9D=XvcX7V8nNji5fFTe-ddKEVtRLdc_aTqqfnDaGgjw@mail.gmail.com>
 <CAGSQugk-aQHNXZ9JC__S-XLxJ97-Xr6+A5rQ4KDdG-jkSswgRQ@mail.gmail.com>
 <CAGSQugkYf5S80F4p8suW-w6SoXy208GQs3g1_fRqcxA5205dnQ@mail.gmail.com>
 <CAGSQugn5RQfUjqfk67U-g34C1yhAZO3bBN9jBEgZGDkjCL0Y=g@mail.gmail.com>
Message-ID: <CAGSQugkvTAXfVSci7Q6yjAvi98dC1mtsCNB2trH4WVXuL=S_LQ@mail.gmail.com>

Hi *ngtech1ltd,*

Logformat:

logformat custom %ts.%03tu %>a %Ss/%03>Hs %ssl::>sni %ssl::bump_mode
%ssl::<cert_subject %<A %err_code %err_detail
access_log daemon:/var/log/squid/custom.log custom

Complete config for https:

# Handle HTTPS requests
https_port 3130 intercept ssl-bump cert=/etc/squid/ssl/squid.pem
acl SSL_port port 443
http_access allow SSL_port
acl step1 at_step SslBump1
acl step2 at_step SslBump2
acl step3 at_step SslBump3
ssl_bump peek step1 all

# Deny requests to proxy instance metadat
acl instance_metadata dst 169.254.169.254
http_access deny instance_metadata

# Filter HTTP requests based on the whitelist
acl allowed_http_sites dstdom_regex "/etc/squid/whitelist.txt"
http_access allow allowed_http_sites

# Filter HTTPS requests based on the whitelist
acl allowed_https_sites ssl::server_name_regex "/etc/squid/whitelist.txt"
ssl_bump peek step2 allowed_https_sites
ssl_bump splice step3 allowed_https_sites
ssl_bump terminate step2 all

http_access deny all


TBH reproducing it could be pretty hard. As far as I know that connection
comes from some agent that aws uses to grab data about what you are running
on the EC2, that EC2 machine is pretty old (so almost sure is running an
old agent version). I don?t see any usage on that service so I imagine is
not activate. Also the behavior I imagine has something to do with AWS
processing that connection and failing (for example because the Squid
machine has no rights to use it). Really the only strange thing is that it
logs 500 and TCP_TUNNEL, there is no way I can check if something else is
going on. Honestly if you don?t see the motive why it logs 500 and
TCP_TUNNEL I would probably give up on that... Is the only I spot strange.

I just took and old subnet and put there the Squid for some testing, then I
saw that (among a lot else logs that were going fine) there were one
strange log every few seconds and didn?t understand what?s going on. I was
thinking that it was my config file since I read a lot of blogs saying that
HTTPS transparent proxy without certificate was not possible (it looks like
it is). So I focused on fixing that but after trying a lot of different
sslbumb combinations I didn?t fix that.


Thanks!





El jue, 1 dic 2022 a las 16:41, Gabriel Vilari?o (<gvilarino6 at gmail.com>)
escribi?:

> Hi there,
>
> Sorry for the delay. I have problems to only log 1 request.
>
> I removed the internal ip that makes the request and one internal dns, but
> dont think that?s important. Also removed all machines that weren?t
> producing this traffic so we should only have the AWS arsernal request (on
> the access.log I only see one but could be a second one, however all of
> those produce exact same result).
>
> About the motivation Alex, really the only thing that concerns me is the
> strange log (TCP_TUNNEL and error 500). On the usage side, I can not tell
> if that call is working (going trough or not) since I don?t even use that
> service. I was evaluating how Squid works and simply run in that strange
> log. My final objective is to simply understand what?s going on (tunnel or
> 500) but there is nothing critical that I have to fix.
>
> Link: https://privfile.com/download.php?fid=6388c98c4ad19-MTQ5ODM= is
> valid for one day, password is "pepe" without "".
>
> Thanks!
>
>
>
>
>
>
>
>
> El mi?, 30 nov 2022 a las 9:16, Gabriel Vilari?o (<gvilarino6 at gmail.com>)
> escribi?:
>
>> Hi again!
>>
>> Thanks for the info!
>>
>> Log with error code and error detail at the end, both "-":
>> 1669794718.051 INTERNAL_IP *TCP_TUNNEL/500*
>> arsenal.us-west-2.amazonaws.com splice /CN=
>> arsenal.us-west-2.amazonaws.com 54.240.254.131* - -*
>>
>> The cache.log with ALL,1 does not look to share a lot, in fact I don?t
>> see any messages referencing this transaction:
>>
>> 22/11/30 07:51:39 kid1| Current Directory is /
>> 2022/11/30 07:51:39 kid1| Creating missing swap directories
>> 2022/11/30 07:51:39 kid1| No cache_dir stores are configured.
>> 2022/11/30 07:51:39| Removing PID file (/run/squid.pid)
>> 2022/11/30 07:51:39 kid1| Current Directory is /
>> 2022/11/30 07:51:39 kid1| Starting Squid Cache version 5.7 for
>> x86_64-pc-linux-gnu...
>> 2022/11/30 07:51:39 kid1| Service Name: squid
>> 2022/11/30 07:51:39 kid1| Process ID 64694
>> 2022/11/30 07:51:39 kid1| Process Roles: worker
>> 2022/11/30 07:51:39 kid1| With 1024 file descriptors available
>> 2022/11/30 07:51:39 kid1| Initializing IP Cache...
>> 2022/11/30 07:51:39 kid1| DNS Socket created at [::], FD 9
>> 2022/11/30 07:51:39 kid1| DNS Socket created at 0.0.0.0, FD 10
>> 2022/11/30 07:51:39 kid1| Adding nameserver 127.0.0.53 from
>> /etc/resolv.conf
>> 2022/11/30 07:51:39 kid1| Adding domain dev.ops.mitekcloud.local from
>> /etc/resolv.conf
>> 2022/11/30 07:51:39 kid1| helperOpenServers: Starting 5/32
>> 'security_file_certgen' processes
>> 2022/11/30 07:51:39 kid1| Logfile: opening log
>> daemon:/var/log/squid/custom.log
>> 2022/11/30 07:51:39 kid1| Logfile Daemon: opening log
>> /var/log/squid/custom.log
>> 2022/11/30 07:51:40 kid1| Local cache digest enabled; rebuild/rewrite
>> every 3600/3600 sec
>> 2022/11/30 07:51:40 kid1| Store logging disabled
>> 2022/11/30 07:51:40 kid1| Swap maxSize 0 + 262144 KB, estimated 20164
>> objects
>> 2022/11/30 07:51:40 kid1| Target number of buckets: 1008
>> 2022/11/30 07:51:40 kid1| Using 8192 Store buckets
>> 2022/11/30 07:51:40 kid1| Max Mem  size: 262144 KB
>> 2022/11/30 07:51:40 kid1| Max Swap size: 0 KB
>> 2022/11/30 07:51:40 kid1| Using Least Load store dir selection
>> 2022/11/30 07:51:40 kid1| Current Directory is /
>> 2022/11/30 07:51:40 kid1| Finished loading MIME types and icons.
>> 2022/11/30 07:51:40 kid1| HTCP Disabled.
>> 2022/11/30 07:51:40 kid1| Pinger socket opened on FD 27
>> 2022/11/30 07:51:40 kid1| Squid plugin modules loaded: 0
>> 2022/11/30 07:51:40 kid1| Adaptation support is off.
>> 2022/11/30 07:51:40 kid1| Accepting HTTP Socket connections at conn13
>> local=[::]:3128 remote=[::] FD 23 flags=9
>> 2022/11/30 07:51:40 kid1| Accepting NAT intercepted HTTP Socket
>> connections at conn15 local=[::]:3129 remote=[::] FD 24 flags=41
>> 2022/11/30 07:51:40 kid1| Accepting NAT intercepted SSL bumped HTTPS
>> Socket connections at conn17 local=[::]:3130 remote=[::] FD 25 flags=41
>> 2022/11/30 07:51:40| pinger: Initialising ICMP pinger ...
>> 2022/11/30 07:51:40| pinger: ICMP socket opened.
>> 2022/11/30 07:51:40| pinger: ICMPv6 socket opened
>> 2022/11/30 07:51:41 kid1| storeLateRelease: released 0 objects
>> 2022/11/30 07:52:09 kid1| Preparing for shutdown after 3 requests
>> ... Starts ending the connections for shutdown, ends with next message...
>> *2022/11/30 07:52:40 kid1| Squid Cache (Version 5.7): Exiting normally.*
>>
>> I checked with further log levels but it outputs a lot of data (I know
>> this one is not for admins, I wanted to try to sent only the relevant logs
>> since those aws agents do several calls and I was not to only record one
>> transaction). Also if I needed, this is shared as an attachment?
>>
>> Thanks in advance!
>>
>>
>> El mar, 29 nov 2022 a las 21:52, Gabriel Vilari?o (<gvilarino6 at gmail.com>)
>> escribi?:
>>
>>> Thanks Alex!
>>>
>>> Here are the fixed logs:
>>> 1669726977.734 INTERNAL_CLIENT_IP TCP_TUNNEL/500
>>> arsenal.us-west-2.amazonaws.com splice /CN=
>>> arsenal.us-west-2.amazonaws.com 54.240.251.223
>>>
>>> As you can see, the destination is an aws service, more interesting, it
>>> effectively *logs the splice* action! That?s why I though it was
>>> letting the traffic go trough. Also the debug logs from SSL show this:
>>> 2022/11/29 10:32:38.943 kid1| 83,5| PeekingPeerConnector.cc(273) *startTunneling:
>>> will tunnel instead of negotiating TLS* # Last line from previously
>>> attached logs
>>>
>>> As far as I know this means *is getting to the TCP_TUNNEL, at that
>>> point it can not know anything about the internal status on the connection
>>> between client and host*. If not, *where I should be looking for this
>>> error? *Should try to review further the debug ssl logs to se if I fend
>>> something more useful? Maybe tcpdump? This could be just the end service
>>> failing on the request? Or is an error between Squid and the end sever?
>>>
>>> If I understand right the request that fails is the fake connect and I
>>> need to understand why. Also note almost same config logged this as
>>> TCP_TUNNEL/200 on version 3.5. But as said before, I really not sure
>>> how to check, since that service is just an agent installed on some aws
>>> machines and don?t know how to reproduce this behavior.
>>>
>>>
>>>
>>>
>>> Thanks again! Hope I answered fine since I didn?t get the answer email.
>>>
>>>
>>> El mar, 29 nov 2022 a las 14:06, Gabriel Vilari?o (<gvilarino6 at gmail.com>)
>>> escribi?:
>>>
>>>> Just got it solved. Was caused because of checking default access.log.
>>>> Using a new file solves all the problems.
>>>>
>>>> However, in this context, what means TCP_TUNNEL/500? is it because the
>>>> TLS handshake? I would like to know if it is tunneling correctly or is
>>>> having some trouble (not easy to test right now).
>>>>
>>>> Thanks!
>>>>
>>>> El mar, 29 nov 2022 a las 13:16, Gabriel Vilari?o (<
>>>> gvilarino6 at gmail.com>) escribi?:
>>>>
>>>>> Hi there,
>>>>>
>>>>> I am setting up an HTTP/HTTPS transparent proxy, meaning the clients
>>>>> not need any certificates for using the proxy. This works fine on version
>>>>> 3.5 of Squid, however after upgrading to 5.7 the behavior of the logs
>>>>> change:
>>>>>
>>>>> 1669723133.174   8037 10.184.19.220 TCP_TUNNEL/500 6207 CONNECT
>>>>> 54.240.253.128:443 - ORIGINAL_DST/54.240.253.128 -
>>>>>
>>>>> Directive: logformat squid %ts.%03tu %>a %Ss/%03>Hs %ssl::>sni
>>>>> %ssl::bump_mode ssl::>cert_subject %<ru
>>>>>
>>>>> On version 3.5 we were obtaining the domain name (an aws service) in
>>>>> the place of ORIGINAL_DST. Also now we are not seeing any information about
>>>>> the bump_mode in no one of the connections while before we were seeing it.
>>>>> One could trough that it could be because of the /500 message, however on a
>>>>> 200 one to docs.ansble.com it also don?t show any data on the sni
>>>>> field:
>>>>>
>>>>> 1669723513.363    332 10.184.19.220 TCP_TUNNEL/200 38192 CONNECT
>>>>> 104.26.0.234:443 - ORIGINAL_DST/104.26.0.234 -
>>>>>
>>>>> Also the 500 looks to come from the squid not understanding something
>>>>> on the SSL negotiation:
>>>>>
>>>>> 2022/11/29 10:32:38.943 kid1| 83,4| support.cc(248) check_domain:
>>>>> Verifying server domain arsenal.us-west-2.amazonaws.com to
>>>>> certificate name/subjectAltName arsenal.us-west-2.amazonaws.com 2022/11/29
>>>>> 10:32:38.943 kid1| 83,5| bio.cc(136) read: FD 28 read 347 <= 65535 2022/11/29
>>>>> 10:32:38.943 kid1| 83,5| Io.cc(91) Handshake: -1/0 for TLS connection
>>>>> 0x558453168970 over conn99 local=SQUID-INTERNAL-IP:44264 remote=
>>>>> 54.240.251.223:443 ORIGINAL_DST FD 28 flags=1 2022/11/29 10:32:38.943
>>>>> kid1| 83,2| PeerConnector.cc(256) handleNegotiationResult: ERROR: failure
>>>>> while establishing TLS connection on FD: 280x558452b68980*1 2022/11/29
>>>>> 10:32:38.943 kid1| 83,5| NegotiationHistory.cc(85) retrieveNegotiatedInfo:
>>>>> SSL connection info on FD 28 SSL version NONE/0.0 negotiated cipher 2022/11/29
>>>>> 10:32:38.943 kid1| 83,5| PeekingPeerConnector.cc(84)
>>>>> checkForPeekAndSpliceMatched: Will check for peek and splice on FD 28 2022/11/29
>>>>> 10:32:38.943 kid1| 83,5| PeekingPeerConnector.cc(395)
>>>>> serverCertificateVerified: HTTPS server CN:
>>>>> arsenal.us-west-2.amazonaws.com bumped: conn99
>>>>> local=SQUID-INTERNAL-IP:44264 remote=54.240.251.223:443 ORIGINAL_DST
>>>>> FD 28 flags=1
>>>>> 2022/11/29 10:32:38.943 kid1| 83,5| PeekingPeerConnector.cc(273)
>>>>> startTunneling: will tunnel instead of negotiating TLS
>>>>>
>>>>> It is clear that in creates the tunnel so the 500 probably is that
>>>>> error? Why the bump/sni messages never log anything (according to
>>>>> https://wiki.squid-cache.org/Features/SslPeekAndSplice they should
>>>>> log splice not -). This is the config for bumping:
>>>>>
>>>>>
>>>>>
>>>>> acl step1 at_step SslBump1
>>>>> acl step2 at_step SslBump2
>>>>> acl step3 at_step SslBump3
>>>>> ssl_bump peek step1 all
>>>>>
>>>>> .... http rules ...
>>>>>
>>>>> acl allowed_https_sites ssl::server_name_regex
>>>>> "/etc/squid/whitelist.txt"
>>>>> ssl_bump peek step2 allowed_https_sites
>>>>> ssl_bump splice step3 allowed_https_sites
>>>>> ssl_bump terminate step2 all
>>>>>
>>>>>
>>>>>
>>>>>
>>>>> Ip tables simply redirect:
>>>>>
>>>>> iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port
>>>>> 3129
>>>>> iptables -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-port
>>>>> 3130 # https port on squid: https_port 3130 intercept ssl-bump
>>>>> cert=/etc/squid/ssl/dummy.pem
>>>>>
>>>>> Thanks in advance, i have been trying this for a week now reading a
>>>>> lot of posts but not luck...
>>>>>
>>>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-users/attachments/20221202/2d6ac382/attachment.htm>

From rousskov at measurement-factory.com  Fri Dec  2 15:46:01 2022
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Fri, 2 Dec 2022 10:46:01 -0500
Subject: [squid-users] Squid Degrading
In-Reply-To: <003601d905df$bf02d4e0$3d087ea0$@gmail.com>
References: <CAFuFF_K9SOttfwtfgAjQhfZ-Jz_31=cVuY-TXM5FnMboQ7ij2w@mail.gmail.com>
 <3ffc1451-7515-da0a-ac7f-be5463018279@measurement-factory.com>
 <CAFuFF_LWt8REM44Y7no4MC0LcV3HdQ6ccqUrv=GLNQzL4OQ+Fw@mail.gmail.com>
 <67182b7c-7efc-f223-db88-46dc8330c00f@measurement-factory.com>
 <003601d905df$bf02d4e0$3d087ea0$@gmail.com>
Message-ID: <4acd2dd1-a9f7-7f4a-3e6a-e8a85276791f@measurement-factory.com>

On 12/1/22 18:50, ngtech1ltd at gmail.com wrote:
> Hey Alex,
> 
> Do you think an ubuntu "squid" binary would be fit for such a use case?
> IE replacing only the /usr/sbin/squid binary from another source?

This is not my area of expertise. AFAICT, substituting v5 binaries with 
(properly built) v5 binaries will usually work, but it is not a 
supported (or necessary) Squid installation method.

Alex.


> For my simple usage (A simple forward proxy) on Ubuntu I am installing squid from the repo
> and then just replace the squid binary.
> 
> I remember that there was someone that maintains squid repo for Ubuntu and maybe Debian but
> I don't remember who it was.
> Maybe it was it Raphael from diladele?
> 
> Thanks,
> Eliezer
> 
> ----
> Eliezer Croitoru
> NgTech, Tech Support
> Mobile: +972-5-28704261
> Email: ngtech1ltd at gmail.com
> Web: https://ngtech.co.il/
> My-Tube: https://tube.ngtech.co.il/
> 
> -----Original Message-----
> From: squid-users <squid-users-bounces at lists.squid-cache.org> On Behalf Of Alex Rousskov
> Sent: Thursday, 1 December 2022 18:31
> To: squid-users at lists.squid-cache.org
> Subject: Re: [squid-users] Squid Degrading
> 
> On 12/1/22 11:20, utb trialuser wrote:
> 
>>> What is your Squid version (squid --version)?
> 
>> 5.2
> 
> We can stop here. Please upgrade to Squid v5.7 or later. Squid v5.2 is
> just too buggy to be usable in most production environments (and to
> investigate any performance problems).
> 
> 
>>> Any errors or warnings in cache.log?
> 
>> *WARNING! Your cache is running out of filedescriptors*
> 
> There are known Squid v5.2 bugs that may result in the above warnings
> and related performance degradation. I hope that these problems will be
> gone, and your Squid performance will be acceptable after you upgrade.
> 
> 
> Good luck,
> 
> Alex.
> 
> 
>> On Wed, Nov 30, 2022 at 6:12 PM Alex Rousskov wrote:
>>
>>      On 11/30/22 16:57, utb trialuser wrote:
>>       > Hello, I'm running a basic Squid setup on the latest version of
>>      Ubuntu.
>>       > Could you help me figure out why when 15 people connect to my
>>      proxy it
>>       > starts degrading and websites start to take really long to load?
>>       > According to the log file, connections take up to 300000ms to
>>      load when
>>       > this happens. And via other networking tools I was able to
>>      realize that
>>       > packets were being dropped. Bandwidth usage tops at 6MB/s
>>      according to
>>       > another networking tool. Thanks.
>>
>>      What is your Squid version (squid --version)?
>>
>>      Any errors or warnings in cache.log?
>>
>>      Do you have a cache_dir and/or cache_mem configured in squid.conf? Do
>>      you have "workers" configured?
>>
>>      How much free RAM is left on the box when "websites start to take
>>      really
>>      long to load"?
>>
>>      Alex.
>>
>>      _______________________________________________
>>      squid-users mailing list
>>      squid-users at lists.squid-cache.org
>>      <mailto:squid-users at lists.squid-cache.org>
>>      http://lists.squid-cache.org/listinfo/squid-users
>>      <http://lists.squid-cache.org/listinfo/squid-users>
>>
>>
>> _______________________________________________
>> squid-users mailing list
>> squid-users at lists.squid-cache.org
>> http://lists.squid-cache.org/listinfo/squid-users
> 
> _______________________________________________
> squid-users mailing list
> squid-users at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-users
> 
> _______________________________________________
> squid-users mailing list
> squid-users at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-users



From ngtech1ltd at gmail.com  Fri Dec  2 21:13:54 2022
From: ngtech1ltd at gmail.com (ngtech1ltd at gmail.com)
Date: Fri, 2 Dec 2022 23:13:54 +0200
Subject: [squid-users] Squid Degrading
In-Reply-To: <4acd2dd1-a9f7-7f4a-3e6a-e8a85276791f@measurement-factory.com>
References: <CAFuFF_K9SOttfwtfgAjQhfZ-Jz_31=cVuY-TXM5FnMboQ7ij2w@mail.gmail.com>
 <3ffc1451-7515-da0a-ac7f-be5463018279@measurement-factory.com>
 <CAFuFF_LWt8REM44Y7no4MC0LcV3HdQ6ccqUrv=GLNQzL4OQ+Fw@mail.gmail.com>
 <67182b7c-7efc-f223-db88-46dc8330c00f@measurement-factory.com>
 <003601d905df$bf02d4e0$3d087ea0$@gmail.com>
 <4acd2dd1-a9f7-7f4a-3e6a-e8a85276791f@measurement-factory.com>
Message-ID: <001001d90692$fd055fc0$f7101f40$@gmail.com>

Thanks Alex!

I assume that for a testing purpose it should be good enough if it came from a known source.

My assumption is that if someone knows how to compile squid from sources
he should be able to understand what binaries he requires for basic tests.
I am not sure if it's since I am also a packager but pretty sure it's why I see it as OK.

And... I have found the  post manually:
[squid-users] Ubuntu 20.04 LTS repository for Squid 5.7 (rebuilt from sources in Debian unstable)
http://lists.squid-cache.org/pipermail/squid-users/2022-October/025301.html

Google.. manual page by page search labor paid off!!

All The Bests,
Eliezer

----
Eliezer Croitoru
NgTech, Tech Support
Mobile: +972-5-28704261
Email: ngtech1ltd at gmail.com
Web: https://ngtech.co.il/
My-Tube: https://tube.ngtech.co.il/

-----Original Message-----
From: squid-users <squid-users-bounces at lists.squid-cache.org> On Behalf Of Alex Rousskov
Sent: Friday, 2 December 2022 17:46
To: squid-users at lists.squid-cache.org
Subject: Re: [squid-users] Squid Degrading

On 12/1/22 18:50, ngtech1ltd at gmail.com wrote:
> Hey Alex,
> 
> Do you think an ubuntu "squid" binary would be fit for such a use case?
> IE replacing only the /usr/sbin/squid binary from another source?

This is not my area of expertise. AFAICT, substituting v5 binaries with 
(properly built) v5 binaries will usually work, but it is not a 
supported (or necessary) Squid installation method.

Alex.


> For my simple usage (A simple forward proxy) on Ubuntu I am installing squid from the repo
> and then just replace the squid binary.
> 
> I remember that there was someone that maintains squid repo for Ubuntu and maybe Debian but
> I don't remember who it was.
> Maybe it was it Raphael from diladele?
> 
> Thanks,
> Eliezer
> 
> ----
> Eliezer Croitoru
> NgTech, Tech Support
> Mobile: +972-5-28704261
> Email: ngtech1ltd at gmail.com
> Web: https://ngtech.co.il/
> My-Tube: https://tube.ngtech.co.il/
> 
> -----Original Message-----
> From: squid-users <squid-users-bounces at lists.squid-cache.org> On Behalf Of Alex Rousskov
> Sent: Thursday, 1 December 2022 18:31
> To: squid-users at lists.squid-cache.org
> Subject: Re: [squid-users] Squid Degrading
> 
> On 12/1/22 11:20, utb trialuser wrote:
> 
>>> What is your Squid version (squid --version)?
> 
>> 5.2
> 
> We can stop here. Please upgrade to Squid v5.7 or later. Squid v5.2 is
> just too buggy to be usable in most production environments (and to
> investigate any performance problems).
> 
> 
>>> Any errors or warnings in cache.log?
> 
>> *WARNING! Your cache is running out of filedescriptors*
> 
> There are known Squid v5.2 bugs that may result in the above warnings
> and related performance degradation. I hope that these problems will be
> gone, and your Squid performance will be acceptable after you upgrade.
> 
> 
> Good luck,
> 
> Alex.
> 
> 
>> On Wed, Nov 30, 2022 at 6:12 PM Alex Rousskov wrote:
>>
>>      On 11/30/22 16:57, utb trialuser wrote:
>>       > Hello, I'm running a basic Squid setup on the latest version of
>>      Ubuntu.
>>       > Could you help me figure out why when 15 people connect to my
>>      proxy it
>>       > starts degrading and websites start to take really long to load?
>>       > According to the log file, connections take up to 300000ms to
>>      load when
>>       > this happens. And via other networking tools I was able to
>>      realize that
>>       > packets were being dropped. Bandwidth usage tops at 6MB/s
>>      according to
>>       > another networking tool. Thanks.
>>
>>      What is your Squid version (squid --version)?
>>
>>      Any errors or warnings in cache.log?
>>
>>      Do you have a cache_dir and/or cache_mem configured in squid.conf? Do
>>      you have "workers" configured?
>>
>>      How much free RAM is left on the box when "websites start to take
>>      really
>>      long to load"?
>>
>>      Alex.
>>
>>      _______________________________________________
>>      squid-users mailing list
>>      squid-users at lists.squid-cache.org
>>      <mailto:squid-users at lists.squid-cache.org>
>>      http://lists.squid-cache.org/listinfo/squid-users
>>      <http://lists.squid-cache.org/listinfo/squid-users>
>>
>>
>> _______________________________________________
>> squid-users mailing list
>> squid-users at lists.squid-cache.org
>> http://lists.squid-cache.org/listinfo/squid-users
> 
> _______________________________________________
> squid-users mailing list
> squid-users at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-users
> 
> _______________________________________________
> squid-users mailing list
> squid-users at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-users

_______________________________________________
squid-users mailing list
squid-users at lists.squid-cache.org
http://lists.squid-cache.org/listinfo/squid-users



From e.conti at gmx.net  Sat Dec  3 12:52:56 2022
From: e.conti at gmx.net (Nicolas)
Date: Sat, 3 Dec 2022 13:52:56 +0100
Subject: [squid-users] TCP_DENIED/403 errors when ads blocking is activated
Message-ID: <00c72a8d-16d8-bc30-daac-e06606b3e697@gmx.net>

Hello,

I installed squid on one of my servers, in order to block ads.

When I do not activate ads blocking, it works fine.
However, when I do activate ads blocking, some website are not accessible.
I can browse www.google.com for example, but I can't access www.linuxhint.com and a LOT of other websites.

Here's what appears in access.log :
1670071413.742      0 192.168.228.145 TCP_DENIED/403 3985 CONNECT linuxhint.com:443 - HIER_NONE/- text/html

Here's my squid.conf file :
acl localnet src 0.0.0.1-0.255.255.255  # RFC 1122 "this" network (LAN)
acl localnet src 10.0.0.0/8             # RFC 1918 local private network (LAN)
acl localnet src 100.64.0.0/10          # RFC 6598 shared address space (CGN)
acl localnet src 169.254.0.0/16         # RFC 3927 link-local (directly plugged) machines
acl localnet src 172.16.0.0/12          # RFC 1918 local private network (LAN)
acl localnet src 192.168.0.0/16         # RFC 1918 local private network (LAN)
acl localnet src fc00::/7               # RFC 4193 local private network range
acl localnet src fe80::/10              # RFC 4291 link-local (directly plugged) machines
acl SSL_ports port 443
acl Safe_ports port 80          # http
acl Safe_ports port 21          # ftp
acl Safe_ports port 443         # https
acl Safe_ports port 70          # gopher
acl Safe_ports port 210         # wais
acl Safe_ports port 1025-65535  # unregistered ports
acl Safe_ports port 280         # http-mgmt
acl Safe_ports port 488         # gss-http
acl Safe_ports port 591         # filemaker
acl Safe_ports port 777         # multiling http
acl CONNECT method CONNECT
acl ads dstdom_regex "/etc/squid/ad_block.txt"
http_access deny ads
http_access deny !Safe_ports
http_access deny CONNECT !SSL_ports
http_access allow localhost manager
http_access deny manager
include /etc/squid/conf.d/*
http_access allow localnet
http_access allow localhost
http_access deny all
http_port 8080
cache_dir ufs /cachesquid 600 16 256
coredump_dir /var/spool/squid
refresh_pattern ^ftp:           1440    20%     10080
refresh_pattern ^gopher:        1440    0%      1440
refresh_pattern -i (/cgi-bin/|\?) 0     0%      0
refresh_pattern .               0       20%     4320

Here's how I got the ad_block.txt file :
curl -sS -L --compressed "http://pgl.yoyo.org/adservers/serverlist.php?hostformat=nohtml&showintro=0&mimetype=plaintext" > /etc/squid/ad_block.txt
which is on my server :
-rw-r--r-- 1 root root 60609  2 d?c.  16:40 /etc/squid/ad_block.txt

I don't see anything special in that file, which contains for example :
1-1ads.com
101com.com
101order.com
123freeavatars.com
180hits.de
180searchassistant.com

There's only one occurence of linux in that file :
grep -i "linux" /etc/squid/ad_block.txt
banner.linux.se

Do you know why I got those 403 errors? I gave one example only (www.linuxhint.com) but a LOT of websites are not accessible anymore as soon as I add that line in the squid.conf file :
http_access deny ads

Thank you for your help.

Nicolas.



From uhlar at fantomas.sk  Sat Dec  3 14:02:19 2022
From: uhlar at fantomas.sk (Matus UHLAR - fantomas)
Date: Sat, 3 Dec 2022 15:02:19 +0100
Subject: [squid-users] TCP_DENIED/403 errors when ads blocking is
 activated
In-Reply-To: <00c72a8d-16d8-bc30-daac-e06606b3e697@gmx.net>
References: <00c72a8d-16d8-bc30-daac-e06606b3e697@gmx.net>
Message-ID: <Y4tW63TLgBQBbYHg@fantomas.sk>

On 03.12.22 13:52, Nicolas wrote:
>I installed squid on one of my servers, in order to block ads.
>
>When I do not activate ads blocking, it works fine.
>However, when I do activate ads blocking, some website are not accessible.
>I can browse www.google.com for example, but I can't access www.linuxhint.com and a LOT of other websites.
>
>Here's what appears in access.log :
>1670071413.742      0 192.168.228.145 TCP_DENIED/403 3985 CONNECT linuxhint.com:443 - HIER_NONE/- text/html
>
>Here's my squid.conf file :

>acl ads dstdom_regex "/etc/squid/ad_block.txt"
>http_access deny ads

>curl -sS -L --compressed "http://pgl.yoyo.org/adservers/serverlist.php?hostformat=nohtml&showintro=0&mimetype=plaintext" > /etc/squid/ad_block.txt
>which is on my server :
>-rw-r--r-- 1 root root 60609  2 d?c.  16:40 /etc/squid/ad_block.txt
>
>I don't see anything special in that file, which contains for example :
>1-1ads.com
>101com.com
>101order.com
>123freeavatars.com
>180hits.de
>180searchassistant.com

the "t.co" matches.

there are no regexes in that file you should probably use "dstdomain" 
instead.

regexes match . as any character and match in the middle of strings.

-- 
Matus UHLAR - fantomas, uhlar at fantomas.sk ; http://www.fantomas.sk/
Warning: I wish NOT to receive e-mail advertising to this address.
Varovanie: na tuto adresu chcem NEDOSTAVAT akukolvek reklamnu postu.
Microsoft dick is soft to do no harm


From e.conti at gmx.net  Sat Dec  3 15:03:05 2022
From: e.conti at gmx.net (Nicolas)
Date: Sat, 3 Dec 2022 16:03:05 +0100
Subject: [squid-users] TCP_DENIED/403 errors when ads blocking is
 activated
In-Reply-To: <Y4tW63TLgBQBbYHg@fantomas.sk>
References: <00c72a8d-16d8-bc30-daac-e06606b3e697@gmx.net>
 <Y4tW63TLgBQBbYHg@fantomas.sk>
Message-ID: <6a717d8c-2d95-ad3a-0053-1ae9b45e4306@gmx.net>

You're right, Matus. That was the issue.
I replace as you suggested:
acl ads dstdom_regex "/etc/squid/ad_block.txt"
by
acl ads dstdomain "/etc/squid/ad_block.txt"
and now it works.

Thank you very much, Matus !

Have a nice day.

Nicolas.

Le 03/12/2022 ? 15:02, Matus UHLAR - fantomas a ?crit?:
> On 03.12.22 13:52, Nicolas wrote:
>> I installed squid on one of my servers, in order to block ads.
>>
>> When I do not activate ads blocking, it works fine.
>> However, when I do activate ads blocking, some website are not
>> accessible.
>> I can browse www.google.com for example, but I can't access
>> www.linuxhint.com and a LOT of other websites.
>>
>> Here's what appears in access.log :
>> 1670071413.742????? 0 192.168.228.145 TCP_DENIED/403 3985 CONNECT
>> linuxhint.com:443 - HIER_NONE/- text/html
>>
>> Here's my squid.conf file :
>
>> acl ads dstdom_regex "/etc/squid/ad_block.txt"
>> http_access deny ads
>
>> curl -sS -L --compressed
>> "http://pgl.yoyo.org/adservers/serverlist.php?hostformat=nohtml&showintro=0&mimetype=plaintext"
>> > /etc/squid/ad_block.txt
>> which is on my server :
>> -rw-r--r-- 1 root root 60609? 2 d?c.? 16:40 /etc/squid/ad_block.txt
>>
>> I don't see anything special in that file, which contains for example :
>> 1-1ads.com
>> 101com.com
>> 101order.com
>> 123freeavatars.com
>> 180hits.de
>> 180searchassistant.com
>
> the "t.co" matches.
>
> there are no regexes in that file you should probably use "dstdomain"
> instead.
>
> regexes match . as any character and match in the middle of strings.
>



From awood at communicationsmuseum.org.uk  Mon Dec  5 13:07:17 2022
From: awood at communicationsmuseum.org.uk (Andrew Wood)
Date: Mon, 5 Dec 2022 13:07:17 +0000
Subject: [squid-users] Whatsapp web on Squid
Message-ID: <8e3448fa-269d-fe0f-38b8-2a1940a96150@communicationsmuseum.org.uk>

Hi

Can anyone help me with Whatsapp web and Yahoo mail not working via a 
Squid proxy please?

The only reference I can find online to Whatsapp refers to SSL bumping 
which we are not using. Clients are explicitly configured to send HTTPS 
traffic to Squid on port 3129, but according to the Squid log Whatsapp 
server is responding with 403.


Likewise although Yahoo webmail works, accessing it via IMAP from 
Thunderbird is failing. This seems to be because it uses OAuth2 for 
authentication over port 443 and again Yahoos server responds with 403.


All other HTTPS stuff appears to be working fine. Is there a workaround?

Thanks

Andrew



From squid3 at treenet.co.nz  Mon Dec  5 14:45:33 2022
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Tue, 6 Dec 2022 03:45:33 +1300
Subject: [squid-users] Whatsapp web on Squid
In-Reply-To: <8e3448fa-269d-fe0f-38b8-2a1940a96150@communicationsmuseum.org.uk>
References: <8e3448fa-269d-fe0f-38b8-2a1940a96150@communicationsmuseum.org.uk>
Message-ID: <9c5f18c2-90a0-48d0-37d4-50cec5614d69@treenet.co.nz>

On 6/12/2022 2:07 am, Andrew Wood wrote:
> Hi
>
> Can anyone help me with Whatsapp web and Yahoo mail not working via a 
> Squid proxy please?
>
> The only reference I can find online to Whatsapp refers to SSL bumping 
> which we are not using. Clients are explicitly configured to send 
> HTTPS traffic to Squid on port 3129, but according to the Squid log 
> Whatsapp server is responding with 403.

The only way Squid can see what HTTP status the origin server is 
responding with is by using SSL-Bump to decrypt the traffic.

If you are seeing 403 in your squid access.log without SSL-Bump that 
would the traffic forbidden explicitly by your http_access policy in 
squid.conf.
We might be able to help with that, but you will need to first post your 
config and the access.log entries for failing transactions you are 
trying to solve.


>
> Likewise although Yahoo webmail works, accessing it via IMAP from 
> Thunderbird is failing. This seems to be because it uses OAuth2 for 
> authentication over port 443 and again Yahoos server responds with 403.

IMAP is a completely different protocol on port 143 (not 443) and should 
not be going through Squid. Mail protocols and HTTP have similar enough 
on-wire syntax to confuse each others parsers and different enough to 
break badly when the messages get relayed/proxied.


HTH
Amos


From irem.kuyucu at surfsharkteam.com  Tue Dec  6 13:54:35 2022
From: irem.kuyucu at surfsharkteam.com (Irem Kuyucu)
Date: Tue, 6 Dec 2022 15:54:35 +0200
Subject: [squid-users] Setting header with external auth helper error message
Message-ID: <CAF4rkovzj0MPY7rN9eaJ4PaQ-9n14v_rdkgSDG490Uvnt83B2A@mail.gmail.com>

Hello,

I'm trying to get Squid (4.9) to reply to the client with a custom
header which contains the error message returned from the external
auth helper binary.

For example, I'd like Squid to reply with a header like this:
X-Custom-Err: ERR NO_BACKEND
or
X-Custom-Err: NO_BACKEND
Where "ERR NO_BACKEND" is a response gathered from the auth helper.

I've tried setting this in squid.conf, this way I can see the header
however its value is always '-':

reply_header_add X-Custom-Err "%err_detail"

I also tried to define a custom error by modifying squid.conf and
error-details.txt. That also didn't work, the value is always set to
'-'.
/etc/squid.conf:

error_directory /etc/squid/error_directory/
deny_info CUSTOM_ERR_ACCESS_DENIED custom-auth
reply_header_add X-Custom-Err "%err_detail"

/etc/squid/error_directory/error-details.txt:

name: CUSTOM_ERR_ACCESS_DENIED
detail: "%m"
descr: "Access denied"

"%m" is the error message returned by external auth helper according
to https://wiki.squid-cache.org/Features/CustomErrors#ERR_.2A_template_codes_for_embedding
I also tried to log "%err_code %err_detail %et %ea" but all of these
values except err_code are logged as '-'.
Does anyone know how to do this or if this is possible to do in the first place?

Thanks in advance,
Irem


From rousskov at measurement-factory.com  Tue Dec  6 14:33:44 2022
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Tue, 6 Dec 2022 09:33:44 -0500
Subject: [squid-users] Setting header with external auth helper error
 message
In-Reply-To: <CAF4rkovzj0MPY7rN9eaJ4PaQ-9n14v_rdkgSDG490Uvnt83B2A@mail.gmail.com>
References: <CAF4rkovzj0MPY7rN9eaJ4PaQ-9n14v_rdkgSDG490Uvnt83B2A@mail.gmail.com>
Message-ID: <21f9e58a-e7dc-7e72-bfc1-bed5c5f59a00@measurement-factory.com>

On 12/6/22 08:54, Irem Kuyucu wrote:

> I'm trying to get Squid (4.9) to reply to the client with a custom
> header which contains the error message returned from the external
> auth helper binary.
> 
> For example, I'd like Squid to reply with a header like this:
> X-Custom-Err: ERR NO_BACKEND
> or
> X-Custom-Err: NO_BACKEND
> Where "ERR NO_BACKEND" is a response gathered from the auth helper.
> 
> I've tried setting this in squid.conf, this way I can see the header
> however its value is always '-':
> 
> reply_header_add X-Custom-Err "%err_detail"
> 
> I also tried to define a custom error by modifying squid.conf and
> error-details.txt. That also didn't work, the value is always set to
> '-'.
> /etc/squid.conf:
> 
> error_directory /etc/squid/error_directory/
> deny_info CUSTOM_ERR_ACCESS_DENIED custom-auth
> reply_header_add X-Custom-Err "%err_detail"
> 
> /etc/squid/error_directory/error-details.txt:
> 
> name: CUSTOM_ERR_ACCESS_DENIED
> detail: "%m"
> descr: "Access denied"
> 
> "%m" is the error message returned by external auth helper according
> to https://wiki.squid-cache.org/Features/CustomErrors#ERR_.2A_template_codes_for_embedding
> I also tried to log "%err_code %err_detail %et %ea" but all of these
> values except err_code are logged as '-'.

> Does anyone know how to do this or if this is possible to do in the first place?


1. Upgrade to the latest Squid v4 (at least). There are Squid v4.9 bugs 
that may prevent the advice below from working correctly. One of them 
was fixed in v4.11, but there may be others. Consider upgrading to Squid 
v5.7 or later. I hope my response covers the latest Squid v4, but I do 
not remember any v4-specific caveats.


2. Make sure your helper is sending the right annotation to Squid as a 
custom name=value pair in each helper response. Always end your custom 
helper annotation names with an underscore to avoid conflicts with Squid 
internal annotations, current and future. See [1] for format details. 
[1] https://wiki.squid-cache.org/Features/AddonHelpers#Authenticator


3. Use reply_header_add with the corresponding %note logformat code
(let's assume that you called your custom annotation "myerror_"):

     reply_header_add X-Custom-Err "%note{myerror_}"


4. Please note that helper results may be cached. If your helper is not 
contacted for a given transaction (due to a helper cache hit or some 
other reason), then you may get no annotation or a stale annotation. If 
your annotation is not specific to authentication, you may want to use 
an external ACL helper to set it (and disable caching of that helper 
results with "external_acl_type ... cache=0" or similar, as needed).

N.B. %err_code and %err_detail logformat code are for reporting 
Squid-discovered errors, not custom annotations.


HTH,

Alex.



From charring at rand.org  Wed Dec  7 08:24:34 2022
From: charring at rand.org (Craig Harrington)
Date: Wed, 7 Dec 2022 08:24:34 +0000
Subject: [squid-users] No buffer space available
Message-ID: <BY5PR09MB52978496C26D5373D4549B17BD1A9@BY5PR09MB5297.namprd09.prod.outlook.com>

My squid proxy has been running fine for over a year and over the last few weeks it has been failing randomly.

I have been getting the following messages in the cache.log:
comm_openex socket failure: (105) No buffer space available
oldAccept  FD 18, [::] [ job2]: (105) No buffer space available

Sometimes a restart of the service fixes and sometimes I need to reboot.
Server is Windows 2019 running in AWS
Squid is v4.14 from Diladele installer

I have tried reducing TcpFinWait2Delay and TcpTimedWaitDelay.

Any ideas would be very helpful!


________________________________
Craig Harrington, RAND Corporation
System Administrator Senior, Information Services
m1351p  charring at rand.org<mailto:charring at rand.org>
(office) 310-393-0411 x7135<tel:310-393-0411;7135>
(mobile) 714-330-4790<tel:714-330-4790>
________________________________

__________________________________________________________________________

This email message is for the sole use of the intended recipient(s) and
may contain information that is sensitive, proprietary, and/or privileged.
Any unauthorized review, use, disclosure or distribution is prohibited. If
you are not the intended recipient, please contact the sender by reply
email and destroy all copies of the original message.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-users/attachments/20221207/75962cff/attachment.htm>

From squid3 at treenet.co.nz  Wed Dec  7 16:37:20 2022
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Thu, 8 Dec 2022 05:37:20 +1300
Subject: [squid-users] No buffer space available
In-Reply-To: <BY5PR09MB52978496C26D5373D4549B17BD1A9@BY5PR09MB5297.namprd09.prod.outlook.com>
References: <BY5PR09MB52978496C26D5373D4549B17BD1A9@BY5PR09MB5297.namprd09.prod.outlook.com>
Message-ID: <2ad03f14-20d9-a9de-8743-7ab1dc30b820@treenet.co.nz>

On 7/12/2022 9:24 pm, Craig Harrington wrote:
>
> My squid proxy has been running fine for over a year and over the last 
> few weeks it has been failing randomly.
>
> I have been getting the following messages in the cache.log:
>
> comm_openex socket failure: (105) No buffer space available
>
> oldAccept? FD 18, [::] [ job2]: (105) No buffer space available
>

That error "(105) No buffer space available" occurs when the __operating 
system__ has run out of TCP sockets (too many connections) or network 
stack memory (too much traffic volume).

FWIW; Windows is known to have quite low limit of 2000 concurrent TCP 
sockets per process, making it quite sub-optimal to use for networking 
services like Squid.

Since you have had it running previously, I suggest checking to see how 
many connections Squid is actually using when the problem occurs.

If the number of sockets looks unexpectedly high check for a routing 
loop forwarding traffic leaving Squid back into Squid again?
that type of self-DoS (and of course other types of DoS) are usually 
what cause this error message to come up for Squid.


> Sometimes a restart of the service fixes and sometimes I need to reboot.
>

Hmm. That need for a full reboot hints that some other service on the 
machine is consuming TCP resources.
If Squid were the cause of this the service restart would *always* fix 
the problem.

It may just be the OS cannot handle two services putting "heavy" use on 
TCP at the same time.


> Server is Windows 2019 running in AWS
>
> Squid is v4.14 from Diladele installer
>
> I have tried reducing TcpFinWait2Delay and TcpTimedWaitDelay.
>

For effective use of those settings check squid.conf to ensure you do 
*not* have these:
 ? client_persistent_connections off
 ? serve_persistent_connections off

If they exist removing both (or at least the server one) may help reduce 
the pressure on the OS resources.

One thing to be wary of since you reduced it - is that TcpTimedWaitDelay 
should ideally be the same or larger than Squid 
client_idle_pconn_timeout (default 2 minutes).


HTH
Amos



From Matt.Toler at netapp.com  Wed Dec  7 21:26:11 2022
From: Matt.Toler at netapp.com (Toler, Matt)
Date: Wed, 7 Dec 2022 21:26:11 +0000
Subject: [squid-users] req_header acl with ssl_bump
Message-ID: <DS7PR06MB6789F1C1721EA84314FF5F89E91A9@DS7PR06MB6789.namprd06.prod.outlook.com>

Hello,

We are attempting to leverage headers to isolate access to external sites with squid 4.14. The Loadbalencer is injecting headers and squid is simply verifying them:

acl ACL_HDR_1 req_header Repo_Svr_VerifiedHdr True
acl REPO_DST_ALLOW dstdomain "/etc/squid/acls.d/hosts.acl"
http_access allow                           PROXY-SRC REPO_DST_ALLOW ACL_HDR_1

We are currently decrypting this traffic and it's working well.

Now we have a requirement to skip ssl decrypt for only certain destinations. My thought was to simply create a separate ACL where skipping ssl decrypt is required and add the header ACL to the end of the ssl_bump directive like so:

acl Repo_Skip_HDR req_header Repo_Svr_VerifiedHdr True
acl Repo_SkipSslDecrypt dstdomain "/etc/squid/acls.d/hosts.acl"
ssl_bump none Repo_SkipSslDecrypt  Repo_Skip_HDR

This parsed successfully but did not have the desired effect. The squid is still inspecting the traffic even with the header present as we can see in the logs. Making things a little more complex, the ssl_bump directive seems to have a global effect and also imply "http_access allow" making it difficult isolate access. To get around this I thought to simply skip ssl decrypt for the traffic with verified headers:

acl Repo_Skip_HDR req_header Repo_Svr_VerifiedHdr True
ssl_bump none Repo_Skip_HDR

Unfortunately even this isn't working, again the config checks out and runs happily, we see the header in the logs, but squid still tries to inspect the traffic.

Any thoughts on why ssl_bump would ignore the header ACL or other suggestions to isolate traffic when being required to skip ssl decrypt would be greatly appreciated.

Thanks in advance.

Regards,
Matt Toler










-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-users/attachments/20221207/544a5a51/attachment.htm>

From rousskov at measurement-factory.com  Wed Dec  7 21:45:29 2022
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Wed, 7 Dec 2022 16:45:29 -0500
Subject: [squid-users] req_header acl with ssl_bump
In-Reply-To: <DS7PR06MB6789F1C1721EA84314FF5F89E91A9@DS7PR06MB6789.namprd06.prod.outlook.com>
References: <DS7PR06MB6789F1C1721EA84314FF5F89E91A9@DS7PR06MB6789.namprd06.prod.outlook.com>
Message-ID: <ccaf03e7-0799-eafe-72b8-5ab1039e8864@measurement-factory.com>

On 12/7/22 16:26, Toler, Matt wrote:
> Hello,
> 
> We are attempting to leverage headers to isolate access to external 
> sites with squid 4.14. The Loadbalencer is injecting headers and squid 
> is simply verifying them:
> 
> acl ACL_HDR_1 req_header Repo_Svr_VerifiedHdr True 
> acl REPO_DST_ALLOW dstdomain "/etc/squid/acls.d/hosts.acl" 
> http_access allow?PROXY-SRC REPO_DST_ALLOW ACL_HDR_1
> 
> We are currently decrypting this traffic and it?s working well.
> 
> Now we have a requirement to skip ssl decrypt for only certain 
> destinations. My thought was to simply create a separate ACL where 
> skipping ssl decrypt is required and add the header ACL to the end of 
> the ssl_bump directive like so:
> 
> acl Repo_Skip_HDR req_header Repo_Svr_VerifiedHdr True 
> acl Repo_SkipSslDecrypt dstdomain "/etc/squid/acls.d/hosts.acl" 
> ssl_bump none Repo_SkipSslDecrypt Repo_Skip_HDR
> 
> This parsed successfully but did not have the desired effect. The squid 
> is still inspecting the traffic even with the header present as we can 
> see in the logs. Making things a little more complex, the ssl_bump 
> directive seems to have a global effect

I am not sure what you mean by "global effect". The ssl_bump directive 
affects transactions that are received on ports marked with an 
"ssl-bump" option and only them.


> and also imply ?http_access allow? 

There is no such implication. In fact, conflating ssl_bump rules and 
HTTP-level access controls is a common configuration mistake. Correct 
configurations treat those two areas separately.

The only case where one could see a legitimate intersection of SslBump 
and access-controls is an "ssl_bump terminate" rule that triggers TCP 
connection(s) closure. One can view that termination as a form of access 
control (at TCP rather than HTTP level) -- http_access rules are not 
evaluated after Squid closes the connections, of course. In all other 
cases, http_access rules are evaluated after every ssl_bump rules scan. 
For more information, see 
https://wiki.squid-cache.org/Features/SslPeekAndSplice


> making it difficult isolate access. To get around this I thought 
> to simply skip ssl decrypt for the traffic with verified headers:
> 
> acl Repo_Skip_HDR req_header Repo_Svr_VerifiedHdr True
> 
> ssl_bump none Repo_Skip_HDR
> 
> Unfortunately even this isn?t working, again the config checks out and 
> runs happily, we see the header in the logs, but squid still tries to 
> inspect the traffic.
> 
> Any thoughts on why ssl_bump would ignore the header ACL or other 
> suggestions to isolate traffic when being required to skip ssl decrypt 
> would be greatly appreciated.

SslBump acts on the first applicable matching rule. It sounds like your 
(unsupported legacy) "none" rule is located below some other ssl_bump 
rules that are applicable to the current SslBump step and that match at 
least once. For more information, see 
https://wiki.squid-cache.org/Features/SslPeekAndSplice
  You can (indirectly and partially) test that theory by making the 
ssl_bump "none" rule the very first ssl_bump rule in the entire Squid 
configuration. Assuming all CONNECT requests have the right headers, 
that ssl_bump "none" rule should match as appropriate, and Squid should 
establish a blind TCP tunnel instead of doing TLS.

In modern configurations, the correct action is "splice", not "none". 
The above SslPeekAndSplice page documents the difference.


HTH,

Alex.



From bfriconneau at stemarie-aizenay.fr  Thu Dec  8 08:54:27 2022
From: bfriconneau at stemarie-aizenay.fr (Bertrand Friconneau)
Date: Thu, 8 Dec 2022 09:54:27 +0100
Subject: [squid-users] Update from Squid 4 to Squid 5 :
In-Reply-To: <56ec5a8c-a171-26bd-6c55-36e75561d971@treenet.co.nz>
References: <ff318d21-5e79-aabb-2dc8-7024b94c64b2@stemarie-aizenay.fr>
 <56ec5a8c-a171-26bd-6c55-36e75561d971@treenet.co.nz>
Message-ID: <2bc6f3a0-9c10-8292-3cdc-26a0f6aee9e0@stemarie-aizenay.fr>

Hi every one,

I can almost continue this tread

First, thanks for the help.

Amos, I made the changes you suggested, but same result.

I tested the folowings commands :
command : wbinfo -u

Can retrieve the users


command : klist
result : klist: No credentials cache found (filename: /tmp/krb5cc_0)

command : kinit administrateur at STEMARIE-AIZENAY.LOCAL
result : kinit: Ressource unavailable while getting initial credentials

So I tried to test the DNS :
nslookup 8.8.8.8
nslookup www.google.fr

And it fails

My Squid server can ping my local DNS, but that's all. No DNS resolution

In Sylog :
dans syslog :
Dec? 7 15:53:01 squid winbindd[797]:?? get_kdc_ip_string: get_kdc_list 
fail NT_STATUS_NO_LOGON_SERVERS
Dec? 7 15:53:01 squid winbindd[797]: [2022/12/07 15:53:01.693756, 0] 
../../source3/libads/sasl.c:589(ads_sasl_spnego_bind)
Dec? 7 15:53:01 squid winbindd[797]:?? ads_sasl_spnego_bind: kinit 
succeeded but SPNEGO bind with Kerberos failed for 
ldap/srv-ad2.stemarie-aizenay.local - user[SQUID$], 
realm[STEMARIE-AIZENAY.LOCAL]: No logon servers are currently available 
to service the logon request.

The DNS server is configure in /etc/network/interfaces

The files /etc/hosts and /etc/hostname seem to be well configured

Iptable is not configured, everything is accepted

Any id?e ?

Regards

Bertrand Friconneau




Le 10/11/2022 ? 14:10, Amos Jeffries a ?crit?:
> On 10/11/2022 4:50 am, Bertrand Friconneau wrote:
>> Hi Everyone,
>>
>> I've got Squid 4.10 on Ubuntu 20.10 LTS
>>
>> I try to upgrade my server to Ubuntu 22.04 LTS
>>
>> But the users couldn't get internet no more.
>>
>> Here is the log in /var/log/squid/access.log :
>> 1668004454.050????? 0 172.22.200.1 TCP_DENIED/407 3951 CONNECT 
>> drive.google.com:443 - HIER_NONE/- text/html
>> 1668004454.052????? 0 172.22.200.1 TCP_DENIED/407 3951 CONNECT 
>> drive.google.com:443 - HIER_NONE/- text/html
>> 1668004454.057????? 0 172.22.200.1 TCP_DENIED/407 3951 CONNECT 
>> drive.google.com:443 - HIER_NONE/- text/html
>> 1668004454.063????? 1 172.22.200.1 TCP_DENIED/407 4454 CONNECT 
>> drive.google.com:443 - HIER_NONE/- text/html
>> 1668004454.076???? 10 172.22.200.1 NONE_NONE/500 0 CONNECT 
>> drive.google.com:443 infoe HIER_NONE/- -
>>
>> And on the client :
>> ERR_TUNNEL_CONNECTION_FAILED
>>
>> According to this page : 
>> https://wiki.squid-cache.org/ConfigExamples/Authenticate/Ntlm
>> The cause is due to challenge-response process of NTLM
>>
>> How can I solve it ?
>>
>> Regards
>>
>> Bertrand Friconneau
>>
>>
>> ------------------------------------------------------------------------------------------------------------------------------------------------------- 
>>
>> Here is my config file of squid :
>>
>> dns_v4_first on
>> visible_hostname squid
>
> Please use an actual FQDN hostname. This is the proxies "visible" 
> hostname - eg sent as the domain name for URLs in error pages etc.
>
>>
>> error_directory /usr/share/squid/errors/French
>
> These days it would be better to use:
>
> ? error_default_language fr
>
> or at least
> ? error_directory /usr/share/squid-langpack/fr
>
>>
>> auth_param ntlm program /usr/bin/ntlm_auth 
>> --helper-protocol=squid-2.5-ntlmssp
>> auth_param ntlm children 250
>> auth_param ntlm keep_alive off
>>
> ...
>
>> http_access deny !Safe_ports
>>
>> http_access deny CONNECT !SSL_ports
>>
>> http_access allow localhost manager
>
> or maybe limit manager access to administrationzone
>
>> http_access deny manager
>>
>
> custom access policy rules should be down here:
>
>> http_access allow sitebypass
>> http_access deny tor
>> http_access deny url_exe
>
>> http_access allow administrationzone
>> #http_access allow pedagozone
>> #http_access allow xibozone
>
> All these below are of the same ACL type and all "allow" actions.
> Therefore you can combine them into one ACL definition.
>
>> http_access allow informatiquezone
>> http_access allow secuzone
>> http_access allow srvzone
>
>> http_access allow ntlm
>
> What about invalid logins, missing logins etc?
> We highly recommend that the line triggering auth is a "deny" policy 
> to reject all those.
>
> ?? http_access deny !ntlm
>
> ... then you allow what can be done by logged in accounts.
>
> ? http_access allow localnet
> or
> ?http_access allow all
>
>
> You may see a behaviour difference with this change to how Squid 
> handles the login.
> After doing it, of the problem continues try to get some debug 
> information from the auth helper to see what it is getting from the 
> client and why that is not being accepted.
>
>
> PS. Since you have Kerberos available, please consider moving away 
> from NTLM to using Negotiate/Kerberos auth. It has both better 
> security and far better performance for the proxy.
>
> Amos
>
> _______________________________________________
> squid-users mailing list
> squid-users at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-users



From tomislav.lucan at gmail.com  Thu Dec  8 14:09:17 2022
From: tomislav.lucan at gmail.com (=?UTF-8?Q?Tomislav_Lu=C4=8Dan?=)
Date: Thu, 8 Dec 2022 14:09:17 +0000
Subject: [squid-users] Kerberos + LDAP issue
Message-ID: <CADkNr1qaJeEuD-v+bUv6e4Sj9A6UBJobeGfyK3gpznqKY1t14Q@mail.gmail.com>

I have one question (issue) and I hope that you can help me.

Kerberos authentication works perfectly fine when the PC is connected to
Domain and the user is authenticated.

auth_param negotiate program
/usr/local/libexec/squid/negotiate_kerberos_auth -r -d -k
/usr/local/etc/squid/squidproxy.keytab

What I try to achieve is to authenticate the user with his AD credentials
when the PC is not on DOMAIN.

auth_param basic program /usr/lib/squid/squid_ldap_auth -v 3 -b
"dc=yourcompany,dc=com" -D uid=some-user,ou=People,dc=yourcompany,dc=com
 -w password -f uid=%s ldap.yourcompany.com

I can do that with LDAP, but only if I disable (in config) Kerberos on
Squid.
Somehow Kerberos and LDAP config don't work together.

Error that I getting in the log is :

LDAP ERROR: Negotiate Authentication validating user. Result: {result=BH,
notes={message: received type 1 NTLM token; }}

On the other side, Kerberos is working fine.


I would really like to have your input on it

Thanks
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-users/attachments/20221208/6b604636/attachment.htm>

From squid.org at bloms.de  Mon Dec 12 11:34:29 2022
From: squid.org at bloms.de (Dieter Bloms)
Date: Mon, 12 Dec 2022 12:34:29 +0100
Subject: [squid-users] TLS client hello tls1.0 even with options
 "tls_outgoing_options min-version=1.2 options=NO_TLSv1:NO_TLSv1_1"
Message-ID: <20221212113429.c2ujb6aqq4ztx6oz@bloms.de>

Hello,

I've enabled sslbump and configured the following outgoing tls options:

tls_outgoing_options min-version=1.2 options=NO_TLSv1:NO_TLSv1_1 cipher=TLSv1.2:+aRSA:+SHA384:+SHA256:+DH:-kRSA:!PSK:!eNULL:!aNULL:!DSS:!AESCCM:!CAMELLIA:!ARIA

so for me it looks like squid must not use TLS1.1 or TLS1.0.
But for some web sites like
https://www.europarl.europa.eu/doceo/document/LIBE-OJ-2022-12-12-1_EN.html
the first request is made with an tls1.0 client hello packet. 
When I reload the page the proxyserver sends a tls1.2 client hello and the website is shown as expected.

So what option can be used to force a minimum tls1.2 client hello package every time?

Here is a link to the pcap file with both variants: https://bloms.de/download/www.europarl.europa.eu.pcap


-- 
Regards

  Dieter

--
I do not get viruses because I do not use MS software.
If you use Outlook then please do not put my email address in your
address-book so that WHEN you get a virus it won't use my address in the
>From field.


From rousskov at measurement-factory.com  Mon Dec 12 14:24:13 2022
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Mon, 12 Dec 2022 09:24:13 -0500
Subject: [squid-users] TLS client hello tls1.0 even with options
 "tls_outgoing_options min-version=1.2 options=NO_TLSv1:NO_TLSv1_1"
In-Reply-To: <20221212113429.c2ujb6aqq4ztx6oz@bloms.de>
References: <20221212113429.c2ujb6aqq4ztx6oz@bloms.de>
Message-ID: <0e529788-581e-b503-f575-a850751bc0fe@measurement-factory.com>

On 12/12/22 06:34, Dieter Bloms wrote:

> I've enabled sslbump and configured the following outgoing tls options:
> 
> tls_outgoing_options min-version=1.2 options=NO_TLSv1:NO_TLSv1_1 cipher=TLSv1.2:+aRSA:+SHA384:+SHA256:+DH:-kRSA:!PSK:!eNULL:!aNULL:!DSS:!AESCCM:!CAMELLIA:!ARIA


This probably does not apply to your specific use case, but I will state 
it here in case others readers find this exchange: If SslBump 
configuration peeks at the server, then Squid cannot honor 
tls_outgoing_options. For example, tls_outgoing_options will be ignored 
in the following configuration:

     ssl_bump peek all
     ssl_bump splice all

 > min-version=1.2 options=NO_TLSv1:NO_TLSv1_1

FYI: The min-version=1.2 directive will automatically append 
NO_TLSv1:NO_TLSv1_1 options (or their GnuTLS equivalents).


> so for me it looks like squid must not use TLS1.1 or TLS1.0.
> But for some web sites like
> https://www.europarl.europa.eu/doceo/document/LIBE-OJ-2022-12-12-1_EN.html
> the first request is made with an tls1.0 client hello packet.

You are probably being misled by Wireshark (or equivalent). Packet in 
frame 4 and packet in frame 9 in your trace use the same set of 
versions. The two packets only differ in Random, Session ID, and Key 
Exchange fields (as expected). You can confirm that by expanding TLS 
sub-trees in each packet, copying each packet dissection, and comparing 
the two saved text files.

TLS has many layers. Layers have their own versions (and their own 
version-specific ways to specify versions). The two packets in question 
use v1.0 TLS record to transmit ClientHello message (legacy version 
v1.2) to announce support for TLS v1.2 and TLS v1.3:

> TLS... Record Layer: Handshake Protocol: Client Hello
>     Content Type: Handshake (22)
>     Version: TLS 1.0 (0x0301)
>     Handshake Protocol: Client Hello
>         Version: TLS 1.2 (0x0303)
...
>         Extension: supported_versions (len=5)
>             Type: supported_versions (43)
>             Length: 5
>             Supported Versions length: 4
>             Supported Version: TLS 1.3 (0x0304)
>             Supported Version: TLS 1.2 (0x0303)


Why does Whireshark (and similar smart tools) say "TLSv1.3 Record Layer" 
only for packet 9 even though all the relevant ClientHello fields are 
identical in both packets? That happens because Wireshark is smart 
enough to look further into the TLS handshake and discover that, when it 
comes to the connection containing packet 9, the two agents have 
negotiated TLS v1.3 (starting with frame 10):

> TLSv1.3 Record Layer: Handshake Protocol: Hello Retry Request
>         Extension: supported_versions (len=2)
>             Type: supported_versions (43)
>             Length: 2
>             Supported Version: TLS 1.3 (0x0304)


You can easily confirm that Wireshark is just being (too) helpful by 
exporting frames 1-9 from the packet capture (as a pcap packet capture) 
and looking at the exported packets with Wireshark. You will then see 
"TLSv1 Record Layer" instead of "TLSv1.3 Record Layer" for packet 9, 
even though you have modified no packets, only truncated the exchange.


I do not know why the server resets the first TCP connection.


HTH,

Alex.



> When I reload the page the proxyserver sends a tls1.2 client hello and the website is shown as expected.
> 
> So what option can be used to force a minimum tls1.2 client hello package every time?
> 
> Here is a link to the pcap file with both variants: https://bloms.de/download/www.europarl.europa.eu.pcap
> 
> 



From squid3 at treenet.co.nz  Mon Dec 12 15:34:32 2022
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Tue, 13 Dec 2022 04:34:32 +1300
Subject: [squid-users] TLS client hello tls1.0 even with options
 "tls_outgoing_options min-version=1.2 options=NO_TLSv1:NO_TLSv1_1"
In-Reply-To: <20221212113429.c2ujb6aqq4ztx6oz@bloms.de>
References: <20221212113429.c2ujb6aqq4ztx6oz@bloms.de>
Message-ID: <33fc2448-49f9-6559-bd48-e850d64edbe0@treenet.co.nz>

On 13/12/2022 12:34 am, Dieter Bloms wrote:
> Hello,
>
> I've enabled sslbump and configured the following outgoing tls options:
>
> tls_outgoing_options min-version=1.2 options=NO_TLSv1:NO_TLSv1_1 cipher=TLSv1.2:+aRSA:+SHA384:+SHA256:+DH:-kRSA:!PSK:!eNULL:!aNULL:!DSS:!AESCCM:!CAMELLIA:!ARIA
>
> so for me it looks like squid must not use TLS1.1 or TLS1.0.

Correct.

> But for some web sites like
> https://www.europarl.europa.eu/doceo/document/LIBE-OJ-2022-12-12-1_EN.html
> the first request is made with an tls1.0 client hello packet.

In the pcap provided I see two TLS/1.2 attempts which are being 
terminated by the server. Immediately followed by TLS/1.3 which is 
succeeding and doing stuff. Other connections just go straight to 
TLS/1.3 and do stuff.

FYI, if you are looking at the trace with wireshark the TLS/1.2 packets 
are labeled as protocol "TLSv1" for some reason I don't know. There is a 
framing layer for TLS which carries a version number "1.0", but that is 
shared by all TLS/1.* versions up to and including 1.3.


> When I reload the page the proxyserver sends a tls1.2 client hello and the website is shown as expected.

I'm not sure why that reload is needed. As mentioned above the visible 
TLS terminate is immediately followed by successful TLS/1.3 use.

> So what option can be used to force a minimum tls1.2 client hello package every time?

The tls-min-version=1.2 which you already used, and appears to be working.


Cheers
Amos



From 0xff1f at gmail.com  Mon Dec 12 18:43:05 2022
From: 0xff1f at gmail.com (Ahmad Alzaeem)
Date: Mon, 12 Dec 2022 18:43:05 +0000
Subject: [squid-users] squid listen on UDP for * or 0.0.0.0
Message-ID: <DBBPR09MB452341497116C58F85A752C7F7E29@DBBPR09MB4523.eurprd09.prod.outlook.com>

Hello Folks

,
Wondering why I see squid listening on UDP sockets. And how can I disable that behavior?


Here is a sample capture :

ss -lup

NCONN       0            0                                                      *:62408                                  *:*           users:(("squid",pid=304626,fd=12))
UNCONN       0            0                                                      *:62421                                  *:*           users:(("squid",pid=89500,fd=7))
UNCONN       0            0                                                      *:62439                                  *:*           users:(("squid",pid=506816,fd=12))
UNCONN       0            0                                                      *:62440                                  *:*           users:(("squid",pid=889812,fd=12))
UNCONN       0            0                                                      *:62441                                  *:*           users:(("squid",pid=561342,fd=13))
UNCONN       0            0                                                      *:62448                                  *:*           users:(("squid",pid=90497,fd=7))
UNCONN       0            0                                                      *:62467                                  *:*           users:(("squid",pid=89345,fd=7))
UNCONN       0            0                                                      *:62481                                  *:*           users:(("squid",pid=48730,fd=13))
UNCONN       0            0                                                      *:62491                                  *:*           users:(("squid",pid=88914,fd=7))
UNCONN       0            0                                                      *:62504                                  *:*           users:(("squid",pid=74449,fd=7))
UNCONN       0            0                                                      *:62505                                  *:*           users:(("squid",pid=89517,fd=7))
UNCONN       0            0                                                      *:62507                                  *:*           users:(("squid",pid=89077,fd=7))
UNCONN       0            0                                                      *:62534                                  *:*           users:(("squid",pid=70608,fd=7))
UNCONN       0            0                                                      *:62543                                  *:*           users:(("squid",pid=63323,fd=7))
UNCONN       0            0                                                      *:62582                                  *:*           users:(("squid",pid=89292,fd=7))
UNCONN       0            0                                                      *:62606                                  *:*           users:(("squid",pid=89037,fd=7))
UNCONN       0            0                                                      *:62635                                  *:*           users:(("squid",pid=89569,fd=7))
UNCONN       0            0                                                      *:62636                                  *:*           users:(("squid",pid=305076,fd=13))
UNCONN       0            0                                                      *:62683                                  *:*           users:(("squid",pid=304108,fd=13))

Sometimes the DNS resolutions fail on the server due to port conflict with squid.
I think it wont be a problem if it listen to same squid IP , but listening to * ( all sockets) will make an issues
Any way to figure out the issue above ?

BR

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-users/attachments/20221212/782fe27e/attachment.htm>

From ankor2023 at gmail.com  Tue Dec 13 11:56:47 2022
From: ankor2023 at gmail.com (Andrey K)
Date: Tue, 13 Dec 2022 14:56:47 +0300
Subject: [squid-users] Show running config
Message-ID: <CADJd0Y1qvqQzj9dF5fNLMwDbcUeY8fQHaPzy8TLQrkZ0KnT4PQ@mail.gmail.com>

Hello,

I wonder if there is a way to show SQUID running config.
The configuration in the squid.conf may be outdated because it can already
have been changed without SQUID reconfiguration at the time of viewing.

I saw this feature in squidclient -p 3128 mgr:menu, but this item marked as
hidden:
config                 Current Squid Configuration             hidden

How can I make it public?

Kind regards,
    Ankor.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-users/attachments/20221213/ae9bd5f2/attachment.htm>

From gkinkie at gmail.com  Tue Dec 13 12:11:47 2022
From: gkinkie at gmail.com (Francesco Chemolli)
Date: Tue, 13 Dec 2022 13:11:47 +0100
Subject: [squid-users] Show running config
In-Reply-To: <CADJd0Y1qvqQzj9dF5fNLMwDbcUeY8fQHaPzy8TLQrkZ0KnT4PQ@mail.gmail.com>
References: <CADJd0Y1qvqQzj9dF5fNLMwDbcUeY8fQHaPzy8TLQrkZ0KnT4PQ@mail.gmail.com>
Message-ID: <CA+Y8hcNym-6DkJCGZxboN0WqDM3f0rP8XQ4iaV64YNoK1yVBEQ@mail.gmail.com>

On Tue, Dec 13, 2022 at 12:57 PM Andrey K <ankor2023 at gmail.com> wrote:

> Hello,
>
> I wonder if there is a way to show SQUID running config.
> The configuration in the squid.conf may be outdated because it can already
> have been changed without SQUID reconfiguration at the time of viewing.
>
> I saw this feature in squidclient -p 3128 mgr:menu, but this item marked
> as hidden:
> config                 Current Squid Configuration             hidden
>

Did you use the configured cachemgr_passwd
<http://www.squid-cache.org/Doc/config/cachemgr_passwd/> when
authenticating against the cache manager?
If not, that's the way to do it.


> How can I make it public?
>
You can't change access level without reconfiguring

-- 
    Francesco
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-users/attachments/20221213/5060fc4c/attachment.htm>

From squid3 at treenet.co.nz  Tue Dec 13 13:09:29 2022
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Wed, 14 Dec 2022 02:09:29 +1300
Subject: [squid-users] squid listen on UDP for * or 0.0.0.0
In-Reply-To: <DBBPR09MB452341497116C58F85A752C7F7E29@DBBPR09MB4523.eurprd09.prod.outlook.com>
References: <DBBPR09MB452341497116C58F85A752C7F7E29@DBBPR09MB4523.eurprd09.prod.outlook.com>
Message-ID: <aae17224-b5cb-6c59-ba51-672a5dafd3c5@treenet.co.nz>

On 13/12/2022 7:43 am, Ahmad Alzaeem wrote:
>
> Hello Folks
>
> ,
>
> Wondering why I see squid listening on UDP sockets. And how can I 
> disable that behavior?
>
>

Default config is to let the OS select best src-IP for all outgoing traffic.
In order to receive UDP responses Squid needs to listen on all IPs the 
OS might have chosen.

Use <http://www.squid-cache.org/Doc/config/udp_incoming_address/> to set 
a specific UDP receiving address.
This will also change the default udp_outgoing_address so that the 
responses come back to your chosen listening address.

HTH
Amos


From ankor2023 at gmail.com  Tue Dec 13 13:09:32 2022
From: ankor2023 at gmail.com (Andrey K)
Date: Tue, 13 Dec 2022 16:09:32 +0300
Subject: [squid-users] Show running config
In-Reply-To: <CA+Y8hcNym-6DkJCGZxboN0WqDM3f0rP8XQ4iaV64YNoK1yVBEQ@mail.gmail.com>
References: <CADJd0Y1qvqQzj9dF5fNLMwDbcUeY8fQHaPzy8TLQrkZ0KnT4PQ@mail.gmail.com>
 <CA+Y8hcNym-6DkJCGZxboN0WqDM3f0rP8XQ4iaV64YNoK1yVBEQ@mail.gmail.com>
Message-ID: <CADJd0Y0GrkT0xL+UxyJwG=Q9myeQZcW4hNi5T2gGjafgUF5h-g@mail.gmail.com>

Yes, it works.

Thank you very much!

??, 13 ???. 2022 ?. ? 15:11, Francesco Chemolli <gkinkie at gmail.com>:

>
>
> On Tue, Dec 13, 2022 at 12:57 PM Andrey K <ankor2023 at gmail.com> wrote:
>
>> Hello,
>>
>> I wonder if there is a way to show SQUID running config.
>> The configuration in the squid.conf may be outdated because it can
>> already have been changed without SQUID reconfiguration at the time of
>> viewing.
>>
>> I saw this feature in squidclient -p 3128 mgr:menu, but this item marked
>> as hidden:
>> config                 Current Squid Configuration             hidden
>>
>
> Did you use the configured cachemgr_passwd
> <http://www.squid-cache.org/Doc/config/cachemgr_passwd/> when
> authenticating against the cache manager?
> If not, that's the way to do it.
>
>
>> How can I make it public?
>>
> You can't change access level without reconfiguring
>
> --
>     Francesco
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-users/attachments/20221213/224de29f/attachment.htm>

From ngtech1ltd at gmail.com  Tue Dec 13 22:46:16 2022
From: ngtech1ltd at gmail.com (ngtech1ltd at gmail.com)
Date: Wed, 14 Dec 2022 00:46:16 +0200
Subject: [squid-users] Update from Squid 4 to Squid 5 :
In-Reply-To: <2bc6f3a0-9c10-8292-3cdc-26a0f6aee9e0@stemarie-aizenay.fr>
References: <ff318d21-5e79-aabb-2dc8-7024b94c64b2@stemarie-aizenay.fr>
 <56ec5a8c-a171-26bd-6c55-36e75561d971@treenet.co.nz>
 <2bc6f3a0-9c10-8292-3cdc-26a0f6aee9e0@stemarie-aizenay.fr>
Message-ID: <005801d90f44$b62b3ce0$2281b6a0$@gmail.com>

Hey,

What is the content of:
/etc/resolv.conf
?

It could be something related to default systemd dns services.

Eliezer
----
Eliezer Croitoru
NgTech, Tech Support
Mobile: +972-5-28704261
Email: ngtech1ltd at gmail.com
Web: https://ngtech.co.il/
My-Tube: https://tube.ngtech.co.il/

-----Original Message-----
From: squid-users <squid-users-bounces at lists.squid-cache.org> On Behalf Of Bertrand Friconneau
Sent: Thursday, 8 December 2022 10:54
To: squid-users at lists.squid-cache.org
Subject: Re: [squid-users] Update from Squid 4 to Squid 5 :

Hi every one,

I can almost continue this tread

First, thanks for the help.

Amos, I made the changes you suggested, but same result.

I tested the folowings commands :
command : wbinfo -u

Can retrieve the users


command : klist
result : klist: No credentials cache found (filename: /tmp/krb5cc_0)

command : kinit administrateur at STEMARIE-AIZENAY.LOCAL
result : kinit: Ressource unavailable while getting initial credentials

So I tried to test the DNS :
nslookup 8.8.8.8
nslookup www.google.fr

And it fails

My Squid server can ping my local DNS, but that's all. No DNS resolution

In Sylog :
dans syslog :
Dec  7 15:53:01 squid winbindd[797]:   get_kdc_ip_string: get_kdc_list 
fail NT_STATUS_NO_LOGON_SERVERS
Dec  7 15:53:01 squid winbindd[797]: [2022/12/07 15:53:01.693756, 0] 
../../source3/libads/sasl.c:589(ads_sasl_spnego_bind)
Dec  7 15:53:01 squid winbindd[797]:   ads_sasl_spnego_bind: kinit 
succeeded but SPNEGO bind with Kerberos failed for 
ldap/srv-ad2.stemarie-aizenay.local - user[SQUID$], 
realm[STEMARIE-AIZENAY.LOCAL]: No logon servers are currently available 
to service the logon request.

The DNS server is configure in /etc/network/interfaces

The files /etc/hosts and /etc/hostname seem to be well configured

Iptable is not configured, everything is accepted

Any id?e ?

Regards

Bertrand Friconneau




Le 10/11/2022 ? 14:10, Amos Jeffries a ?crit :
> On 10/11/2022 4:50 am, Bertrand Friconneau wrote:
>> Hi Everyone,
>>
>> I've got Squid 4.10 on Ubuntu 20.10 LTS
>>
>> I try to upgrade my server to Ubuntu 22.04 LTS
>>
>> But the users couldn't get internet no more.
>>
>> Here is the log in /var/log/squid/access.log :
>> 1668004454.050      0 172.22.200.1 TCP_DENIED/407 3951 CONNECT 
>> drive.google.com:443 - HIER_NONE/- text/html
>> 1668004454.052      0 172.22.200.1 TCP_DENIED/407 3951 CONNECT 
>> drive.google.com:443 - HIER_NONE/- text/html
>> 1668004454.057      0 172.22.200.1 TCP_DENIED/407 3951 CONNECT 
>> drive.google.com:443 - HIER_NONE/- text/html
>> 1668004454.063      1 172.22.200.1 TCP_DENIED/407 4454 CONNECT 
>> drive.google.com:443 - HIER_NONE/- text/html
>> 1668004454.076     10 172.22.200.1 NONE_NONE/500 0 CONNECT 
>> drive.google.com:443 infoe HIER_NONE/- -
>>
>> And on the client :
>> ERR_TUNNEL_CONNECTION_FAILED
>>
>> According to this page : 
>> https://wiki.squid-cache.org/ConfigExamples/Authenticate/Ntlm
>> The cause is due to challenge-response process of NTLM
>>
>> How can I solve it ?
>>
>> Regards
>>
>> Bertrand Friconneau
>>
>>
>> ------------------------------------------------------------------------------------------------------------------------------------------------------- 
>>
>> Here is my config file of squid :
>>
>> dns_v4_first on
>> visible_hostname squid
>
> Please use an actual FQDN hostname. This is the proxies "visible" 
> hostname - eg sent as the domain name for URLs in error pages etc.
>
>>
>> error_directory /usr/share/squid/errors/French
>
> These days it would be better to use:
>
>   error_default_language fr
>
> or at least
>   error_directory /usr/share/squid-langpack/fr
>
>>
>> auth_param ntlm program /usr/bin/ntlm_auth 
>> --helper-protocol=squid-2.5-ntlmssp
>> auth_param ntlm children 250
>> auth_param ntlm keep_alive off
>>
> ...
>
>> http_access deny !Safe_ports
>>
>> http_access deny CONNECT !SSL_ports
>>
>> http_access allow localhost manager
>
> or maybe limit manager access to administrationzone
>
>> http_access deny manager
>>
>
> custom access policy rules should be down here:
>
>> http_access allow sitebypass
>> http_access deny tor
>> http_access deny url_exe
>
>> http_access allow administrationzone
>> #http_access allow pedagozone
>> #http_access allow xibozone
>
> All these below are of the same ACL type and all "allow" actions.
> Therefore you can combine them into one ACL definition.
>
>> http_access allow informatiquezone
>> http_access allow secuzone
>> http_access allow srvzone
>
>> http_access allow ntlm
>
> What about invalid logins, missing logins etc?
> We highly recommend that the line triggering auth is a "deny" policy 
> to reject all those.
>
>    http_access deny !ntlm
>
> ... then you allow what can be done by logged in accounts.
>
>   http_access allow localnet
> or
>  http_access allow all
>
>
> You may see a behaviour difference with this change to how Squid 
> handles the login.
> After doing it, of the problem continues try to get some debug 
> information from the auth helper to see what it is getting from the 
> client and why that is not being accepted.
>
>
> PS. Since you have Kerberos available, please consider moving away 
> from NTLM to using Negotiate/Kerberos auth. It has both better 
> security and far better performance for the proxy.
>
> Amos
>
> _______________________________________________
> squid-users mailing list
> squid-users at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-users

_______________________________________________
squid-users mailing list
squid-users at lists.squid-cache.org
http://lists.squid-cache.org/listinfo/squid-users



From bruno.larini at riosoft.com.br  Wed Dec 14 12:26:49 2022
From: bruno.larini at riosoft.com.br (Bruno de Paula Larini)
Date: Wed, 14 Dec 2022 09:26:49 -0300
Subject: [squid-users] Update from Squid 4 to Squid 5 :
In-Reply-To: <005801d90f44$b62b3ce0$2281b6a0$@gmail.com>
References: <ff318d21-5e79-aabb-2dc8-7024b94c64b2@stemarie-aizenay.fr>
 <56ec5a8c-a171-26bd-6c55-36e75561d971@treenet.co.nz>
 <2bc6f3a0-9c10-8292-3cdc-26a0f6aee9e0@stemarie-aizenay.fr>
 <005801d90f44$b62b3ce0$2281b6a0$@gmail.com>
Message-ID: <35df2395-50c8-e1f3-346e-b34e4ca95273@riosoft.com.br>

Spam detection software, running on the system "master.squid-cache.org",
has identified this incoming email as possible spam.  The original
message has been attached to this so you can view it or label
similar future email.  If you have any questions, see
the administrator of that system for details.

Content preview:  Em 13/12/2022 19:46, ngtech1ltd at gmail.com escreveu: > Hey,
   > > What is the content of: > /etc/resolv.conf > ? > > It could be something
   related to default systemd dns services. > > Eliezer > ---- > El [...] 

Content analysis details:   (5.6 points, 5.0 required)

 pts rule name              description
---- ---------------------- --------------------------------------------------
 3.6 RCVD_IN_PBL            RBL: Received via a relay in Spamhaus PBL
                            [171.171.0.194 listed in zen.spamhaus.org]
 1.0 SPF_SOFTFAIL           SPF: sender does not match SPF record (softfail)
-0.1 DKIM_VALID_AU          Message has a valid DKIM or DK signature from
                            author's domain
-0.1 DKIM_VALID             Message has at least one valid DKIM or DK signature
 0.1 DKIM_SIGNED            Message has a DKIM or DK signature, not necessarily
                            valid
-0.1 DKIM_VALID_EF          Message has a valid DKIM or DK signature from
                            envelope-from domain
-0.0 T_SCC_BODY_TEXT_LINE   No description available.
 0.0 UNPARSEABLE_RELAY      Informational: message has unparseable relay
                            lines
 1.3 RDNS_NONE              Delivered to internal network by a host with no rDNS
-0.0 NICE_REPLY_A           Looks like a legit reply (A)
 0.0 NO_FM_NAME_IP_HOSTN    No From name + hostname using IP address


-------------- next part --------------
An embedded message was scrubbed...
From: Bruno de Paula Larini <bruno.larini at riosoft.com.br>
Subject: Re: [squid-users] Update from Squid 4 to Squid 5 :
Date: Wed, 14 Dec 2022 09:26:49 -0300
Size: 3489
URL: <http://lists.squid-cache.org/pipermail/squid-users/attachments/20221214/0ddf05e2/attachment.eml>

From bfriconneau at stemarie-aizenay.fr  Thu Dec 15 10:06:02 2022
From: bfriconneau at stemarie-aizenay.fr (Bertrand Friconneau)
Date: Thu, 15 Dec 2022 11:06:02 +0100
Subject: [squid-users] Update from Squid 4 to Squid 5 :
In-Reply-To: <35df2395-50c8-e1f3-346e-b34e4ca95273@riosoft.com.br>
References: <ff318d21-5e79-aabb-2dc8-7024b94c64b2@stemarie-aizenay.fr>
 <56ec5a8c-a171-26bd-6c55-36e75561d971@treenet.co.nz>
 <2bc6f3a0-9c10-8292-3cdc-26a0f6aee9e0@stemarie-aizenay.fr>
 <005801d90f44$b62b3ce0$2281b6a0$@gmail.com>
 <35df2395-50c8-e1f3-346e-b34e4ca95273@riosoft.com.br>
Message-ID: <3e15c732-f934-6843-fb98-53e69841a83a@stemarie-aizenay.fr>

Hi,

Here is the content of my actual /etc/resolv.conf (ubuntu 20.04) :
------------------------------------------------------------------------------------------------
# Dynamic resolv.conf(5) file for glibc resolver(3) generated by 
resolvconf(8)
#???? DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN
# 127.0.0.53 is the systemd-resolved stub resolver.
# run "systemd-resolve --status" to see details about the actual 
nameservers.

nameserver 172.20.0.1
nameserver 127.0.0.53
search stemarie-aizenay.local
------------------------------------------------------------------------------------------------

Bruno, thanks for the suggestions.

I will try after Christmas Hollidays.

Regards

Bertrand Friconneau





Le 14/12/2022 ? 13:26, Bruno de Paula Larini a ?crit?:
> Em 13/12/2022 19:46, ngtech1ltd at gmail.com escreveu:
>> Hey,
>>
>> What is the content of:
>> /etc/resolv.conf
>> ?
>>
>> It could be something related to default systemd dns services.
>>
>> Eliezer
>> ----
>> Eliezer Croitoru
>> NgTech, Tech Support
>> Mobile: +972-5-28704261
>> Email: ngtech1ltd at gmail.com
>> Web: https://ngtech.co.il/
>> My-Tube: https://tube.ngtech.co.il/
>>
> Yep, I had the same issues when I upgraded from 4 to 5, because I also 
> upgraded the distro version along with it, and systemd-resolved is 
> enabled by default in some, such as Fedora and Ubuntu. It stopped 
> resolving local domain names for some reason.
> Instead of struggling to make it work on the new model, I simply 
> disabled systemd-resolved and went back to old resolv.conf style.
>
> I'll quote the solution I followed here: 
> https://askubuntu.com/questions/907246/how-to-disable-systemd-resolved-in-ubuntu
>
> ====
>
> This method works on the Ubuntu releases 17.04 (Zesty), 17.10 
> (Artful), 18.04 (Bionic), 18.10 (Cosmic), 19.04 (Disco) and 20.04 
> (Focal):
>
> Disable and stop the systemd-resolved service:
>
> sudo systemctl disable systemd-resolved
> sudo systemctl stop systemd-resolved
>
> Then put the following line in the [main] section of your 
> /etc/NetworkManager/NetworkManager.conf:
>
> dns=default
>
> Delete the symlink /etc/resolv.conf
>
> rm /etc/resolv.conf
>
> Restart NetworkManager
>
> sudo systemctl restart NetworkManager
>
> Also be aware that disabling systemd-resolvd might break name 
> resolution in VPN for some users. See this bug on launchpad (Thanks, 
> Vincent).
>
> ===



From ngtech1ltd at gmail.com  Thu Dec 15 22:30:16 2022
From: ngtech1ltd at gmail.com (ngtech1ltd at gmail.com)
Date: Fri, 16 Dec 2022 00:30:16 +0200
Subject: [squid-users] Update from Squid 4 to Squid 5 :
In-Reply-To: <3e15c732-f934-6843-fb98-53e69841a83a@stemarie-aizenay.fr>
References: <ff318d21-5e79-aabb-2dc8-7024b94c64b2@stemarie-aizenay.fr>
 <56ec5a8c-a171-26bd-6c55-36e75561d971@treenet.co.nz>
 <2bc6f3a0-9c10-8292-3cdc-26a0f6aee9e0@stemarie-aizenay.fr>
 <005801d90f44$b62b3ce0$2281b6a0$@gmail.com>
 <35df2395-50c8-e1f3-346e-b34e4ca95273@riosoft.com.br>
 <3e15c732-f934-6843-fb98-53e69841a83a@stemarie-aizenay.fr>
Message-ID: <006401d910d4$ced161c0$6c742540$@gmail.com>

And just in case someone needs a demo how to remove netplan and install network manager on Ubuntu 22.04:
https://www.youtube.com/watch?v=dy9MxgGzTk4

(I had it prepared for a good friend last week)

Eliezer

----
Eliezer Croitoru
NgTech, Tech Support
Mobile: +972-5-28704261
Email: ngtech1ltd at gmail.com
Web: https://ngtech.co.il/
My-Tube: https://tube.ngtech.co.il/

-----Original Message-----
From: squid-users <squid-users-bounces at lists.squid-cache.org> On Behalf Of Bertrand Friconneau
Sent: Thursday, 15 December 2022 12:06
To: Bruno de Paula Larini <bruno.larini at riosoft.com.br>; squid-users at lists.squid-cache.org
Subject: Re: [squid-users] Update from Squid 4 to Squid 5 :

Hi,

Here is the content of my actual /etc/resolv.conf (ubuntu 20.04) :
------------------------------------------------------------------------------------------------
# Dynamic resolv.conf(5) file for glibc resolver(3) generated by 
resolvconf(8)
#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN
# 127.0.0.53 is the systemd-resolved stub resolver.
# run "systemd-resolve --status" to see details about the actual 
nameservers.

nameserver 172.20.0.1
nameserver 127.0.0.53
search stemarie-aizenay.local
------------------------------------------------------------------------------------------------

Bruno, thanks for the suggestions.

I will try after Christmas Hollidays.

Regards

Bertrand Friconneau





Le 14/12/2022 ? 13:26, Bruno de Paula Larini a ?crit :
> Em 13/12/2022 19:46, ngtech1ltd at gmail.com escreveu:
>> Hey,
>>
>> What is the content of:
>> /etc/resolv.conf
>> ?
>>
>> It could be something related to default systemd dns services.
>>
>> Eliezer
>> ----
>> Eliezer Croitoru
>> NgTech, Tech Support
>> Mobile: +972-5-28704261
>> Email: ngtech1ltd at gmail.com
>> Web: https://ngtech.co.il/
>> My-Tube: https://tube.ngtech.co.il/
>>
> Yep, I had the same issues when I upgraded from 4 to 5, because I also 
> upgraded the distro version along with it, and systemd-resolved is 
> enabled by default in some, such as Fedora and Ubuntu. It stopped 
> resolving local domain names for some reason.
> Instead of struggling to make it work on the new model, I simply 
> disabled systemd-resolved and went back to old resolv.conf style.
>
> I'll quote the solution I followed here: 
> https://askubuntu.com/questions/907246/how-to-disable-systemd-resolved-in-ubuntu
>
> ====
>
> This method works on the Ubuntu releases 17.04 (Zesty), 17.10 
> (Artful), 18.04 (Bionic), 18.10 (Cosmic), 19.04 (Disco) and 20.04 
> (Focal):
>
> Disable and stop the systemd-resolved service:
>
> sudo systemctl disable systemd-resolved
> sudo systemctl stop systemd-resolved
>
> Then put the following line in the [main] section of your 
> /etc/NetworkManager/NetworkManager.conf:
>
> dns=default
>
> Delete the symlink /etc/resolv.conf
>
> rm /etc/resolv.conf
>
> Restart NetworkManager
>
> sudo systemctl restart NetworkManager
>
> Also be aware that disabling systemd-resolvd might break name 
> resolution in VPN for some users. See this bug on launchpad (Thanks, 
> Vincent).
>
> ===

_______________________________________________
squid-users mailing list
squid-users at lists.squid-cache.org
http://lists.squid-cache.org/listinfo/squid-users



From lpereira at blockbit.com  Fri Dec 16 21:06:25 2022
From: lpereira at blockbit.com (Lucas Vicente Pereira)
Date: Fri, 16 Dec 2022 21:06:25 +0000
Subject: [squid-users] URL filtering technical
Message-ID: <RO2P215MB1866CF2C79F85134BFB0FCC0B7E69@RO2P215MB1866.LAMP215.PROD.OUTLOOK.COM>

Good Evening, Community

When thinking about URL filtering (http and or https), Which one is the best technique you recommend for integration with Squid 5.7?

Environment information:
 ~2500 users
3 x Internet links 1 Gbps each
Average HTTP requests per minute since start: 65956.1
Iptables REDIRECT for squid for transparent mode

1 - External_acl (e.g.:

external_acl_type webfilter ipv4 ttl=300 children-startup=40 children-max=256 %>ha{SSLproxy} %ACL %ssl::>sni %>ha{REFERER} %URI %SRC %SRCPORT %DST %PORT %>eui % <h{Content-Type} %>ha{Content-Type} %<h{Content-Length} %>ha{Content-Length} %MYPORT %MYADDR %un %METHOD %>ha{USER-AGENT} /sbin/ webfilter
acl acl_webfilter_access external webfilter
acl acl_webfilter_reply external webfilter

2 - I-CAP Servers

3 - url_rewrite_program (eg:
url_rewrite_program /sbin/webfilter - url_rewrite_children 16 m 4 startup=8 idle=2 concurrency= -l /var/squid/logs 4

Thanks a lot.

Sincerely,
Lucas Pereira

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-users/attachments/20221216/a0d6f010/attachment.htm>

From ngtech1ltd at gmail.com  Thu Dec 22 02:57:58 2022
From: ngtech1ltd at gmail.com (ngtech1ltd at gmail.com)
Date: Thu, 22 Dec 2022 04:57:58 +0200
Subject: [squid-users] URL filtering technical
In-Reply-To: <RO2P215MB1866CF2C79F85134BFB0FCC0B7E69@RO2P215MB1866.LAMP215.PROD.OUTLOOK.COM>
References: <RO2P215MB1866CF2C79F85134BFB0FCC0B7E69@RO2P215MB1866.LAMP215.PROD.OUTLOOK.COM>
Message-ID: <002b01d915b1$40a37870$c1ea6950$@gmail.com>

Hey,
 
Depends on your needs but from my experience the most simple solution would be external_acl helper.
I have used all 3 options and unless you really have foundation in ICAP and you do have a specific logic that can be done only via ICAP you should stick with external_acl.
 
If you do ask me about the ideal content filter solution?
It should be some deep inspection in the content level and not just the URL or domain etc.
However again, unless you do have the resources and the basic idea of how you do want to do this deep inspection and mangling of the payload you should stick with external_acl, don?t use url_rewrite unless you do have a specific tool that only supports that.
 
Eliezer 
 
----
Eliezer Croitoru
NgTech, Tech Support
Mobile: +972-5-28704261
Email:  <mailto:ngtech1ltd at gmail.com> ngtech1ltd at gmail.com
Web:  <https://ngtech.co.il/> https://ngtech.co.il/
My-Tube:  <https://tube.ngtech.co.il/> https://tube.ngtech.co.il/
 
From: squid-users <squid-users-bounces at lists.squid-cache.org> On Behalf Of Lucas Vicente Pereira
Sent: Friday, 16 December 2022 23:06
To: squid-users at lists.squid-cache.org
Subject: [squid-users] URL filtering technical
 
Good Evening, Community
 
When thinking about URL filtering (http and or https), Which one is the best technique you recommend for integration with Squid 5.7?
 
Environment information:
 ~2500 users
3 x Internet links 1 Gbps each
Average HTTP requests per minute since start: 65956.1
Iptables REDIRECT for squid for transparent mode
 
1 - External_acl (e.g.:
 
external_acl_type webfilter ipv4 ttl=300 children-startup=40 children-max=256 %>ha{SSLproxy} %ACL %ssl::>sni %>ha{REFERER} %URI %SRC %SRCPORT %DST %PORT %>eui % <h{Content-Type} %>ha{Content-Type} %<h{Content-Length} %>ha{Content-Length} %MYPORT %MYADDR %un %METHOD %>ha{USER-AGENT} /sbin/ webfilter
acl acl_webfilter_access external webfilter
acl acl_webfilter_reply external webfilter
 
2 - I-CAP Servers
 
3 - url_rewrite_program (eg:
url_rewrite_program /sbin/webfilter - url_rewrite_children 16 m 4 startup=8 idle=2 concurrency= -l /var/squid/logs 4
 
Thanks a lot.
 
Sincerely,
Lucas Pereira
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-users/attachments/20221222/7254b79e/attachment.htm>

From squid3 at treenet.co.nz  Thu Dec 22 09:36:34 2022
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Thu, 22 Dec 2022 22:36:34 +1300
Subject: [squid-users] URL filtering technical
In-Reply-To: <RO2P215MB1866CF2C79F85134BFB0FCC0B7E69@RO2P215MB1866.LAMP215.PROD.OUTLOOK.COM>
References: <RO2P215MB1866CF2C79F85134BFB0FCC0B7E69@RO2P215MB1866.LAMP215.PROD.OUTLOOK.COM>
Message-ID: <a2b44568-077f-f4e6-6a2e-a0d04a02817e@treenet.co.nz>

On 17/12/2022 10:06 am, Lucas Vicente Pereira wrote:
>
> Good Evening, Community
>
> When thinking about URL filtering (http and or https), Which one is 
> the best technique you recommend for integration with Squid 5.7?
>

We cannot answer that question. "best" is subjective and depends on your 
use-case.

Please define what exactly you mean by "URL filtering" - that term can 
mean a lot of things not actually about "URL", nor "filter"s.


> 1 - External_acl (e.g.:
>

 ?** Access control

Squid API intended for access control using calculations difficult or 
not possible with Squid built-in ACL logic.

Complexity of the rules and helper implementation determines the impact 
on traffic.
Limited to meta data about a transaction.


> 2 - I-CAP Servers
>

** This is for Content Adaptation

This passes the whole message, all its payload etc *everything* goes out 
from Squid to the ICAP server, then comes back in and gets re-parsed. 
Even with protocol optimizations this can cause up to double the 
processing lag for traffic going through the proxy.

 ?* eCAP which you omitted is similar but without nearly as much 
overhead costs as ICAP.

Ideally these should only be used when the adaptor logic is doing things 
with the message content, or complex header manipulations.


> 3 - url_rewrite_program (eg:
>
> url_rewrite_program /sbin/webfilter - url_rewrite_children 16 m 4 
> startup=8 idle=2 concurrency= -l /var/squid/logs 4
>

** This is for reverse-proxy / CDN internal URL modification

This API is for changing the URL (only) provided by the client **before* 
it gets fetched by Squid.
It should only be used by reverse-proxy traffic for /path?query of URLs. 
Protocol scheme, hostname changes should be done by cache_peer options.
Please do not use for access control - use external_acl_type instead.


HTH
Amos



From anon.amish at gmail.com  Mon Dec 26 05:46:55 2022
From: anon.amish at gmail.com (Amish)
Date: Mon, 26 Dec 2022 11:16:55 +0530
Subject: [squid-users] LEGACY_SERVER_CONNECT,
 ALLOW_UNSAFE_LEGACY_RENEGOTIATION does not work - SSL bump, OpenSSL 3
Message-ID: <f6e9c306-b15c-0e7d-5cf8-7ba036e86fe0@gmail.com>

Hello

I am using squid v5.7 with OpenSSL 3.0.7. (Arch Linux)

I have setup SSL bump which was working fine till OpenSSL 1.1.1 series.

With OpenSSL 3.0.7, SSL bump still works fine but except some 
(unpatched) sites.

For example:
https://www.jio.com/ (A leading mobile network provider in India)

For above site, squid throws error page with this message:

 ??? [No Error] (TLS code: 
SQUID_TLS_ERR_CONNECT+TLS_LIB_ERR=A000152+TLS_IO_ERR=1)
 ??? Failed to establish a secure connection: error:0A000152:SSL 
routines::unsafe legacy renegotiation disabled


Testing the same site with OpenSSL (via s_client) also fails unless 
legacy renegotiation is enabled:

$ openssl s_client -connect www.jio.com:443
40C7F204E37F0000:error:0A000152:SSL routines:final_renegotiate:unsafe 
legacy renegotiation disabled:ssl/statem/extensions.c:893:

$ openssl s_client? -legacy_renegotiation -connect www.jio.com:443
depth=2 C = US, ST = Arizona, L = Scottsdale, O = "GoDaddy.com, Inc.", 
CN = Go Daddy Root Certificate Authority - G2
...


Since website is one of the important website, I am trying to inform 
squid to allow legacy server connect (I also tried with unsafe 
renegotiation)

Source: https://www.openssl.org/docs/man3.0/man3/SSL_CTX_set_options.html

squid.conf:

# workaround for legacy / unpatched servers
tls_outgoing_options 
options=LEGACY_SERVER_CONNECT,ALLOW_UNSAFE_LEGACY_RENEGOTIATION

# other related TLS related settings
tls_outgoing_options cafile=/etc/ssl/cert.pem

tls_outgoing_options 
cipher=ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS

# systemctl reload squid

But I am still getting the same error when trying to connect to the 
above site via squid proxy. (Works fine without proxy)

What am I doing wrong?

Tips / help appreciated,

Thank you,

Amish.



From anon.amish at gmail.com  Mon Dec 26 06:26:45 2022
From: anon.amish at gmail.com (Amish)
Date: Mon, 26 Dec 2022 11:56:45 +0530
Subject: [squid-users] LEGACY_SERVER_CONNECT,
 ALLOW_UNSAFE_LEGACY_RENEGOTIATION does not work - SSL bump, OpenSSL 3
In-Reply-To: <f6e9c306-b15c-0e7d-5cf8-7ba036e86fe0@gmail.com>
References: <f6e9c306-b15c-0e7d-5cf8-7ba036e86fe0@gmail.com>
Message-ID: <2584423d-9def-9832-b41b-f4a525d8209a@gmail.com>

Hello,

After sending the previous (quoted below) email, I came across another 
recent thread [1] where it is mentioned by Alex that:

 > If SslBump configuration peeks at the server, then Squid cannot honor 
tls_outgoing_options.

So here is ssl_bump options too, in case that information is required:

ssl_bump peek ssl_step1 # step1 - so not peeking at the server yet
ssl_bump splice nosslbump_domains # step2 or 3, tunnel some domains we 
do not want to bump
ssl_bump stare all # step2 stare (not peek) at the server
ssl_bump bump all # step3, bump all connections that reached here

So I think in my case (previous email), squid should honor 
tls_outgoing_options.

Regards,

[1] 
http://lists.squid-cache.org/pipermail/squid-users/2022-December/025507.html

Amish

On 26/12/22 11:16, Amish wrote:
> Hello
>
> I am using squid v5.7 with OpenSSL 3.0.7. (Arch Linux)
>
> I have setup SSL bump which was working fine till OpenSSL 1.1.1 series.
>
> With OpenSSL 3.0.7, SSL bump still works fine but except some 
> (unpatched) sites.
>
> For example:
> https://www.jio.com/ (A leading mobile network provider in India)
>
> For above site, squid throws error page with this message:
>
> ??? [No Error] (TLS code: 
> SQUID_TLS_ERR_CONNECT+TLS_LIB_ERR=A000152+TLS_IO_ERR=1)
> ??? Failed to establish a secure connection: error:0A000152:SSL 
> routines::unsafe legacy renegotiation disabled
>
>
> Testing the same site with OpenSSL (via s_client) also fails unless 
> legacy renegotiation is enabled:
>
> $ openssl s_client -connect www.jio.com:443
> 40C7F204E37F0000:error:0A000152:SSL routines:final_renegotiate:unsafe 
> legacy renegotiation disabled:ssl/statem/extensions.c:893:
>
> $ openssl s_client? -legacy_renegotiation -connect www.jio.com:443
> depth=2 C = US, ST = Arizona, L = Scottsdale, O = "GoDaddy.com, Inc.", 
> CN = Go Daddy Root Certificate Authority - G2
> ...
>
>
> Since website is one of the important website, I am trying to inform 
> squid to allow legacy server connect (I also tried with unsafe 
> renegotiation)
>
> Source: https://www.openssl.org/docs/man3.0/man3/SSL_CTX_set_options.html
>
> squid.conf:
>
> # workaround for legacy / unpatched servers
> tls_outgoing_options 
> options=LEGACY_SERVER_CONNECT,ALLOW_UNSAFE_LEGACY_RENEGOTIATION
>
> # other related TLS related settings
> tls_outgoing_options cafile=/etc/ssl/cert.pem
>
> tls_outgoing_options 
> cipher=ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS
>
> # systemctl reload squid
>
> But I am still getting the same error when trying to connect to the 
> above site via squid proxy. (Works fine without proxy)
>
> What am I doing wrong?
>
> Tips / help appreciated,
>
> Thank you,
>
> Amish.
>


From rousskov at measurement-factory.com  Mon Dec 26 16:01:49 2022
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Mon, 26 Dec 2022 11:01:49 -0500
Subject: [squid-users] LEGACY_SERVER_CONNECT,
 ALLOW_UNSAFE_LEGACY_RENEGOTIATION does not work - SSL bump, OpenSSL 3
In-Reply-To: <f6e9c306-b15c-0e7d-5cf8-7ba036e86fe0@gmail.com>
References: <f6e9c306-b15c-0e7d-5cf8-7ba036e86fe0@gmail.com>
Message-ID: <ecc504d5-29f8-c63d-5662-7303b4c4a5f3@measurement-factory.com>

On 12/26/22 00:46, Amish wrote:

> I am using squid v5.7 with OpenSSL 3.0.7. (Arch Linux)

> squid.conf:
> 
> # workaround for legacy / unpatched servers
> tls_outgoing_options 
> options=LEGACY_SERVER_CONNECT,ALLOW_UNSAFE_LEGACY_RENEGOTIATION

There are two problems here:

1. Squid v5.7 hides important configuration errors. That problem was 
fixed in master/v6 commit 61be1d8, but that fix has not been backported 
to v5. If it were, you would have seen errors like this:

     ERROR: Unknown TLS option LEGACY_SERVER_CONNECT
     ERROR: Unknown TLS option ALLOW_UNSAFE_LEGACY_RENEGOTIATION

You can still see those level-1 errors on stderr if you start Squid v5.7 
with "-X", but they will be drowned in a sea of debugging records. Save 
stderr output into a file and search it for ERROR.

I recommend lobbying for making the above configuration errors fatal in 
Squid v6. I would be happy to post the corresponding code changes if 
others agree that they should be fatal.


2. As the above errors imply, you are using options that Squid does not 
understand. Squid cannot pass named options that it does not understand 
to OpenSSL because Squid does not know their numerical values (OpenSSL 
API requires a numeric value to enable an option). However, you can use 
a dangerous workaround: You can specify their raw numeric values (in 
hex). You may use the table at [1] to get those values[2]:

     tls_outgoing_options options=0x4,0x40000

Disclaimer: I have not tested whether the above configuration matches 
your intent. I only know that Squid v5 does not generate an ERROR for it.


[1] https://wiki.openssl.org/index.php/List_of_SSL_OP_Flags

[2] The table provides numerical values for OpenSSL v1 options. For 
OpenSSL v3, the table provides a SSL_OP_BIT(n) formula: 2 to the power 
of n. For example, SSL_OP_BIT(2) is, in hex notation, 0x4.
     #define SSL_OP_BIT(n)  ((uint64_t)1 << (uint64_t)n)


HTH,

Alex.


> # other related TLS related settings
> tls_outgoing_options cafile=/etc/ssl/cert.pem
> 
> tls_outgoing_options 
> cipher=ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS
> 
> # systemctl reload squid
> 
> But I am still getting the same error when trying to connect to the 
> above site via squid proxy. (Works fine without proxy)
> 
> What am I doing wrong?
> 
> Tips / help appreciated,
> 
> Thank you,
> 
> Amish.
> 
> _______________________________________________
> squid-users mailing list
> squid-users at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-users



From anon.amish at gmail.com  Tue Dec 27 15:42:38 2022
From: anon.amish at gmail.com (Amish)
Date: Tue, 27 Dec 2022 21:12:38 +0530
Subject: [squid-users] LEGACY_SERVER_CONNECT,
 ALLOW_UNSAFE_LEGACY_RENEGOTIATION does not work - SSL bump, OpenSSL 3
In-Reply-To: <ecc504d5-29f8-c63d-5662-7303b4c4a5f3@measurement-factory.com>
References: <f6e9c306-b15c-0e7d-5cf8-7ba036e86fe0@gmail.com>
 <ecc504d5-29f8-c63d-5662-7303b4c4a5f3@measurement-factory.com>
Message-ID: <63f940db-77b3-c57c-ec00-f174fed51516@gmail.com>

Hi Alex,

Thank you for putting so much efforts in reply.

Unfortunately, something is still wrong somewhere, as below.

On 26/12/22 21:31, Alex Rousskov wrote:
> On 12/26/22 00:46, Amish wrote:
>
>> I am using squid v5.7 with OpenSSL 3.0.7. (Arch Linux)
>
>> squid.conf:
>>
>> # workaround for legacy / unpatched servers
>> tls_outgoing_options 
>> options=LEGACY_SERVER_CONNECT,ALLOW_UNSAFE_LEGACY_RENEGOTIATION
>
> There are two problems here:
>
> 1. Squid v5.7 hides important configuration errors. That problem was 
> fixed in master/v6 commit 61be1d8, but that fix has not been 
> backported to v5. If it were, you would have seen errors like this:
>
> ??? ERROR: Unknown TLS option LEGACY_SERVER_CONNECT
> ??? ERROR: Unknown TLS option ALLOW_UNSAFE_LEGACY_RENEGOTIATION
>
> You can still see those level-1 errors on stderr if you start Squid 
> v5.7 with "-X", but they will be drowned in a sea of debugging 
> records. Save stderr output into a file and search it for ERROR.
>
> I recommend lobbying for making the above configuration errors fatal 
> in Squid v6. I would be happy to post the corresponding code changes 
> if others agree that they should be fatal.


Yes indeed, the ERROR does appear on stderr with -X.

It should definitely be fatal as otherwise someone may lose proper 
security, with wrong OR incomplete OR unimplemented settings thinking 
that, squid did not give error so its working fine.

> 2. As the above errors imply, you are using options that Squid does 
> not understand. Squid cannot pass named options that it does not 
> understand to OpenSSL because Squid does not know their numerical 
> values (OpenSSL API requires a numeric value to enable an option). 
> However, you can use a dangerous workaround: You can specify their raw 
> numeric values (in hex). You may use the table at [1] to get those 
> values[2]:
>
> ??? tls_outgoing_options options=0x4,0x40000
>
> Disclaimer: I have not tested whether the above configuration matches 
> your intent. I only know that Squid v5 does not generate an ERROR for it.


With numeric hex values, I do not see the ERROR on stderr.

But it still does not seem to be working as expected. Squid still does 
not open the page and gives same legacy negotiation error.

How do I know that SSL_CTX_set_options() is working with above options?

There appears to be nothing in cache.log.

$ grep debug_options squid.conf
debug_options 83,6

$ tail -f /var/log/squid/cache.log |grep -i 'ssl\|tls'
2022/12/27 20:39:04.939 kid1| 83,3| client_side_request.cc(1557) 
sslBumpNeed: sslBump required: peek
2022/12/27 20:39:05.920 kid1| 83,5| 
../../src/security/PeerOptions.h(111) convertContextFromRawPtr: SSL_CTX 
construct, this=0x557039611e60
2022/12/27 20:39:05.920 kid1| 83,5| Session.cc(103) NewSessionObject: 
SSL_new session=0x55703adcfd70
2022/12/27 20:39:05.920 kid1| 83,5| Session.cc(161) CreateSession: link 
FD 12 to TLS session=0x55703adcfd70
2022/12/27 20:39:05.920 kid1| 83,5| Io.cc(91) Handshake: -1/0 for TLS 
connection 0x55703adcfd70 over conn23909 local=127.0.0.1:8080 
remote=127.0.0.1:48458 FD 12 flags=1
2022/12/27 20:39:05.927 kid1| 83,5| Session.cc(103) NewSessionObject: 
SSL_new session=0x557039a59050
2022/12/27 20:39:05.927 kid1| 83,5| Session.cc(161) CreateSession: link 
FD 16 to TLS session=0x557039a59050
2022/12/27 20:39:05.928 kid1| 83,5| Io.cc(91) Handshake: -1/11 for TLS 
connection 0x557039a59050 over conn23913 local=[2001:db8::2]:60020 
remote=[2405:200:1601:c0e1:49:40:8:183]:443 HIER_DIRECT FD 16 flags=1
2022/12/27 20:39:06.062 kid1| 83,5| Io.cc(91) Handshake: -1/0 for TLS 
connection 0x557039a59050 over conn23913 local=[2001:db8::2]:60020 
remote=[2405:200:1601:c0e1:49:40:8:183]:443 HIER_DIRECT FD 16 flags=1
2022/12/27 20:39:06.062 kid1| 83,5| Io.cc(91) Handshake: -1/0 for TLS 
connection 0x557039a59050 over conn23913 local=[2001:db8::2]:60020 
remote=[2405:200:1601:c0e1:49:40:8:183]:443 HIER_DIRECT FD 16 flags=1
2022/12/27 20:39:06.063 kid1| 83,5| Io.cc(91) Handshake: -1/0 for TLS 
connection 0x557039a59050 over conn23913 local=[2001:db8::2]:60020 
remote=[2405:200:1601:c0e1:49:40:8:183]:443 HIER_DIRECT FD 16 flags=1
2022/12/27 20:39:06.063 kid1| 83,2| PeerConnector.cc(256) 
handleNegotiationResult: ERROR: failure while establishing TLS 
connection on FD: 160x55703a2d9e40*1
2022/12/27 20:39:06.063 kid1| 83,5| NegotiationHistory.cc(85) 
retrieveNegotiatedInfo: SSL connection info on FD 16 SSL version 
NONE/0.0 negotiated cipher
2022/12/27 20:39:06.063 kid1| 83,5| PeerConnector.cc(540) callBack: TLS 
setup ended for
2022/12/27 20:39:06.069 kid1| 83,5| Session.cc(103) NewSessionObject: 
SSL_new session=0x557039779b10
2022/12/27 20:39:06.069 kid1| 83,5| Session.cc(161) CreateSession: link 
FD 16 to TLS session=0x557039779b10
2022/12/27 20:39:06.070 kid1| 83,5| Io.cc(91) Handshake: -1/11 for TLS 
connection 0x557039779b10 over conn23916 local=192.168.0.2:54084 
remote=49.40.8.180:443 HIER_DIRECT FD 16 flags=1
2022/12/27 20:39:06.191 kid1| 83,5| Io.cc(91) Handshake: -1/0 for TLS 
connection 0x557039779b10 over conn23916 local=192.168.0.2:54084 
remote=49.40.8.180:443 HIER_DIRECT FD 16 flags=1
2022/12/27 20:39:06.192 kid1| 83,5| Io.cc(91) Handshake: -1/0 for TLS 
connection 0x557039779b10 over conn23916 local=192.168.0.2:54084 
remote=49.40.8.180:443 HIER_DIRECT FD 16 flags=1
2022/12/27 20:39:06.193 kid1| 83,5| Io.cc(91) Handshake: -1/0 for TLS 
connection 0x557039779b10 over conn23916 local=192.168.0.2:54084 
remote=49.40.8.180:443 HIER_DIRECT FD 16 flags=1
2022/12/27 20:39:06.193 kid1| 83,2| PeerConnector.cc(256) 
handleNegotiationResult: ERROR: failure while establishing TLS 
connection on FD: 160x55703a2d9e40*1
2022/12/27 20:39:06.193 kid1| 83,5| NegotiationHistory.cc(85) 
retrieveNegotiatedInfo: SSL connection info on FD 16 SSL version 
NONE/0.0 negotiated cipher
2022/12/27 20:39:06.193 kid1| 83,5| PeerConnector.cc(540) callBack: TLS 
setup ended for
2022/12/27 20:39:06.193 kid1| 83,5| Session.cc(100) operator(): SSL_free 
session=0x557039779b10
2022/12/27 20:39:06.236 kid1| 83,5| Io.cc(91) Handshake: -1/11 for TLS 
connection 0x55703adcfd70 over conn23909 local=127.0.0.1:8080 
remote=127.0.0.1:48458 FD 12 flags=1
2022/12/27 20:39:06.247 kid1| 83,5| Io.cc(91) Handshake: -1/11 for TLS 
connection 0x55703adcfd70 over conn23909 local=127.0.0.1:8080 
remote=127.0.0.1:48458 FD 12 flags=1
2022/12/27 20:39:06.254 kid1| 83,5| Session.cc(292) store_session_cb: 
Request to store SSL_SESSION
2022/12/27 20:39:06.254 kid1| 83,5| Session.cc(314) store_session_cb: 
wrote an SSL_SESSION entry of size 129 at pos 129
2022/12/27 20:39:06.254 kid1| 83,5| Session.cc(292) store_session_cb: 
Request to store SSL_SESSION
2022/12/27 20:39:06.254 kid1| 83,5| Session.cc(314) store_session_cb: 
wrote an SSL_SESSION entry of size 128 at pos 80
2022/12/27 20:39:06.255 kid1| 83,5| Io.cc(91) Handshake: 1/0 for TLS 
connection 0x55703adcfd70 over conn23909 local=127.0.0.1:8080 
remote=127.0.0.1:48458 FD 12 flags=1
-----BEGIN SSL SESSION PARAMETERS-----
-----END SSL SESSION PARAMETERS-----
2022/12/27 20:39:06.255 kid1| 83,2| client_side.cc(2460) 
clientNegotiateSSL: New session 0x55703abd32f0 on FD 12 (127.0.0.1:48458)
2022/12/27 20:39:06.255 kid1| 83,5| NegotiationHistory.cc(85) 
retrieveNegotiatedInfo: SSL connection info on FD 12 SSL version TLS/1.3 
negotiated cipher TLS_AES_256_GCM_SHA384
2022/12/27 20:39:06.255 kid1| 83,5| client_side.cc(2483) 
clientNegotiateSSL: FD 12 has no client certificate.
2022/12/27 20:39:06.255 kid1| 83,3| Session.cc(36) tls_read_method: 
started for session=0x55703adcfd70
2022/12/27 20:39:06.256 kid1| 83,3| Session.cc(73) tls_write_method: 
started for session=0x55703adcfd70
2022/12/27 20:39:06.256 kid1| 83,3| Session.cc(73) tls_write_method: 
started for session=0x55703adcfd70
2022/12/27 20:39:06.257 kid1| 83,5| Session.cc(100) operator(): SSL_free 
session=0x557039a59050
2022/12/27 20:39:06.257 kid1| 83,5| Session.cc(100) operator(): SSL_free 
session=0x55703adcfd70
2022/12/27 20:39:06.257 kid1| 83,5| 
../../src/security/PeerOptions.h(113) operator(): SSL_CTX destruct, 
this=0x557039611e60


Any idea on how do I know if SSL_CTX_set_options() is working with 
legacy negotiations enabled?


> [1] https://wiki.openssl.org/index.php/List_of_SSL_OP_Flags


Above link should be placed in tls_outgoing_options documentation at 
http://www.squid-cache.org/Doc/config/tls_outgoing_options/

Additionally a NOTE should be placed stating that it supports HEX values.

Current documentation gives an impression that I can use all the named 
options supported by OpenSSL. But in reality only selected named options 
are supported.


> [2] The table provides numerical values for OpenSSL v1 options. For 
> OpenSSL v3, the table provides a SSL_OP_BIT(n) formula: 2 to the power 
> of n. For example, SSL_OP_BIT(2) is, in hex notation, 0x4.
> ??? #define SSL_OP_BIT(n)? ((uint64_t)1 << (uint64_t)n)
>
> HTH,
>
> Alex.
>
>> # other related TLS related settings
>> tls_outgoing_options cafile=/etc/ssl/cert.pem
>>
>> tls_outgoing_options 
>> cipher=ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS
>>
>> # systemctl reload squid
>>
>> But I am still getting the same error when trying to connect to the 
>> above site via squid proxy. (Works fine without proxy)
>>
>> What am I doing wrong?
>>
>> Tips / help appreciated,
>>
>> Thank you,
>>
>> Amish.

Thank you

Amish.



From rousskov at measurement-factory.com  Tue Dec 27 16:22:34 2022
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Tue, 27 Dec 2022 11:22:34 -0500
Subject: [squid-users] LEGACY_SERVER_CONNECT,
 ALLOW_UNSAFE_LEGACY_RENEGOTIATION does not work - SSL bump, OpenSSL 3
In-Reply-To: <63f940db-77b3-c57c-ec00-f174fed51516@gmail.com>
References: <f6e9c306-b15c-0e7d-5cf8-7ba036e86fe0@gmail.com>
 <ecc504d5-29f8-c63d-5662-7303b4c4a5f3@measurement-factory.com>
 <63f940db-77b3-c57c-ec00-f174fed51516@gmail.com>
Message-ID: <17c35a0f-2577-712e-ff3a-5cdd251cb179@measurement-factory.com>

On 12/27/22 10:42, Amish wrote:
> On 26/12/22 21:31, Alex Rousskov wrote:
>> tls_outgoing_options options=0x4,0x40000

> With numeric hex values, I do not see the ERROR on stderr.

> But it still does not seem to be working as expected. Squid still does 
> not open the page and gives same legacy negotiation error.

There are still many unknowns (from my point of view), including:

1. Does OpenSSL accept the above options? You ask that question below.
2. Does Squid indeed stare at the server, as expected?
3. Does Squid apply the accepted options when staring at the server?
4. Why does TLS negotiation fail despite those options applied,
    especially since it succeeds with using openssl s_client

Investigating the above (rough) questions may uncover more leads.


> How do I know that SSL_CTX_set_options() is working with above options?
> There appears to be nothing in cache.log.

Squid does not check the outcome of the SSL_CTX_set_options() call. To 
be sure, one would need to either use a debugger or add debugging to 
Squid (quality patches welcome). The call is in 
Security::PeerOptions::updateContextOptions().


> $ tail -f /var/log/squid/cache.log |grep -i 'ssl\|tls'

FWIW, using this log snippet, I cannot quickly answer the other three 
questions . To make progress, I would either need to see a complete 
ALL,9 log (with a single problematic transaction[1]) or to reproduce the 
issue myself. Unfortunately, I currently do not have enough free time 
for that.

[1] 
https://wiki.squid-cache.org/SquidFaq/BugReporting#debugging-a-single-transaction


Sorry,

Alex.


> 2022/12/27 20:39:04.939 kid1| 83,3| client_side_request.cc(1557) 
> sslBumpNeed: sslBump required: peek
> 2022/12/27 20:39:05.920 kid1| 83,5| 
> ../../src/security/PeerOptions.h(111) convertContextFromRawPtr: SSL_CTX 
> construct, this=0x557039611e60
> 2022/12/27 20:39:05.920 kid1| 83,5| Session.cc(103) NewSessionObject: 
> SSL_new session=0x55703adcfd70
> 2022/12/27 20:39:05.920 kid1| 83,5| Session.cc(161) CreateSession: link 
> FD 12 to TLS session=0x55703adcfd70
> 2022/12/27 20:39:05.920 kid1| 83,5| Io.cc(91) Handshake: -1/0 for TLS 
> connection 0x55703adcfd70 over conn23909 local=127.0.0.1:8080 
> remote=127.0.0.1:48458 FD 12 flags=1
> 2022/12/27 20:39:05.927 kid1| 83,5| Session.cc(103) NewSessionObject: 
> SSL_new session=0x557039a59050
> 2022/12/27 20:39:05.927 kid1| 83,5| Session.cc(161) CreateSession: link 
> FD 16 to TLS session=0x557039a59050
> 2022/12/27 20:39:05.928 kid1| 83,5| Io.cc(91) Handshake: -1/11 for TLS 
> connection 0x557039a59050 over conn23913 local=[2001:db8::2]:60020 
> remote=[2405:200:1601:c0e1:49:40:8:183]:443 HIER_DIRECT FD 16 flags=1
> 2022/12/27 20:39:06.062 kid1| 83,5| Io.cc(91) Handshake: -1/0 for TLS 
> connection 0x557039a59050 over conn23913 local=[2001:db8::2]:60020 
> remote=[2405:200:1601:c0e1:49:40:8:183]:443 HIER_DIRECT FD 16 flags=1
> 2022/12/27 20:39:06.062 kid1| 83,5| Io.cc(91) Handshake: -1/0 for TLS 
> connection 0x557039a59050 over conn23913 local=[2001:db8::2]:60020 
> remote=[2405:200:1601:c0e1:49:40:8:183]:443 HIER_DIRECT FD 16 flags=1
> 2022/12/27 20:39:06.063 kid1| 83,5| Io.cc(91) Handshake: -1/0 for TLS 
> connection 0x557039a59050 over conn23913 local=[2001:db8::2]:60020 
> remote=[2405:200:1601:c0e1:49:40:8:183]:443 HIER_DIRECT FD 16 flags=1
> 2022/12/27 20:39:06.063 kid1| 83,2| PeerConnector.cc(256) 
> handleNegotiationResult: ERROR: failure while establishing TLS 
> connection on FD: 160x55703a2d9e40*1
> 2022/12/27 20:39:06.063 kid1| 83,5| NegotiationHistory.cc(85) 
> retrieveNegotiatedInfo: SSL connection info on FD 16 SSL version 
> NONE/0.0 negotiated cipher
> 2022/12/27 20:39:06.063 kid1| 83,5| PeerConnector.cc(540) callBack: TLS 
> setup ended for
> 2022/12/27 20:39:06.069 kid1| 83,5| Session.cc(103) NewSessionObject: 
> SSL_new session=0x557039779b10
> 2022/12/27 20:39:06.069 kid1| 83,5| Session.cc(161) CreateSession: link 
> FD 16 to TLS session=0x557039779b10
> 2022/12/27 20:39:06.070 kid1| 83,5| Io.cc(91) Handshake: -1/11 for TLS 
> connection 0x557039779b10 over conn23916 local=192.168.0.2:54084 
> remote=49.40.8.180:443 HIER_DIRECT FD 16 flags=1
> 2022/12/27 20:39:06.191 kid1| 83,5| Io.cc(91) Handshake: -1/0 for TLS 
> connection 0x557039779b10 over conn23916 local=192.168.0.2:54084 
> remote=49.40.8.180:443 HIER_DIRECT FD 16 flags=1
> 2022/12/27 20:39:06.192 kid1| 83,5| Io.cc(91) Handshake: -1/0 for TLS 
> connection 0x557039779b10 over conn23916 local=192.168.0.2:54084 
> remote=49.40.8.180:443 HIER_DIRECT FD 16 flags=1
> 2022/12/27 20:39:06.193 kid1| 83,5| Io.cc(91) Handshake: -1/0 for TLS 
> connection 0x557039779b10 over conn23916 local=192.168.0.2:54084 
> remote=49.40.8.180:443 HIER_DIRECT FD 16 flags=1
> 2022/12/27 20:39:06.193 kid1| 83,2| PeerConnector.cc(256) 
> handleNegotiationResult: ERROR: failure while establishing TLS 
> connection on FD: 160x55703a2d9e40*1
> 2022/12/27 20:39:06.193 kid1| 83,5| NegotiationHistory.cc(85) 
> retrieveNegotiatedInfo: SSL connection info on FD 16 SSL version 
> NONE/0.0 negotiated cipher
> 2022/12/27 20:39:06.193 kid1| 83,5| PeerConnector.cc(540) callBack: TLS 
> setup ended for
> 2022/12/27 20:39:06.193 kid1| 83,5| Session.cc(100) operator(): SSL_free 
> session=0x557039779b10
> 2022/12/27 20:39:06.236 kid1| 83,5| Io.cc(91) Handshake: -1/11 for TLS 
> connection 0x55703adcfd70 over conn23909 local=127.0.0.1:8080 
> remote=127.0.0.1:48458 FD 12 flags=1
> 2022/12/27 20:39:06.247 kid1| 83,5| Io.cc(91) Handshake: -1/11 for TLS 
> connection 0x55703adcfd70 over conn23909 local=127.0.0.1:8080 
> remote=127.0.0.1:48458 FD 12 flags=1
> 2022/12/27 20:39:06.254 kid1| 83,5| Session.cc(292) store_session_cb: 
> Request to store SSL_SESSION
> 2022/12/27 20:39:06.254 kid1| 83,5| Session.cc(314) store_session_cb: 
> wrote an SSL_SESSION entry of size 129 at pos 129
> 2022/12/27 20:39:06.254 kid1| 83,5| Session.cc(292) store_session_cb: 
> Request to store SSL_SESSION
> 2022/12/27 20:39:06.254 kid1| 83,5| Session.cc(314) store_session_cb: 
> wrote an SSL_SESSION entry of size 128 at pos 80
> 2022/12/27 20:39:06.255 kid1| 83,5| Io.cc(91) Handshake: 1/0 for TLS 
> connection 0x55703adcfd70 over conn23909 local=127.0.0.1:8080 
> remote=127.0.0.1:48458 FD 12 flags=1
> -----BEGIN SSL SESSION PARAMETERS-----
> -----END SSL SESSION PARAMETERS-----
> 2022/12/27 20:39:06.255 kid1| 83,2| client_side.cc(2460) 
> clientNegotiateSSL: New session 0x55703abd32f0 on FD 12 (127.0.0.1:48458)
> 2022/12/27 20:39:06.255 kid1| 83,5| NegotiationHistory.cc(85) 
> retrieveNegotiatedInfo: SSL connection info on FD 12 SSL version TLS/1.3 
> negotiated cipher TLS_AES_256_GCM_SHA384
> 2022/12/27 20:39:06.255 kid1| 83,5| client_side.cc(2483) 
> clientNegotiateSSL: FD 12 has no client certificate.
> 2022/12/27 20:39:06.255 kid1| 83,3| Session.cc(36) tls_read_method: 
> started for session=0x55703adcfd70
> 2022/12/27 20:39:06.256 kid1| 83,3| Session.cc(73) tls_write_method: 
> started for session=0x55703adcfd70
> 2022/12/27 20:39:06.256 kid1| 83,3| Session.cc(73) tls_write_method: 
> started for session=0x55703adcfd70
> 2022/12/27 20:39:06.257 kid1| 83,5| Session.cc(100) operator(): SSL_free 
> session=0x557039a59050
> 2022/12/27 20:39:06.257 kid1| 83,5| Session.cc(100) operator(): SSL_free 
> session=0x55703adcfd70
> 2022/12/27 20:39:06.257 kid1| 83,5| 
> ../../src/security/PeerOptions.h(113) operator(): SSL_CTX destruct, 
> this=0x557039611e60
> 
> 
> Any idea on how do I know if SSL_CTX_set_options() is working with 
> legacy negotiations enabled?
> 
> 
>> [1] https://wiki.openssl.org/index.php/List_of_SSL_OP_Flags
> 
> 
> Above link should be placed in tls_outgoing_options documentation at 
> http://www.squid-cache.org/Doc/config/tls_outgoing_options/
> 
> Additionally a NOTE should be placed stating that it supports HEX values.
> 
> Current documentation gives an impression that I can use all the named 
> options supported by OpenSSL. But in reality only selected named options 
> are supported.
> 
> 
>> [2] The table provides numerical values for OpenSSL v1 options. For 
>> OpenSSL v3, the table provides a SSL_OP_BIT(n) formula: 2 to the power 
>> of n. For example, SSL_OP_BIT(2) is, in hex notation, 0x4.
>> ??? #define SSL_OP_BIT(n)? ((uint64_t)1 << (uint64_t)n)
>>
>> HTH,
>>
>> Alex.
>>
>>> # other related TLS related settings
>>> tls_outgoing_options cafile=/etc/ssl/cert.pem
>>>
>>> tls_outgoing_options 
>>> cipher=ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS
>>>
>>> # systemctl reload squid
>>>
>>> But I am still getting the same error when trying to connect to the 
>>> above site via squid proxy. (Works fine without proxy)
>>>
>>> What am I doing wrong?
>>>
>>> Tips / help appreciated,
>>>
>>> Thank you,
>>>
>>> Amish.
> 
> Thank you
> 
> Amish.
> 
> _______________________________________________
> squid-users mailing list
> squid-users at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-users



From anon.amish at gmail.com  Wed Dec 28 07:32:52 2022
From: anon.amish at gmail.com (Amish)
Date: Wed, 28 Dec 2022 13:02:52 +0530
Subject: [squid-users] LEGACY_SERVER_CONNECT,
 ALLOW_UNSAFE_LEGACY_RENEGOTIATION does not work - SSL bump, OpenSSL 3
In-Reply-To: <17c35a0f-2577-712e-ff3a-5cdd251cb179@measurement-factory.com>
References: <f6e9c306-b15c-0e7d-5cf8-7ba036e86fe0@gmail.com>
 <ecc504d5-29f8-c63d-5662-7303b4c4a5f3@measurement-factory.com>
 <63f940db-77b3-c57c-ec00-f174fed51516@gmail.com>
 <17c35a0f-2577-712e-ff3a-5cdd251cb179@measurement-factory.com>
Message-ID: <57c2e6fe-75cf-756c-3b2a-10addd1d32a2@gmail.com>

Hi Alex,

Thanks again for your reply.

To find answers to your questions, I added few debugs() lines to 
PeerOptions.cc.

The diff file (patch) is attached.

It prints parsedOptions and options retrieved from SSL context and 
session objects at several stages.

Here is tls_outgoing_options setting:

$ grep tls_outgoing_options /etc/squid/squid.conf
tls_outgoing_options \
 ??? cafile=/etc/ssl/cert.pem \
cipher=ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS 
\
 ??? options=0x4


Here is what squid logs on reload i.e. on parsing the squid.conf

$ systemctl reload squid
$ tail -f /var/log/squid/cache.log? |grep -i 'openssl\|parsed'
2022/12/28 12:19:30.596 kid1| 83,5| PeerOptions.cc(547) parseOptions: 
INFO: TLS parsedOptions(3)=0
2022/12/28 12:19:30.598 kid1| 83,5| PeerOptions.cc(547) parseOptions: 
INFO: TLS parsedOptions(3)=0
2022/12/28 12:19:30.723 kid1| 83,5| PeerOptions.cc(547) parseOptions: 
INFO: TLS parsedOptions(3)=4
2022/12/28 12:19:30.729 kid1| 83,5| PeerOptions.cc(547) parseOptions: 
INFO: TLS parsedOptions(3)=0
2022/12/28 12:19:30.729 kid1| 83,5| PeerOptions.cc(547) parseOptions: 
INFO: TLS parsedOptions(3)=0
2022/12/28 12:19:32.147 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
INFO: TLS parsedOptions(1)=0
2022/12/28 12:19:32.147 kid1| 83,5| PeerOptions.cc(547) parseOptions: 
INFO: TLS parsedOptions(3)=0
2022/12/28 12:19:33.524 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
INFO: TLS parsedOptions(1)=0
2022/12/28 12:19:33.532 kid1| 83,5| PeerOptions.cc(547) parseOptions: 
INFO: TLS parsedOptions(3)=0
2022/12/28 12:19:33.695 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
INFO: TLS parsedOptions(1)=0
2022/12/28 12:19:33.695 kid1| 83,5| PeerOptions.cc(643) 
updateContextOptions: set OpenSSL options for context=0x562a5387fe30, 
parsedOptions=0
2022/12/28 12:19:33.695 kid1| 83,5| PeerOptions.cc(645) 
updateContextOptions: get OpenSSL options for context=0x562a5387fe30, 
getOptions=1179648
2022/12/28 12:19:33.708 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
INFO: TLS parsedOptions(1)=0
2022/12/28 12:19:33.708 kid1| 83,5| PeerOptions.cc(643) 
updateContextOptions: set OpenSSL options for context=0x562a53e6e740, 
parsedOptions=0
2022/12/28 12:19:33.708 kid1| 83,5| PeerOptions.cc(645) 
updateContextOptions: get OpenSSL options for context=0x562a53e6e740, 
getOptions=1179648

It seems that squid parses the options multiple times and only once it 
gets the value as 4. Rest are parsed as 0.

The value of 1179648 (0x120000) corresponds to SSL_OP_NO_COMPRESSION 
(0x20000) and SSL_OP_ENABLE_MIDDLEBOX_COMPAT. (0x100000)


Now lets reproduce the issue:

$ curl --no-progress-meter -kx 127.0.0.1:8080 https://www.jio.com |grep 
'TLS\|SSL'
<pre>[No Error] (TLS code: 
SQUID_TLS_ERR_CONNECT+TLS_LIB_ERR=A000152+TLS_IO_ERR=1)</pre>
<p>Failed to establish a secure connection: error:0A000152:SSL 
routines::unsafe legacy renegotiation disabled</p>

So, as we can see, we are still not able to access the site.

Lets see what cache.log has to say.

$ tail -f /var/log/squid/cache.log? |grep -i 'openssl\|parsed'
2022/12/28 12:31:09.971 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
INFO: TLS parsedOptions(1)=0
2022/12/28 12:31:09.971 kid1| 83,5| PeerOptions.cc(643) 
updateContextOptions: set OpenSSL options for context=0x562a53eb14e0, 
parsedOptions=0
2022/12/28 12:31:09.971 kid1| 83,5| PeerOptions.cc(645) 
updateContextOptions: get OpenSSL options for context=0x562a53eb14e0, 
getOptions=1179648

Strangely parsedOptions was zero and not 4!

Now we can answer your questions as below.


On 27/12/22 21:52, Alex Rousskov wrote:
> On 12/27/22 10:42, Amish wrote:
>> On 26/12/22 21:31, Alex Rousskov wrote:
>>> tls_outgoing_options options=0x4,0x40000
>
>> With numeric hex values, I do not see the ERROR on stderr.
>
>> But it still does not seem to be working as expected. Squid still 
>> does not open the page and gives same legacy negotiation error.
>
> There are still many unknowns (from my point of view), including:
>
> 1. Does OpenSSL accept the above options? You ask that question below.

Google search shows some projects using OpenSSL v3 where there is 
mention to use above option when a similar error occurred to them.

But in our case, its clear that squid does not pass value 4 to SSL 
context, hence we do not know yet if OpenSSL accepts above options.


> 2. Does Squid indeed stare at the server, as expected?
> 3. Does Squid apply the accepted options when staring at the server?

A comment for parseOptions() in PeerOptions.cc states this:

/**
 ?* Pre-parse TLS options= parameter to be applied when the TLS objects 
created.
 ?* Options must not used in the case of peek or stare bump mode.
 ?*/
void Security::PeerOptions::parseOptions()

So it appears that TLS options is NOT used for peek as well as stare. 
But why? I am not sure.

How do I make squid use it for 'stare' atleast?


> 4. Why does TLS negotiation fail despite those options applied,
> ?? especially since it succeeds with using openssl s_client

It possibly fails because options are not applied by squid.

So, where do I check next on why parsedOptions is still set to 0 and why 
its not used for 'stare'?

Thanks and regards,

Amish.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PeerOptions.diff
Type: text/x-patch
Size: 1704 bytes
Desc: not available
URL: <http://lists.squid-cache.org/pipermail/squid-users/attachments/20221228/dd238a8a/attachment.bin>

From rousskov at measurement-factory.com  Wed Dec 28 16:01:00 2022
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Wed, 28 Dec 2022 11:01:00 -0500
Subject: [squid-users] LEGACY_SERVER_CONNECT,
 ALLOW_UNSAFE_LEGACY_RENEGOTIATION does not work - SSL bump, OpenSSL 3
In-Reply-To: <57c2e6fe-75cf-756c-3b2a-10addd1d32a2@gmail.com>
References: <f6e9c306-b15c-0e7d-5cf8-7ba036e86fe0@gmail.com>
 <ecc504d5-29f8-c63d-5662-7303b4c4a5f3@measurement-factory.com>
 <63f940db-77b3-c57c-ec00-f174fed51516@gmail.com>
 <17c35a0f-2577-712e-ff3a-5cdd251cb179@measurement-factory.com>
 <57c2e6fe-75cf-756c-3b2a-10addd1d32a2@gmail.com>
Message-ID: <d447614e-7a22-0969-0257-46095df48c51@measurement-factory.com>

Hi Amish,

     Squid parsing code is tricky. tls_outgoing_options parsing code is 
triply so. Even its authors misinterpret it!

I assume you have removed multiple tls_outgoing_options directives from 
your configuration before testing. If you have not, please merge those 
directives into one and retest. You should still see multiple parsing 
paths, in part, due to (unfortunate) Security::PeerOptions 
implementation and, in part, due to Squid parsing default options before 
Squid parses your actual configuration files.


If merging directives does not deliver custom options to 
SSL_CTX_set_options(), then let's attack this from the other end: Supply 
the right options to each SSL_CTX_set_options() call:

     const Security::ParsedOptions forcedParsedOptions = 0x4 | 0x40000;
     SSL_CTX_set_options(ctx.get(), forcedParsedOptions);

Does the above temporary hack fix the problem in your test?


Thank you,

Alex.



On 12/28/22 02:32, Amish wrote:
> Hi Alex,
> 
> Thanks again for your reply.
> 
> To find answers to your questions, I added few debugs() lines to 
> PeerOptions.cc.
> 
> The diff file (patch) is attached.
> 
> It prints parsedOptions and options retrieved from SSL context and 
> session objects at several stages.
> 
> Here is tls_outgoing_options setting:
> 
> $ grep tls_outgoing_options /etc/squid/squid.conf
> tls_outgoing_options \
>  ??? cafile=/etc/ssl/cert.pem \
> cipher=ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS \
>  ??? options=0x4
> 
> 
> Here is what squid logs on reload i.e. on parsing the squid.conf
> 
> $ systemctl reload squid
> $ tail -f /var/log/squid/cache.log? |grep -i 'openssl\|parsed'
> 2022/12/28 12:19:30.596 kid1| 83,5| PeerOptions.cc(547) parseOptions: INFO: TLS parsedOptions(3)=0
> 2022/12/28 12:19:30.598 kid1| 83,5| PeerOptions.cc(547) parseOptions: INFO: TLS parsedOptions(3)=0
> 2022/12/28 12:19:30.723 kid1| 83,5| PeerOptions.cc(547) parseOptions: INFO: TLS parsedOptions(3)=4
> 2022/12/28 12:19:30.729 kid1| 83,5| PeerOptions.cc(547) parseOptions: INFO: TLS parsedOptions(3)=0
> 2022/12/28 12:19:30.729 kid1| 83,5| PeerOptions.cc(547) parseOptions: INFO: TLS parsedOptions(3)=0
> 2022/12/28 12:19:32.147 kid1| 83,5| PeerOptions.cc(447) parseOptions: INFO: TLS parsedOptions(1)=0
> 2022/12/28 12:19:32.147 kid1| 83,5| PeerOptions.cc(547) parseOptions: INFO: TLS parsedOptions(3)=0
> 2022/12/28 12:19:33.524 kid1| 83,5| PeerOptions.cc(447) parseOptions: INFO: TLS parsedOptions(1)=0
> 2022/12/28 12:19:33.532 kid1| 83,5| PeerOptions.cc(547) parseOptions: INFO: TLS parsedOptions(3)=0
> 2022/12/28 12:19:33.695 kid1| 83,5| PeerOptions.cc(447) parseOptions: INFO: TLS parsedOptions(1)=0
> 2022/12/28 12:19:33.695 kid1| 83,5| PeerOptions.cc(643) updateContextOptions: set OpenSSL options for context=0x562a5387fe30, parsedOptions=0
> 2022/12/28 12:19:33.695 kid1| 83,5| PeerOptions.cc(645) updateContextOptions: get OpenSSL options for context=0x562a5387fe30, getOptions=1179648

> 2022/12/28 12:19:33.708 kid1| 83,5| PeerOptions.cc(447) parseOptions: INFO: TLS parsedOptions(1)=0
> 2022/12/28 12:19:33.708 kid1| 83,5| PeerOptions.cc(643) updateContextOptions: set OpenSSL options for context=0x562a53e6e740, parsedOptions=0
> 2022/12/28 12:19:33.708 kid1| 83,5| PeerOptions.cc(645) 
> updateContextOptions: get OpenSSL options for context=0x562a53e6e740, 
> getOptions=1179648
> 
> It seems that squid parses the options multiple times and only once it 
> gets the value as 4. Rest are parsed as 0.
> 
> The value of 1179648 (0x120000) corresponds to SSL_OP_NO_COMPRESSION 
> (0x20000) and SSL_OP_ENABLE_MIDDLEBOX_COMPAT. (0x100000)
> 
> 
> Now lets reproduce the issue:
> 
> $ curl --no-progress-meter -kx 127.0.0.1:8080 https://www.jio.com |grep 
> 'TLS\|SSL'
> <pre>[No Error] (TLS code: 
> SQUID_TLS_ERR_CONNECT+TLS_LIB_ERR=A000152+TLS_IO_ERR=1)</pre>
> <p>Failed to establish a secure connection: error:0A000152:SSL 
> routines::unsafe legacy renegotiation disabled</p>
> 
> So, as we can see, we are still not able to access the site.
> 
> Lets see what cache.log has to say.
> 
> $ tail -f /var/log/squid/cache.log? |grep -i 'openssl\|parsed'
> 2022/12/28 12:31:09.971 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
> INFO: TLS parsedOptions(1)=0
> 2022/12/28 12:31:09.971 kid1| 83,5| PeerOptions.cc(643) 
> updateContextOptions: set OpenSSL options for context=0x562a53eb14e0, 
> parsedOptions=0
> 2022/12/28 12:31:09.971 kid1| 83,5| PeerOptions.cc(645) 
> updateContextOptions: get OpenSSL options for context=0x562a53eb14e0, 
> getOptions=1179648
> 
> Strangely parsedOptions was zero and not 4!
> 
> Now we can answer your questions as below.
> 
> 
> On 27/12/22 21:52, Alex Rousskov wrote:
>> On 12/27/22 10:42, Amish wrote:
>>> On 26/12/22 21:31, Alex Rousskov wrote:
>>>> tls_outgoing_options options=0x4,0x40000
>>
>>> With numeric hex values, I do not see the ERROR on stderr.
>>
>>> But it still does not seem to be working as expected. Squid still 
>>> does not open the page and gives same legacy negotiation error.
>>
>> There are still many unknowns (from my point of view), including:
>>
>> 1. Does OpenSSL accept the above options? You ask that question below.
> 
> Google search shows some projects using OpenSSL v3 where there is 
> mention to use above option when a similar error occurred to them.
> 
> But in our case, its clear that squid does not pass value 4 to SSL 
> context, hence we do not know yet if OpenSSL accepts above options.
> 
> 
>> 2. Does Squid indeed stare at the server, as expected?
>> 3. Does Squid apply the accepted options when staring at the server?
> 
> A comment for parseOptions() in PeerOptions.cc states this:
> 
> /**
>  ?* Pre-parse TLS options= parameter to be applied when the TLS objects 
> created.
>  ?* Options must not used in the case of peek or stare bump mode.
>  ?*/
> void Security::PeerOptions::parseOptions()
> 
> So it appears that TLS options is NOT used for peek as well as stare. 
> But why? I am not sure.
> 
> How do I make squid use it for 'stare' atleast?
> 
> 
>> 4. Why does TLS negotiation fail despite those options applied,
>> ?? especially since it succeeds with using openssl s_client
> 
> It possibly fails because options are not applied by squid.
> 
> So, where do I check next on why parsedOptions is still set to 0 and why 
> its not used for 'stare'?
> 
> Thanks and regards,
> 
> Amish.
> 
> _______________________________________________
> squid-users mailing list
> squid-users at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-users



From anon.amish at gmail.com  Wed Dec 28 16:49:44 2022
From: anon.amish at gmail.com (Amish)
Date: Wed, 28 Dec 2022 22:19:44 +0530
Subject: [squid-users] LEGACY_SERVER_CONNECT,
 ALLOW_UNSAFE_LEGACY_RENEGOTIATION does not work - SSL bump, OpenSSL 3
In-Reply-To: <d447614e-7a22-0969-0257-46095df48c51@measurement-factory.com>
References: <f6e9c306-b15c-0e7d-5cf8-7ba036e86fe0@gmail.com>
 <ecc504d5-29f8-c63d-5662-7303b4c4a5f3@measurement-factory.com>
 <63f940db-77b3-c57c-ec00-f174fed51516@gmail.com>
 <17c35a0f-2577-712e-ff3a-5cdd251cb179@measurement-factory.com>
 <57c2e6fe-75cf-756c-3b2a-10addd1d32a2@gmail.com>
 <d447614e-7a22-0969-0257-46095df48c51@measurement-factory.com>
Message-ID: <71e2a21c-7de0-e60d-2371-a083680bdb45@gmail.com>

Hi Alex,

On 28/12/22 21:31, Alex Rousskov wrote:
> Hi Amish,
>
> ??? Squid parsing code is tricky. tls_outgoing_options parsing code is 
> triply so. Even its authors misinterpret it!
>
> I assume you have removed multiple tls_outgoing_options directives 
> from your configuration before testing. If you have not, please merge 
> those directives into one and retest. You should still see multiple 
> parsing paths, in part, due to (unfortunate) Security::PeerOptions 
> implementation and, in part, due to Squid parsing default options 
> before Squid parses your actual configuration files.
>
Yes I had combined all tls_outgoing_options in to a single directive 
(but in multiple lines ending with a backslash \). It can be seen in the 
grep command in my previous email.

But wait, I have found something.

And I have a doubt that parsedOptions work only for client to squid side 
of the connection and does not work for squid to server side of the 
connection.

What I did is changed my "http(s)_port" directives to include 
options=0x4. These directives control options for the client to squid 
side of TLS connection.

$ grep 'ssl-bump' /etc/squid/squid.conf
http_port 8080 ssl-bump generate-host-certificates=on 
tls-cert=/etc/squid/ssl_cert/squid.pem 
tls-dh=/etc/squid/ssl_cert/dhparam.pem options=0x4
https_port 8081 intercept ssl-bump generate-host-certificates=on 
tls-cert=/etc/squid/ssl_cert/squid.pem 
tls-dh=/etc/squid/ssl_cert/dhparam.pem options=0x4

Now lets reproduce the issue:
$ curl --no-progress-meter -kx 127.0.0.1:8080 https://www.jio.com |grep 
'TLS\|SSL'
<pre>[No Error] (TLS code: 
SQUID_TLS_ERR_CONNECT+TLS_LIB_ERR=A000152+TLS_IO_ERR=1)</pre>
<p>Failed to establish a secure connection: error:0A000152:SSL 
routines::unsafe legacy renegotiation disabled</p>

Lets see what cache.log has to say:

$ tail -f /var/log/squid/cache.log? |grep -i 'openssl\|parsed'
2022/12/28 21:52:56.532 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
INFO: TLS parsedOptions(1)=4
2022/12/28 21:52:56.532 kid1| 83,5| PeerOptions.cc(643) 
updateContextOptions: set OpenSSL options for context=0x559075043e30, 
parsedOptions=4
2022/12/28 21:52:56.532 kid1| 83,5| PeerOptions.cc(645) 
updateContextOptions: get OpenSSL options for context=0x559075043e30, 
getOptions=1179652

Bingo!! As we can see, parsedOptions is now set to 4!

And it is also confirmed by ssl_get_options() - 1179652? = 0x120004 (4 
means the option is accepted by OpenSSL too)

But this also means that updateContextOptions() is called ONLY FOR 
client to squid side (curl to squid) and it is not called for squid to 
server (jio.com in this case) side.

The reason being that we do not see updateContextOptions() being called 
twice for a request. But only once. And that is why request still fails 
with the negotiation error.

So where exactly is the call for squid to server side being made?

> If merging directives does not deliver custom options to 
> SSL_CTX_set_options(), then let's attack this from the other end: 
> Supply the right options to each SSL_CTX_set_options() call:
>
> ??? const Security::ParsedOptions forcedParsedOptions = 0x4 | 0x40000;
> ??? SSL_CTX_set_options(ctx.get(), forcedParsedOptions);
>
> Does the above temporary hack fix the problem in your test?


I will try this tomorrow (its late night here).

But I think I will have to set this somewhere else and NOT in 
PeerOptions.cc. Because above code appears to be for client to squid side.

And I need to add forcedParsedOptions to the code which connects squid 
to server. But where?

Thank you,

Amish.


> Thank you,
>
> Alex.
>
> On 12/28/22 02:32, Amish wrote:
>> Hi Alex,
>>
>> Thanks again for your reply.
>>
>> To find answers to your questions, I added few debugs() lines to 
>> PeerOptions.cc.
>>
>> The diff file (patch) is attached.
>>
>> It prints parsedOptions and options retrieved from SSL context and 
>> session objects at several stages.
>>
>> Here is tls_outgoing_options setting:
>>
>> $ grep tls_outgoing_options /etc/squid/squid.conf
>> tls_outgoing_options \
>> ???? cafile=/etc/ssl/cert.pem \
>> cipher=ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS 
>> \
>> ???? options=0x4
>>
>>
>> Here is what squid logs on reload i.e. on parsing the squid.conf
>>
>> $ systemctl reload squid
>> $ tail -f /var/log/squid/cache.log? |grep -i 'openssl\|parsed'
>> 2022/12/28 12:19:30.596 kid1| 83,5| PeerOptions.cc(547) parseOptions: 
>> INFO: TLS parsedOptions(3)=0
>> 2022/12/28 12:19:30.598 kid1| 83,5| PeerOptions.cc(547) parseOptions: 
>> INFO: TLS parsedOptions(3)=0
>> 2022/12/28 12:19:30.723 kid1| 83,5| PeerOptions.cc(547) parseOptions: 
>> INFO: TLS parsedOptions(3)=4
>> 2022/12/28 12:19:30.729 kid1| 83,5| PeerOptions.cc(547) parseOptions: 
>> INFO: TLS parsedOptions(3)=0
>> 2022/12/28 12:19:30.729 kid1| 83,5| PeerOptions.cc(547) parseOptions: 
>> INFO: TLS parsedOptions(3)=0
>> 2022/12/28 12:19:32.147 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
>> INFO: TLS parsedOptions(1)=0
>> 2022/12/28 12:19:32.147 kid1| 83,5| PeerOptions.cc(547) parseOptions: 
>> INFO: TLS parsedOptions(3)=0
>> 2022/12/28 12:19:33.524 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
>> INFO: TLS parsedOptions(1)=0
>> 2022/12/28 12:19:33.532 kid1| 83,5| PeerOptions.cc(547) parseOptions: 
>> INFO: TLS parsedOptions(3)=0
>> 2022/12/28 12:19:33.695 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
>> INFO: TLS parsedOptions(1)=0
>> 2022/12/28 12:19:33.695 kid1| 83,5| PeerOptions.cc(643) 
>> updateContextOptions: set OpenSSL options for context=0x562a5387fe30, 
>> parsedOptions=0
>> 2022/12/28 12:19:33.695 kid1| 83,5| PeerOptions.cc(645) 
>> updateContextOptions: get OpenSSL options for context=0x562a5387fe30, 
>> getOptions=1179648
>
>> 2022/12/28 12:19:33.708 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
>> INFO: TLS parsedOptions(1)=0
>> 2022/12/28 12:19:33.708 kid1| 83,5| PeerOptions.cc(643) 
>> updateContextOptions: set OpenSSL options for context=0x562a53e6e740, 
>> parsedOptions=0
>> 2022/12/28 12:19:33.708 kid1| 83,5| PeerOptions.cc(645) 
>> updateContextOptions: get OpenSSL options for context=0x562a53e6e740, 
>> getOptions=1179648
>>
>> It seems that squid parses the options multiple times and only once 
>> it gets the value as 4. Rest are parsed as 0.
>>
>> The value of 1179648 (0x120000) corresponds to SSL_OP_NO_COMPRESSION 
>> (0x20000) and SSL_OP_ENABLE_MIDDLEBOX_COMPAT. (0x100000)
>>
>>
>> Now lets reproduce the issue:
>>
>> $ curl --no-progress-meter -kx 127.0.0.1:8080 https://www.jio.com 
>> |grep 'TLS\|SSL'
>> <pre>[No Error] (TLS code: 
>> SQUID_TLS_ERR_CONNECT+TLS_LIB_ERR=A000152+TLS_IO_ERR=1)</pre>
>> <p>Failed to establish a secure connection: error:0A000152:SSL 
>> routines::unsafe legacy renegotiation disabled</p>
>>
>> So, as we can see, we are still not able to access the site.
>>
>> Lets see what cache.log has to say.
>>
>> $ tail -f /var/log/squid/cache.log? |grep -i 'openssl\|parsed'
>> 2022/12/28 12:31:09.971 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
>> INFO: TLS parsedOptions(1)=0
>> 2022/12/28 12:31:09.971 kid1| 83,5| PeerOptions.cc(643) 
>> updateContextOptions: set OpenSSL options for context=0x562a53eb14e0, 
>> parsedOptions=0
>> 2022/12/28 12:31:09.971 kid1| 83,5| PeerOptions.cc(645) 
>> updateContextOptions: get OpenSSL options for context=0x562a53eb14e0, 
>> getOptions=1179648
>>
>> Strangely parsedOptions was zero and not 4!
>>
>> Now we can answer your questions as below.
>>
>>
>> On 27/12/22 21:52, Alex Rousskov wrote:
>>> On 12/27/22 10:42, Amish wrote:
>>>> On 26/12/22 21:31, Alex Rousskov wrote:
>>>>> tls_outgoing_options options=0x4,0x40000
>>>
>>>> With numeric hex values, I do not see the ERROR on stderr.
>>>
>>>> But it still does not seem to be working as expected. Squid still 
>>>> does not open the page and gives same legacy negotiation error.
>>>
>>> There are still many unknowns (from my point of view), including:
>>>
>>> 1. Does OpenSSL accept the above options? You ask that question below.
>>
>> Google search shows some projects using OpenSSL v3 where there is 
>> mention to use above option when a similar error occurred to them.
>>
>> But in our case, its clear that squid does not pass value 4 to SSL 
>> context, hence we do not know yet if OpenSSL accepts above options.
>>
>>
>>> 2. Does Squid indeed stare at the server, as expected?
>>> 3. Does Squid apply the accepted options when staring at the server?
>>
>> A comment for parseOptions() in PeerOptions.cc states this:
>>
>> /**
>> ??* Pre-parse TLS options= parameter to be applied when the TLS 
>> objects created.
>> ??* Options must not used in the case of peek or stare bump mode.
>> ??*/
>> void Security::PeerOptions::parseOptions()
>>
>> So it appears that TLS options is NOT used for peek as well as stare. 
>> But why? I am not sure.
>>
>> How do I make squid use it for 'stare' atleast?
>>
>>
>>> 4. Why does TLS negotiation fail despite those options applied,
>>> ?? especially since it succeeds with using openssl s_client
>>
>> It possibly fails because options are not applied by squid.
>>
>> So, where do I check next on why parsedOptions is still set to 0 and 
>> why its not used for 'stare'?
>>
>> Thanks and regards,
>>
>> Amish.
>>


From rousskov at measurement-factory.com  Wed Dec 28 17:27:43 2022
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Wed, 28 Dec 2022 12:27:43 -0500
Subject: [squid-users] LEGACY_SERVER_CONNECT,
 ALLOW_UNSAFE_LEGACY_RENEGOTIATION does not work - SSL bump, OpenSSL 3
In-Reply-To: <71e2a21c-7de0-e60d-2371-a083680bdb45@gmail.com>
References: <f6e9c306-b15c-0e7d-5cf8-7ba036e86fe0@gmail.com>
 <ecc504d5-29f8-c63d-5662-7303b4c4a5f3@measurement-factory.com>
 <63f940db-77b3-c57c-ec00-f174fed51516@gmail.com>
 <17c35a0f-2577-712e-ff3a-5cdd251cb179@measurement-factory.com>
 <57c2e6fe-75cf-756c-3b2a-10addd1d32a2@gmail.com>
 <d447614e-7a22-0969-0257-46095df48c51@measurement-factory.com>
 <71e2a21c-7de0-e60d-2371-a083680bdb45@gmail.com>
Message-ID: <02dc87d5-d49e-754c-1a39-0bd5ceaffe43@measurement-factory.com>

Hi Amish,

     TLS options are used on _both_ sides, in various cases, but there 
are still too many unknowns, and I cannot quickly answer all of your 
questions at once. Sorry. I can only guide you one step at a time.

* If you are sure that SSL_CTX_set_options() is not called when talking 
to the origin server in your setup, then there is no need to hard-code 
those options. Instead, we need to figure out why Squid does not call 
SSL_CTX_set_options(). The best next step is to configure your Squid 
with the following ssl_bump rules and check whether 
SSL_CTX_set_options() is called for the Squid-server connection in that 
case. Sharing access.log records to double check that the origin server 
was contacted may be a good idea.

     ssl_bump stare all
     ssl_bump bump all

* If you are not sure whether SSL_CTX_set_options() is called when 
talking to the origin server in your setup, then hard-coding those 
options may still be the best next step. If it fixes the problem, then 
we will be able to resolve a few variables without the test in the first 
bullet.


HTH,

Alex.


On 12/28/22 11:49, Amish wrote:
> Hi Alex,
> 
> On 28/12/22 21:31, Alex Rousskov wrote:
>> Hi Amish,
>>
>> ??? Squid parsing code is tricky. tls_outgoing_options parsing code is 
>> triply so. Even its authors misinterpret it!
>>
>> I assume you have removed multiple tls_outgoing_options directives 
>> from your configuration before testing. If you have not, please merge 
>> those directives into one and retest. You should still see multiple 
>> parsing paths, in part, due to (unfortunate) Security::PeerOptions 
>> implementation and, in part, due to Squid parsing default options 
>> before Squid parses your actual configuration files.
>>
> Yes I had combined all tls_outgoing_options in to a single directive 
> (but in multiple lines ending with a backslash \). It can be seen in the 
> grep command in my previous email.
> 
> But wait, I have found something.
> 
> And I have a doubt that parsedOptions work only for client to squid side 
> of the connection and does not work for squid to server side of the 
> connection.
> 
> What I did is changed my "http(s)_port" directives to include 
> options=0x4. These directives control options for the client to squid 
> side of TLS connection.
> 
> $ grep 'ssl-bump' /etc/squid/squid.conf
> http_port 8080 ssl-bump generate-host-certificates=on 
> tls-cert=/etc/squid/ssl_cert/squid.pem 
> tls-dh=/etc/squid/ssl_cert/dhparam.pem options=0x4
> https_port 8081 intercept ssl-bump generate-host-certificates=on 
> tls-cert=/etc/squid/ssl_cert/squid.pem 
> tls-dh=/etc/squid/ssl_cert/dhparam.pem options=0x4
> 
> Now lets reproduce the issue:
> $ curl --no-progress-meter -kx 127.0.0.1:8080 https://www.jio.com |grep 
> 'TLS\|SSL'
> <pre>[No Error] (TLS code: 
> SQUID_TLS_ERR_CONNECT+TLS_LIB_ERR=A000152+TLS_IO_ERR=1)</pre>
> <p>Failed to establish a secure connection: error:0A000152:SSL 
> routines::unsafe legacy renegotiation disabled</p>
> 
> Lets see what cache.log has to say:
> 
> $ tail -f /var/log/squid/cache.log? |grep -i 'openssl\|parsed'
> 2022/12/28 21:52:56.532 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
> INFO: TLS parsedOptions(1)=4
> 2022/12/28 21:52:56.532 kid1| 83,5| PeerOptions.cc(643) 
> updateContextOptions: set OpenSSL options for context=0x559075043e30, 
> parsedOptions=4
> 2022/12/28 21:52:56.532 kid1| 83,5| PeerOptions.cc(645) 
> updateContextOptions: get OpenSSL options for context=0x559075043e30, 
> getOptions=1179652
> 
> Bingo!! As we can see, parsedOptions is now set to 4!
> 
> And it is also confirmed by ssl_get_options() - 1179652? = 0x120004 (4 
> means the option is accepted by OpenSSL too)
> 
> But this also means that updateContextOptions() is called ONLY FOR 
> client to squid side (curl to squid) and it is not called for squid to 
> server (jio.com in this case) side.
> 
> The reason being that we do not see updateContextOptions() being called 
> twice for a request. But only once. And that is why request still fails 
> with the negotiation error.
> 
> So where exactly is the call for squid to server side being made?
> 
>> If merging directives does not deliver custom options to 
>> SSL_CTX_set_options(), then let's attack this from the other end: 
>> Supply the right options to each SSL_CTX_set_options() call:
>>
>> ??? const Security::ParsedOptions forcedParsedOptions = 0x4 | 0x40000;
>> ??? SSL_CTX_set_options(ctx.get(), forcedParsedOptions);
>>
>> Does the above temporary hack fix the problem in your test?
> 
> 
> I will try this tomorrow (its late night here).
> 
> But I think I will have to set this somewhere else and NOT in 
> PeerOptions.cc. Because above code appears to be for client to squid side.
> 
> And I need to add forcedParsedOptions to the code which connects squid 
> to server. But where?
> 
> Thank you,
> 
> Amish.
> 
> 
>> Thank you,
>>
>> Alex.
>>
>> On 12/28/22 02:32, Amish wrote:
>>> Hi Alex,
>>>
>>> Thanks again for your reply.
>>>
>>> To find answers to your questions, I added few debugs() lines to 
>>> PeerOptions.cc.
>>>
>>> The diff file (patch) is attached.
>>>
>>> It prints parsedOptions and options retrieved from SSL context and 
>>> session objects at several stages.
>>>
>>> Here is tls_outgoing_options setting:
>>>
>>> $ grep tls_outgoing_options /etc/squid/squid.conf
>>> tls_outgoing_options \
>>> ???? cafile=/etc/ssl/cert.pem \
>>> cipher=ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS \
>>> ???? options=0x4
>>>
>>>
>>> Here is what squid logs on reload i.e. on parsing the squid.conf
>>>
>>> $ systemctl reload squid
>>> $ tail -f /var/log/squid/cache.log? |grep -i 'openssl\|parsed'
>>> 2022/12/28 12:19:30.596 kid1| 83,5| PeerOptions.cc(547) parseOptions: 
>>> INFO: TLS parsedOptions(3)=0
>>> 2022/12/28 12:19:30.598 kid1| 83,5| PeerOptions.cc(547) parseOptions: 
>>> INFO: TLS parsedOptions(3)=0
>>> 2022/12/28 12:19:30.723 kid1| 83,5| PeerOptions.cc(547) parseOptions: 
>>> INFO: TLS parsedOptions(3)=4
>>> 2022/12/28 12:19:30.729 kid1| 83,5| PeerOptions.cc(547) parseOptions: 
>>> INFO: TLS parsedOptions(3)=0
>>> 2022/12/28 12:19:30.729 kid1| 83,5| PeerOptions.cc(547) parseOptions: 
>>> INFO: TLS parsedOptions(3)=0
>>> 2022/12/28 12:19:32.147 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
>>> INFO: TLS parsedOptions(1)=0
>>> 2022/12/28 12:19:32.147 kid1| 83,5| PeerOptions.cc(547) parseOptions: 
>>> INFO: TLS parsedOptions(3)=0
>>> 2022/12/28 12:19:33.524 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
>>> INFO: TLS parsedOptions(1)=0
>>> 2022/12/28 12:19:33.532 kid1| 83,5| PeerOptions.cc(547) parseOptions: 
>>> INFO: TLS parsedOptions(3)=0
>>> 2022/12/28 12:19:33.695 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
>>> INFO: TLS parsedOptions(1)=0
>>> 2022/12/28 12:19:33.695 kid1| 83,5| PeerOptions.cc(643) 
>>> updateContextOptions: set OpenSSL options for context=0x562a5387fe30, 
>>> parsedOptions=0
>>> 2022/12/28 12:19:33.695 kid1| 83,5| PeerOptions.cc(645) 
>>> updateContextOptions: get OpenSSL options for context=0x562a5387fe30, 
>>> getOptions=1179648
>>
>>> 2022/12/28 12:19:33.708 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
>>> INFO: TLS parsedOptions(1)=0
>>> 2022/12/28 12:19:33.708 kid1| 83,5| PeerOptions.cc(643) 
>>> updateContextOptions: set OpenSSL options for context=0x562a53e6e740, 
>>> parsedOptions=0
>>> 2022/12/28 12:19:33.708 kid1| 83,5| PeerOptions.cc(645) 
>>> updateContextOptions: get OpenSSL options for context=0x562a53e6e740, 
>>> getOptions=1179648
>>>
>>> It seems that squid parses the options multiple times and only once 
>>> it gets the value as 4. Rest are parsed as 0.
>>>
>>> The value of 1179648 (0x120000) corresponds to SSL_OP_NO_COMPRESSION 
>>> (0x20000) and SSL_OP_ENABLE_MIDDLEBOX_COMPAT. (0x100000)
>>>
>>>
>>> Now lets reproduce the issue:
>>>
>>> $ curl --no-progress-meter -kx 127.0.0.1:8080 https://www.jio.com 
>>> |grep 'TLS\|SSL'
>>> <pre>[No Error] (TLS code: 
>>> SQUID_TLS_ERR_CONNECT+TLS_LIB_ERR=A000152+TLS_IO_ERR=1)</pre>
>>> <p>Failed to establish a secure connection: error:0A000152:SSL 
>>> routines::unsafe legacy renegotiation disabled</p>
>>>
>>> So, as we can see, we are still not able to access the site.
>>>
>>> Lets see what cache.log has to say.
>>>
>>> $ tail -f /var/log/squid/cache.log? |grep -i 'openssl\|parsed'
>>> 2022/12/28 12:31:09.971 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
>>> INFO: TLS parsedOptions(1)=0
>>> 2022/12/28 12:31:09.971 kid1| 83,5| PeerOptions.cc(643) 
>>> updateContextOptions: set OpenSSL options for context=0x562a53eb14e0, 
>>> parsedOptions=0
>>> 2022/12/28 12:31:09.971 kid1| 83,5| PeerOptions.cc(645) 
>>> updateContextOptions: get OpenSSL options for context=0x562a53eb14e0, 
>>> getOptions=1179648
>>>
>>> Strangely parsedOptions was zero and not 4!
>>>
>>> Now we can answer your questions as below.
>>>
>>>
>>> On 27/12/22 21:52, Alex Rousskov wrote:
>>>> On 12/27/22 10:42, Amish wrote:
>>>>> On 26/12/22 21:31, Alex Rousskov wrote:
>>>>>> tls_outgoing_options options=0x4,0x40000
>>>>
>>>>> With numeric hex values, I do not see the ERROR on stderr.
>>>>
>>>>> But it still does not seem to be working as expected. Squid still 
>>>>> does not open the page and gives same legacy negotiation error.
>>>>
>>>> There are still many unknowns (from my point of view), including:
>>>>
>>>> 1. Does OpenSSL accept the above options? You ask that question below.
>>>
>>> Google search shows some projects using OpenSSL v3 where there is 
>>> mention to use above option when a similar error occurred to them.
>>>
>>> But in our case, its clear that squid does not pass value 4 to SSL 
>>> context, hence we do not know yet if OpenSSL accepts above options.
>>>
>>>
>>>> 2. Does Squid indeed stare at the server, as expected?
>>>> 3. Does Squid apply the accepted options when staring at the server?
>>>
>>> A comment for parseOptions() in PeerOptions.cc states this:
>>>
>>> /**
>>> ??* Pre-parse TLS options= parameter to be applied when the TLS 
>>> objects created.
>>> ??* Options must not used in the case of peek or stare bump mode.
>>> ??*/
>>> void Security::PeerOptions::parseOptions()
>>>
>>> So it appears that TLS options is NOT used for peek as well as stare. 
>>> But why? I am not sure.
>>>
>>> How do I make squid use it for 'stare' atleast?
>>>
>>>
>>>> 4. Why does TLS negotiation fail despite those options applied,
>>>> ?? especially since it succeeds with using openssl s_client
>>>
>>> It possibly fails because options are not applied by squid.
>>>
>>> So, where do I check next on why parsedOptions is still set to 0 and 
>>> why its not used for 'stare'?
>>>
>>> Thanks and regards,
>>>
>>> Amish.
>>>
> _______________________________________________
> squid-users mailing list
> squid-users at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-users



From anon.amish at gmail.com  Thu Dec 29 01:22:10 2022
From: anon.amish at gmail.com (Amish)
Date: Thu, 29 Dec 2022 06:52:10 +0530
Subject: [squid-users] LEGACY_SERVER_CONNECT,
 ALLOW_UNSAFE_LEGACY_RENEGOTIATION does not work - SSL bump, OpenSSL 3
In-Reply-To: <02dc87d5-d49e-754c-1a39-0bd5ceaffe43@measurement-factory.com>
References: <f6e9c306-b15c-0e7d-5cf8-7ba036e86fe0@gmail.com>
 <ecc504d5-29f8-c63d-5662-7303b4c4a5f3@measurement-factory.com>
 <63f940db-77b3-c57c-ec00-f174fed51516@gmail.com>
 <17c35a0f-2577-712e-ff3a-5cdd251cb179@measurement-factory.com>
 <57c2e6fe-75cf-756c-3b2a-10addd1d32a2@gmail.com>
 <d447614e-7a22-0969-0257-46095df48c51@measurement-factory.com>
 <71e2a21c-7de0-e60d-2371-a083680bdb45@gmail.com>
 <02dc87d5-d49e-754c-1a39-0bd5ceaffe43@measurement-factory.com>
Message-ID: <15e2cc6e-1fa3-27d3-b795-61f010b54e5b@gmail.com>

Hi Alex,

Thank you once again!

See replies inline below.

On 28/12/22 22:57, Alex Rousskov wrote:
> Hi Amish,
>
> ??? TLS options are used on _both_ sides, in various cases, but there 
> are still too many unknowns, and I cannot quickly answer all of your 
> questions at once. Sorry. I can only guide you one step at a time.
>
> * If you are sure that SSL_CTX_set_options() is not called when 
> talking to the origin server in your setup, then there is no need to 
> hard-code those options. Instead, we need to figure out why Squid does 
> not call SSL_CTX_set_options(). The best next step is to configure 
> your Squid with the following ssl_bump rules and check whether 
> SSL_CTX_set_options() is called for the Squid-server connection in 
> that case. Sharing access.log records to double check that the origin 
> server was contacted may be a good idea.
>
> ??? ssl_bump stare all
> ??? ssl_bump bump all

I have concluded that updateContextOptions() is not being called for 
squid to origin server as cache.log does not show any calls.

Here is how I concluded it.

$ cat /etc/squid/squid.conf
debug_options 83,6
ssl_bump stare all
ssl_bump bump all

tls_outgoing_options \
 ??? cafile=/etc/ssl/cert.pem \
cipher=ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS 
\
 ??? options=0x40000

http_port 3128 intercept
http_port 8080 ssl-bump generate-host-certificates=on 
tls-cert=/etc/squid/ssl_cert/squid.pem 
tls-dh=/etc/squid/ssl_cert/dhparam.pem options=0x4
https_port 8081 intercept ssl-bump generate-host-certificates=on 
tls-cert=/etc/squid/ssl_cert/squid.pem 
tls-dh=/etc/squid/ssl_cert/dhparam.pem options=0x4


Note that I have kept different options. 0x40000 for 
tcp_outgoing_options and 0x4 for http(s)_port.

$ systemctl reload squid
$ curl --no-progress-meter -kx 127.0.0.1:8080 'https://www.jio.com/?foo=bar'
$ tail -f /var/log/squid/cache.log? |grep -i 'openssl\|parsed'
2022/12/29 06:13:04.182 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
INFO: TLS parsedOptions(1)=4
2022/12/29 06:13:04.182 kid1| 83,5| PeerOptions.cc(643) 
updateContextOptions: set OpenSSL options for context=0x559210db6b20, 
parsedOptions=4
2022/12/29 06:13:04.182 kid1| 83,5| PeerOptions.cc(645) 
updateContextOptions: get OpenSSL options for context=0x559210db6b20, 
getOptions=1179652

parsedOptions is 4 which squid picked up from http_port line.

$ tail -f /var/log/squid/access.log
1672274753.787?? 1290 127.0.0.1 NONE_NONE/200 0 CONNECT www.jio.com:443 
local HIER_NONE/- -
1672274753.789????? 0 127.0.0.1 NONE_NONE/503 4343 GET 
https://www.jio.com/?foo=bar - HIER_NONE/- text/html

SSL Bumping is working fine as squid is able to find full HTTPS URL 
including CGI parameters.

But just to double check that SSL bumping is working fine, we try 
accessing Google:

$ curl --no-progress-meter -kx 127.0.0.1:8080 'https://google.com/?foo=bar'
$ tail -f /var/log/squid/access.log
1672274850.924?? 1120 127.0.0.1 NONE_NONE/200 0 CONNECT google.com:443 
local HIER_DIRECT/2404:6800:4009:81d::200e -
1672274851.000???? 75 127.0.0.1 TCP_MISS/301 1041 GET 
https://google.com/?foo=bar local HIER_DIRECT/2404:6800:4009:81d::200e 
text/html

Google.com is accessed successfully and access.log also shows the same 
with full HTTPS URL.

Now I reversed the options. Setting the options as 0x4 for 
tcp_outgoing_options and 0x40000 for http(s)_port.

$ cat /etc/squid/squid.conf
tls_outgoing_options \
...
 ??? options=0x4
...
http_port 8080 ssl-bump generate-host-certificates=on 
tls-cert=/etc/squid/ssl_cert/squid.pem 
tls-dh=/etc/squid/ssl_cert/dhparam.pem options=0x40000
https_port 8081 intercept ssl-bump generate-host-certificates=on 
tls-cert=/etc/squid/ssl_cert/squid.pem 
tls-dh=/etc/squid/ssl_cert/dhparam.pem options=0x40000

$ systemctl reload squid
$ curl --no-progress-meter -kx 127.0.0.1:8080 https://www.jio.com/?foo=bar'
$ tail -f /var/log/squid/cache.log? |grep -i 'openssl\|parsed'
2022/12/29 06:29:30.106 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
INFO: TLS parsedOptions(1)=262144
2022/12/29 06:29:30.106 kid1| 83,5| PeerOptions.cc(643) 
updateContextOptions: set OpenSSL options for context=0x559211c674e0, 
parsedOptions=262144
2022/12/29 06:29:30.106 kid1| 83,5| PeerOptions.cc(645) 
updateContextOptions: get OpenSSL options for context=0x559211c674e0, 
getOptions=1441792

Note: 262144 is 0x40000 = SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION.
And 1441792 is 0x160000 (i.e. 0x100000 = SSL_OP_ENABLE_MIDDLEBOX_COMPAT 
| 0x40000 | 0x20000 = SSL_OP_NO_COMPRESSION)

$ tail -f /var/log/squid/access.log
1672275570.422??? 325 127.0.0.1 NONE_NONE/200 0 CONNECT www.jio.com:443 
local HIER_NONE/- -
1672275570.423????? 0 127.0.0.1 NONE_NONE/503 4343 GET 
https://www.jio.com/?foo=bar - HIER_NONE/- text/html

So from above two squid.conf settings we can conclude that 
updateContextOptions() and hence SSL_CTX_set_options() is getting called 
only for client to squid side of the connection and not squid to origin 
side of the connection.

Now we need to find, where the server side connection happens OR why 
updateContextOptions() is not called for squid to origin server connections.

Any idea?

Thanks and regards

Amish

>
> * If you are not sure whether SSL_CTX_set_options() is called when 
> talking to the origin server in your setup, then hard-coding those 
> options may still be the best next step. If it fixes the problem, then 
> we will be able to resolve a few variables without the test in the 
> first bullet.
>
>
> HTH,
>
> Alex.
>
>
> On 12/28/22 11:49, Amish wrote:
>> Hi Alex,
>>
>> On 28/12/22 21:31, Alex Rousskov wrote:
>>> Hi Amish,
>>>
>>> ??? Squid parsing code is tricky. tls_outgoing_options parsing code 
>>> is triply so. Even its authors misinterpret it!
>>>
>>> I assume you have removed multiple tls_outgoing_options directives 
>>> from your configuration before testing. If you have not, please 
>>> merge those directives into one and retest. You should still see 
>>> multiple parsing paths, in part, due to (unfortunate) 
>>> Security::PeerOptions implementation and, in part, due to Squid 
>>> parsing default options before Squid parses your actual 
>>> configuration files.
>>>
>> Yes I had combined all tls_outgoing_options in to a single directive 
>> (but in multiple lines ending with a backslash \). It can be seen in 
>> the grep command in my previous email.
>>
>> But wait, I have found something.
>>
>> And I have a doubt that parsedOptions work only for client to squid 
>> side of the connection and does not work for squid to server side of 
>> the connection.
>>
>> What I did is changed my "http(s)_port" directives to include 
>> options=0x4. These directives control options for the client to squid 
>> side of TLS connection.
>>
>> $ grep 'ssl-bump' /etc/squid/squid.conf
>> http_port 8080 ssl-bump generate-host-certificates=on 
>> tls-cert=/etc/squid/ssl_cert/squid.pem 
>> tls-dh=/etc/squid/ssl_cert/dhparam.pem options=0x4
>> https_port 8081 intercept ssl-bump generate-host-certificates=on 
>> tls-cert=/etc/squid/ssl_cert/squid.pem 
>> tls-dh=/etc/squid/ssl_cert/dhparam.pem options=0x4
>>
>> Now lets reproduce the issue:
>> $ curl --no-progress-meter -kx 127.0.0.1:8080 https://www.jio.com 
>> |grep 'TLS\|SSL'
>> <pre>[No Error] (TLS code: 
>> SQUID_TLS_ERR_CONNECT+TLS_LIB_ERR=A000152+TLS_IO_ERR=1)</pre>
>> <p>Failed to establish a secure connection: error:0A000152:SSL 
>> routines::unsafe legacy renegotiation disabled</p>
>>
>> Lets see what cache.log has to say:
>>
>> $ tail -f /var/log/squid/cache.log? |grep -i 'openssl\|parsed'
>> 2022/12/28 21:52:56.532 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
>> INFO: TLS parsedOptions(1)=4
>> 2022/12/28 21:52:56.532 kid1| 83,5| PeerOptions.cc(643) 
>> updateContextOptions: set OpenSSL options for context=0x559075043e30, 
>> parsedOptions=4
>> 2022/12/28 21:52:56.532 kid1| 83,5| PeerOptions.cc(645) 
>> updateContextOptions: get OpenSSL options for context=0x559075043e30, 
>> getOptions=1179652
>>
>> Bingo!! As we can see, parsedOptions is now set to 4!
>>
>> And it is also confirmed by ssl_get_options() - 1179652? = 0x120004 
>> (4 means the option is accepted by OpenSSL too)
>>
>> But this also means that updateContextOptions() is called ONLY FOR 
>> client to squid side (curl to squid) and it is not called for squid 
>> to server (jio.com in this case) side.
>>
>> The reason being that we do not see updateContextOptions() being 
>> called twice for a request. But only once. And that is why request 
>> still fails with the negotiation error.
>>
>> So where exactly is the call for squid to server side being made?
>>
>>> If merging directives does not deliver custom options to 
>>> SSL_CTX_set_options(), then let's attack this from the other end: 
>>> Supply the right options to each SSL_CTX_set_options() call:
>>>
>>> ??? const Security::ParsedOptions forcedParsedOptions = 0x4 | 0x40000;
>>> ??? SSL_CTX_set_options(ctx.get(), forcedParsedOptions);
>>>
>>> Does the above temporary hack fix the problem in your test?
>>
>>
>> I will try this tomorrow (its late night here).
>>
>> But I think I will have to set this somewhere else and NOT in 
>> PeerOptions.cc. Because above code appears to be for client to squid 
>> side.
>>
>> And I need to add forcedParsedOptions to the code which connects 
>> squid to server. But where?
>>
>> Thank you,
>>
>> Amish.
>>
>>
>>> Thank you,
>>>
>>> Alex.
>>>
>>> On 12/28/22 02:32, Amish wrote:
>>>> Hi Alex,
>>>>
>>>> Thanks again for your reply.
>>>>
>>>> To find answers to your questions, I added few debugs() lines to 
>>>> PeerOptions.cc.
>>>>
>>>> The diff file (patch) is attached.
>>>>
>>>> It prints parsedOptions and options retrieved from SSL context and 
>>>> session objects at several stages.
>>>>
>>>> Here is tls_outgoing_options setting:
>>>>
>>>> $ grep tls_outgoing_options /etc/squid/squid.conf
>>>> tls_outgoing_options \
>>>> ???? cafile=/etc/ssl/cert.pem \
>>>> cipher=ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS 
>>>> \
>>>> ???? options=0x4
>>>>
>>>>
>>>> Here is what squid logs on reload i.e. on parsing the squid.conf
>>>>
>>>> $ systemctl reload squid
>>>> $ tail -f /var/log/squid/cache.log? |grep -i 'openssl\|parsed'
>>>> 2022/12/28 12:19:30.596 kid1| 83,5| PeerOptions.cc(547) 
>>>> parseOptions: INFO: TLS parsedOptions(3)=0
>>>> 2022/12/28 12:19:30.598 kid1| 83,5| PeerOptions.cc(547) 
>>>> parseOptions: INFO: TLS parsedOptions(3)=0
>>>> 2022/12/28 12:19:30.723 kid1| 83,5| PeerOptions.cc(547) 
>>>> parseOptions: INFO: TLS parsedOptions(3)=4
>>>> 2022/12/28 12:19:30.729 kid1| 83,5| PeerOptions.cc(547) 
>>>> parseOptions: INFO: TLS parsedOptions(3)=0
>>>> 2022/12/28 12:19:30.729 kid1| 83,5| PeerOptions.cc(547) 
>>>> parseOptions: INFO: TLS parsedOptions(3)=0
>>>> 2022/12/28 12:19:32.147 kid1| 83,5| PeerOptions.cc(447) 
>>>> parseOptions: INFO: TLS parsedOptions(1)=0
>>>> 2022/12/28 12:19:32.147 kid1| 83,5| PeerOptions.cc(547) 
>>>> parseOptions: INFO: TLS parsedOptions(3)=0
>>>> 2022/12/28 12:19:33.524 kid1| 83,5| PeerOptions.cc(447) 
>>>> parseOptions: INFO: TLS parsedOptions(1)=0
>>>> 2022/12/28 12:19:33.532 kid1| 83,5| PeerOptions.cc(547) 
>>>> parseOptions: INFO: TLS parsedOptions(3)=0
>>>> 2022/12/28 12:19:33.695 kid1| 83,5| PeerOptions.cc(447) 
>>>> parseOptions: INFO: TLS parsedOptions(1)=0
>>>> 2022/12/28 12:19:33.695 kid1| 83,5| PeerOptions.cc(643) 
>>>> updateContextOptions: set OpenSSL options for 
>>>> context=0x562a5387fe30, parsedOptions=0
>>>> 2022/12/28 12:19:33.695 kid1| 83,5| PeerOptions.cc(645) 
>>>> updateContextOptions: get OpenSSL options for 
>>>> context=0x562a5387fe30, getOptions=1179648
>>>
>>>> 2022/12/28 12:19:33.708 kid1| 83,5| PeerOptions.cc(447) 
>>>> parseOptions: INFO: TLS parsedOptions(1)=0
>>>> 2022/12/28 12:19:33.708 kid1| 83,5| PeerOptions.cc(643) 
>>>> updateContextOptions: set OpenSSL options for 
>>>> context=0x562a53e6e740, parsedOptions=0
>>>> 2022/12/28 12:19:33.708 kid1| 83,5| PeerOptions.cc(645) 
>>>> updateContextOptions: get OpenSSL options for 
>>>> context=0x562a53e6e740, getOptions=1179648
>>>>
>>>> It seems that squid parses the options multiple times and only once 
>>>> it gets the value as 4. Rest are parsed as 0.
>>>>
>>>> The value of 1179648 (0x120000) corresponds to 
>>>> SSL_OP_NO_COMPRESSION (0x20000) and SSL_OP_ENABLE_MIDDLEBOX_COMPAT. 
>>>> (0x100000)
>>>>
>>>>
>>>> Now lets reproduce the issue:
>>>>
>>>> $ curl --no-progress-meter -kx 127.0.0.1:8080 https://www.jio.com 
>>>> |grep 'TLS\|SSL'
>>>> <pre>[No Error] (TLS code: 
>>>> SQUID_TLS_ERR_CONNECT+TLS_LIB_ERR=A000152+TLS_IO_ERR=1)</pre>
>>>> <p>Failed to establish a secure connection: error:0A000152:SSL 
>>>> routines::unsafe legacy renegotiation disabled</p>
>>>>
>>>> So, as we can see, we are still not able to access the site.
>>>>
>>>> Lets see what cache.log has to say.
>>>>
>>>> $ tail -f /var/log/squid/cache.log? |grep -i 'openssl\|parsed'
>>>> 2022/12/28 12:31:09.971 kid1| 83,5| PeerOptions.cc(447) 
>>>> parseOptions: INFO: TLS parsedOptions(1)=0
>>>> 2022/12/28 12:31:09.971 kid1| 83,5| PeerOptions.cc(643) 
>>>> updateContextOptions: set OpenSSL options for 
>>>> context=0x562a53eb14e0, parsedOptions=0
>>>> 2022/12/28 12:31:09.971 kid1| 83,5| PeerOptions.cc(645) 
>>>> updateContextOptions: get OpenSSL options for 
>>>> context=0x562a53eb14e0, getOptions=1179648
>>>>
>>>> Strangely parsedOptions was zero and not 4!
>>>>
>>>> Now we can answer your questions as below.
>>>>
>>>>
>>>> On 27/12/22 21:52, Alex Rousskov wrote:
>>>>> On 12/27/22 10:42, Amish wrote:
>>>>>> On 26/12/22 21:31, Alex Rousskov wrote:
>>>>>>> tls_outgoing_options options=0x4,0x40000
>>>>>
>>>>>> With numeric hex values, I do not see the ERROR on stderr.
>>>>>
>>>>>> But it still does not seem to be working as expected. Squid still 
>>>>>> does not open the page and gives same legacy negotiation error.
>>>>>
>>>>> There are still many unknowns (from my point of view), including:
>>>>>
>>>>> 1. Does OpenSSL accept the above options? You ask that question 
>>>>> below.
>>>>
>>>> Google search shows some projects using OpenSSL v3 where there is 
>>>> mention to use above option when a similar error occurred to them.
>>>>
>>>> But in our case, its clear that squid does not pass value 4 to SSL 
>>>> context, hence we do not know yet if OpenSSL accepts above options.
>>>>
>>>>
>>>>> 2. Does Squid indeed stare at the server, as expected?
>>>>> 3. Does Squid apply the accepted options when staring at the server?
>>>>
>>>> A comment for parseOptions() in PeerOptions.cc states this:
>>>>
>>>> /**
>>>> ??* Pre-parse TLS options= parameter to be applied when the TLS 
>>>> objects created.
>>>> ??* Options must not used in the case of peek or stare bump mode.
>>>> ??*/
>>>> void Security::PeerOptions::parseOptions()
>>>>
>>>> So it appears that TLS options is NOT used for peek as well as 
>>>> stare. But why? I am not sure.
>>>>
>>>> How do I make squid use it for 'stare' atleast?
>>>>
>>>>
>>>>> 4. Why does TLS negotiation fail despite those options applied,
>>>>> ?? especially since it succeeds with using openssl s_client
>>>>
>>>> It possibly fails because options are not applied by squid.
>>>>
>>>> So, where do I check next on why parsedOptions is still set to 0 
>>>> and why its not used for 'stare'?
>>>>
>>>> Thanks and regards,
>>>>
>>>> Amish.
>>>>
>> _______________________________________________
>> squid-users mailing list
>> squid-users at lists.squid-cache.org
>> http://lists.squid-cache.org/listinfo/squid-users
>
> _______________________________________________
> squid-users mailing list
> squid-users at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-users


From rousskov at measurement-factory.com  Thu Dec 29 02:44:33 2022
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Wed, 28 Dec 2022 21:44:33 -0500
Subject: [squid-users] LEGACY_SERVER_CONNECT,
 ALLOW_UNSAFE_LEGACY_RENEGOTIATION does not work - SSL bump, OpenSSL 3
In-Reply-To: <15e2cc6e-1fa3-27d3-b795-61f010b54e5b@gmail.com>
References: <f6e9c306-b15c-0e7d-5cf8-7ba036e86fe0@gmail.com>
 <ecc504d5-29f8-c63d-5662-7303b4c4a5f3@measurement-factory.com>
 <63f940db-77b3-c57c-ec00-f174fed51516@gmail.com>
 <17c35a0f-2577-712e-ff3a-5cdd251cb179@measurement-factory.com>
 <57c2e6fe-75cf-756c-3b2a-10addd1d32a2@gmail.com>
 <d447614e-7a22-0969-0257-46095df48c51@measurement-factory.com>
 <71e2a21c-7de0-e60d-2371-a083680bdb45@gmail.com>
 <02dc87d5-d49e-754c-1a39-0bd5ceaffe43@measurement-factory.com>
 <15e2cc6e-1fa3-27d3-b795-61f010b54e5b@gmail.com>
Message-ID: <d0fc0698-f750-4f34-fdc1-3af163b47cae@measurement-factory.com>

Hi Amish,

     Thank you for updating test results. I have a working theory: 
Staring SslBump disregards parsed tcp_outgoing_options since commit 
f233022. That commit message explains why tcp_outgoing_options should be 
ignored when peeking at the server. The message does not explain why 
_staring_ mode got penalized as well, but I suspect that Squid had only 
one context to use for both modes, so staring mode had to follow the 
peeking code lead...

You can test that theory by replacing "false" with "true" in 
Security::ProxyOutgoingConfig.createClientContext(false) call inside 
configDoConfigure(). Needless to say, doing so may break SslBump 
peeking, but at least we will know that the theory is correct.


HTH,

Alex.


On 12/28/22 20:22, Amish wrote:
> Hi Alex,
> 
> Thank you once again!
> 
> See replies inline below.
> 
> On 28/12/22 22:57, Alex Rousskov wrote:
>> Hi Amish,
>>
>> ??? TLS options are used on _both_ sides, in various cases, but there 
>> are still too many unknowns, and I cannot quickly answer all of your 
>> questions at once. Sorry. I can only guide you one step at a time.
>>
>> * If you are sure that SSL_CTX_set_options() is not called when 
>> talking to the origin server in your setup, then there is no need to 
>> hard-code those options. Instead, we need to figure out why Squid does 
>> not call SSL_CTX_set_options(). The best next step is to configure 
>> your Squid with the following ssl_bump rules and check whether 
>> SSL_CTX_set_options() is called for the Squid-server connection in 
>> that case. Sharing access.log records to double check that the origin 
>> server was contacted may be a good idea.
>>
>> ??? ssl_bump stare all
>> ??? ssl_bump bump all
> 
> I have concluded that updateContextOptions() is not being called for 
> squid to origin server as cache.log does not show any calls.
> 
> Here is how I concluded it.
> 
> $ cat /etc/squid/squid.conf
> debug_options 83,6
> ssl_bump stare all
> ssl_bump bump all
> 
> tls_outgoing_options \
>  ??? cafile=/etc/ssl/cert.pem \
> cipher=ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS \
>  ??? options=0x40000
> 
> http_port 3128 intercept
> http_port 8080 ssl-bump generate-host-certificates=on 
> tls-cert=/etc/squid/ssl_cert/squid.pem 
> tls-dh=/etc/squid/ssl_cert/dhparam.pem options=0x4
> https_port 8081 intercept ssl-bump generate-host-certificates=on 
> tls-cert=/etc/squid/ssl_cert/squid.pem 
> tls-dh=/etc/squid/ssl_cert/dhparam.pem options=0x4
> 
> 
> Note that I have kept different options. 0x40000 for 
> tcp_outgoing_options and 0x4 for http(s)_port.
> 
> $ systemctl reload squid
> $ curl --no-progress-meter -kx 127.0.0.1:8080 
> 'https://www.jio.com/?foo=bar'
> $ tail -f /var/log/squid/cache.log? |grep -i 'openssl\|parsed'
> 2022/12/29 06:13:04.182 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
> INFO: TLS parsedOptions(1)=4
> 2022/12/29 06:13:04.182 kid1| 83,5| PeerOptions.cc(643) 
> updateContextOptions: set OpenSSL options for context=0x559210db6b20, 
> parsedOptions=4
> 2022/12/29 06:13:04.182 kid1| 83,5| PeerOptions.cc(645) 
> updateContextOptions: get OpenSSL options for context=0x559210db6b20, 
> getOptions=1179652
> 
> parsedOptions is 4 which squid picked up from http_port line.
> 
> $ tail -f /var/log/squid/access.log
> 1672274753.787?? 1290 127.0.0.1 NONE_NONE/200 0 CONNECT www.jio.com:443 
> local HIER_NONE/- -
> 1672274753.789????? 0 127.0.0.1 NONE_NONE/503 4343 GET 
> https://www.jio.com/?foo=bar - HIER_NONE/- text/html
> 
> SSL Bumping is working fine as squid is able to find full HTTPS URL 
> including CGI parameters.
> 
> But just to double check that SSL bumping is working fine, we try 
> accessing Google:
> 
> $ curl --no-progress-meter -kx 127.0.0.1:8080 'https://google.com/?foo=bar'
> $ tail -f /var/log/squid/access.log
> 1672274850.924?? 1120 127.0.0.1 NONE_NONE/200 0 CONNECT google.com:443 
> local HIER_DIRECT/2404:6800:4009:81d::200e -
> 1672274851.000???? 75 127.0.0.1 TCP_MISS/301 1041 GET 
> https://google.com/?foo=bar local HIER_DIRECT/2404:6800:4009:81d::200e 
> text/html
> 
> Google.com is accessed successfully and access.log also shows the same 
> with full HTTPS URL.
> 
> Now I reversed the options. Setting the options as 0x4 for 
> tcp_outgoing_options and 0x40000 for http(s)_port.
> 
> $ cat /etc/squid/squid.conf
> tls_outgoing_options \
> ...
>  ??? options=0x4
> ...
> http_port 8080 ssl-bump generate-host-certificates=on 
> tls-cert=/etc/squid/ssl_cert/squid.pem 
> tls-dh=/etc/squid/ssl_cert/dhparam.pem options=0x40000
> https_port 8081 intercept ssl-bump generate-host-certificates=on 
> tls-cert=/etc/squid/ssl_cert/squid.pem 
> tls-dh=/etc/squid/ssl_cert/dhparam.pem options=0x40000
> 
> $ systemctl reload squid
> $ curl --no-progress-meter -kx 127.0.0.1:8080 https://www.jio.com/?foo=bar'
> $ tail -f /var/log/squid/cache.log? |grep -i 'openssl\|parsed'
> 2022/12/29 06:29:30.106 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
> INFO: TLS parsedOptions(1)=262144
> 2022/12/29 06:29:30.106 kid1| 83,5| PeerOptions.cc(643) 
> updateContextOptions: set OpenSSL options for context=0x559211c674e0, 
> parsedOptions=262144
> 2022/12/29 06:29:30.106 kid1| 83,5| PeerOptions.cc(645) 
> updateContextOptions: get OpenSSL options for context=0x559211c674e0, 
> getOptions=1441792
> 
> Note: 262144 is 0x40000 = SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION.
> And 1441792 is 0x160000 (i.e. 0x100000 = SSL_OP_ENABLE_MIDDLEBOX_COMPAT 
> | 0x40000 | 0x20000 = SSL_OP_NO_COMPRESSION)
> 
> $ tail -f /var/log/squid/access.log
> 1672275570.422??? 325 127.0.0.1 NONE_NONE/200 0 CONNECT www.jio.com:443 
> local HIER_NONE/- -
> 1672275570.423????? 0 127.0.0.1 NONE_NONE/503 4343 GET 
> https://www.jio.com/?foo=bar - HIER_NONE/- text/html
> 
> So from above two squid.conf settings we can conclude that 
> updateContextOptions() and hence SSL_CTX_set_options() is getting called 
> only for client to squid side of the connection and not squid to origin 
> side of the connection.
> 
> Now we need to find, where the server side connection happens OR why 
> updateContextOptions() is not called for squid to origin server 
> connections.
> 
> Any idea?
> 
> Thanks and regards
> 
> Amish
> 
>>
>> * If you are not sure whether SSL_CTX_set_options() is called when 
>> talking to the origin server in your setup, then hard-coding those 
>> options may still be the best next step. If it fixes the problem, then 
>> we will be able to resolve a few variables without the test in the 
>> first bullet.
>>
>>
>> HTH,
>>
>> Alex.
>>
>>
>> On 12/28/22 11:49, Amish wrote:
>>> Hi Alex,
>>>
>>> On 28/12/22 21:31, Alex Rousskov wrote:
>>>> Hi Amish,
>>>>
>>>> ??? Squid parsing code is tricky. tls_outgoing_options parsing code 
>>>> is triply so. Even its authors misinterpret it!
>>>>
>>>> I assume you have removed multiple tls_outgoing_options directives 
>>>> from your configuration before testing. If you have not, please 
>>>> merge those directives into one and retest. You should still see 
>>>> multiple parsing paths, in part, due to (unfortunate) 
>>>> Security::PeerOptions implementation and, in part, due to Squid 
>>>> parsing default options before Squid parses your actual 
>>>> configuration files.
>>>>
>>> Yes I had combined all tls_outgoing_options in to a single directive 
>>> (but in multiple lines ending with a backslash \). It can be seen in 
>>> the grep command in my previous email.
>>>
>>> But wait, I have found something.
>>>
>>> And I have a doubt that parsedOptions work only for client to squid 
>>> side of the connection and does not work for squid to server side of 
>>> the connection.
>>>
>>> What I did is changed my "http(s)_port" directives to include 
>>> options=0x4. These directives control options for the client to squid 
>>> side of TLS connection.
>>>
>>> $ grep 'ssl-bump' /etc/squid/squid.conf
>>> http_port 8080 ssl-bump generate-host-certificates=on 
>>> tls-cert=/etc/squid/ssl_cert/squid.pem 
>>> tls-dh=/etc/squid/ssl_cert/dhparam.pem options=0x4
>>> https_port 8081 intercept ssl-bump generate-host-certificates=on 
>>> tls-cert=/etc/squid/ssl_cert/squid.pem 
>>> tls-dh=/etc/squid/ssl_cert/dhparam.pem options=0x4
>>>
>>> Now lets reproduce the issue:
>>> $ curl --no-progress-meter -kx 127.0.0.1:8080 https://www.jio.com 
>>> |grep 'TLS\|SSL'
>>> <pre>[No Error] (TLS code: 
>>> SQUID_TLS_ERR_CONNECT+TLS_LIB_ERR=A000152+TLS_IO_ERR=1)</pre>
>>> <p>Failed to establish a secure connection: error:0A000152:SSL 
>>> routines::unsafe legacy renegotiation disabled</p>
>>>
>>> Lets see what cache.log has to say:
>>>
>>> $ tail -f /var/log/squid/cache.log? |grep -i 'openssl\|parsed'
>>> 2022/12/28 21:52:56.532 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
>>> INFO: TLS parsedOptions(1)=4
>>> 2022/12/28 21:52:56.532 kid1| 83,5| PeerOptions.cc(643) 
>>> updateContextOptions: set OpenSSL options for context=0x559075043e30, 
>>> parsedOptions=4
>>> 2022/12/28 21:52:56.532 kid1| 83,5| PeerOptions.cc(645) 
>>> updateContextOptions: get OpenSSL options for context=0x559075043e30, 
>>> getOptions=1179652
>>>
>>> Bingo!! As we can see, parsedOptions is now set to 4!
>>>
>>> And it is also confirmed by ssl_get_options() - 1179652? = 0x120004 
>>> (4 means the option is accepted by OpenSSL too)
>>>
>>> But this also means that updateContextOptions() is called ONLY FOR 
>>> client to squid side (curl to squid) and it is not called for squid 
>>> to server (jio.com in this case) side.
>>>
>>> The reason being that we do not see updateContextOptions() being 
>>> called twice for a request. But only once. And that is why request 
>>> still fails with the negotiation error.
>>>
>>> So where exactly is the call for squid to server side being made?
>>>
>>>> If merging directives does not deliver custom options to 
>>>> SSL_CTX_set_options(), then let's attack this from the other end: 
>>>> Supply the right options to each SSL_CTX_set_options() call:
>>>>
>>>> ??? const Security::ParsedOptions forcedParsedOptions = 0x4 | 0x40000;
>>>> ??? SSL_CTX_set_options(ctx.get(), forcedParsedOptions);
>>>>
>>>> Does the above temporary hack fix the problem in your test?
>>>
>>>
>>> I will try this tomorrow (its late night here).
>>>
>>> But I think I will have to set this somewhere else and NOT in 
>>> PeerOptions.cc. Because above code appears to be for client to squid 
>>> side.
>>>
>>> And I need to add forcedParsedOptions to the code which connects 
>>> squid to server. But where?
>>>
>>> Thank you,
>>>
>>> Amish.
>>>
>>>
>>>> Thank you,
>>>>
>>>> Alex.
>>>>
>>>> On 12/28/22 02:32, Amish wrote:
>>>>> Hi Alex,
>>>>>
>>>>> Thanks again for your reply.
>>>>>
>>>>> To find answers to your questions, I added few debugs() lines to 
>>>>> PeerOptions.cc.
>>>>>
>>>>> The diff file (patch) is attached.
>>>>>
>>>>> It prints parsedOptions and options retrieved from SSL context and 
>>>>> session objects at several stages.
>>>>>
>>>>> Here is tls_outgoing_options setting:
>>>>>
>>>>> $ grep tls_outgoing_options /etc/squid/squid.conf
>>>>> tls_outgoing_options \
>>>>> ???? cafile=/etc/ssl/cert.pem \
>>>>> cipher=ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS \
>>>>> ???? options=0x4
>>>>>
>>>>>
>>>>> Here is what squid logs on reload i.e. on parsing the squid.conf
>>>>>
>>>>> $ systemctl reload squid
>>>>> $ tail -f /var/log/squid/cache.log? |grep -i 'openssl\|parsed'
>>>>> 2022/12/28 12:19:30.596 kid1| 83,5| PeerOptions.cc(547) 
>>>>> parseOptions: INFO: TLS parsedOptions(3)=0
>>>>> 2022/12/28 12:19:30.598 kid1| 83,5| PeerOptions.cc(547) 
>>>>> parseOptions: INFO: TLS parsedOptions(3)=0
>>>>> 2022/12/28 12:19:30.723 kid1| 83,5| PeerOptions.cc(547) 
>>>>> parseOptions: INFO: TLS parsedOptions(3)=4
>>>>> 2022/12/28 12:19:30.729 kid1| 83,5| PeerOptions.cc(547) 
>>>>> parseOptions: INFO: TLS parsedOptions(3)=0
>>>>> 2022/12/28 12:19:30.729 kid1| 83,5| PeerOptions.cc(547) 
>>>>> parseOptions: INFO: TLS parsedOptions(3)=0
>>>>> 2022/12/28 12:19:32.147 kid1| 83,5| PeerOptions.cc(447) 
>>>>> parseOptions: INFO: TLS parsedOptions(1)=0
>>>>> 2022/12/28 12:19:32.147 kid1| 83,5| PeerOptions.cc(547) 
>>>>> parseOptions: INFO: TLS parsedOptions(3)=0
>>>>> 2022/12/28 12:19:33.524 kid1| 83,5| PeerOptions.cc(447) 
>>>>> parseOptions: INFO: TLS parsedOptions(1)=0
>>>>> 2022/12/28 12:19:33.532 kid1| 83,5| PeerOptions.cc(547) 
>>>>> parseOptions: INFO: TLS parsedOptions(3)=0
>>>>> 2022/12/28 12:19:33.695 kid1| 83,5| PeerOptions.cc(447) 
>>>>> parseOptions: INFO: TLS parsedOptions(1)=0
>>>>> 2022/12/28 12:19:33.695 kid1| 83,5| PeerOptions.cc(643) 
>>>>> updateContextOptions: set OpenSSL options for 
>>>>> context=0x562a5387fe30, parsedOptions=0
>>>>> 2022/12/28 12:19:33.695 kid1| 83,5| PeerOptions.cc(645) 
>>>>> updateContextOptions: get OpenSSL options for 
>>>>> context=0x562a5387fe30, getOptions=1179648
>>>>
>>>>> 2022/12/28 12:19:33.708 kid1| 83,5| PeerOptions.cc(447) 
>>>>> parseOptions: INFO: TLS parsedOptions(1)=0
>>>>> 2022/12/28 12:19:33.708 kid1| 83,5| PeerOptions.cc(643) 
>>>>> updateContextOptions: set OpenSSL options for 
>>>>> context=0x562a53e6e740, parsedOptions=0
>>>>> 2022/12/28 12:19:33.708 kid1| 83,5| PeerOptions.cc(645) 
>>>>> updateContextOptions: get OpenSSL options for 
>>>>> context=0x562a53e6e740, getOptions=1179648
>>>>>
>>>>> It seems that squid parses the options multiple times and only once 
>>>>> it gets the value as 4. Rest are parsed as 0.
>>>>>
>>>>> The value of 1179648 (0x120000) corresponds to 
>>>>> SSL_OP_NO_COMPRESSION (0x20000) and SSL_OP_ENABLE_MIDDLEBOX_COMPAT. 
>>>>> (0x100000)
>>>>>
>>>>>
>>>>> Now lets reproduce the issue:
>>>>>
>>>>> $ curl --no-progress-meter -kx 127.0.0.1:8080 https://www.jio.com 
>>>>> |grep 'TLS\|SSL'
>>>>> <pre>[No Error] (TLS code: 
>>>>> SQUID_TLS_ERR_CONNECT+TLS_LIB_ERR=A000152+TLS_IO_ERR=1)</pre>
>>>>> <p>Failed to establish a secure connection: error:0A000152:SSL 
>>>>> routines::unsafe legacy renegotiation disabled</p>
>>>>>
>>>>> So, as we can see, we are still not able to access the site.
>>>>>
>>>>> Lets see what cache.log has to say.
>>>>>
>>>>> $ tail -f /var/log/squid/cache.log? |grep -i 'openssl\|parsed'
>>>>> 2022/12/28 12:31:09.971 kid1| 83,5| PeerOptions.cc(447) 
>>>>> parseOptions: INFO: TLS parsedOptions(1)=0
>>>>> 2022/12/28 12:31:09.971 kid1| 83,5| PeerOptions.cc(643) 
>>>>> updateContextOptions: set OpenSSL options for 
>>>>> context=0x562a53eb14e0, parsedOptions=0
>>>>> 2022/12/28 12:31:09.971 kid1| 83,5| PeerOptions.cc(645) 
>>>>> updateContextOptions: get OpenSSL options for 
>>>>> context=0x562a53eb14e0, getOptions=1179648
>>>>>
>>>>> Strangely parsedOptions was zero and not 4!
>>>>>
>>>>> Now we can answer your questions as below.
>>>>>
>>>>>
>>>>> On 27/12/22 21:52, Alex Rousskov wrote:
>>>>>> On 12/27/22 10:42, Amish wrote:
>>>>>>> On 26/12/22 21:31, Alex Rousskov wrote:
>>>>>>>> tls_outgoing_options options=0x4,0x40000
>>>>>>
>>>>>>> With numeric hex values, I do not see the ERROR on stderr.
>>>>>>
>>>>>>> But it still does not seem to be working as expected. Squid still 
>>>>>>> does not open the page and gives same legacy negotiation error.
>>>>>>
>>>>>> There are still many unknowns (from my point of view), including:
>>>>>>
>>>>>> 1. Does OpenSSL accept the above options? You ask that question 
>>>>>> below.
>>>>>
>>>>> Google search shows some projects using OpenSSL v3 where there is 
>>>>> mention to use above option when a similar error occurred to them.
>>>>>
>>>>> But in our case, its clear that squid does not pass value 4 to SSL 
>>>>> context, hence we do not know yet if OpenSSL accepts above options.
>>>>>
>>>>>
>>>>>> 2. Does Squid indeed stare at the server, as expected?
>>>>>> 3. Does Squid apply the accepted options when staring at the server?
>>>>>
>>>>> A comment for parseOptions() in PeerOptions.cc states this:
>>>>>
>>>>> /**
>>>>> ??* Pre-parse TLS options= parameter to be applied when the TLS 
>>>>> objects created.
>>>>> ??* Options must not used in the case of peek or stare bump mode.
>>>>> ??*/
>>>>> void Security::PeerOptions::parseOptions()
>>>>>
>>>>> So it appears that TLS options is NOT used for peek as well as 
>>>>> stare. But why? I am not sure.
>>>>>
>>>>> How do I make squid use it for 'stare' atleast?
>>>>>
>>>>>
>>>>>> 4. Why does TLS negotiation fail despite those options applied,
>>>>>> ?? especially since it succeeds with using openssl s_client
>>>>>
>>>>> It possibly fails because options are not applied by squid.
>>>>>
>>>>> So, where do I check next on why parsedOptions is still set to 0 
>>>>> and why its not used for 'stare'?
>>>>>
>>>>> Thanks and regards,
>>>>>
>>>>> Amish.
>>>>>
>>> _______________________________________________
>>> squid-users mailing list
>>> squid-users at lists.squid-cache.org
>>> http://lists.squid-cache.org/listinfo/squid-users
>>
>> _______________________________________________
>> squid-users mailing list
>> squid-users at lists.squid-cache.org
>> http://lists.squid-cache.org/listinfo/squid-users
> _______________________________________________
> squid-users mailing list
> squid-users at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-users



From anon.amish at gmail.com  Thu Dec 29 04:17:44 2022
From: anon.amish at gmail.com (Amish)
Date: Thu, 29 Dec 2022 09:47:44 +0530
Subject: [squid-users] LEGACY_SERVER_CONNECT,
 ALLOW_UNSAFE_LEGACY_RENEGOTIATION does not work - SSL bump, OpenSSL 3
In-Reply-To: <d0fc0698-f750-4f34-fdc1-3af163b47cae@measurement-factory.com>
References: <f6e9c306-b15c-0e7d-5cf8-7ba036e86fe0@gmail.com>
 <ecc504d5-29f8-c63d-5662-7303b4c4a5f3@measurement-factory.com>
 <63f940db-77b3-c57c-ec00-f174fed51516@gmail.com>
 <17c35a0f-2577-712e-ff3a-5cdd251cb179@measurement-factory.com>
 <57c2e6fe-75cf-756c-3b2a-10addd1d32a2@gmail.com>
 <d447614e-7a22-0969-0257-46095df48c51@measurement-factory.com>
 <71e2a21c-7de0-e60d-2371-a083680bdb45@gmail.com>
 <02dc87d5-d49e-754c-1a39-0bd5ceaffe43@measurement-factory.com>
 <15e2cc6e-1fa3-27d3-b795-61f010b54e5b@gmail.com>
 <d0fc0698-f750-4f34-fdc1-3af163b47cae@measurement-factory.com>
Message-ID: <d2c32dbe-c637-9f0d-d047-5fe839847537@gmail.com>

Hi Alex,

On 29/12/22 08:14, Alex Rousskov wrote:
> Hi Amish,
>
> ??? Thank you for updating test results. I have a working theory: 
> Staring SslBump disregards parsed tcp_outgoing_options since commit 
> f233022. That commit message explains why tcp_outgoing_options should 
> be ignored when peeking at the server. The message does not explain 
> why _staring_ mode got penalized as well, but I suspect that Squid had 
> only one context to use for both modes, so staring mode had to follow 
> the peeking code lead...
>
> You can test that theory by replacing "false" with "true" in 
> Security::ProxyOutgoingConfig.createClientContext(false) call inside 
> configDoConfigure(). Needless to say, doing so may break SslBump 
> peeking, but at least we will know that the theory is correct.
>
It worked. Now I can open the site with above changes.

I removed options=0xN from http(s)_port directives which I had added for 
testing.
I also switched back to multiple tcp_outgoing_options directives.

If I DO NOT set tls_outgoing_options as 0x4 then site gives same 
negotiation error.
If I set tls_outgoing_options as 0x4 then site opens successfully.

But funny thing is that I still do not see updateContextOptions() being 
called twice. And it is still called with parsedOptions=0.

$ curl --no-progress-meter -kx 127.0.0.1:8080 https://www.jio.com/
$ tail -f /var/log/squid/cache.log? |grep -i 'openssl\|parsed'
2022/12/29 09:27:32.451 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
INFO: TLS parsedOptions(1)=0
2022/12/29 09:27:32.451 kid1| 83,5| PeerOptions.cc(642) 
updateContextOptions: set OpenSSL options for context=0x5596fd23b5c0, 
parsedOptions=0
2022/12/29 09:27:32.451 kid1| 83,5| PeerOptions.cc(644) 
updateContextOptions: get OpenSSL options for context=0x5596fd23b5c0, 
getOptions=1179648

It appears that squid to origin server connections do not call 
parseOptions() at all. (I may be wrong) and setting of tls options 
happen somewhere else in the code.

Also I noticed one more thing, that there is an additional call to 
updateContextOptions() when squid is re-loaded.

$ systemctl reload squid
$ tail -f /var/log/squid/cache.log? |grep -i 'openssl\|parsed'
2022/12/29 09:44:56.918 kid1| 83,5| PeerOptions.cc(546) parseOptions: 
INFO: TLS parsedOptions(3)=0
2022/12/29 09:44:56.924 kid1| 83,5| PeerOptions.cc(546) parseOptions: 
INFO: TLS parsedOptions(3)=0
2022/12/29 09:44:56.932 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
INFO: TLS parsedOptions(1)=0
2022/12/29 09:44:56.932 kid1| 83,5| PeerOptions.cc(546) parseOptions: 
INFO: TLS parsedOptions(3)=4
2022/12/29 09:44:56.933 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
INFO: TLS parsedOptions(1)=4
2022/12/29 09:44:56.933 kid1| 83,5| PeerOptions.cc(546) parseOptions: 
INFO: TLS parsedOptions(3)=0
2022/12/29 09:44:56.933 kid1| 83,5| PeerOptions.cc(546) parseOptions: 
INFO: TLS parsedOptions(3)=0
2022/12/29 09:44:58.239 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
INFO: TLS parsedOptions(1)=0
2022/12/29 09:44:58.239 kid1| 83,5| PeerOptions.cc(546) parseOptions: 
INFO: TLS parsedOptions(3)=0
2022/12/29 09:44:59.537 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
INFO: TLS parsedOptions(1)=0
2022/12/29 09:44:59.537 kid1| 83,5| PeerOptions.cc(546) parseOptions: 
INFO: TLS parsedOptions(3)=0
2022/12/29 09:44:59.538 kid1| 83,5| PeerOptions.cc(546) parseOptions: 
INFO: TLS parsedOptions(3)=4
2022/12/29 09:44:59.538 kid1| 83,5| PeerOptions.cc(642) 
updateContextOptions: set OpenSSL options for context=0x5596fd3655a0, 
parsedOptions=4
2022/12/29 09:44:59.538 kid1| 83,5| PeerOptions.cc(644) 
updateContextOptions: get OpenSSL options for context=0x5596fd3655a0, 
getOptions=1179652
2022/12/29 09:44:59.687 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
INFO: TLS parsedOptions(1)=0
2022/12/29 09:44:59.687 kid1| 83,5| PeerOptions.cc(642) 
updateContextOptions: set OpenSSL options for context=0x5596fd3f0b00, 
parsedOptions=0
2022/12/29 09:44:59.687 kid1| 83,5| PeerOptions.cc(644) 
updateContextOptions: get OpenSSL options for context=0x5596fd3f0b00, 
getOptions=1179648
2022/12/29 09:44:59.700 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
INFO: TLS parsedOptions(1)=0
2022/12/29 09:44:59.700 kid1| 83,5| PeerOptions.cc(642) 
updateContextOptions: set OpenSSL options for context=0x5596fd228260, 
parsedOptions=0
2022/12/29 09:44:59.700 kid1| 83,5| PeerOptions.cc(644) 
updateContextOptions: get OpenSSL options for context=0x5596fd228260, 
getOptions=1179648

Earlier there used to 4 lines (equal to 2 calls) related to 
updateContextOptions() and now 6 (equal to 3 calls).

Ofcourse its due changing for false to true.

So your theory is correct.

But now what? I have no clue!

Do let me know,

Thank you

Amish

>
> HTH,
>
> Alex.
>
>
> On 12/28/22 20:22, Amish wrote:
>> Hi Alex,
>>
>> Thank you once again!
>>
>> See replies inline below.
>>
>> On 28/12/22 22:57, Alex Rousskov wrote:
>>> Hi Amish,
>>>
>>> ??? TLS options are used on _both_ sides, in various cases, but 
>>> there are still too many unknowns, and I cannot quickly answer all 
>>> of your questions at once. Sorry. I can only guide you one step at a 
>>> time.
>>>
>>> * If you are sure that SSL_CTX_set_options() is not called when 
>>> talking to the origin server in your setup, then there is no need to 
>>> hard-code those options. Instead, we need to figure out why Squid 
>>> does not call SSL_CTX_set_options(). The best next step is to 
>>> configure your Squid with the following ssl_bump rules and check 
>>> whether SSL_CTX_set_options() is called for the Squid-server 
>>> connection in that case. Sharing access.log records to double check 
>>> that the origin server was contacted may be a good idea.
>>>
>>> ??? ssl_bump stare all
>>> ??? ssl_bump bump all
>>
>> I have concluded that updateContextOptions() is not being called for 
>> squid to origin server as cache.log does not show any calls.
>>
>> Here is how I concluded it.
>>
>> $ cat /etc/squid/squid.conf
>> debug_options 83,6
>> ssl_bump stare all
>> ssl_bump bump all
>>
>> tls_outgoing_options \
>> ???? cafile=/etc/ssl/cert.pem \
>> cipher=ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS 
>> \
>> ???? options=0x40000
>>
>> http_port 3128 intercept
>> http_port 8080 ssl-bump generate-host-certificates=on 
>> tls-cert=/etc/squid/ssl_cert/squid.pem 
>> tls-dh=/etc/squid/ssl_cert/dhparam.pem options=0x4
>> https_port 8081 intercept ssl-bump generate-host-certificates=on 
>> tls-cert=/etc/squid/ssl_cert/squid.pem 
>> tls-dh=/etc/squid/ssl_cert/dhparam.pem options=0x4
>>
>>
>> Note that I have kept different options. 0x40000 for 
>> tcp_outgoing_options and 0x4 for http(s)_port.
>>
>> $ systemctl reload squid
>> $ curl --no-progress-meter -kx 127.0.0.1:8080 
>> 'https://www.jio.com/?foo=bar'
>> $ tail -f /var/log/squid/cache.log? |grep -i 'openssl\|parsed'
>> 2022/12/29 06:13:04.182 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
>> INFO: TLS parsedOptions(1)=4
>> 2022/12/29 06:13:04.182 kid1| 83,5| PeerOptions.cc(643) 
>> updateContextOptions: set OpenSSL options for context=0x559210db6b20, 
>> parsedOptions=4
>> 2022/12/29 06:13:04.182 kid1| 83,5| PeerOptions.cc(645) 
>> updateContextOptions: get OpenSSL options for context=0x559210db6b20, 
>> getOptions=1179652
>>
>> parsedOptions is 4 which squid picked up from http_port line.
>>
>> $ tail -f /var/log/squid/access.log
>> 1672274753.787?? 1290 127.0.0.1 NONE_NONE/200 0 CONNECT 
>> www.jio.com:443 local HIER_NONE/- -
>> 1672274753.789????? 0 127.0.0.1 NONE_NONE/503 4343 GET 
>> https://www.jio.com/?foo=bar - HIER_NONE/- text/html
>>
>> SSL Bumping is working fine as squid is able to find full HTTPS URL 
>> including CGI parameters.
>>
>> But just to double check that SSL bumping is working fine, we try 
>> accessing Google:
>>
>> $ curl --no-progress-meter -kx 127.0.0.1:8080 
>> 'https://google.com/?foo=bar'
>> $ tail -f /var/log/squid/access.log
>> 1672274850.924?? 1120 127.0.0.1 NONE_NONE/200 0 CONNECT 
>> google.com:443 local HIER_DIRECT/2404:6800:4009:81d::200e -
>> 1672274851.000???? 75 127.0.0.1 TCP_MISS/301 1041 GET 
>> https://google.com/?foo=bar local 
>> HIER_DIRECT/2404:6800:4009:81d::200e text/html
>>
>> Google.com is accessed successfully and access.log also shows the 
>> same with full HTTPS URL.
>>
>> Now I reversed the options. Setting the options as 0x4 for 
>> tcp_outgoing_options and 0x40000 for http(s)_port.
>>
>> $ cat /etc/squid/squid.conf
>> tls_outgoing_options \
>> ...
>> ???? options=0x4
>> ...
>> http_port 8080 ssl-bump generate-host-certificates=on 
>> tls-cert=/etc/squid/ssl_cert/squid.pem 
>> tls-dh=/etc/squid/ssl_cert/dhparam.pem options=0x40000
>> https_port 8081 intercept ssl-bump generate-host-certificates=on 
>> tls-cert=/etc/squid/ssl_cert/squid.pem 
>> tls-dh=/etc/squid/ssl_cert/dhparam.pem options=0x40000
>>
>> $ systemctl reload squid
>> $ curl --no-progress-meter -kx 127.0.0.1:8080 
>> https://www.jio.com/?foo=bar'
>> $ tail -f /var/log/squid/cache.log? |grep -i 'openssl\|parsed'
>> 2022/12/29 06:29:30.106 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
>> INFO: TLS parsedOptions(1)=262144
>> 2022/12/29 06:29:30.106 kid1| 83,5| PeerOptions.cc(643) 
>> updateContextOptions: set OpenSSL options for context=0x559211c674e0, 
>> parsedOptions=262144
>> 2022/12/29 06:29:30.106 kid1| 83,5| PeerOptions.cc(645) 
>> updateContextOptions: get OpenSSL options for context=0x559211c674e0, 
>> getOptions=1441792
>>
>> Note: 262144 is 0x40000 = SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION.
>> And 1441792 is 0x160000 (i.e. 0x100000 = 
>> SSL_OP_ENABLE_MIDDLEBOX_COMPAT | 0x40000 | 0x20000 = 
>> SSL_OP_NO_COMPRESSION)
>>
>> $ tail -f /var/log/squid/access.log
>> 1672275570.422??? 325 127.0.0.1 NONE_NONE/200 0 CONNECT 
>> www.jio.com:443 local HIER_NONE/- -
>> 1672275570.423????? 0 127.0.0.1 NONE_NONE/503 4343 GET 
>> https://www.jio.com/?foo=bar - HIER_NONE/- text/html
>>
>> So from above two squid.conf settings we can conclude that 
>> updateContextOptions() and hence SSL_CTX_set_options() is getting 
>> called only for client to squid side of the connection and not squid 
>> to origin side of the connection.
>>
>> Now we need to find, where the server side connection happens OR why 
>> updateContextOptions() is not called for squid to origin server 
>> connections.
>>
>> Any idea?
>>
>> Thanks and regards
>>
>> Amish
>>
>>>
>>> * If you are not sure whether SSL_CTX_set_options() is called when 
>>> talking to the origin server in your setup, then hard-coding those 
>>> options may still be the best next step. If it fixes the problem, 
>>> then we will be able to resolve a few variables without the test in 
>>> the first bullet.
>>>
>>>
>>> HTH,
>>>
>>> Alex.
>>>
>>>
>>> On 12/28/22 11:49, Amish wrote:
>>>> Hi Alex,
>>>>
>>>> On 28/12/22 21:31, Alex Rousskov wrote:
>>>>> Hi Amish,
>>>>>
>>>>> ??? Squid parsing code is tricky. tls_outgoing_options parsing 
>>>>> code is triply so. Even its authors misinterpret it!
>>>>>
>>>>> I assume you have removed multiple tls_outgoing_options directives 
>>>>> from your configuration before testing. If you have not, please 
>>>>> merge those directives into one and retest. You should still see 
>>>>> multiple parsing paths, in part, due to (unfortunate) 
>>>>> Security::PeerOptions implementation and, in part, due to Squid 
>>>>> parsing default options before Squid parses your actual 
>>>>> configuration files.
>>>>>
>>>> Yes I had combined all tls_outgoing_options in to a single 
>>>> directive (but in multiple lines ending with a backslash \). It can 
>>>> be seen in the grep command in my previous email.
>>>>
>>>> But wait, I have found something.
>>>>
>>>> And I have a doubt that parsedOptions work only for client to squid 
>>>> side of the connection and does not work for squid to server side 
>>>> of the connection.
>>>>
>>>> What I did is changed my "http(s)_port" directives to include 
>>>> options=0x4. These directives control options for the client to 
>>>> squid side of TLS connection.
>>>>
>>>> $ grep 'ssl-bump' /etc/squid/squid.conf
>>>> http_port 8080 ssl-bump generate-host-certificates=on 
>>>> tls-cert=/etc/squid/ssl_cert/squid.pem 
>>>> tls-dh=/etc/squid/ssl_cert/dhparam.pem options=0x4
>>>> https_port 8081 intercept ssl-bump generate-host-certificates=on 
>>>> tls-cert=/etc/squid/ssl_cert/squid.pem 
>>>> tls-dh=/etc/squid/ssl_cert/dhparam.pem options=0x4
>>>>
>>>> Now lets reproduce the issue:
>>>> $ curl --no-progress-meter -kx 127.0.0.1:8080 https://www.jio.com 
>>>> |grep 'TLS\|SSL'
>>>> <pre>[No Error] (TLS code: 
>>>> SQUID_TLS_ERR_CONNECT+TLS_LIB_ERR=A000152+TLS_IO_ERR=1)</pre>
>>>> <p>Failed to establish a secure connection: error:0A000152:SSL 
>>>> routines::unsafe legacy renegotiation disabled</p>
>>>>
>>>> Lets see what cache.log has to say:
>>>>
>>>> $ tail -f /var/log/squid/cache.log? |grep -i 'openssl\|parsed'
>>>> 2022/12/28 21:52:56.532 kid1| 83,5| PeerOptions.cc(447) 
>>>> parseOptions: INFO: TLS parsedOptions(1)=4
>>>> 2022/12/28 21:52:56.532 kid1| 83,5| PeerOptions.cc(643) 
>>>> updateContextOptions: set OpenSSL options for 
>>>> context=0x559075043e30, parsedOptions=4
>>>> 2022/12/28 21:52:56.532 kid1| 83,5| PeerOptions.cc(645) 
>>>> updateContextOptions: get OpenSSL options for 
>>>> context=0x559075043e30, getOptions=1179652
>>>>
>>>> Bingo!! As we can see, parsedOptions is now set to 4!
>>>>
>>>> And it is also confirmed by ssl_get_options() - 1179652? = 0x120004 
>>>> (4 means the option is accepted by OpenSSL too)
>>>>
>>>> But this also means that updateContextOptions() is called ONLY FOR 
>>>> client to squid side (curl to squid) and it is not called for squid 
>>>> to server (jio.com in this case) side.
>>>>
>>>> The reason being that we do not see updateContextOptions() being 
>>>> called twice for a request. But only once. And that is why request 
>>>> still fails with the negotiation error.
>>>>
>>>> So where exactly is the call for squid to server side being made?
>>>>
>>>>> If merging directives does not deliver custom options to 
>>>>> SSL_CTX_set_options(), then let's attack this from the other end: 
>>>>> Supply the right options to each SSL_CTX_set_options() call:
>>>>>
>>>>> ??? const Security::ParsedOptions forcedParsedOptions = 0x4 | 
>>>>> 0x40000;
>>>>> ??? SSL_CTX_set_options(ctx.get(), forcedParsedOptions);
>>>>>
>>>>> Does the above temporary hack fix the problem in your test?
>>>>
>>>>
>>>> I will try this tomorrow (its late night here).
>>>>
>>>> But I think I will have to set this somewhere else and NOT in 
>>>> PeerOptions.cc. Because above code appears to be for client to 
>>>> squid side.
>>>>
>>>> And I need to add forcedParsedOptions to the code which connects 
>>>> squid to server. But where?
>>>>
>>>> Thank you,
>>>>
>>>> Amish.
>>>>
>>>>
>>>>> Thank you,
>>>>>
>>>>> Alex.
>>>>>
>>>>> On 12/28/22 02:32, Amish wrote:
>>>>>> Hi Alex,
>>>>>>
>>>>>> Thanks again for your reply.
>>>>>>
>>>>>> To find answers to your questions, I added few debugs() lines to 
>>>>>> PeerOptions.cc.
>>>>>>
>>>>>> The diff file (patch) is attached.
>>>>>>
>>>>>> It prints parsedOptions and options retrieved from SSL context 
>>>>>> and session objects at several stages.
>>>>>>
>>>>>> Here is tls_outgoing_options setting:
>>>>>>
>>>>>> $ grep tls_outgoing_options /etc/squid/squid.conf
>>>>>> tls_outgoing_options \
>>>>>> ???? cafile=/etc/ssl/cert.pem \
>>>>>> cipher=ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS 
>>>>>> \
>>>>>> ???? options=0x4
>>>>>>
>>>>>>
>>>>>> Here is what squid logs on reload i.e. on parsing the squid.conf
>>>>>>
>>>>>> $ systemctl reload squid
>>>>>> $ tail -f /var/log/squid/cache.log? |grep -i 'openssl\|parsed'
>>>>>> 2022/12/28 12:19:30.596 kid1| 83,5| PeerOptions.cc(547) 
>>>>>> parseOptions: INFO: TLS parsedOptions(3)=0
>>>>>> 2022/12/28 12:19:30.598 kid1| 83,5| PeerOptions.cc(547) 
>>>>>> parseOptions: INFO: TLS parsedOptions(3)=0
>>>>>> 2022/12/28 12:19:30.723 kid1| 83,5| PeerOptions.cc(547) 
>>>>>> parseOptions: INFO: TLS parsedOptions(3)=4
>>>>>> 2022/12/28 12:19:30.729 kid1| 83,5| PeerOptions.cc(547) 
>>>>>> parseOptions: INFO: TLS parsedOptions(3)=0
>>>>>> 2022/12/28 12:19:30.729 kid1| 83,5| PeerOptions.cc(547) 
>>>>>> parseOptions: INFO: TLS parsedOptions(3)=0
>>>>>> 2022/12/28 12:19:32.147 kid1| 83,5| PeerOptions.cc(447) 
>>>>>> parseOptions: INFO: TLS parsedOptions(1)=0
>>>>>> 2022/12/28 12:19:32.147 kid1| 83,5| PeerOptions.cc(547) 
>>>>>> parseOptions: INFO: TLS parsedOptions(3)=0
>>>>>> 2022/12/28 12:19:33.524 kid1| 83,5| PeerOptions.cc(447) 
>>>>>> parseOptions: INFO: TLS parsedOptions(1)=0
>>>>>> 2022/12/28 12:19:33.532 kid1| 83,5| PeerOptions.cc(547) 
>>>>>> parseOptions: INFO: TLS parsedOptions(3)=0
>>>>>> 2022/12/28 12:19:33.695 kid1| 83,5| PeerOptions.cc(447) 
>>>>>> parseOptions: INFO: TLS parsedOptions(1)=0
>>>>>> 2022/12/28 12:19:33.695 kid1| 83,5| PeerOptions.cc(643) 
>>>>>> updateContextOptions: set OpenSSL options for 
>>>>>> context=0x562a5387fe30, parsedOptions=0
>>>>>> 2022/12/28 12:19:33.695 kid1| 83,5| PeerOptions.cc(645) 
>>>>>> updateContextOptions: get OpenSSL options for 
>>>>>> context=0x562a5387fe30, getOptions=1179648
>>>>>
>>>>>> 2022/12/28 12:19:33.708 kid1| 83,5| PeerOptions.cc(447) 
>>>>>> parseOptions: INFO: TLS parsedOptions(1)=0
>>>>>> 2022/12/28 12:19:33.708 kid1| 83,5| PeerOptions.cc(643) 
>>>>>> updateContextOptions: set OpenSSL options for 
>>>>>> context=0x562a53e6e740, parsedOptions=0
>>>>>> 2022/12/28 12:19:33.708 kid1| 83,5| PeerOptions.cc(645) 
>>>>>> updateContextOptions: get OpenSSL options for 
>>>>>> context=0x562a53e6e740, getOptions=1179648
>>>>>>
>>>>>> It seems that squid parses the options multiple times and only 
>>>>>> once it gets the value as 4. Rest are parsed as 0.
>>>>>>
>>>>>> The value of 1179648 (0x120000) corresponds to 
>>>>>> SSL_OP_NO_COMPRESSION (0x20000) and 
>>>>>> SSL_OP_ENABLE_MIDDLEBOX_COMPAT. (0x100000)
>>>>>>
>>>>>>
>>>>>> Now lets reproduce the issue:
>>>>>>
>>>>>> $ curl --no-progress-meter -kx 127.0.0.1:8080 https://www.jio.com 
>>>>>> |grep 'TLS\|SSL'
>>>>>> <pre>[No Error] (TLS code: 
>>>>>> SQUID_TLS_ERR_CONNECT+TLS_LIB_ERR=A000152+TLS_IO_ERR=1)</pre>
>>>>>> <p>Failed to establish a secure connection: error:0A000152:SSL 
>>>>>> routines::unsafe legacy renegotiation disabled</p>
>>>>>>
>>>>>> So, as we can see, we are still not able to access the site.
>>>>>>
>>>>>> Lets see what cache.log has to say.
>>>>>>
>>>>>> $ tail -f /var/log/squid/cache.log? |grep -i 'openssl\|parsed'
>>>>>> 2022/12/28 12:31:09.971 kid1| 83,5| PeerOptions.cc(447) 
>>>>>> parseOptions: INFO: TLS parsedOptions(1)=0
>>>>>> 2022/12/28 12:31:09.971 kid1| 83,5| PeerOptions.cc(643) 
>>>>>> updateContextOptions: set OpenSSL options for 
>>>>>> context=0x562a53eb14e0, parsedOptions=0
>>>>>> 2022/12/28 12:31:09.971 kid1| 83,5| PeerOptions.cc(645) 
>>>>>> updateContextOptions: get OpenSSL options for 
>>>>>> context=0x562a53eb14e0, getOptions=1179648
>>>>>>
>>>>>> Strangely parsedOptions was zero and not 4!
>>>>>>
>>>>>> Now we can answer your questions as below.
>>>>>>
>>>>>>
>>>>>> On 27/12/22 21:52, Alex Rousskov wrote:
>>>>>>> On 12/27/22 10:42, Amish wrote:
>>>>>>>> On 26/12/22 21:31, Alex Rousskov wrote:
>>>>>>>>> tls_outgoing_options options=0x4,0x40000
>>>>>>>
>>>>>>>> With numeric hex values, I do not see the ERROR on stderr.
>>>>>>>
>>>>>>>> But it still does not seem to be working as expected. Squid 
>>>>>>>> still does not open the page and gives same legacy negotiation 
>>>>>>>> error.
>>>>>>>
>>>>>>> There are still many unknowns (from my point of view), including:
>>>>>>>
>>>>>>> 1. Does OpenSSL accept the above options? You ask that question 
>>>>>>> below.
>>>>>>
>>>>>> Google search shows some projects using OpenSSL v3 where there is 
>>>>>> mention to use above option when a similar error occurred to them.
>>>>>>
>>>>>> But in our case, its clear that squid does not pass value 4 to 
>>>>>> SSL context, hence we do not know yet if OpenSSL accepts above 
>>>>>> options.
>>>>>>
>>>>>>
>>>>>>> 2. Does Squid indeed stare at the server, as expected?
>>>>>>> 3. Does Squid apply the accepted options when staring at the 
>>>>>>> server?
>>>>>>
>>>>>> A comment for parseOptions() in PeerOptions.cc states this:
>>>>>>
>>>>>> /**
>>>>>> ??* Pre-parse TLS options= parameter to be applied when the TLS 
>>>>>> objects created.
>>>>>> ??* Options must not used in the case of peek or stare bump mode.
>>>>>> ??*/
>>>>>> void Security::PeerOptions::parseOptions()
>>>>>>
>>>>>> So it appears that TLS options is NOT used for peek as well as 
>>>>>> stare. But why? I am not sure.
>>>>>>
>>>>>> How do I make squid use it for 'stare' atleast?
>>>>>>
>>>>>>
>>>>>>> 4. Why does TLS negotiation fail despite those options applied,
>>>>>>> ?? especially since it succeeds with using openssl s_client
>>>>>>
>>>>>> It possibly fails because options are not applied by squid.
>>>>>>
>>>>>> So, where do I check next on why parsedOptions is still set to 0 
>>>>>> and why its not used for 'stare'?
>>>>>>
>>>>>> Thanks and regards,
>>>>>>
>>>>>> Amish.
>>>>>>
>>>> _______________________________________________
>>>> squid-users mailing list
>>>> squid-users at lists.squid-cache.org
>>>> http://lists.squid-cache.org/listinfo/squid-users
>>>
>>> _______________________________________________
>>> squid-users mailing list
>>> squid-users at lists.squid-cache.org
>>> http://lists.squid-cache.org/listinfo/squid-users
>> _______________________________________________
>> squid-users mailing list
>> squid-users at lists.squid-cache.org
>> http://lists.squid-cache.org/listinfo/squid-users
>
> _______________________________________________
> squid-users mailing list
> squid-users at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-users


From rousskov at measurement-factory.com  Thu Dec 29 14:53:33 2022
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Thu, 29 Dec 2022 09:53:33 -0500
Subject: [squid-users] LEGACY_SERVER_CONNECT,
 ALLOW_UNSAFE_LEGACY_RENEGOTIATION does not work - SSL bump, OpenSSL 3
In-Reply-To: <d2c32dbe-c637-9f0d-d047-5fe839847537@gmail.com>
References: <f6e9c306-b15c-0e7d-5cf8-7ba036e86fe0@gmail.com>
 <ecc504d5-29f8-c63d-5662-7303b4c4a5f3@measurement-factory.com>
 <63f940db-77b3-c57c-ec00-f174fed51516@gmail.com>
 <17c35a0f-2577-712e-ff3a-5cdd251cb179@measurement-factory.com>
 <57c2e6fe-75cf-756c-3b2a-10addd1d32a2@gmail.com>
 <d447614e-7a22-0969-0257-46095df48c51@measurement-factory.com>
 <71e2a21c-7de0-e60d-2371-a083680bdb45@gmail.com>
 <02dc87d5-d49e-754c-1a39-0bd5ceaffe43@measurement-factory.com>
 <15e2cc6e-1fa3-27d3-b795-61f010b54e5b@gmail.com>
 <d0fc0698-f750-4f34-fdc1-3af163b47cae@measurement-factory.com>
 <d2c32dbe-c637-9f0d-d047-5fe839847537@gmail.com>
Message-ID: <1b6c03a2-6f45-b288-e86c-da36de46c345@measurement-factory.com>

On 12/28/22 23:17, Amish wrote:
> On 29/12/22 08:14, Alex Rousskov wrote:
>> I have a working theory: 
>> Staring SslBump disregards parsed tcp_outgoing_options since commit 
>> f233022. That commit message explains why tcp_outgoing_options should 
>> be ignored when peeking at the server. The message does not explain 
>> why _staring_ mode got penalized as well, but I suspect that Squid had 
>> only one context to use for both modes, so staring mode had to follow 
>> the peeking code lead...
>>
>> You can test that theory by replacing "false" with "true" in 
>> Security::ProxyOutgoingConfig.createClientContext(false) call inside 
>> configDoConfigure(). Needless to say, doing so may break SslBump 
>> peeking, but at least we will know that the theory is correct.


> It worked. Now I can open the site with above changes.

> But funny thing is that I still do not see updateContextOptions() being 
> called twice.

I see multiple configuration-time updateContextOptions() calls in your 
trace and they more-or-less match my expectations. For each 
configuration event, Squid creates a single "TLS context" object for all 
outgoing non-peer connections. I am guessing that, in your trace, that 
object is at 0x5596fd3655a0. The other TLS contexts are probably for 
https_ports and/or TLS cache_peers.


> And it is still called with parsedOptions=0.

AFAICT, context=0x5596fd3655a0 is called with parsedOptions=4.

N.B. The number of calls for a given context object may not really 
matter that much. IIRC, SSL_CTX_set_options() calls (for the same 
context) have cumulative effect -- they do not zero previous options -- 
so just one call with 0x4 is enough to set that option. I do _not_ see 
multiple calls in your log, but this may become important elsewhere.


> $ curl --no-progress-meter -kx 127.0.0.1:8080 https://www.jio.com/
> $ tail -f /var/log/squid/cache.log? |grep -i 'openssl\|parsed'
> 2022/12/29 09:27:32.451 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
> INFO: TLS parsedOptions(1)=0
> 2022/12/29 09:27:32.451 kid1| 83,5| PeerOptions.cc(642) 
> updateContextOptions: set OpenSSL options for context=0x5596fd23b5c0, 
> parsedOptions=0
> 2022/12/29 09:27:32.451 kid1| 83,5| PeerOptions.cc(644) 
> updateContextOptions: get OpenSSL options for context=0x5596fd23b5c0, 
> getOptions=1179648
> 
> It appears that squid to origin server connections do not call 
> parseOptions() at all. (I may be wrong) and setting of tls options 
> happen somewhere else in the code.

Yes, the call happens during configuration time, when the TLS context 
object is created. At runtime, Squid simply reuses that context object 
for new TLS connections. Think of that context object as a set of TLS 
negotiation parameters/settings...


> But now what?

If your Squid never peeks at origin servers (i.e. it always stares) and 
your proxy never serves/secures plain-text "GET https" requests, then 
you can run with the createClientContext(true) hack until somebody 
volunteers a long-term solution (as discussed below).

There are several ways to fix this bug long-term, including these two:

Minimal: Create a TLS context object dedicated to peeking at origin 
servers. It will probably have to be admin-configurable to accomodate 
various TLS v1.2 (and earlier) corner cases, but we can try to start 
without adding support for such configuration. Continue to use the 
existing configurable context for staring and other needs but call 
createClientContext(true) for that existing context.

Flexible: Replace tls_outgoing_options with tls_outgoing or a similar 
directive that supports ACLs. The new directive must be used once for 
each set of context configuration parameters (unlike  the existing 
tls_outgoing_options that could be (mis)used multiple times, 
accumulating some parameters and overwriting others). At configuration 
time, Squid will create as many TLS context objects as there are 
tls_outgoing directives. At runtime, Squid will evaluate ACLs and pick 
the right context object for the current outgoing TLS connection 
attempt. For example, you would be able to configure Squid to use one 
context for peeking at servers and another for staring at them.


Unfortunately, even the minimal solution requires non-trivial 
development work. I do not have enough free time to give you a 
ready-to-use blueprint for its implementation.

https://wiki.squid-cache.org/SquidFaq/AboutSquid#how-to-add-a-new-squid-feature-enhance-of-fix-something


HTH,

Alex.

> On 12/28/22 23:17, Amish wrote:
>> Hi Alex,
>> 
>> On 29/12/22 08:14, Alex Rousskov wrote:
>>> Hi Amish,
>>>
>>>     Thank you for updating test results. I have a working theory: 
>>> Staring SslBump disregards parsed tcp_outgoing_options since commit 
>>> f233022. That commit message explains why tcp_outgoing_options should 
>>> be ignored when peeking at the server. The message does not explain 
>>> why _staring_ mode got penalized as well, but I suspect that Squid had 
>>> only one context to use for both modes, so staring mode had to follow 
>>> the peeking code lead...
>>>
>>> You can test that theory by replacing "false" with "true" in 
>>> Security::ProxyOutgoingConfig.createClientContext(false) call inside 
>>> configDoConfigure(). Needless to say, doing so may break SslBump 
>>> peeking, but at least we will know that the theory is correct.
>>>
>> It worked. Now I can open the site with above changes.
>> 
>> I removed options=0xN from http(s)_port directives which I had added for 
>> testing.
>> I also switched back to multiple tcp_outgoing_options directives.
>> 
>> If I DO NOT set tls_outgoing_options as 0x4 then site gives same 
>> negotiation error.
>> If I set tls_outgoing_options as 0x4 then site opens successfully.
>> 
>> But funny thing is that I still do not see updateContextOptions() being 
>> called twice. And it is still called with parsedOptions=0.
>> 
>> $ curl --no-progress-meter -kx 127.0.0.1:8080 https://www.jio.com/
>> $ tail -f /var/log/squid/cache.log  |grep -i 'openssl\|parsed'
>> 2022/12/29 09:27:32.451 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
>> INFO: TLS parsedOptions(1)=0
>> 2022/12/29 09:27:32.451 kid1| 83,5| PeerOptions.cc(642) 
>> updateContextOptions: set OpenSSL options for context=0x5596fd23b5c0, 
>> parsedOptions=0
>> 2022/12/29 09:27:32.451 kid1| 83,5| PeerOptions.cc(644) 
>> updateContextOptions: get OpenSSL options for context=0x5596fd23b5c0, 
>> getOptions=1179648
>> 
>> It appears that squid to origin server connections do not call 
>> parseOptions() at all. (I may be wrong) and setting of tls options 
>> happen somewhere else in the code.
>> 
>> Also I noticed one more thing, that there is an additional call to 
>> updateContextOptions() when squid is re-loaded.
>> 
>> $ systemctl reload squid
>> $ tail -f /var/log/squid/cache.log  |grep -i 'openssl\|parsed'
>> 2022/12/29 09:44:56.918 kid1| 83,5| PeerOptions.cc(546) parseOptions: 
>> INFO: TLS parsedOptions(3)=0
>> 2022/12/29 09:44:56.924 kid1| 83,5| PeerOptions.cc(546) parseOptions: 
>> INFO: TLS parsedOptions(3)=0
>> 2022/12/29 09:44:56.932 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
>> INFO: TLS parsedOptions(1)=0
>> 2022/12/29 09:44:56.932 kid1| 83,5| PeerOptions.cc(546) parseOptions: 
>> INFO: TLS parsedOptions(3)=4
>> 2022/12/29 09:44:56.933 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
>> INFO: TLS parsedOptions(1)=4
>> 2022/12/29 09:44:56.933 kid1| 83,5| PeerOptions.cc(546) parseOptions: 
>> INFO: TLS parsedOptions(3)=0
>> 2022/12/29 09:44:56.933 kid1| 83,5| PeerOptions.cc(546) parseOptions: 
>> INFO: TLS parsedOptions(3)=0
>> 2022/12/29 09:44:58.239 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
>> INFO: TLS parsedOptions(1)=0
>> 2022/12/29 09:44:58.239 kid1| 83,5| PeerOptions.cc(546) parseOptions: 
>> INFO: TLS parsedOptions(3)=0
>> 2022/12/29 09:44:59.537 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
>> INFO: TLS parsedOptions(1)=0
>> 2022/12/29 09:44:59.537 kid1| 83,5| PeerOptions.cc(546) parseOptions: 
>> INFO: TLS parsedOptions(3)=0
>> 2022/12/29 09:44:59.538 kid1| 83,5| PeerOptions.cc(546) parseOptions: 
>> INFO: TLS parsedOptions(3)=4
>> 2022/12/29 09:44:59.538 kid1| 83,5| PeerOptions.cc(642) 
>> updateContextOptions: set OpenSSL options for context=0x5596fd3655a0, 
>> parsedOptions=4
>> 2022/12/29 09:44:59.538 kid1| 83,5| PeerOptions.cc(644) 
>> updateContextOptions: get OpenSSL options for context=0x5596fd3655a0, 
>> getOptions=1179652
>> 2022/12/29 09:44:59.687 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
>> INFO: TLS parsedOptions(1)=0
>> 2022/12/29 09:44:59.687 kid1| 83,5| PeerOptions.cc(642) 
>> updateContextOptions: set OpenSSL options for context=0x5596fd3f0b00, 
>> parsedOptions=0
>> 2022/12/29 09:44:59.687 kid1| 83,5| PeerOptions.cc(644) 
>> updateContextOptions: get OpenSSL options for context=0x5596fd3f0b00, 
>> getOptions=1179648
>> 2022/12/29 09:44:59.700 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
>> INFO: TLS parsedOptions(1)=0
>> 2022/12/29 09:44:59.700 kid1| 83,5| PeerOptions.cc(642) 
>> updateContextOptions: set OpenSSL options for context=0x5596fd228260, 
>> parsedOptions=0
>> 2022/12/29 09:44:59.700 kid1| 83,5| PeerOptions.cc(644) 
>> updateContextOptions: get OpenSSL options for context=0x5596fd228260, 
>> getOptions=1179648
>> 
>> Earlier there used to 4 lines (equal to 2 calls) related to 
>> updateContextOptions() and now 6 (equal to 3 calls).
>> 
>> Ofcourse its due changing for false to true.
>> 
>> So your theory is correct.
>> 
>> But now what? I have no clue!
>> 
>> Do let me know,
>> 
>> Thank you
>> 
>> Amish



>> On 12/28/22 20:22, Amish wrote:
>>> Hi Alex,
>>>
>>> Thank you once again!
>>>
>>> See replies inline below.
>>>
>>> On 28/12/22 22:57, Alex Rousskov wrote:
>>>> Hi Amish,
>>>>
>>>> ??? TLS options are used on _both_ sides, in various cases, but 
>>>> there are still too many unknowns, and I cannot quickly answer all 
>>>> of your questions at once. Sorry. I can only guide you one step at a 
>>>> time.
>>>>
>>>> * If you are sure that SSL_CTX_set_options() is not called when 
>>>> talking to the origin server in your setup, then there is no need to 
>>>> hard-code those options. Instead, we need to figure out why Squid 
>>>> does not call SSL_CTX_set_options(). The best next step is to 
>>>> configure your Squid with the following ssl_bump rules and check 
>>>> whether SSL_CTX_set_options() is called for the Squid-server 
>>>> connection in that case. Sharing access.log records to double check 
>>>> that the origin server was contacted may be a good idea.
>>>>
>>>> ??? ssl_bump stare all
>>>> ??? ssl_bump bump all
>>>
>>> I have concluded that updateContextOptions() is not being called for 
>>> squid to origin server as cache.log does not show any calls.
>>>
>>> Here is how I concluded it.
>>>
>>> $ cat /etc/squid/squid.conf
>>> debug_options 83,6
>>> ssl_bump stare all
>>> ssl_bump bump all
>>>
>>> tls_outgoing_options \
>>> ???? cafile=/etc/ssl/cert.pem \
>>> cipher=ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS \
>>> ???? options=0x40000
>>>
>>> http_port 3128 intercept
>>> http_port 8080 ssl-bump generate-host-certificates=on 
>>> tls-cert=/etc/squid/ssl_cert/squid.pem 
>>> tls-dh=/etc/squid/ssl_cert/dhparam.pem options=0x4
>>> https_port 8081 intercept ssl-bump generate-host-certificates=on 
>>> tls-cert=/etc/squid/ssl_cert/squid.pem 
>>> tls-dh=/etc/squid/ssl_cert/dhparam.pem options=0x4
>>>
>>>
>>> Note that I have kept different options. 0x40000 for 
>>> tcp_outgoing_options and 0x4 for http(s)_port.
>>>
>>> $ systemctl reload squid
>>> $ curl --no-progress-meter -kx 127.0.0.1:8080 
>>> 'https://www.jio.com/?foo=bar'
>>> $ tail -f /var/log/squid/cache.log? |grep -i 'openssl\|parsed'
>>> 2022/12/29 06:13:04.182 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
>>> INFO: TLS parsedOptions(1)=4
>>> 2022/12/29 06:13:04.182 kid1| 83,5| PeerOptions.cc(643) 
>>> updateContextOptions: set OpenSSL options for context=0x559210db6b20, 
>>> parsedOptions=4
>>> 2022/12/29 06:13:04.182 kid1| 83,5| PeerOptions.cc(645) 
>>> updateContextOptions: get OpenSSL options for context=0x559210db6b20, 
>>> getOptions=1179652
>>>
>>> parsedOptions is 4 which squid picked up from http_port line.
>>>
>>> $ tail -f /var/log/squid/access.log
>>> 1672274753.787?? 1290 127.0.0.1 NONE_NONE/200 0 CONNECT 
>>> www.jio.com:443 local HIER_NONE/- -
>>> 1672274753.789????? 0 127.0.0.1 NONE_NONE/503 4343 GET 
>>> https://www.jio.com/?foo=bar - HIER_NONE/- text/html
>>>
>>> SSL Bumping is working fine as squid is able to find full HTTPS URL 
>>> including CGI parameters.
>>>
>>> But just to double check that SSL bumping is working fine, we try 
>>> accessing Google:
>>>
>>> $ curl --no-progress-meter -kx 127.0.0.1:8080 
>>> 'https://google.com/?foo=bar'
>>> $ tail -f /var/log/squid/access.log
>>> 1672274850.924?? 1120 127.0.0.1 NONE_NONE/200 0 CONNECT 
>>> google.com:443 local HIER_DIRECT/2404:6800:4009:81d::200e -
>>> 1672274851.000???? 75 127.0.0.1 TCP_MISS/301 1041 GET 
>>> https://google.com/?foo=bar local 
>>> HIER_DIRECT/2404:6800:4009:81d::200e text/html
>>>
>>> Google.com is accessed successfully and access.log also shows the 
>>> same with full HTTPS URL.
>>>
>>> Now I reversed the options. Setting the options as 0x4 for 
>>> tcp_outgoing_options and 0x40000 for http(s)_port.
>>>
>>> $ cat /etc/squid/squid.conf
>>> tls_outgoing_options \
>>> ...
>>> ???? options=0x4
>>> ...
>>> http_port 8080 ssl-bump generate-host-certificates=on 
>>> tls-cert=/etc/squid/ssl_cert/squid.pem 
>>> tls-dh=/etc/squid/ssl_cert/dhparam.pem options=0x40000
>>> https_port 8081 intercept ssl-bump generate-host-certificates=on 
>>> tls-cert=/etc/squid/ssl_cert/squid.pem 
>>> tls-dh=/etc/squid/ssl_cert/dhparam.pem options=0x40000
>>>
>>> $ systemctl reload squid
>>> $ curl --no-progress-meter -kx 127.0.0.1:8080 
>>> https://www.jio.com/?foo=bar'
>>> $ tail -f /var/log/squid/cache.log? |grep -i 'openssl\|parsed'
>>> 2022/12/29 06:29:30.106 kid1| 83,5| PeerOptions.cc(447) parseOptions: 
>>> INFO: TLS parsedOptions(1)=262144
>>> 2022/12/29 06:29:30.106 kid1| 83,5| PeerOptions.cc(643) 
>>> updateContextOptions: set OpenSSL options for context=0x559211c674e0, 
>>> parsedOptions=262144
>>> 2022/12/29 06:29:30.106 kid1| 83,5| PeerOptions.cc(645) 
>>> updateContextOptions: get OpenSSL options for context=0x559211c674e0, 
>>> getOptions=1441792
>>>
>>> Note: 262144 is 0x40000 = SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION.
>>> And 1441792 is 0x160000 (i.e. 0x100000 = 
>>> SSL_OP_ENABLE_MIDDLEBOX_COMPAT | 0x40000 | 0x20000 = 
>>> SSL_OP_NO_COMPRESSION)
>>>
>>> $ tail -f /var/log/squid/access.log
>>> 1672275570.422??? 325 127.0.0.1 NONE_NONE/200 0 CONNECT 
>>> www.jio.com:443 local HIER_NONE/- -
>>> 1672275570.423????? 0 127.0.0.1 NONE_NONE/503 4343 GET 
>>> https://www.jio.com/?foo=bar - HIER_NONE/- text/html
>>>
>>> So from above two squid.conf settings we can conclude that 
>>> updateContextOptions() and hence SSL_CTX_set_options() is getting 
>>> called only for client to squid side of the connection and not squid 
>>> to origin side of the connection.
>>>
>>> Now we need to find, where the server side connection happens OR why 
>>> updateContextOptions() is not called for squid to origin server 
>>> connections.
>>>
>>> Any idea?
>>>
>>> Thanks and regards
>>>
>>> Amish
>>>
>>>>
>>>> * If you are not sure whether SSL_CTX_set_options() is called when 
>>>> talking to the origin server in your setup, then hard-coding those 
>>>> options may still be the best next step. If it fixes the problem, 
>>>> then we will be able to resolve a few variables without the test in 
>>>> the first bullet.
>>>>
>>>>
>>>> HTH,
>>>>
>>>> Alex.
>>>>
>>>>
>>>> On 12/28/22 11:49, Amish wrote:
>>>>> Hi Alex,
>>>>>
>>>>> On 28/12/22 21:31, Alex Rousskov wrote:
>>>>>> Hi Amish,
>>>>>>
>>>>>> ??? Squid parsing code is tricky. tls_outgoing_options parsing 
>>>>>> code is triply so. Even its authors misinterpret it!
>>>>>>
>>>>>> I assume you have removed multiple tls_outgoing_options directives 
>>>>>> from your configuration before testing. If you have not, please 
>>>>>> merge those directives into one and retest. You should still see 
>>>>>> multiple parsing paths, in part, due to (unfortunate) 
>>>>>> Security::PeerOptions implementation and, in part, due to Squid 
>>>>>> parsing default options before Squid parses your actual 
>>>>>> configuration files.
>>>>>>
>>>>> Yes I had combined all tls_outgoing_options in to a single 
>>>>> directive (but in multiple lines ending with a backslash \). It can 
>>>>> be seen in the grep command in my previous email.
>>>>>
>>>>> But wait, I have found something.
>>>>>
>>>>> And I have a doubt that parsedOptions work only for client to squid 
>>>>> side of the connection and does not work for squid to server side 
>>>>> of the connection.
>>>>>
>>>>> What I did is changed my "http(s)_port" directives to include 
>>>>> options=0x4. These directives control options for the client to 
>>>>> squid side of TLS connection.
>>>>>
>>>>> $ grep 'ssl-bump' /etc/squid/squid.conf
>>>>> http_port 8080 ssl-bump generate-host-certificates=on 
>>>>> tls-cert=/etc/squid/ssl_cert/squid.pem 
>>>>> tls-dh=/etc/squid/ssl_cert/dhparam.pem options=0x4
>>>>> https_port 8081 intercept ssl-bump generate-host-certificates=on 
>>>>> tls-cert=/etc/squid/ssl_cert/squid.pem 
>>>>> tls-dh=/etc/squid/ssl_cert/dhparam.pem options=0x4
>>>>>
>>>>> Now lets reproduce the issue:
>>>>> $ curl --no-progress-meter -kx 127.0.0.1:8080 https://www.jio.com 
>>>>> |grep 'TLS\|SSL'
>>>>> <pre>[No Error] (TLS code: 
>>>>> SQUID_TLS_ERR_CONNECT+TLS_LIB_ERR=A000152+TLS_IO_ERR=1)</pre>
>>>>> <p>Failed to establish a secure connection: error:0A000152:SSL 
>>>>> routines::unsafe legacy renegotiation disabled</p>
>>>>>
>>>>> Lets see what cache.log has to say:
>>>>>
>>>>> $ tail -f /var/log/squid/cache.log? |grep -i 'openssl\|parsed'
>>>>> 2022/12/28 21:52:56.532 kid1| 83,5| PeerOptions.cc(447) 
>>>>> parseOptions: INFO: TLS parsedOptions(1)=4
>>>>> 2022/12/28 21:52:56.532 kid1| 83,5| PeerOptions.cc(643) 
>>>>> updateContextOptions: set OpenSSL options for 
>>>>> context=0x559075043e30, parsedOptions=4
>>>>> 2022/12/28 21:52:56.532 kid1| 83,5| PeerOptions.cc(645) 
>>>>> updateContextOptions: get OpenSSL options for 
>>>>> context=0x559075043e30, getOptions=1179652
>>>>>
>>>>> Bingo!! As we can see, parsedOptions is now set to 4!
>>>>>
>>>>> And it is also confirmed by ssl_get_options() - 1179652? = 0x120004 
>>>>> (4 means the option is accepted by OpenSSL too)
>>>>>
>>>>> But this also means that updateContextOptions() is called ONLY FOR 
>>>>> client to squid side (curl to squid) and it is not called for squid 
>>>>> to server (jio.com in this case) side.
>>>>>
>>>>> The reason being that we do not see updateContextOptions() being 
>>>>> called twice for a request. But only once. And that is why request 
>>>>> still fails with the negotiation error.
>>>>>
>>>>> So where exactly is the call for squid to server side being made?
>>>>>
>>>>>> If merging directives does not deliver custom options to 
>>>>>> SSL_CTX_set_options(), then let's attack this from the other end: 
>>>>>> Supply the right options to each SSL_CTX_set_options() call:
>>>>>>
>>>>>> ??? const Security::ParsedOptions forcedParsedOptions = 0x4 | 
>>>>>> 0x40000;
>>>>>> ??? SSL_CTX_set_options(ctx.get(), forcedParsedOptions);
>>>>>>
>>>>>> Does the above temporary hack fix the problem in your test?
>>>>>
>>>>>
>>>>> I will try this tomorrow (its late night here).
>>>>>
>>>>> But I think I will have to set this somewhere else and NOT in 
>>>>> PeerOptions.cc. Because above code appears to be for client to 
>>>>> squid side.
>>>>>
>>>>> And I need to add forcedParsedOptions to the code which connects 
>>>>> squid to server. But where?
>>>>>
>>>>> Thank you,
>>>>>
>>>>> Amish.
>>>>>
>>>>>
>>>>>> Thank you,
>>>>>>
>>>>>> Alex.
>>>>>>
>>>>>> On 12/28/22 02:32, Amish wrote:
>>>>>>> Hi Alex,
>>>>>>>
>>>>>>> Thanks again for your reply.
>>>>>>>
>>>>>>> To find answers to your questions, I added few debugs() lines to 
>>>>>>> PeerOptions.cc.
>>>>>>>
>>>>>>> The diff file (patch) is attached.
>>>>>>>
>>>>>>> It prints parsedOptions and options retrieved from SSL context 
>>>>>>> and session objects at several stages.
>>>>>>>
>>>>>>> Here is tls_outgoing_options setting:
>>>>>>>
>>>>>>> $ grep tls_outgoing_options /etc/squid/squid.conf
>>>>>>> tls_outgoing_options \
>>>>>>> ???? cafile=/etc/ssl/cert.pem \
>>>>>>> cipher=ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS \
>>>>>>> ???? options=0x4
>>>>>>>
>>>>>>>
>>>>>>> Here is what squid logs on reload i.e. on parsing the squid.conf
>>>>>>>
>>>>>>> $ systemctl reload squid
>>>>>>> $ tail -f /var/log/squid/cache.log? |grep -i 'openssl\|parsed'
>>>>>>> 2022/12/28 12:19:30.596 kid1| 83,5| PeerOptions.cc(547) 
>>>>>>> parseOptions: INFO: TLS parsedOptions(3)=0
>>>>>>> 2022/12/28 12:19:30.598 kid1| 83,5| PeerOptions.cc(547) 
>>>>>>> parseOptions: INFO: TLS parsedOptions(3)=0
>>>>>>> 2022/12/28 12:19:30.723 kid1| 83,5| PeerOptions.cc(547) 
>>>>>>> parseOptions: INFO: TLS parsedOptions(3)=4
>>>>>>> 2022/12/28 12:19:30.729 kid1| 83,5| PeerOptions.cc(547) 
>>>>>>> parseOptions: INFO: TLS parsedOptions(3)=0
>>>>>>> 2022/12/28 12:19:30.729 kid1| 83,5| PeerOptions.cc(547) 
>>>>>>> parseOptions: INFO: TLS parsedOptions(3)=0
>>>>>>> 2022/12/28 12:19:32.147 kid1| 83,5| PeerOptions.cc(447) 
>>>>>>> parseOptions: INFO: TLS parsedOptions(1)=0
>>>>>>> 2022/12/28 12:19:32.147 kid1| 83,5| PeerOptions.cc(547) 
>>>>>>> parseOptions: INFO: TLS parsedOptions(3)=0
>>>>>>> 2022/12/28 12:19:33.524 kid1| 83,5| PeerOptions.cc(447) 
>>>>>>> parseOptions: INFO: TLS parsedOptions(1)=0
>>>>>>> 2022/12/28 12:19:33.532 kid1| 83,5| PeerOptions.cc(547) 
>>>>>>> parseOptions: INFO: TLS parsedOptions(3)=0
>>>>>>> 2022/12/28 12:19:33.695 kid1| 83,5| PeerOptions.cc(447) 
>>>>>>> parseOptions: INFO: TLS parsedOptions(1)=0
>>>>>>> 2022/12/28 12:19:33.695 kid1| 83,5| PeerOptions.cc(643) 
>>>>>>> updateContextOptions: set OpenSSL options for 
>>>>>>> context=0x562a5387fe30, parsedOptions=0
>>>>>>> 2022/12/28 12:19:33.695 kid1| 83,5| PeerOptions.cc(645) 
>>>>>>> updateContextOptions: get OpenSSL options for 
>>>>>>> context=0x562a5387fe30, getOptions=1179648
>>>>>>
>>>>>>> 2022/12/28 12:19:33.708 kid1| 83,5| PeerOptions.cc(447) 
>>>>>>> parseOptions: INFO: TLS parsedOptions(1)=0
>>>>>>> 2022/12/28 12:19:33.708 kid1| 83,5| PeerOptions.cc(643) 
>>>>>>> updateContextOptions: set OpenSSL options for 
>>>>>>> context=0x562a53e6e740, parsedOptions=0
>>>>>>> 2022/12/28 12:19:33.708 kid1| 83,5| PeerOptions.cc(645) 
>>>>>>> updateContextOptions: get OpenSSL options for 
>>>>>>> context=0x562a53e6e740, getOptions=1179648
>>>>>>>
>>>>>>> It seems that squid parses the options multiple times and only 
>>>>>>> once it gets the value as 4. Rest are parsed as 0.
>>>>>>>
>>>>>>> The value of 1179648 (0x120000) corresponds to 
>>>>>>> SSL_OP_NO_COMPRESSION (0x20000) and 
>>>>>>> SSL_OP_ENABLE_MIDDLEBOX_COMPAT. (0x100000)
>>>>>>>
>>>>>>>
>>>>>>> Now lets reproduce the issue:
>>>>>>>
>>>>>>> $ curl --no-progress-meter -kx 127.0.0.1:8080 https://www.jio.com 
>>>>>>> |grep 'TLS\|SSL'
>>>>>>> <pre>[No Error] (TLS code: 
>>>>>>> SQUID_TLS_ERR_CONNECT+TLS_LIB_ERR=A000152+TLS_IO_ERR=1)</pre>
>>>>>>> <p>Failed to establish a secure connection: error:0A000152:SSL 
>>>>>>> routines::unsafe legacy renegotiation disabled</p>
>>>>>>>
>>>>>>> So, as we can see, we are still not able to access the site.
>>>>>>>
>>>>>>> Lets see what cache.log has to say.
>>>>>>>
>>>>>>> $ tail -f /var/log/squid/cache.log? |grep -i 'openssl\|parsed'
>>>>>>> 2022/12/28 12:31:09.971 kid1| 83,5| PeerOptions.cc(447) 
>>>>>>> parseOptions: INFO: TLS parsedOptions(1)=0
>>>>>>> 2022/12/28 12:31:09.971 kid1| 83,5| PeerOptions.cc(643) 
>>>>>>> updateContextOptions: set OpenSSL options for 
>>>>>>> context=0x562a53eb14e0, parsedOptions=0
>>>>>>> 2022/12/28 12:31:09.971 kid1| 83,5| PeerOptions.cc(645) 
>>>>>>> updateContextOptions: get OpenSSL options for 
>>>>>>> context=0x562a53eb14e0, getOptions=1179648
>>>>>>>
>>>>>>> Strangely parsedOptions was zero and not 4!
>>>>>>>
>>>>>>> Now we can answer your questions as below.
>>>>>>>
>>>>>>>
>>>>>>> On 27/12/22 21:52, Alex Rousskov wrote:
>>>>>>>> On 12/27/22 10:42, Amish wrote:
>>>>>>>>> On 26/12/22 21:31, Alex Rousskov wrote:
>>>>>>>>>> tls_outgoing_options options=0x4,0x40000
>>>>>>>>
>>>>>>>>> With numeric hex values, I do not see the ERROR on stderr.
>>>>>>>>
>>>>>>>>> But it still does not seem to be working as expected. Squid 
>>>>>>>>> still does not open the page and gives same legacy negotiation 
>>>>>>>>> error.
>>>>>>>>
>>>>>>>> There are still many unknowns (from my point of view), including:
>>>>>>>>
>>>>>>>> 1. Does OpenSSL accept the above options? You ask that question 
>>>>>>>> below.
>>>>>>>
>>>>>>> Google search shows some projects using OpenSSL v3 where there is 
>>>>>>> mention to use above option when a similar error occurred to them.
>>>>>>>
>>>>>>> But in our case, its clear that squid does not pass value 4 to 
>>>>>>> SSL context, hence we do not know yet if OpenSSL accepts above 
>>>>>>> options.
>>>>>>>
>>>>>>>
>>>>>>>> 2. Does Squid indeed stare at the server, as expected?
>>>>>>>> 3. Does Squid apply the accepted options when staring at the 
>>>>>>>> server?
>>>>>>>
>>>>>>> A comment for parseOptions() in PeerOptions.cc states this:
>>>>>>>
>>>>>>> /**
>>>>>>> ??* Pre-parse TLS options= parameter to be applied when the TLS 
>>>>>>> objects created.
>>>>>>> ??* Options must not used in the case of peek or stare bump mode.
>>>>>>> ??*/
>>>>>>> void Security::PeerOptions::parseOptions()
>>>>>>>
>>>>>>> So it appears that TLS options is NOT used for peek as well as 
>>>>>>> stare. But why? I am not sure.
>>>>>>>
>>>>>>> How do I make squid use it for 'stare' atleast?
>>>>>>>
>>>>>>>
>>>>>>>> 4. Why does TLS negotiation fail despite those options applied,
>>>>>>>> ?? especially since it succeeds with using openssl s_client
>>>>>>>
>>>>>>> It possibly fails because options are not applied by squid.
>>>>>>>
>>>>>>> So, where do I check next on why parsedOptions is still set to 0 
>>>>>>> and why its not used for 'stare'?
>>>>>>>
>>>>>>> Thanks and regards,
>>>>>>>
>>>>>>> Amish.
>>>>>>>
>>>>> _______________________________________________
>>>>> squid-users mailing list
>>>>> squid-users at lists.squid-cache.org
>>>>> http://lists.squid-cache.org/listinfo/squid-users
>>>>
>>>> _______________________________________________
>>>> squid-users mailing list
>>>> squid-users at lists.squid-cache.org
>>>> http://lists.squid-cache.org/listinfo/squid-users
>>> _______________________________________________
>>> squid-users mailing list
>>> squid-users at lists.squid-cache.org
>>> http://lists.squid-cache.org/listinfo/squid-users
>>
>> _______________________________________________
>> squid-users mailing list
>> squid-users at lists.squid-cache.org
>> http://lists.squid-cache.org/listinfo/squid-users
> _______________________________________________
> squid-users mailing list
> squid-users at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-users



From anon.amish at gmail.com  Thu Dec 29 15:41:49 2022
From: anon.amish at gmail.com (Amish)
Date: Thu, 29 Dec 2022 21:11:49 +0530
Subject: [squid-users] LEGACY_SERVER_CONNECT,
 ALLOW_UNSAFE_LEGACY_RENEGOTIATION does not work - SSL bump, OpenSSL 3
In-Reply-To: <1b6c03a2-6f45-b288-e86c-da36de46c345@measurement-factory.com>
References: <f6e9c306-b15c-0e7d-5cf8-7ba036e86fe0@gmail.com>
 <ecc504d5-29f8-c63d-5662-7303b4c4a5f3@measurement-factory.com>
 <63f940db-77b3-c57c-ec00-f174fed51516@gmail.com>
 <17c35a0f-2577-712e-ff3a-5cdd251cb179@measurement-factory.com>
 <57c2e6fe-75cf-756c-3b2a-10addd1d32a2@gmail.com>
 <d447614e-7a22-0969-0257-46095df48c51@measurement-factory.com>
 <71e2a21c-7de0-e60d-2371-a083680bdb45@gmail.com>
 <02dc87d5-d49e-754c-1a39-0bd5ceaffe43@measurement-factory.com>
 <15e2cc6e-1fa3-27d3-b795-61f010b54e5b@gmail.com>
 <d0fc0698-f750-4f34-fdc1-3af163b47cae@measurement-factory.com>
 <d2c32dbe-c637-9f0d-d047-5fe839847537@gmail.com>
 <1b6c03a2-6f45-b288-e86c-da36de46c345@measurement-factory.com>
Message-ID: <4f493502-55e0-b652-569a-0424eacad048@gmail.com>

On 29/12/22 20:23, Alex Rousskov wrote:
> On 12/28/22 23:17, Amish wrote:
>
>> But now what?
>
> If your Squid never peeks at origin servers (i.e. it always stares) 
> and your proxy never serves/secures plain-text "GET https" requests, 
> then you can run with the createClientContext(true) hack until 
> somebody volunteers a long-term solution (as discussed below).

Yes it always stares. So current hack will work for mr. Just that I can 
not use squid shipped by Arch Linux and will have to compile is manually.

What is plain text "GET https" request?

I do use squid as intercept proxy for http (port 80) and https (port 443 
and stare bump). I hope above hack will not break that.

> There are several ways to fix this bug long-term, including these two:
>
> Minimal: Create a TLS context object dedicated to peeking at origin 
> servers. It will probably have to be admin-configurable to accomodate 
> various TLS v1.2 (and earlier) corner cases, but we can try to start 
> without adding support for such configuration. Continue to use the 
> existing configurable context for staring and other needs but call 
> createClientContext(true) for that existing context.

I wish I could code it. But I have no idea about TLS and OpenSSL APIs 
and also squid code.

I believe as more people switch to OpenSSL 3.0, we will see more people 
(using sslbump) complain about squid not connecting to unpatched origin 
servers.

I think easiest option to tackle this issue could be to have 
tls_outgoing_sslopflags directive which gets applied (ORed) to all SSL 
(peek, stare, splice) connections. And then those who wants squid to be 
able to connect to unpatched origin server can set it to 0x4. And then 
we do not need above hack. Peek and stare both will continue to work as 
it is currently.

If it is acceptable solution then I may try my hands on creating PR if 
it is not too complicated.

> Flexible: Replace tls_outgoing_options with tls_outgoing or a similar 
> directive that supports ACLs. The new directive must be used once for 
> each set of context configuration parameters (unlike? the existing 
> tls_outgoing_options that could be (mis)used multiple times, 
> accumulating some parameters and overwriting others). At configuration 
> time, Squid will create as many TLS context objects as there are 
> tls_outgoing directives. At runtime, Squid will evaluate ACLs and pick 
> the right context object for the current outgoing TLS connection 
> attempt. For example, you would be able to configure Squid to use one 
> context for peeking at servers and another for staring at them.

I thought squid (intentionally) supported multiple tls_outgoing_options. 
I had asked that question long back.

http://lists.squid-cache.org/pipermail/squid-users/2018-July/018582.html

Hope there is no plan to remove that feature(!) in future else my 
scripts will break.

> Unfortunately, even the minimal solution requires non-trivial 
> development work. I do not have enough free time to give you a 
> ready-to-use blueprint for its implementation.
>
> https://wiki.squid-cache.org/SquidFaq/AboutSquid#how-to-add-a-new-squid-feature-enhance-of-fix-something 
>
>
> HTH,
>
> Alex.

Thank you very much again

You have been of great help.

Regards,

Amish.



From rousskov at measurement-factory.com  Thu Dec 29 17:02:34 2022
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Thu, 29 Dec 2022 12:02:34 -0500
Subject: [squid-users] LEGACY_SERVER_CONNECT,
 ALLOW_UNSAFE_LEGACY_RENEGOTIATION does not work - SSL bump, OpenSSL 3
In-Reply-To: <4f493502-55e0-b652-569a-0424eacad048@gmail.com>
References: <f6e9c306-b15c-0e7d-5cf8-7ba036e86fe0@gmail.com>
 <ecc504d5-29f8-c63d-5662-7303b4c4a5f3@measurement-factory.com>
 <63f940db-77b3-c57c-ec00-f174fed51516@gmail.com>
 <17c35a0f-2577-712e-ff3a-5cdd251cb179@measurement-factory.com>
 <57c2e6fe-75cf-756c-3b2a-10addd1d32a2@gmail.com>
 <d447614e-7a22-0969-0257-46095df48c51@measurement-factory.com>
 <71e2a21c-7de0-e60d-2371-a083680bdb45@gmail.com>
 <02dc87d5-d49e-754c-1a39-0bd5ceaffe43@measurement-factory.com>
 <15e2cc6e-1fa3-27d3-b795-61f010b54e5b@gmail.com>
 <d0fc0698-f750-4f34-fdc1-3af163b47cae@measurement-factory.com>
 <d2c32dbe-c637-9f0d-d047-5fe839847537@gmail.com>
 <1b6c03a2-6f45-b288-e86c-da36de46c345@measurement-factory.com>
 <4f493502-55e0-b652-569a-0424eacad048@gmail.com>
Message-ID: <711d97c2-f618-c458-2fcf-47da87ed3806@measurement-factory.com>

On 12/29/22 10:41, Amish wrote:
> On 29/12/22 20:23, Alex Rousskov wrote:
>> On 12/28/22 23:17, Amish wrote:
>>> But now what?

>> If your Squid never peeks at origin servers (i.e. it always stares) 
>> and your proxy never serves/secures plain-text "GET https" requests, 
>> then you can run with the createClientContext(true) hack until 
>> somebody volunteers a long-term solution (as discussed below).

> What is plain text "GET https" request?

It is an unencrypted HTTP GET request arriving at http_port and using an 
https URI scheme in its target URI. These requests are relatively rare, 
mostly seen in environments where specialized HTTP clients outsource TLS 
work to their forward proxies.


> I do use squid as intercept proxy for http (port 80) and https (port 443 
> and stare bump). I hope above hack will not break that.

I share that hope, but cannot guarantee success.


>> There are several ways to fix this bug long-term, including these two:
>>
>> Minimal: Create a TLS context object dedicated to peeking at origin 
>> servers. It will probably have to be admin-configurable to accomodate 
>> various TLS v1.2 (and earlier) corner cases, but we can try to start 
>> without adding support for such configuration. Continue to use the 
>> existing configurable context for staring and other needs but call 
>> createClientContext(true) for that existing context.

> I wish I could code it. But I have no idea about TLS and OpenSSL APIs 
> and also squid code.

> I believe as more people switch to OpenSSL 3.0, we will see more people 
> (using sslbump) complain about squid not connecting to unpatched origin 
> servers.

> I think easiest option to tackle this issue could be to have 
> tls_outgoing_sslopflags directive which gets applied (ORed) to all SSL 
> (peek, stare, splice) connections. And then those who wants squid to be 
> able to connect to unpatched origin server can set it to 0x4. And then 
> we do not need above hack. Peek and stare both will continue to work as 
> it is currently.

> If it is acceptable solution then I may try my hands on creating PR if 
> it is not too complicated.

Why would adding such a new directive be better than committing the 
createClientContext(true) change that you have tested? AFAICT, such a 
commit would enable the old directive to do what the new directive is 
meant to do. Just like a new directive, this commit will break either 
peek or stare cases (depending on the problematic origin server).

The only advantage I see is that the new directive you propose would 
allow to preserve the old configuration behavior, but since that 
behavior is wrong/exceptional/surprising, I doubt it is worth preserving 
long-term (which is what adding such a new directive would do).


> I thought squid (intentionally) supported multiple
> tls_outgoing_options. I had asked that question long back.
> 
> http://lists.squid-cache.org/pipermail/squid-users/2018-July/018582.html

IMO, Squid support for multiple tls_outgoing_options directives is

* poor (and probably buggy)
* unnecessary (one can always get the same result without it)
* a configuration design mistake (we should have prohibited it)
* significantly complicates fixing/enhancing the underlying code


 > Hope there is no plan to remove that feature(!) in future else my
 > scripts will break.

If it were my call, it would have been removed (while fixing the problem 
you have reported on this thread): It is better to adjust your scripts 
(a one-time pain) than suffer from this mistake long-term. It is _not_ 
my call, and Squid is full of other features that cause ongoing pains 
and complicate progress because it is very difficult to reach consensus 
that something should be _removed_.


Cheers,

Alex.



>> Flexible: Replace tls_outgoing_options with tls_outgoing or a similar 
>> directive that supports ACLs. The new directive must be used once for 
>> each set of context configuration parameters (unlike? the existing 
>> tls_outgoing_options that could be (mis)used multiple times, 
>> accumulating some parameters and overwriting others). At configuration 
>> time, Squid will create as many TLS context objects as there are 
>> tls_outgoing directives. At runtime, Squid will evaluate ACLs and pick 
>> the right context object for the current outgoing TLS connection 
>> attempt. For example, you would be able to configure Squid to use one 
>> context for peeking at servers and another for staring at them.


>> Unfortunately, even the minimal solution requires non-trivial 
>> development work. I do not have enough free time to give you a 
>> ready-to-use blueprint for its implementation.
>>
>> https://wiki.squid-cache.org/SquidFaq/AboutSquid#how-to-add-a-new-squid-feature-enhance-of-fix-something



From remotesyssupport at gmail.com  Thu Dec 29 21:17:08 2022
From: remotesyssupport at gmail.com (Raghav P)
Date: Fri, 30 Dec 2022 02:47:08 +0530
Subject: [squid-users] Squid log shows peer_response_time = 0 and status is
 200
Message-ID: <CAMzzUS6Y3Tai02of=+aopgJdcxg1AM9BWQiz3JqEUHwyp0_NRw@mail.gmail.com>

We have a squid proxy configured as a forward proxy. But we see that for
some requests the log shows peer_response_time =0 but has status is 200. At
times users on their browser see this as a page not loading.

As we couldn't find documentation around this. We wish to know what this
actually means and if this is an issue how to resolve it.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-users/attachments/20221230/3bf43b48/attachment.htm>

From rousskov at measurement-factory.com  Thu Dec 29 22:31:21 2022
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Thu, 29 Dec 2022 17:31:21 -0500
Subject: [squid-users] Squid log shows peer_response_time = 0 and status
 is 200
In-Reply-To: <CAMzzUS6Y3Tai02of=+aopgJdcxg1AM9BWQiz3JqEUHwyp0_NRw@mail.gmail.com>
References: <CAMzzUS6Y3Tai02of=+aopgJdcxg1AM9BWQiz3JqEUHwyp0_NRw@mail.gmail.com>
Message-ID: <51d6dde5-d0b9-4d7d-a47f-cd17dfe7d1ab@measurement-factory.com>

On 12/29/22 16:17, Raghav P wrote:
> We have a squid proxy configured as a forward proxy. But we see that for 
> some requests the log shows peer_response_time =0 but has status is 200. 
> At times users on their browser see this as a page not loading.
> 
> As we couldn't find documentation around this. We wish to know what this 
> actually means and if this is an issue how to resolve it.

It is difficult to say for sure what is going on without a lot more 
details, but it is likely that Squid experienced some kind of an error 
after receiving the beginning of a 200 OK response from the peer. I am 
guessing that when handling certain kinds of errors, Squid may forget to 
update the transaction response time clock and log zero. It is also 
possible, in some environments, that the transaction took less than one 
millisecond.

I recommend configuring Squid to log all the standard fields in "squid" 
logformat, including %Ss (you probably log that already) and to add 
%err_code/%err_detail fields (you probably do not log those now). Share 
the values of those three specific fields (at least) with this mailing 
list. In general, the more logged fields you can share, the higher are 
the chances that somebody here will know what is going on with those 
transactions.

You may also want to mention whether these transactions are HTTP or 
HTTPS, and, if HTTPS, whether your Squid has ssl_bump rules for those 
transactions.


HTH,

Alex.



From anon.amish at gmail.com  Fri Dec 30 01:05:49 2022
From: anon.amish at gmail.com (Amish)
Date: Fri, 30 Dec 2022 06:35:49 +0530
Subject: [squid-users] LEGACY_SERVER_CONNECT,
 ALLOW_UNSAFE_LEGACY_RENEGOTIATION does not work - SSL bump, OpenSSL 3
In-Reply-To: <711d97c2-f618-c458-2fcf-47da87ed3806@measurement-factory.com>
References: <f6e9c306-b15c-0e7d-5cf8-7ba036e86fe0@gmail.com>
 <ecc504d5-29f8-c63d-5662-7303b4c4a5f3@measurement-factory.com>
 <63f940db-77b3-c57c-ec00-f174fed51516@gmail.com>
 <17c35a0f-2577-712e-ff3a-5cdd251cb179@measurement-factory.com>
 <57c2e6fe-75cf-756c-3b2a-10addd1d32a2@gmail.com>
 <d447614e-7a22-0969-0257-46095df48c51@measurement-factory.com>
 <71e2a21c-7de0-e60d-2371-a083680bdb45@gmail.com>
 <02dc87d5-d49e-754c-1a39-0bd5ceaffe43@measurement-factory.com>
 <15e2cc6e-1fa3-27d3-b795-61f010b54e5b@gmail.com>
 <d0fc0698-f750-4f34-fdc1-3af163b47cae@measurement-factory.com>
 <d2c32dbe-c637-9f0d-d047-5fe839847537@gmail.com>
 <1b6c03a2-6f45-b288-e86c-da36de46c345@measurement-factory.com>
 <4f493502-55e0-b652-569a-0424eacad048@gmail.com>
 <711d97c2-f618-c458-2fcf-47da87ed3806@measurement-factory.com>
Message-ID: <f6b82d0a-349f-3579-c3cb-9551a574bcd9@gmail.com>


On 29/12/22 22:32, Alex Rousskov wrote:
> On 12/29/22 10:41, Amish wrote:
>> On 29/12/22 20:23, Alex Rousskov wrote:
>>> On 12/28/22 23:17, Amish wrote:
>>>> But now what?
>
>>> If your Squid never peeks at origin servers (i.e. it always stares) 
>>> and your proxy never serves/secures plain-text "GET https" requests, 
>>> then you can run with the createClientContext(true) hack until 
>>> somebody volunteers a long-term solution (as discussed below).
>
>> What is plain text "GET https" request?
>
> It is an unencrypted HTTP GET request arriving at http_port and using 
> an https URI scheme in its target URI. These requests are relatively 
> rare, mostly seen in environments where specialized HTTP clients 
> outsource TLS work to their forward proxies.
>
>
>> I do use squid as intercept proxy for http (port 80) and https (port 
>> 443 and stare bump). I hope above hack will not break that.
>
> I share that hope, but cannot guarantee success.

Thanks for the info.

>
>>> There are several ways to fix this bug long-term, including these two:
>>>
>>> Minimal: Create a TLS context object dedicated to peeking at origin 
>>> servers. It will probably have to be admin-configurable to 
>>> accomodate various TLS v1.2 (and earlier) corner cases, but we can 
>>> try to start without adding support for such configuration. Continue 
>>> to use the existing configurable context for staring and other needs 
>>> but call createClientContext(true) for that existing context.
>
>> I wish I could code it. But I have no idea about TLS and OpenSSL APIs 
>> and also squid code.
>
>> I believe as more people switch to OpenSSL 3.0, we will see more 
>> people (using sslbump) complain about squid not connecting to 
>> unpatched origin servers.
>
>> I think easiest option to tackle this issue could be to have 
>> tls_outgoing_sslopflags directive which gets applied (ORed) to all 
>> SSL (peek, stare, splice) connections. And then those who wants squid 
>> to be able to connect to unpatched origin server can set it to 0x4. 
>> And then we do not need above hack. Peek and stare both will continue 
>> to work as it is currently.
>
>> If it is acceptable solution then I may try my hands on creating PR 
>> if it is not too complicated.
>
> Why would adding such a new directive be better than committing the 
> createClientContext(true) change that you have tested? AFAICT, such a 
> commit would enable the old directive to do what the new directive is 
> meant to do. Just like a new directive, this commit will break either 
> peek or stare cases (depending on the problematic origin server).
>
> The only advantage I see is that the new directive you propose would 
> allow to preserve the old configuration behavior, but since that 
> behavior is wrong/exceptional/surprising, I doubt it is worth 
> preserving long-term (which is what adding such a new directive would 
> do).

I do not know what createClientContext() actually does. I thought it was 
just a way to test your theory.

If you tell me the starting point then I may try to look at the code and 
try to implement your minimal way to fix it.

In the mean time, do you think this bug needs to be reported as an issue 
on Github? I can do that.

Thanks and regards,

Amish.

>> I thought squid (intentionally) supported multiple
>> tls_outgoing_options. I had asked that question long back.
>>
>> http://lists.squid-cache.org/pipermail/squid-users/2018-July/018582.html
>
> IMO, Squid support for multiple tls_outgoing_options directives is
>
> * poor (and probably buggy)
> * unnecessary (one can always get the same result without it)
> * a configuration design mistake (we should have prohibited it)
> * significantly complicates fixing/enhancing the underlying code
>
>
> > Hope there is no plan to remove that feature(!) in future else my
> > scripts will break.
>
> If it were my call, it would have been removed (while fixing the 
> problem you have reported on this thread): It is better to adjust your 
> scripts (a one-time pain) than suffer from this mistake long-term. It 
> is _not_ my call, and Squid is full of other features that cause 
> ongoing pains and complicate progress because it is very difficult to 
> reach consensus that something should be _removed_.
>
>
> Cheers,
>
> Alex.
>
>
>
>>> Flexible: Replace tls_outgoing_options with tls_outgoing or a 
>>> similar directive that supports ACLs. The new directive must be used 
>>> once for each set of context configuration parameters (unlike? the 
>>> existing tls_outgoing_options that could be (mis)used multiple 
>>> times, accumulating some parameters and overwriting others). At 
>>> configuration time, Squid will create as many TLS context objects as 
>>> there are tls_outgoing directives. At runtime, Squid will evaluate 
>>> ACLs and pick the right context object for the current outgoing TLS 
>>> connection attempt. For example, you would be able to configure 
>>> Squid to use one context for peeking at servers and another for 
>>> staring at them.
>
>
>>> Unfortunately, even the minimal solution requires non-trivial 
>>> development work. I do not have enough free time to give you a 
>>> ready-to-use blueprint for its implementation.
>>>
>>> https://wiki.squid-cache.org/SquidFaq/AboutSquid#how-to-add-a-new-squid-feature-enhance-of-fix-something 
>>>
>
> _______________________________________________
> squid-users mailing list
> squid-users at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-users


From rousskov at measurement-factory.com  Fri Dec 30 15:08:49 2022
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Fri, 30 Dec 2022 10:08:49 -0500
Subject: [squid-users] LEGACY_SERVER_CONNECT,
 ALLOW_UNSAFE_LEGACY_RENEGOTIATION does not work - SSL bump, OpenSSL 3
In-Reply-To: <f6b82d0a-349f-3579-c3cb-9551a574bcd9@gmail.com>
References: <f6e9c306-b15c-0e7d-5cf8-7ba036e86fe0@gmail.com>
 <ecc504d5-29f8-c63d-5662-7303b4c4a5f3@measurement-factory.com>
 <63f940db-77b3-c57c-ec00-f174fed51516@gmail.com>
 <17c35a0f-2577-712e-ff3a-5cdd251cb179@measurement-factory.com>
 <57c2e6fe-75cf-756c-3b2a-10addd1d32a2@gmail.com>
 <d447614e-7a22-0969-0257-46095df48c51@measurement-factory.com>
 <71e2a21c-7de0-e60d-2371-a083680bdb45@gmail.com>
 <02dc87d5-d49e-754c-1a39-0bd5ceaffe43@measurement-factory.com>
 <15e2cc6e-1fa3-27d3-b795-61f010b54e5b@gmail.com>
 <d0fc0698-f750-4f34-fdc1-3af163b47cae@measurement-factory.com>
 <d2c32dbe-c637-9f0d-d047-5fe839847537@gmail.com>
 <1b6c03a2-6f45-b288-e86c-da36de46c345@measurement-factory.com>
 <4f493502-55e0-b652-569a-0424eacad048@gmail.com>
 <711d97c2-f618-c458-2fcf-47da87ed3806@measurement-factory.com>
 <f6b82d0a-349f-3579-c3cb-9551a574bcd9@gmail.com>
Message-ID: <dad59f68-370a-6017-606b-43c7601179e8@measurement-factory.com>

On 12/29/22 20:05, Amish wrote:
> On 29/12/22 22:32, Alex Rousskov wrote:
>> On 12/29/22 10:41, Amish wrote:
>>> On 29/12/22 20:23, Alex Rousskov wrote:
>>>> There are several ways to fix this bug long-term, including these two:
>>>>
>>>> Minimal: Create a TLS context object dedicated to peeking at origin 
>>>> servers. It will probably have to be admin-configurable to 
>>>> accomodate various TLS v1.2 (and earlier) corner cases, but we can 
>>>> try to start without adding support for such configuration. Continue 
>>>> to use the existing configurable context for staring and other needs 
>>>> but call createClientContext(true) for that existing context.

> I do not know what createClientContext() actually does. I thought it was 
> just a way to test your theory.

Security::PeerOptions::createClientContext() creates the client context 
object we talked about. Its boolean parameter determines whether the new 
context object will honor the corresponding options=... part of its 
configuration.


> If you tell me the starting point then I may try to look at the code and 
> try to implement your minimal way to fix it.

Even the minimal change is not trivial; FWIW, I do not recommend working 
on this if you do not enjoy tinkering with messy code or if you are not 
willing to carefully test various ssl_bump configuration scenarios.

I have not verified/tested any of this, but I would start with these steps:

1. Find ssl_client in SquidConfig.h and add a peekingContext data member 
next to the existing sslContext data member. The two fields should have 
the same Security::ContextPointer type.

2. Examine every Config.ssl_client.sslContext use in the existing code 
("git grep -n ssl_client.sslContext") and adjust those that need an 
adjustment:

* In the code where you edited the createClientContext(false) call, add 
a new line there to initialize the new Config.ssl_client.peekingContext 
pointer with something like 
Security::PeerOptions().createClientContext(false) call (dictated by the 
minimal configuration-free approach outlined above).

The old Config.ssl_client.sslContext field should be initialized with a 
Security::ProxyOutgoingConfig.createClientContext(true) call that you 
have tested already.

* configFreeMemory() will need to reset peekingContext as well.

* In peeking and splicing cases, 
Ssl::PeekingPeerConnector::getTlsContext() should return the new 
peekingContext instead of the old Config.ssl_client.sslContext. I am not 
sure, but it is possible that this method needs to examine sslBumpMode 
like Ssl::PeekingPeerConnector::initialize() does (and default to 
peeking/old context when sslBumpMode is not available). In other words, 
return the new peekingContext only when sslBumpMode is reachable and is 
equal to Ssl::bumpPeek or Ssl::bumpSplice.


You will find some git recipes at 
https://wiki.squid-cache.org/DeveloperResources/GitHints

When you think your code is ready to become official, use 
https://wiki.squid-cache.org/MergeProcedure


> In the mean time, do you think this bug needs to be reported as an issue 
> on Github? I can do that.

We do not use GitHub Issues. We use Squid Bugzilla at 
https://bugs.squid-cache.org

It is probably a good idea to report a "tls_outgoing_options options=... 
are ignored" bug there, with a reference to this email thread.


Thank you,

Alex.


From remotesyssupport at gmail.com  Fri Dec 30 17:29:26 2022
From: remotesyssupport at gmail.com (Raghav P)
Date: Fri, 30 Dec 2022 22:59:26 +0530
Subject: [squid-users] Squid log shows peer_response_time = 0 and status
 is 200
In-Reply-To: <51d6dde5-d0b9-4d7d-a47f-cd17dfe7d1ab@measurement-factory.com>
References: <CAMzzUS6Y3Tai02of=+aopgJdcxg1AM9BWQiz3JqEUHwyp0_NRw@mail.gmail.com>
 <51d6dde5-d0b9-4d7d-a47f-cd17dfe7d1ab@measurement-factory.com>
Message-ID: <CAMzzUS6qRE0opFgswWg3MRc+j85sQD9Ud50-Fd4FAquzDKbu=Q@mail.gmail.com>

Thank you Alex.

We modified the log format as per your suggestion and here is the relevant
log entries (its been parsed) for one such log entry

  "http_method": "CONNECT",
  "request_method_from_client": "CONNECT",
  "request_method_to_server": "CONNECT",
  "status": 200,
  "vendor_action": "TCP_TUNNEL",
  "err_code": "-",
  "err_detail": "-",
  "dest_status": "HIER_DIRECT",
  "response_time": 8612,
  "total_time_milliseconds": 8608,
  "peer_response_time": 0,
  "http_content_type": "-",
  "bytes": 13071,
  "bytes_in": 5373,
  "bytes_out": 7698,
  "sni": "-",
  "X-Forwarded-For": "-"

On Fri, Dec 30, 2022 at 4:01 AM Alex Rousskov <
rousskov at measurement-factory.com> wrote:

> On 12/29/22 16:17, Raghav P wrote:
> > We have a squid proxy configured as a forward proxy. But we see that for
> > some requests the log shows peer_response_time =0 but has status is 200.
> > At times users on their browser see this as a page not loading.
> >
> > As we couldn't find documentation around this. We wish to know what this
> > actually means and if this is an issue how to resolve it.
>
> It is difficult to say for sure what is going on without a lot more
> details, but it is likely that Squid experienced some kind of an error
> after receiving the beginning of a 200 OK response from the peer. I am
> guessing that when handling certain kinds of errors, Squid may forget to
> update the transaction response time clock and log zero. It is also
> possible, in some environments, that the transaction took less than one
> millisecond.
>
> I recommend configuring Squid to log all the standard fields in "squid"
> logformat, including %Ss (you probably log that already) and to add
> %err_code/%err_detail fields (you probably do not log those now). Share
> the values of those three specific fields (at least) with this mailing
> list. In general, the more logged fields you can share, the higher are
> the chances that somebody here will know what is going on with those
> transactions.
>
> You may also want to mention whether these transactions are HTTP or
> HTTPS, and, if HTTPS, whether your Squid has ssl_bump rules for those
> transactions.
>
>
> HTH,
>
> Alex.
>
> _______________________________________________
> squid-users mailing list
> squid-users at lists.squid-cache.org
> http://lists.squid-cache.org/listinfo/squid-users
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-users/attachments/20221230/de6ed6de/attachment.htm>

