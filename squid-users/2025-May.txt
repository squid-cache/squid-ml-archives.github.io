From adrian.stnbch at gmail.com  Wed May  7 23:17:17 2025
From: adrian.stnbch at gmail.com (Adrian)
Date: Thu, 8 May 2025 01:17:17 +0200
Subject: [squid-users] Interaction SSL_bump,
 Domain Allowlist and Host Header Forgery Check
Message-ID: <CAJyMU+Lp5mYgCwME1gjPJRcQuKJ_ZHodWek6XfTQ5B=y80rpBw@mail.gmail.com>

Hey Squid community,

I would greatly appreciate a hint on how to configure Squid to achieve the
following:

Context
========
Transparent HTTP/S proxy (ideally no TLS re-encryption)
Domain allowlist acl
Squid v6.13

Goal
========
Have Squid "inspect" HTTPS requests (as much as possible/needed with the
actions provided by ssl_bump) and perform the host header forgery check in
addition to checking if the host extracted from SNI matches the domain
allowlist acl.
The configuration should basically prevent this: ]$ curl --insecure
--resolve <domain on allowlist>:443:<arbitrary IP not associated with
domain> https://<domain on allowlist>

It seems like all the necessary tools are provided, and I see hints
pointing to this possibility, e.g.
https://wiki.squid-cache.org/KnowledgeBase/HostHeaderForgery (the INFO box)
but I'm having trouble using them to accomplish the desired effect.
The host_verify_strict option seems to solve this for unencrypted HTTP and
I got the domain allowlist to work for HTTP + HTTPS - it's just easily
circumvented by the curl above in the case of HTTPS.

A rough idea about the order/placement of the acls involved (relative to
the ssl_bump steps where applicable) would help a lot.

Cheers,
Adrian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-users/attachments/20250508/226833a8/attachment.htm>

From nakayamakito at icloud.com  Tue May 27 12:47:21 2025
From: nakayamakito at icloud.com (=?utf-8?B?5Lit5bGx56iA5paX?=)
Date: Tue, 27 May 2025 21:47:21 +0900
Subject: [squid-users] SSL_Bump: Unexpected decryption of non-whitelisted
 domains
In-Reply-To: <9B625E47-E8F5-4C5F-A395-6B09A1A9692A@icloud.com>
References: <9B625E47-E8F5-4C5F-A395-6B09A1A9692A@icloud.com>
Message-ID: <C8B598B3-F530-4CFE-AB79-EEB3033A53A3@icloud.com>

Dear Squid-Users,

I?m configuring SSL_Bump to decrypt only a specific list of domains and to splice (pass through encrypted) all others, but I?m seeing non-whitelisted domains still being decrypted.

### Observed behavior (access log excerpt):
26.56.128.144 - - [27/May/2025:18:35:17 +0900] "CONNECT mariadb.org:443 HTTP/1.1" 200 0 TCP_DENIED:HIER_NONE
26.56.128.144 - - [27/May/2025:18:35:17 +0900] "GET https://mariadb.org/donate/ HTTP/1.1" 403 4076 NONE_NONE:HIER_NONE

lthough CONNECT is supposed to be denied at step1, Squid first responds with ?200 OK? (and presents a self-signed certificate), then the client issues a GET which finally returns 403.

### My ssl_bump configuration:
acl step1 at_step SslBump1
acl bump_domains ssl::server_name "/home/user001/ssl_bump/ssl_bump_domain"

ssl_bump peek step1
ssl_bump splice step2 !bump_domains
ssl_bump bump step2 bump_domains
ssl_bump splice step3 all

Could you please advise why non-whitelisted domains are still being bumped and how to properly prevent this behavior?

Thank you for your assistance.

Best regards,
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-users/attachments/20250527/fd04cfcf/attachment.htm>

From rousskov at measurement-factory.com  Tue May 27 13:49:41 2025
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Tue, 27 May 2025 09:49:41 -0400
Subject: [squid-users] SSL_Bump: Unexpected decryption of
 non-whitelisted domains
In-Reply-To: <C8B598B3-F530-4CFE-AB79-EEB3033A53A3@icloud.com>
References: <9B625E47-E8F5-4C5F-A395-6B09A1A9692A@icloud.com>
 <C8B598B3-F530-4CFE-AB79-EEB3033A53A3@icloud.com>
Message-ID: <1d873494-d6d4-4a15-9829-27f34298c247@measurement-factory.com>

On 2025-05-27 08:47, ???? wrote:
> Dear Squid-Users,
> 
> I?m configuring SSL_Bump to decrypt only a specific list of domains and 
> to splice (pass through encrypted) all others, but I?m seeing 
> non-whitelisted domains still being decrypted.
> 
> ### Observed behavior (access log excerpt):
> 26.56.128.144 - - [27/May/2025:18:35:17 +0900] "CONNECT mariadb.org:443 
> HTTP/1.1" 200 0 TCP_DENIED:HIER_NONE
> 26.56.128.144 - - [27/May/2025:18:35:17 +0900] "GET 
> https://mariadb.org/donate/ <https://mariadb.org/donate/>?HTTP/1.1" 403 
> 4076 NONE_NONE:HIER_NONE
> 
> lthough CONNECT is supposed to be denied at step1,

When Squid is configured to deny a CONNECT request at step1, it bumps 
the client-to-Squid connection after receiving such a banned CONNECT 
request, waits for the client GET (or equivalent) request on the bumped 
connection, and then responds with an Access Denied error to the client. 
This behavior was implemented because most browsers refuse to show 
CONNECT errors to users; they only show GET errors.

If you do not like this behavior, you may, for example, configure your 
Squid to allow CONNECTs to servers that should be spliced.


HTH,

Alex.


> Squid first responds 
> with ?200 OK? (and presents a self-signed certificate), then the client 
> issues a GET which finally returns 403.
> 
> ### My ssl_bump configuration:
> 
> acl step1 at_step SslBump1
> acl bump_domains ssl::server_name "/home/user001/ssl_bump/ssl_bump_domain"
> 
> ssl_bump peek step1
> ssl_bump splice step2 !bump_domains
> ssl_bump bump step2 bump_domains
> ssl_bump splice step3 all
> 
> Could you please advise why non-whitelisted domains are still being 
> bumped and how to properly prevent this behavior?
> 
> Thank you for your assistance.
> 
> Best regards,
> 
> 
> _______________________________________________
> squid-users mailing list
> squid-users at lists.squid-cache.org
> https://lists.squid-cache.org/listinfo/squid-users


From yves.martin at elca.ch  Tue May 27 14:37:06 2025
From: yves.martin at elca.ch (Yves MARTIN)
Date: Tue, 27 May 2025 14:37:06 +0000
Subject: [squid-users] How to do transparent rewrite with https requests?
Message-ID: <GVAP278MB000597CE77AB7A15B49DE4F8EE64A@GVAP278MB0005.CHEP278.PROD.OUTLOOK.COM>

Hello,

 

My team expects to transparently rewrite requests through squid, replacing
original URL/hostname by another target URL/host.

 

Main objective is to redirect original HTTPS requests triggered by "docker
pull alpine" to a local mirrored registry without obvious information in
user client that the obtained image comes from mirror: original image
location is preserved, no specific proxy or mirror configuration in docker
client/daemon to set.

 

To do so, we have used squid-urlrewrite and it works well for HTTP request,
even if rewrite targets HTTPS URL.

But when original request is HTTPS, connection still goes to original
URL/hostname IP address
https://github.com/rchunping/squid-urlrewrite/issues/3

According to debug logs, the original request hostname is resolved to IP
early and kept in internal context after squid-urlrewrite is invoked.

 

Do you have recommendations how to implement such a rewrite? Any idea how to
improve/fix current squid behavior?

 

Thank you in advance for your help

Best regards,

Yves

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-users/attachments/20250527/3a31ba89/attachment-0001.htm>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 6737 bytes
Desc: not available
URL: <http://lists.squid-cache.org/pipermail/squid-users/attachments/20250527/3a31ba89/attachment-0001.bin>

From rousskov at measurement-factory.com  Tue May 27 16:19:06 2025
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Tue, 27 May 2025 12:19:06 -0400
Subject: [squid-users] How to do transparent rewrite with https requests?
In-Reply-To: <GVAP278MB000597CE77AB7A15B49DE4F8EE64A@GVAP278MB0005.CHEP278.PROD.OUTLOOK.COM>
References: <GVAP278MB000597CE77AB7A15B49DE4F8EE64A@GVAP278MB0005.CHEP278.PROD.OUTLOOK.COM>
Message-ID: <c6067cc6-d7c5-4a8a-a96c-fb5c9a262809@measurement-factory.com>

On 2025-05-27 10:37, Yves MARTIN wrote:

> My team expects to transparently rewrite requests through squid, 
> replacing original URL/hostname by another target URL/host.
> 
> Main objective is to redirect original HTTPS requests triggered by 
> ?docker pull alpine? to a local mirrored registry without obvious 
> information in user client that the obtained image comes from mirror: 
> original image location is preserved, no specific proxy or mirror 
> configuration in docker client/daemon to set.
> 
> To do so, we have used squid-urlrewrite and it works well for HTTP 
> request, even if rewrite targets HTTPS URL.
> 
> But when original request is HTTPS, connection still goes to original 
> URL/hostname IP address 
> https://github.com/rchunping/squid-urlrewrite/issues/3 
> 
> According to debug logs, the original request hostname is resolved to IP 
> early and kept in internal context after squid-urlrewrite is invoked.

In most cases, when bumping connections from a TLS client to Squid and 
from Squid to TLS server, Squid "pins" (i.e. remembers) the 
Squid-to-server connection and then (re)uses that pinned connection for 
all requests received on the client-to-Squid connection.

I have not checked, but speculate that rewriting request target does not 
trigger opening a new Squid-to-server TLS connection and re-pinning.

IIRC, a Squid that is configured to bump during SslBump step1 does not 
pin. Such a configuration is rarely usable on a modern internet, but YMMV.


HTH,

Alex.

From squid3 at treenet.co.nz  Tue May 27 20:12:51 2025
From: squid3 at treenet.co.nz (Amos Jeffries)
Date: Wed, 28 May 2025 08:12:51 +1200
Subject: [squid-users] How to do transparent rewrite with https requests?
In-Reply-To: <c6067cc6-d7c5-4a8a-a96c-fb5c9a262809@measurement-factory.com>
References: <GVAP278MB000597CE77AB7A15B49DE4F8EE64A@GVAP278MB0005.CHEP278.PROD.OUTLOOK.COM>
 <c6067cc6-d7c5-4a8a-a96c-fb5c9a262809@measurement-factory.com>
Message-ID: <b9bf085d-86fa-4abc-b5e8-e85663996bbf@treenet.co.nz>

On 28/05/25 04:19, Alex Rousskov wrote:
> On 2025-05-27 10:37, Yves MARTIN wrote:
> 
>> My team expects to transparently rewrite requests through squid, 
>> replacing original URL/hostname by another target URL/host.
>>
>> Main objective is to redirect original HTTPS requests triggered by 
>> ?docker pull alpine? to a local mirrored registry without obvious 
>> information in user client that the obtained image comes from mirror: 
>> original image location is preserved, no specific proxy or mirror 
>> configuration in docker client/daemon to set.

Okay. If I am correctly understanding that your primary goal is to have 
the "original ... location is preserved". Then please discard the terms 
"transparent" and "redirect" from your thoughts on this matter. They 
both introduce requirements that break what you are wanting.


To operate a mirror that can be used in place of an origin server. That 
mirror needs to be configured to both receive and understand the URLs 
produced by that origin server.

After which Squid simply uses the mirror as cache_peer to handle the 
traffic for the domain(s) that origin server provides. Like so:

   # define what can go to the mirror
   acl foo dstdomain foo.example.com
   # how to contact the mirror
   cache_peer mirror.server 80 0 originserver
   cache_peer_access allow foo
   cache_peer_access deny all

If the mirror only knows its local mirror domain instead of the origin 
servers public domain. Then use the cache_peer option 
"forceddomain=mirror-foo.example.com".


( Whether you URL-rewrite the path and query details before sending it 
to the mirror cache_peer is up to you. Just be aware that it is quite 
dangerous to do on a domain where you do not fully understand the 
meaning of those URL parts. YHBW. I advise not doing so.)


For the HTTPS, the complications are that:

1) you add another cache_peer with port 443. Same ACL setup.

2) Squid must receive the TLS traffic via:

  a) "https_port 443 accel ..."
     with local network routing client requests for the foo.example.com 
domain/IPs to this Squid listening port.


   OR/AND,

  b) SSL-Bump intercept of client CONNECT requests. Like so:

   # using 'foo' dstdomain ACL(s) from cache_peer_access rule(s)
   http_access allow CONNECT foo

   # same domains listed in 'foo' ACL(s)
   # but checking TLS ServerName instead of URL domain.
   acl fooS ssl::server_name ...

   # or peek, YMMV. I just think stare is better for this use-case.
   ssl_bump stare atStep1

   # decrypt so we can decide whether URLs go to mirror or origin
   ssl_bump bump atStep2 fooS

   # pass anything else to origin untouched
   ssl_bump splice atStep2 !fooS


HTH
Amos


From nakayamakito at icloud.com  Wed May 28 00:07:07 2025
From: nakayamakito at icloud.com (=?utf-8?B?5Lit5bGx56iA5paX?=)
Date: Wed, 28 May 2025 09:07:07 +0900
Subject: [squid-users] How to do transparent rewrite with https requests?
In-Reply-To: <c6067cc6-d7c5-4a8a-a96c-fb5c9a262809@measurement-factory.com>
References: <GVAP278MB000597CE77AB7A15B49DE4F8EE64A@GVAP278MB0005.CHEP278.PROD.OUTLOOK.COM>
 <c6067cc6-d7c5-4a8a-a96c-fb5c9a262809@measurement-factory.com>
Message-ID: <68995794-3057-464C-A6F4-6A6F4CAD67F9@icloud.com>

Thank you for your response.

Based on your reply, we have reviewed the configuration and observed the following behavior.

? Relevant Configuration Snippet

acl bump_targets ssl::server_name "/home/user001/ssl_bump/ssl_bump_domain"
ssl_bump stare step1
ssl_bump bump step2 bump_targets
ssl_bump splice step2 !bump_targets
The /home/user001/ssl_bump/ssl_bump_domain file includes only:

[root at host squid]# cat /home/user001/ssl_bump/ssl_bump_domain
github.com
? Observed Logs

26.56.128.144 - - [28/May/2025:10:25:18 +0900] "CONNECT mariadb.org:443 HTTP/1.1" 200 0 "-" "curl/8.5.0" TCP_DENIED:HIER_NONE
26.56.128.144 - - [28/May/2025:10:25:18 +0900] "GET https://mariadb.org/donate/ HTTP/1.1" 403 4076 "-" "curl/8.5.0" NONE_NONE:HIER_NONE
As mariadb.org is not listed in the ssl_bump_domain file, we expected it to be spliced. However, the log indicates that Squid is able to see the full HTTPS URL, implying the connection was actually bumped.

? Main Clarification Point

The key point we would like to confirm is:

In a configuration where ssl_bump is enabled, does Squid still allow the initial CONNECT request (returning 200) even for non-whitelisted domains, then wait for the client to send a follow-up HTTPS request (e.g., GET), which is then bumped and blocked (e.g., 403) by Squid?

Or alternatively:

Is Squid intentionally connecting to the origin server after CONNECT in order to generate an error page (403 etc.) that can be properly displayed to the client browser?

We would greatly appreciate clarification on the expected behavior and underlying mechanism in such cases.



> 2025/05/28 1:19?Alex Rousskov <rousskov at measurement-factory.com>????:
> 
> On 2025-05-27 10:37, Yves MARTIN wrote:
> 
>> My team expects to transparently rewrite requests through squid, replacing original URL/hostname by another target URL/host.
>> Main objective is to redirect original HTTPS requests triggered by ?docker pull alpine? to a local mirrored registry without obvious information in user client that the obtained image comes from mirror: original image location is preserved, no specific proxy or mirror configuration in docker client/daemon to set.
>> To do so, we have used squid-urlrewrite and it works well for HTTP request, even if rewrite targets HTTPS URL.
>> But when original request is HTTPS, connection still goes to original URL/hostname IP address https://github.com/rchunping/squid-urlrewrite/issues/3 According to debug logs, the original request hostname is resolved to IP early and kept in internal context after squid-urlrewrite is invoked.
> 
> In most cases, when bumping connections from a TLS client to Squid and from Squid to TLS server, Squid "pins" (i.e. remembers) the Squid-to-server connection and then (re)uses that pinned connection for all requests received on the client-to-Squid connection.
> 
> I have not checked, but speculate that rewriting request target does not trigger opening a new Squid-to-server TLS connection and re-pinning.
> 
> IIRC, a Squid that is configured to bump during SslBump step1 does not pin. Such a configuration is rarely usable on a modern internet, but YMMV.
> 
> 
> HTH,
> 
> Alex.
> _______________________________________________
> squid-users mailing list
> squid-users at lists.squid-cache.org
> https://lists.squid-cache.org/listinfo/squid-users

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-users/attachments/20250528/8c40de60/attachment.htm>

From rousskov at measurement-factory.com  Wed May 28 13:23:05 2025
From: rousskov at measurement-factory.com (Alex Rousskov)
Date: Wed, 28 May 2025 09:23:05 -0400
Subject: [squid-users] How to do transparent rewrite with https requests?
In-Reply-To: <68995794-3057-464C-A6F4-6A6F4CAD67F9@icloud.com>
References: <GVAP278MB000597CE77AB7A15B49DE4F8EE64A@GVAP278MB0005.CHEP278.PROD.OUTLOOK.COM>
 <c6067cc6-d7c5-4a8a-a96c-fb5c9a262809@measurement-factory.com>
 <68995794-3057-464C-A6F4-6A6F4CAD67F9@icloud.com>
Message-ID: <9d21bec3-486c-4cc6-8da9-318b09453c0b@measurement-factory.com>

On 2025-05-27 20:07, ???? wrote:
> 
> acl bump_targets ssl::server_name "/home/user001/ssl_bump/ssl_bump_domain"
> ssl_bump stare step1
> ssl_bump bump step2 bump_targets
> ssl_bump splice step2 !bump_targets
> 
> The /home/user001/ssl_bump/ssl_bump_domain file includes only:
> 
> github.com


> 26.56.128.144 - - [28/May/2025:10:25:18 +0900] "CONNECT mariadb.org:443 HTTP/1.1" 200 0 "-" "curl/8.5.0" TCP_DENIED:HIER_NONE
> 26.56.128.144 - - [28/May/2025:10:25:18 +0900] "GET https://mariadb.org/donate/ HTTP/1.1" 403 4076 "-" "curl/8.5.0" NONE_NONE:HIER_NONE


> As |mariadb.org|?is *not listed in the |ssl_bump_domain|?file*, we 
> expected it to be spliced. However, the log indicates that Squid is able 
> to see the full HTTPS URL, implying the connection was actually bumped.


When http_access rule denies a CONNECT request during SslBump step1, 
Squid bumps the client-to-Squid connection after receiving such a banned 
CONNECT request, waits for the client GET (or equivalent) request on the 
bumped connection, and then responds with an Access Denied error to the 
client. This behavior was implemented because most browsers refuse to 
show CONNECT errors to users; they only show GET errors.

If you do not like this behavior, you may, for example, configure your 
Squid to allow certain CONNECTs [during SslBump step1].

See http_access directive for the primary way to allow or deny requests.

See the following web page for interactions between http_access checks 
and ssl_bump activities:
https://wiki.squid-cache.org/Features/SslPeekAndSplice



> The key point we would like to confirm is:
> 
>     *In a configuration where |ssl_bump|?is enabled, does Squid still
>     allow the initial CONNECT request (returning 200) even for
>     non-whitelisted domains, then wait for the client to send a
>     follow-up HTTPS request (e.g., GET), which is then bumped and
>     blocked (e.g., 403) by Squid?*

The above summary is somewhat close to what is actually happening, but I 
recommend using the summary in my first paragraph above instead. Please 
keep in mind that it is the entire TLS connection that is being bumped 
(or spliced) rather than selected individual requests inside that 
connection. HTTP CONNECT request/response exchange (if any) happens 
before TLS.


> Or alternatively:
> 
>     *Is Squid intentionally connecting to the origin server after
>     CONNECT in order to generate an error page (403 etc.) that can be
>     properly displayed to the client browser?*

Squid does not connect to the origin server in order to generate an 
error page. Roughly speaking[^1], Squid generates an error page based on 
the information already available at the time of error page generation. 
Depending on the ssl_bump step that encountered an error, that error 
page generation may come before or after Squid connects to the origin 
server. See the web page above for details.

[1]: Some error response details are collected later, from the 
subsequent GET request (if any). However, the primary error generation 
activity happens at error discovery time, before that GET. In a sense, 
Squid has a response before it has a request, which creates various 
problems/complications!..


HTH,

Alex.


>> 2025/05/28 1:19?Alex Rousskov <rousskov at measurement-factory.com>????:
>>
>> On 2025-05-27 10:37, Yves MARTIN wrote:
>>
>>> My team expects to transparently rewrite requests through squid, 
>>> replacing original URL/hostname by another target URL/host.
>>> Main objective is to redirect original HTTPS requests triggered by 
>>> ?docker pull alpine? to a local mirrored registry without obvious 
>>> information in user client that the obtained image comes from mirror: 
>>> original image location is preserved, no specific proxy or mirror 
>>> configuration in docker client/daemon to set.
>>> To do so, we have used squid-urlrewrite and it works well for HTTP 
>>> request, even if rewrite targets HTTPS URL.
>>> But when original request is HTTPS, connection still goes to original 
>>> URL/hostname IP address 
>>> https://github.com/rchunping/squid-urlrewrite/issues/3 According to 
>>> debug logs, the original request hostname is resolved to IP early and 
>>> kept in internal context after squid-urlrewrite is invoked.
>>
>> In most cases, when bumping connections from a TLS client to Squid and 
>> from Squid to TLS server, Squid "pins" (i.e. remembers) the 
>> Squid-to-server connection and then (re)uses that pinned connection 
>> for all requests received on the client-to-Squid connection.
>>
>> I have not checked, but speculate that rewriting request target does 
>> not trigger opening a new Squid-to-server TLS connection and re-pinning.
>>
>> IIRC, a Squid that is configured to bump during SslBump step1 does not 
>> pin. Such a configuration is rarely usable on a modern internet, but YMMV.
>>
>>
>> HTH,
>>
>> Alex.
>> _______________________________________________
>> squid-users mailing list
>> squid-users at lists.squid-cache.org
>> https://lists.squid-cache.org/listinfo/squid-users
> 


From nakayamakito at icloud.com  Thu May 29 00:38:20 2025
From: nakayamakito at icloud.com (=?utf-8?B?5Lit5bGx56iA5paX?=)
Date: Thu, 29 May 2025 09:38:20 +0900
Subject: [squid-users] How to do transparent rewrite with https requests?
In-Reply-To: <abb64b31f05f480cb6a23eb4e2677e33@hexcel.com>
References: <abb64b31f05f480cb6a23eb4e2677e33@hexcel.com>
Message-ID: <7968BECE-7789-41B6-97D8-F463F9DC3227@icloud.com>


Thank you for your response.

So it is by design that when SSL_Bump is enabled, Squid does not return a ?403? error for the CONNECT request, but instead returns ?403? after the subsequent GET request.

Also, thank you for suggesting a possible workaround.



You can consider this inquiry closed.

Thanks again!



iPhone????

> 2025/05/28 22:37?Cloutier, Matt <Matt.Cloutier at hexcel.com>????:
> 
> ?Hello,
> 
> The person working on this project is no longer employed at this company.  Thank you for the help on this, but we are going to go in another direction.
> 
> Thank you,
> Matt Cloutier
> 
> 
> 
> This message contains information from Hexcel which may be proprietary or privileged. If you are not the intended recipient, be aware that any disclosure, copying, distribution or use of the contents of this information is prohibited. If you have received this transmission in error, please notify me immediately by telephone or email.
> 
> Protecting your personal data matters to us. For more information about how we may use your personal data, read our Privacy Policy.
> 
> 
> 
> -----Original Message-----
> From: squid-users <squid-users-bounces at lists.squid-cache.org> On Behalf Of Alex Rousskov
> Sent: Wednesday, May 28, 2025 9:23 AM
> To: ???? <nakayamakito at icloud.com>; squid-users at lists.squid-cache.org
> Subject: Re: [squid-users] How to do transparent rewrite with https requests?
> 
> Caution: This email originated from outside of Hexcel. Do not click links or open attachments unless you recognize the sender and know the content is safe.
> 
> 
>> On 2025-05-27 20:07, ???? wrote:
>> 
>> acl bump_targets ssl::server_name "/home/user001/ssl_bump/ssl_bump_domain"
>> ssl_bump stare step1
>> ssl_bump bump step2 bump_targets
>> ssl_bump splice step2 !bump_targets
>> 
>> The /home/user001/ssl_bump/ssl_bump_domain file includes only:
>> 
>> github.com
> 
> 
>> 26.56.128.144 - - [28/May/2025:10:25:18 +0900] "CONNECT
>> mariadb.org:443 HTTP/1.1" 200 0 "-" "curl/8.5.0" TCP_DENIED:HIER_NONE
>> 26.56.128.144 - - [28/May/2025:10:25:18 +0900] "GET
>> https://mari/
>> adb.org%2Fdonate%2F&data=05%7C02%7Cjosh.piana%40hexcel.com%7C204fa12a9
>> f9e4474188208dd9dec17a2%7C4248050df19546d5ac9c0c7c52b04cae%7C0%7C0%7C6
>> 38840359549441010%7CUnknown%7CTWFpbGZsb3d8eyJFbXB0eU1hcGkiOnRydWUsIlYi
>> OiIwLjAuMDAwMCIsIlAiOiJXaW4zMiIsIkFOIjoiTWFpbCIsIldUIjoyfQ%3D%3D%7C0%7
>> C%7C%7C&sdata=Q82TrO03Ee4Z5rmCBSMDYLRgD4LyRL%2BLbu5y5yHqFcs%3D&reserve
>> d=0 HTTP/1.1" 403 4076 "-" "curl/8.5.0" NONE_NONE:HIER_NONE
> 
> 
>> As |mariadb.org| is *not listed in the |ssl_bump_domain| file*, we
>> expected it to be spliced. However, the log indicates that Squid is
>> able to see the full HTTPS URL, implying the connection was actually bumped.
> 
> 
> When http_access rule denies a CONNECT request during SslBump step1, Squid bumps the client-to-Squid connection after receiving such a banned CONNECT request, waits for the client GET (or equivalent) request on the bumped connection, and then responds with an Access Denied error to the client. This behavior was implemented because most browsers refuse to show CONNECT errors to users; they only show GET errors.
> 
> If you do not like this behavior, you may, for example, configure your Squid to allow certain CONNECTs [during SslBump step1].
> 
> See http_access directive for the primary way to allow or deny requests.
> 
> See the following web page for interactions between http_access checks and ssl_bump activities:
> https://wiki.squid-cache.org/Features/SslPeekAndSplice
> 
> 
> 
>> The key point we would like to confirm is:
>> 
>>    *In a configuration where |ssl_bump| is enabled, does Squid still
>>    allow the initial CONNECT request (returning 200) even for
>>    non-whitelisted domains, then wait for the client to send a
>>    follow-up HTTPS request (e.g., GET), which is then bumped and
>>    blocked (e.g., 403) by Squid?*
> 
> The above summary is somewhat close to what is actually happening, but I recommend using the summary in my first paragraph above instead. Please keep in mind that it is the entire TLS connection that is being bumped (or spliced) rather than selected individual requests inside that connection. HTTP CONNECT request/response exchange (if any) happens before TLS.
> 
> 
>> Or alternatively:
>> 
>>    *Is Squid intentionally connecting to the origin server after
>>    CONNECT in order to generate an error page (403 etc.) that can be
>>    properly displayed to the client browser?*
> 
> Squid does not connect to the origin server in order to generate an error page. Roughly speaking[^1], Squid generates an error page based on the information already available at the time of error page generation.
> Depending on the ssl_bump step that encountered an error, that error page generation may come before or after Squid connects to the origin server. See the web page above for details.
> 
> [1]: Some error response details are collected later, from the subsequent GET request (if any). However, the primary error generation activity happens at error discovery time, before that GET. In a sense, Squid has a response before it has a request, which creates various problems/complications!..
> 
> 
> HTH,
> 
> Alex.
> 
> 
>>> 2025/05/28 1:19?Alex Rousskov <rousskov at measurement-factory.com>????:
>>> 
>>>> On 2025-05-27 10:37, Yves MARTIN wrote:
>>> 
>>>> My team expects to transparently rewrite requests through squid,
>>>> replacing original URL/hostname by another target URL/host.
>>>> Main objective is to redirect original HTTPS requests triggered by
>>>> ?docker pull alpine? to a local mirrored registry without obvious
>>>> information in user client that the obtained image comes from mirror:
>>>> original image location is preserved, no specific proxy or mirror
>>>> configuration in docker client/daemon to set.
>>>> To do so, we have used squid-urlrewrite and it works well for HTTP
>>>> request, even if rewrite targets HTTPS URL.
>>>> But when original request is HTTPS, connection still goes to
>>>> original URL/hostname IP address
>>>> https://gi/
>>>> thub.com%2Frchunping%2Fsquid-urlrewrite%2Fissues%2F3&data=05%7C02%7C
>>>> josh.piana%40hexcel.com%7C204fa12a9f9e4474188208dd9dec17a2%7C4248050df19546d5ac9c0c7c52b04cae%7C0%7C0%7C638840359549469713%7CUnknown%7CTWFpbGZsb3d8eyJFbXB0eU1hcGkiOnRydWUsIlYiOiIwLjAuMDAwMCIsIlAiOiJXaW4zMiIsIkFOIjoiTWFpbCIsIldUIjoyfQ%3D%3D%7C0%7C%7C%7C&sdata=1qoWRntXqGMAJU6ea0rpsCpSDKYkZYekXF%2FXIEI2i60%3D&reserved=0 According to debug logs, the original request hostname is resolved to IP early and kept in internal context after squid-urlrewrite is invoked.
>>> 
>>> In most cases, when bumping connections from a TLS client to Squid
>>> and from Squid to TLS server, Squid "pins" (i.e. remembers) the
>>> Squid-to-server connection and then (re)uses that pinned connection
>>> for all requests received on the client-to-Squid connection.
>>> 
>>> I have not checked, but speculate that rewriting request target does
>>> not trigger opening a new Squid-to-server TLS connection and re-pinning.
>>> 
>>> IIRC, a Squid that is configured to bump during SslBump step1 does
>>> not pin. Such a configuration is rarely usable on a modern internet, but YMMV.
>>> 
>>> 
>>> HTH,
>>> 
>>> Alex.
>>> _______________________________________________
>>> squid-users mailing list
>>> squid-users at lists.squid-cache.org
>>> https://lis/
>>> ts.squid-cache.org%2Flistinfo%2Fsquid-users&data=05%7C02%7Cjosh.piana
>>> %40hexcel.com%7C204fa12a9f9e4474188208dd9dec17a2%7C4248050df19546d5ac
>>> 9c0c7c52b04cae%7C0%7C0%7C638840359549482027%7CUnknown%7CTWFpbGZsb3d8e
>>> yJFbXB0eU1hcGkiOnRydWUsIlYiOiIwLjAuMDAwMCIsIlAiOiJXaW4zMiIsIkFOIjoiTW
>>> FpbCIsIldUIjoyfQ%3D%3D%7C0%7C%7C%7C&sdata=GMDv3HOK599Jjw94Lu8mvE%2Bnj
>>> 5s9hsjclXv8HKrD6%2Bw%3D&reserved=0
>> 
> 
> _______________________________________________
> squid-users mailing list
> squid-users at lists.squid-cache.org
> https://lists.squid-cache.org/listinfo/squid-users
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.squid-cache.org/pipermail/squid-users/attachments/20250529/9527cd94/attachment-0001.htm>

