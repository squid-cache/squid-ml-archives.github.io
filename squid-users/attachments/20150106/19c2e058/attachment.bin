Index: source/src/Notes.cc
===================================================================
--- source/src/Notes.cc	(revision 354)
+++ source/src/Notes.cc	(working copy)
@@ -221,6 +221,22 @@
 }
 
 void
+NotePairs::appendAndReplace(const NotePairs *src)
+{
+    for (Vector<NotePairs::Entry *>::const_iterator  i = src->entries.begin(); i != src->entries.end(); ++i) {
+        Vector<NotePairs::Entry *>::iterator  j = entries.begin();
+	while (j != entries.end()) {
+	    if ((*j)->name.cmp((*i)->name.termedBuf()) == 0) {
+	    	entries.prune(*j);
+		j = entries.begin();
+	    } else
+	    	++j;
+	}
+    }
+    append(src);
+}
+
+void
 NotePairs::appendNewOnly(const NotePairs *src)
 {
     for (Vector<NotePairs::Entry *>::const_iterator  i = src->entries.begin(); i != src->entries.end(); ++i) {
Index: source/src/Notes.h
===================================================================
--- source/src/Notes.h	(revision 354)
+++ source/src/Notes.h	(working copy)
@@ -131,6 +131,12 @@
     void append(const NotePairs *src);
 
     /**
+     * Append the entries of the src NotePairs list to our list, replacing any
+     * entries in the destination set that have the same keys.
+     */
+    void appendAndReplace(const NotePairs *src);
+
+    /**
      * Append any new entries of the src NotePairs list to our list.
      * Entries which already exist in the destination set are ignored.
      */
Index: source/src/auth/User.cc
===================================================================
--- source/src/auth/User.cc	(revision 354)
+++ source/src/auth/User.cc	(working copy)
@@ -101,7 +101,7 @@
     debugs(29, 5, HERE << "auth_user '" << from << "' into auth_user '" << this << "'.");
 
     // combine the helper response annotations. Ensuring no duplicates are copied.
-    notes.appendNewOnly(&from->notes);
+    notes.appendAndReplace(&from->notes);
 
     /* absorb the list of IP address sources (for max_user_ip controls) */
     AuthUserIP *new_ipdata;
