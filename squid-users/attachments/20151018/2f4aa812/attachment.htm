<tt>
&lt;html&gt;<br>
&nbsp;&nbsp;&lt;head&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;content=&quot;text/html;&nbsp;charset=UTF-8&quot;&nbsp;http-equiv=&quot;Content-Type&quot;&gt;<br>
&nbsp;&nbsp;&lt;/head&gt;<br>
&nbsp;&nbsp;&lt;body&nbsp;bgcolor=&quot;#FFFFFF&quot;&nbsp;text=&quot;#000000&quot;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;On&nbsp;04.10.2015&nbsp;21:08,&nbsp;Walter&nbsp;H.&nbsp;wrote:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;blockquote&nbsp;cite=&quot;mid:5611792E.2010308@mathemainzel.info&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type=&quot;cite&quot;&gt;Hello,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;does&nbsp;anybody&nbsp;know&nbsp;if&nbsp;squid&nbsp;does&nbsp;certificate&nbsp;checks&nbsp;and&nbsp;how&nbsp;to&nbsp;tell<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;squid&nbsp;to&nbsp;do&nbsp;so;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this&nbsp;is&nbsp;a&nbsp;site&nbsp;with&nbsp;a&nbsp;revoked&nbsp;certificate<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;a&nbsp;class=&quot;moz-txt-link-freetext&quot;&nbsp;href=&quot;https://revoked.grc.com/&quot;&gt;https://revoked.grc.com/&lt;/a&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;without&nbsp;squid,&nbsp;the&nbsp;browser&nbsp;shows&nbsp;that&nbsp;the&nbsp;certificate&nbsp;is&nbsp;revoked<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;and&nbsp;doesn't&nbsp;show&nbsp;the&nbsp;page<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;with&nbsp;squid,&nbsp;the&nbsp;page&nbsp;is&nbsp;shown&nbsp;...<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thanks,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Walter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/blockquote&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;I&nbsp;have&nbsp;solved&nbsp;it:&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;my&nbsp;solution&nbsp;not&nbsp;only&nbsp;does&nbsp;certificate&nbsp;checks&nbsp;using&nbsp;OCSP,&nbsp;it&nbsp;also<br>
&nbsp;&nbsp;&nbsp;&nbsp;stores&nbsp;the&nbsp;real&nbsp;certificates&nbsp;into&nbsp;a&nbsp;different&nbsp;&quot;database&quot;&nbsp;folder;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;someone&nbsp;doesn't&nbsp;want&nbsp;this,&nbsp;just&nbsp;remove&nbsp;the&nbsp;few&nbsp;lines&nbsp;of&nbsp;the&nbsp;shell<br>
&nbsp;&nbsp;&nbsp;&nbsp;script;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;as&nbsp;there&nbsp;exist&nbsp;no&nbsp;CA&nbsp;that&nbsp;allows&nbsp;IP&nbsp;adresses&nbsp;neither&nbsp;in&nbsp;certificate<br>
&nbsp;&nbsp;&nbsp;&nbsp;subject&nbsp;nor&nbsp;in&nbsp;the&nbsp;SAN&nbsp;(subject&nbsp;alternative&nbsp;name),&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;a&nbsp;class=&quot;moz-txt-link-freetext&quot;&nbsp;href=&quot;https://www.whitehouse.gov/&quot;&gt;https://www.whitehouse.gov/&lt;/a&gt;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;(is&nbsp;blocked&nbsp;at&nbsp;my&nbsp;solution&nbsp;because&nbsp;of&nbsp;a&nbsp;root&nbsp;certificate&nbsp;not&nbsp;in&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;cert&nbsp;store)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;all&nbsp;these&nbsp;candidates&nbsp;are&nbsp;blocked&nbsp;with&nbsp;error &nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;pre&gt;&lt;i&gt;X509_V_ERR_CERT_REJECTED&lt;/i&gt;&lt;/pre&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;it&nbsp;uses&nbsp;two&nbsp;components:&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;a&nbsp;shell&nbsp;script&nbsp;(BASH)&nbsp;called&nbsp;by&nbsp;the&nbsp;programme&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;the&nbsp;main&nbsp;programme&nbsp;(in&nbsp;C):&nbsp;the&nbsp;only&nbsp;missing&nbsp;is&nbsp;an&nbsp;exception&nbsp;list<br>
&nbsp;&nbsp;&nbsp;&nbsp;of&nbsp;domains/hosts&nbsp;not&nbsp;to&nbsp;validate&nbsp;through&nbsp;this&nbsp;procedure&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;squid.conf&nbsp;is&nbsp;expanded&nbsp;by&nbsp;these&nbsp;lines:&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;squid.conf&gt;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;acl&nbsp;certSelfSigned&nbsp;ssl_error&nbsp;X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;acl&nbsp;certHasExpired&nbsp;ssl_error&nbsp;X509_V_ERR_CERT_HAS_EXPIRED&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;acl&nbsp;certNotValid&nbsp;ssl_error&nbsp;X509_V_ERR_CERT_NOT_YET_VALID&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;acl&nbsp;certRejected&nbsp;ssl_error&nbsp;X509_V_ERR_CERT_REJECTED&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;acl&nbsp;certRevoked&nbsp;ssl_error&nbsp;X509_V_ERR_CERT_REVOKED&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;acl&nbsp;certUntrusted&nbsp;ssl_error&nbsp;X509_V_ERR_CERT_UNTRUSTED&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;acl&nbsp;certSelfSignedChain&nbsp;ssl_error<br>
&nbsp;&nbsp;&nbsp;&nbsp;X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;acl&nbsp;certChainTooLong&nbsp;ssl_error&nbsp;X509_V_ERR_CERT_CHAIN_TOO_LONG&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;acl&nbsp;certPathLengthExceeded&nbsp;ssl_error&nbsp;X509_V_ERR_PATH_LENGTH_EXCEEDED&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;acl&nbsp;certSignatureFailure&nbsp;ssl_error&nbsp;X509_V_ERR_CERT_SIGNATURE_FAILURE&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;acl&nbsp;crlSignatureFailure&nbsp;ssl_error&nbsp;X509_V_ERR_CRL_SIGNATURE_FAILURE&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;acl&nbsp;caInvalid&nbsp;ssl_error&nbsp;X509_V_ERR_INVALID_CA&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;acl&nbsp;squidDomainMismatch&nbsp;ssl_error&nbsp;SQUID_X509_V_ERR_DOMAIN_MISMATCH&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;acl&nbsp;squidInfiniteValidation&nbsp;ssl_error<br>
&nbsp;&nbsp;&nbsp;&nbsp;SQUID_X509_V_ERR_INFINITE_VALIDATION&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;acl&nbsp;squidSslHandshake&nbsp;ssl_error&nbsp;SQUID_ERR_SSL_HANDSHAKE&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;sslproxy_cert_adapt&nbsp;setValidBefore&nbsp;all  &nbsp;;&nbsp;I&nbsp;have&nbsp;these&nbsp;two,&nbsp;but<br>
&nbsp;&nbsp;&nbsp;&nbsp;they&nbsp;are&nbsp;not&nbsp;needed;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;sslproxy_cert_adapt&nbsp;setValidAfter&nbsp;all&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;sslproxy_cert_error&nbsp;deny&nbsp;certSelfSigned&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;sslproxy_cert_error&nbsp;deny&nbsp;certRejected&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;sslproxy_cert_error&nbsp;deny&nbsp;certRevoked&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;sslproxy_cert_error&nbsp;deny&nbsp;certHasExpired&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;sslproxy_cert_error&nbsp;deny&nbsp;certNotValid&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;sslproxy_cert_error&nbsp;deny&nbsp;certUntrusted&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;sslproxy_cert_error&nbsp;deny&nbsp;certSelfSignedChain&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;sslproxy_cert_error&nbsp;deny&nbsp;certChainTooLong&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;sslproxy_cert_error&nbsp;deny&nbsp;certPathLengthExceeded&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;sslproxy_cert_error&nbsp;deny&nbsp;certSignatureFailure&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;sslproxy_cert_error&nbsp;deny&nbsp;crlSignatureFailure&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;sslproxy_cert_error&nbsp;deny&nbsp;caInvalid&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;sslproxy_cert_error&nbsp;deny&nbsp;squidDomainMismatch&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;sslproxy_cert_error&nbsp;deny&nbsp;squidInfiniteValidation&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;sslproxy_cert_error&nbsp;deny&nbsp;squidSslHandshake&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;sslproxy_cert_error&nbsp;allow&nbsp;all&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;sslcrtvalidator_program&nbsp;cache=8192&nbsp;ttl=240<br>
&nbsp;&nbsp;&nbsp;&nbsp;/usr/lib64/squid/ssl_crtvalid/main.sh&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;sslcrtvalidator_children&nbsp;12&nbsp;startup=5&nbsp;idle=1&nbsp;concurrency=1&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/squid.conf&gt;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;this&nbsp;main.sh&nbsp;script&nbsp;is&nbsp;only&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;main.sh&gt;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#!/bin/sh&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;/usr/lib64/squid/ssl_crtvalid/helper<br>
&nbsp;&nbsp;&nbsp;&nbsp;2&gt;&gt;/tmp/crtvalid-debug.log&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/main.sh&gt;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;someone&nbsp;compiles&nbsp;the&nbsp;programme&nbsp;without&nbsp;_DEBUG&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;then&nbsp;the&nbsp;line&nbsp;in&nbsp;squid.conf&nbsp;would&nbsp;be&nbsp;without&nbsp;this&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;sslcrtvalidator_program&nbsp;cache=8192&nbsp;ttl=240<br>
&nbsp;&nbsp;&nbsp;&nbsp;/usr/lib64/squid/ssl_crtvalid/helper&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;shellscript &nbsp;verify.sh&nbsp;is&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;verify.sh&gt;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#!/bin/sh&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;CAFILE=/etc/pki/tls/certs/ca-bundle.trust.crt&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;DTABASE=/var/local/squid/ssl_crtvalid&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;CERT=$1&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;CHAIN=$3&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;ISSUER=$2&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;SSLHOST=$4&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;openssl&nbsp;verify&nbsp;-CAfile&nbsp;$CAFILE&nbsp;-untrusted&nbsp;$CHAIN&nbsp;$CERT&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;OCSPURL=$(openssl&nbsp;x509&nbsp;-in&nbsp;$CERT&nbsp;-noout&nbsp;-ocsp_uri)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;[&nbsp;&quot;$OCSPURL&quot;&nbsp;==&nbsp;&quot;&quot;&nbsp;];&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;then&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;echo&nbsp;&quot;$CERT:&nbsp;rejected&quot;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;else&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;OCSPHOST=$(echo&nbsp;&quot;$OCSPURL&quot;&nbsp;|gawk&nbsp;-F\/&nbsp;'{&nbsp;print&nbsp;$3&nbsp;}'&nbsp;-)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;openssl&nbsp;ocsp&nbsp;-CAfile&nbsp;$CAFILE&nbsp;-no_nonce&nbsp;-noverify&nbsp;-issuer&nbsp;$ISSUER<br>
&nbsp;&nbsp;&nbsp;&nbsp;-cert&nbsp;$CERT&nbsp;-url&nbsp;&quot;$OCSPURL&quot;&nbsp;-header&nbsp;Host&nbsp;$OCSPHOST&nbsp;|grep&nbsp;&quot;$CERT&quot;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;fi&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;FINGERPRINT=$(openssl&nbsp;x509&nbsp;-in&nbsp;$CERT&nbsp;-noout&nbsp;-sha1&nbsp;-fingerprint&nbsp;|sed<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;{s/SHA1\&nbsp;Fingerprint\=//g;s/\://g}&quot;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;SUBJECT=$(&nbsp;openssl&nbsp;x509&nbsp;-in&nbsp;$CERT&nbsp;-noout&nbsp;-subject&nbsp;|sed<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;{s/subject\=\&nbsp;//g}&quot;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;[&nbsp;-f&nbsp;$DTABASE/certs/$FINGERPRINT.pem&nbsp;];&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;then&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;ENTRY=$(cat&nbsp;$DTABASE/index.txt&nbsp;|grep&nbsp;&quot;$SSLHOST&quot;&nbsp;|grep<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;$FINGERPRINT&quot;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;if&nbsp;[&nbsp;&quot;$ENTRY&quot;&nbsp;==&nbsp;&quot;&quot;&nbsp;];&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;then&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;echo&nbsp;-e&nbsp;-n&nbsp;&quot;$SSLHOST\t$SUBJECT\t$FINGERPRINT.pem\n&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;$DTABASE/index.txt&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;fi&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;else&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;openssl&nbsp;x509&nbsp;-in&nbsp;$CERT&nbsp;-out&nbsp;$DTABASE/certs/$FINGERPRINT.pem&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;echo&nbsp;-e&nbsp;-n&nbsp;&quot;$SSLHOST\t$SUBJECT\t$FINGERPRINT.pem\n&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;$DTABASE/index.txt&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;fi&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/verify.sh&gt;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;helper.c&gt;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;/*&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp; *&nbsp;Squid&nbsp;SSL&nbsp;Validator&nbsp;helper&nbsp;programme&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp; *&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp; */&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#include&nbsp;&lt;ctype.h&gt;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#include&nbsp;&lt;fcntl.h&gt;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#include&nbsp;&lt;stdio.h&gt;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#include&nbsp;&lt;stdlib.h&gt;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#include&nbsp;&lt;string.h&gt;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#include&nbsp;&lt;time.h&gt;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#include&nbsp;&lt;unistd.h&gt;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#define&nbsp;_DEBUG&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#ifdef&nbsp;_DEBUG&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#define&nbsp;DEBUGINIT(&nbsp;)&nbsp;debugInit(&nbsp;__LINE__&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#define&nbsp;DEBUGOUT2(&nbsp;val,&nbsp;len&nbsp;)&nbsp;debugWrite(&nbsp;(const&nbsp;void*)&nbsp;(&nbsp;val&nbsp;),&nbsp;len<br>
&nbsp;&nbsp;&nbsp;&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#define&nbsp;DEBUGOUT(&nbsp;szval&nbsp;)&nbsp;debugWrite(&nbsp;(const&nbsp;void*)&nbsp;(&nbsp;szval&nbsp;),<br>
&nbsp;&nbsp;&nbsp;&nbsp;strlen(&nbsp;szval&nbsp;)&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#define&nbsp;DEBUGOUTINT(&nbsp;intval&nbsp;)&nbsp;debugOutputInt(&nbsp;__LINE__,&nbsp;#intval,<br>
&nbsp;&nbsp;&nbsp;&nbsp;intval&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#define&nbsp;DEBUGOUTSZ(&nbsp;szval&nbsp;)&nbsp;debugOutputStr(&nbsp;__LINE__,&nbsp;#szval,&nbsp;szval<br>
&nbsp;&nbsp;&nbsp;&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#else&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#define&nbsp;DEBUGINIT(&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#define&nbsp;DEBUGOUT2(&nbsp;val,&nbsp;len&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#define&nbsp;DEBUGOUT(&nbsp;szval&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#define&nbsp;DEBUGOUTINT(&nbsp;intval&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#define&nbsp;DEBUGOUTSZ(&nbsp;szval&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#endif&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;enum&nbsp;_MSGTYPE&nbsp;{&nbsp;INTERNERROR&nbsp;=&nbsp;-1,&nbsp;NOERROR&nbsp;=&nbsp;0,&nbsp;SSLERROR&nbsp;=&nbsp;1&nbsp;};&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;_sslmsg_t&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;char&nbsp;szErrorName[&nbsp;72&nbsp;];&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;int&nbsp;nCertNmbr;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;};&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;char&nbsp;szMsgConcurrencyRequired[&nbsp;]&nbsp;=&nbsp;&quot;This&nbsp;SSL&nbsp;Certificate<br>
&nbsp;&nbsp;&nbsp;&nbsp;Validator&nbsp;helper&nbsp;is&nbsp;concurrent&nbsp;and&nbsp;requires&nbsp;the&nbsp;concurrency&nbsp;option<br>
&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;be&nbsp;specified.&quot;;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;char&nbsp;szMsgInvalidSize[&nbsp;]&nbsp;=&nbsp;&quot;SSL&nbsp;Certificate&nbsp;Validator:&nbsp;invalid<br>
&nbsp;&nbsp;&nbsp;&nbsp;request&nbsp;size&nbsp;parameter.&quot;;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;char&nbsp;szMsgMemoryAllocFailed[&nbsp;]&nbsp;=&nbsp;&quot;SSL&nbsp;Certificate&nbsp;Validator:<br>
&nbsp;&nbsp;&nbsp;&nbsp;memory&nbsp;allocation&nbsp;failed.&quot;;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;char&nbsp;szMsgSyntaxError[&nbsp;]&nbsp;=&nbsp;&quot;SSL&nbsp;Certificate&nbsp;Validator:&nbsp;request<br>
&nbsp;&nbsp;&nbsp;&nbsp;syntax&nbsp;error.&quot;;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;char&nbsp;szMsgReadIOError[&nbsp;]&nbsp;=&nbsp;&quot;SSL&nbsp;Certificate&nbsp;Validator:&nbsp;read<br>
&nbsp;&nbsp;&nbsp;&nbsp;i/o&nbsp;error.&quot;;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;char&nbsp;szMsgUnknownError[&nbsp;]&nbsp;=&nbsp;&quot;SSL&nbsp;Certificate&nbsp;Validator:<br>
&nbsp;&nbsp;&nbsp;&nbsp;unknown&nbsp;error.&quot;;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;char&nbsp;szSslMsgCertRevoked[&nbsp;]&nbsp;=&nbsp;&quot;X509_V_ERR_CERT_REVOKED&quot;;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;char&nbsp;szSslMsgCertUntrusted[&nbsp;]&nbsp;=&nbsp;&quot;X509_V_ERR_CERT_UNTRUSTED&quot;;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;char&nbsp;szSslMsgCertRejected[&nbsp;]&nbsp;=&nbsp;&quot;X509_V_ERR_CERT_REJECTED&quot;;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;char&nbsp;szSslMsgCertHasExpired[&nbsp;]&nbsp;=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;X509_V_ERR_CERT_HAS_EXPIRED&quot;;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;char&nbsp;szSslMsgCertNotYetValid[&nbsp;]&nbsp;=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;X509_V_ERR_CERT_NOT_YET_VALID&quot;;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;char&nbsp;szSslMsgCertChainTooLong[&nbsp;]&nbsp;=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;X509_V_ERR_CERT_CHAIN_TOO_LONG&quot;;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;char&nbsp;szSslMsgCertSelfSigned[&nbsp;]&nbsp;=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT&quot;;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;char&nbsp;szSslMsgCertSelfSignedInChain[&nbsp;]&nbsp;=&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;&quot;X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN&quot;;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;char&nbsp;szSslMsgCertPathLengthExceeded[&nbsp;]&nbsp;=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;X509_V_ERR_PATH_LENGTH_EXCEEDED&quot;;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;char&nbsp;szSslMsgInvalidCa[&nbsp;]&nbsp;=&nbsp;&quot;X509_V_ERR_INVALID_CA&quot;;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;char&nbsp;szSslMsgSquidDomainMismatch[&nbsp;]&nbsp;=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;SQUID_X509_V_ERR_DOMAIN_MISMATCH&quot;;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;char*&nbsp;pszSslMsgs[&nbsp;]&nbsp;=&nbsp;{&nbsp;szSslMsgSquidDomainMismatch,&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;szSslMsgCertPathLengthExceeded,&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;szSslMsgCertSelfSigned,&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;szSslMsgCertSelfSignedInChain,&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;szSslMsgCertUntrusted,&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;szSslMsgCertRevoked,&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;szSslMsgCertHasExpired,&nbsp;szSslMsgCertNotYetValid&nbsp;};&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#ifdef&nbsp;_DEBUG&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;char&nbsp;szDbgMarkInit[&nbsp;]&nbsp;=&nbsp;&quot;=====[&nbsp;INIT&nbsp;]=====\n&quot;;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;char&nbsp;szDbgMarkReceiveRqustBegin[&nbsp;]&nbsp;=&nbsp;&quot;-----[&nbsp;REQUEST&nbsp;BEGIN<br>
&nbsp;&nbsp;&nbsp;&nbsp;]-----\n&quot;;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;char&nbsp;szDbgMarkReceiveRqustEnd[&nbsp;]&nbsp;=&nbsp;&quot;-----[&nbsp;REQUEST&nbsp;END<br>
&nbsp;&nbsp;&nbsp;&nbsp;]-----\n&quot;;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;char&nbsp;szDbgMarkReturnMsgBegin[&nbsp;]&nbsp;=&nbsp;&quot;-----[&nbsp;MSG&nbsp;BEGIN&nbsp;]-----\n&quot;;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;char&nbsp;szDbgMarkReturnMsgEnd[&nbsp;]&nbsp;=&nbsp;&quot;-----[&nbsp;MSG&nbsp;END&nbsp;]-----\n&quot;;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#endif&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;int&nbsp;nFileCert;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;int&nbsp;nFileChain;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;int&nbsp;nFileIssuer;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;char&nbsp;szFnameCert[&nbsp;260&nbsp;];&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;char&nbsp;szFnameChain[&nbsp;260&nbsp;];&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;char&nbsp;szFnameIssuer[&nbsp;260&nbsp;];&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;char&nbsp;szSslHost[&nbsp;260&nbsp;];&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;char*&nbsp;pszRqustBuf&nbsp;=&nbsp;(char*)&nbsp;NULL;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;struct&nbsp;_sslmsg_t&nbsp;stRqustSslMsgs[&nbsp;8&nbsp;];&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;int&nbsp;nRqustSslMsgsCount;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;cleanupData(&nbsp;void&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;initData(&nbsp;void&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;readRqustHlpr(&nbsp;int*&nbsp;pnEchoId,&nbsp;int*&nbsp;pnRqustRead&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;receiveRequest(&nbsp;int*&nbsp;pnEchoId&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;returnMsg(&nbsp;int&nbsp;nEchoId,&nbsp;int&nbsp;nMsgType,&nbsp;int&nbsp;nCert,&nbsp;const&nbsp;char*<br>
&nbsp;&nbsp;&nbsp;&nbsp;pszMsg&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;verifyCertificate(&nbsp;char*&nbsp;pszSslMsg&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;verifyHostName(&nbsp;const&nbsp;char*&nbsp;pszHostName&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#ifdef&nbsp;_DEBUG&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;debugInit(&nbsp;int&nbsp;nLine&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;debugOutputHlpr(&nbsp;int&nbsp;nLine,&nbsp;const&nbsp;void*&nbsp;pvdBuf,&nbsp;int&nbsp;nBufLen&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;debugOutputInt(&nbsp;int&nbsp;nLine,&nbsp;const&nbsp;char*&nbsp;pszName,&nbsp;int&nbsp;nVal&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;debugOutputStr(&nbsp;int&nbsp;nLine,&nbsp;const&nbsp;char*&nbsp;pszName,&nbsp;const&nbsp;char*<br>
&nbsp;&nbsp;&nbsp;&nbsp;pszVal&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;debugWrite(&nbsp;const&nbsp;void*&nbsp;pvdBuf,&nbsp;int&nbsp;nBufLen&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#endif&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;call&nbsp;params:&nbsp;none&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;main(&nbsp;int&nbsp;argc,&nbsp;char*&nbsp;argv[&nbsp;]&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;int&nbsp;nEchoId,&nbsp;nRet&nbsp;=&nbsp;0;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;DEBUGINIT(&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;initData(&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;nRet&nbsp;=&nbsp;receiveRequest(&nbsp;&amp;nEchoId&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;DEBUGOUTINT(&nbsp;nRet&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;if&nbsp;(&nbsp;nRet&nbsp;&lt;&nbsp;0&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;switch&nbsp;(&nbsp;nRet&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;case&nbsp;-1&nbsp;:&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;returnMsg(&nbsp;-1,&nbsp;(int)&nbsp;INTERNERROR,&nbsp;-1,<br>
&nbsp;&nbsp;&nbsp;&nbsp;szMsgConcurrencyRequired&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;break;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;case&nbsp;-2&nbsp;:&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;returnMsg(&nbsp;0,&nbsp;(int)&nbsp;INTERNERROR,&nbsp;-1,<br>
&nbsp;&nbsp;&nbsp;&nbsp;szMsgMemoryAllocFailed&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;break;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;case&nbsp;-3&nbsp;:&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;returnMsg(&nbsp;0,&nbsp;(int)&nbsp;INTERNERROR,&nbsp;-1,<br>
&nbsp;&nbsp;&nbsp;&nbsp;szMsgInvalidSize&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;break;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;case&nbsp;-4&nbsp;:&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;returnMsg(&nbsp;0,&nbsp;(int)&nbsp;INTERNERROR,&nbsp;-1,<br>
&nbsp;&nbsp;&nbsp;&nbsp;szMsgSyntaxError&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;break;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;case&nbsp;-5&nbsp;:&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;returnMsg(&nbsp;0,&nbsp;(int)&nbsp;INTERNERROR,&nbsp;-1,<br>
&nbsp;&nbsp;&nbsp;&nbsp;szMsgReadIOError&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;break;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;default&nbsp;:&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;returnMsg(&nbsp;0,&nbsp;(int)&nbsp;INTERNERROR,&nbsp;-1,<br>
&nbsp;&nbsp;&nbsp;&nbsp;szMsgUnknownError&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;cleanupData(&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;exit(&nbsp;EXIT_FAILURE&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;if&nbsp;(&nbsp;nRet&nbsp;&gt;&nbsp;0&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;returnMsg(&nbsp;nEchoId,&nbsp;(int)&nbsp;NOERROR,&nbsp;0,&nbsp;(const&nbsp;char*)&nbsp;NULL&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;cleanupData(&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;exit(&nbsp;EXIT_SUCCESS&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;int&nbsp;m,&nbsp;n;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;for&nbsp;(&nbsp;n&nbsp;=&nbsp;0;&nbsp;n&nbsp;&lt;&nbsp;sizeof(&nbsp;pszSslMsgs&nbsp;)&nbsp;/&nbsp;sizeof(&nbsp;char*&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;n++&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;for&nbsp;(&nbsp;m&nbsp;=&nbsp;0;&nbsp;m&nbsp;&lt;&nbsp;nRqustSslMsgsCount;&nbsp;m++&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;if&nbsp;(&nbsp;strcmp(&nbsp;pszSslMsgs[&nbsp;n&nbsp;],&nbsp;stRqustSslMsgs[&nbsp;m<br>
&nbsp;&nbsp;&nbsp;&nbsp;].szErrorName&nbsp;)&nbsp;==&nbsp;0&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;returnMsg(&nbsp;nEchoId,&nbsp;(int)&nbsp;SSLERROR,&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;stRqustSslMsgs[&nbsp;m&nbsp;].nCertNmbr,&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;stRqustSslMsgs[&nbsp;m&nbsp;].szErrorName&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;cleanupData(&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;exit(&nbsp;EXIT_SUCCESS&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;if&nbsp;(&nbsp;verifyHostName(&nbsp;szSslHost&nbsp;)&nbsp;&lt;&nbsp;0&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;returnMsg(&nbsp;nEchoId,&nbsp;(int)&nbsp;SSLERROR,&nbsp;0,<br>
&nbsp;&nbsp;&nbsp;&nbsp;szSslMsgSquidDomainMismatch&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;cleanupData(&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;exit(&nbsp;EXIT_SUCCESS&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;static&nbsp;char&nbsp;szSslMsg[&nbsp;72&nbsp;];&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;if&nbsp;(&nbsp;(&nbsp;nRet&nbsp;=&nbsp;verifyCertificate(&nbsp;szSslMsg&nbsp;)&nbsp;)&nbsp;&lt;&nbsp;0&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;returnMsg(&nbsp;nEchoId,&nbsp;(int)&nbsp;INTERNERROR,&nbsp;-1,<br>
&nbsp;&nbsp;&nbsp;&nbsp;szMsgUnknownError&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;cleanupData(&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;exit(&nbsp;EXIT_FAILURE&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;if&nbsp;(&nbsp;nRet&nbsp;&gt;&nbsp;0&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;returnMsg(&nbsp;nEchoId,&nbsp;(int)&nbsp;SSLERROR,&nbsp;0,&nbsp;szSslMsg&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;cleanupData(&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;exit(&nbsp;EXIT_SUCCESS&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;returnMsg(&nbsp;nEchoId,&nbsp;(int)&nbsp;NOERROR,&nbsp;0,&nbsp;(const&nbsp;char*)&nbsp;NULL&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;cleanupData(&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;exit(&nbsp;EXIT_SUCCESS&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;return&nbsp;0;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;cleanupData(&nbsp;void&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;if&nbsp;(&nbsp;nFileCert&nbsp;&gt;&nbsp;0&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;unlink(&nbsp;szFnameCert&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;nFileCert&nbsp;=&nbsp;0;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;if&nbsp;(&nbsp;nFileChain&nbsp;&gt;&nbsp;0&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;unlink(&nbsp;szFnameChain&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;nFileChain&nbsp;=&nbsp;0;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;if&nbsp;(&nbsp;nFileIssuer&nbsp;&gt;&nbsp;0&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;unlink(&nbsp;szFnameIssuer&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;nFileIssuer&nbsp;=&nbsp;0;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;if&nbsp;(&nbsp;pszRqustBuf&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;free(&nbsp;pszRqustBuf&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;pszRqustBuf&nbsp;=&nbsp;(char*)&nbsp;NULL;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;fsync(&nbsp;STDOUT_FILENO&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;initData(&nbsp;void&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;const&nbsp;char&nbsp;szFnameTmplte[&nbsp;]&nbsp;=&nbsp;&quot;/tmp/squidXXXXXXXX&quot;;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;register&nbsp;int&nbsp;n;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;for&nbsp;(&nbsp;n&nbsp;=&nbsp;0;&nbsp;n&nbsp;&lt;&nbsp;sizeof(&nbsp;stRqustSslMsgs&nbsp;)&nbsp;/&nbsp;sizeof(&nbsp;struct<br>
&nbsp;&nbsp;&nbsp;&nbsp;_sslmsg_t&nbsp;);&nbsp;n++&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;strcpy(&nbsp;stRqustSslMsgs[&nbsp;n&nbsp;].szErrorName,&nbsp;&quot;&quot;&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;stRqustSslMsgs[&nbsp;n&nbsp;].nCertNmbr&nbsp;=&nbsp;0;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;nRqustSslMsgsCount&nbsp;=&nbsp;0;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;strcpy(&nbsp;szFnameCert,&nbsp;szFnameTmplte&nbsp;);   &nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;strcpy(&nbsp;szFnameChain,&nbsp;szFnameTmplte&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;strcpy(&nbsp;szFnameIssuer,&nbsp;szFnameTmplte&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;nFileCert&nbsp;=&nbsp;nFileChain&nbsp;=&nbsp;nFileIssuer&nbsp;=&nbsp;0;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;readRqustHlpr(&nbsp;int*&nbsp;pnEchoId,&nbsp;int*&nbsp;pnRqustRead&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;const&nbsp;char&nbsp;chLf&nbsp;=&nbsp;'\n';&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;static&nbsp;szBuf[&nbsp;260&nbsp;];&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;int&nbsp;nLen,&nbsp;nCount&nbsp;=&nbsp;0,&nbsp;nSize&nbsp;=&nbsp;0,&nbsp;nRet&nbsp;=&nbsp;0;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;if&nbsp;(&nbsp;(&nbsp;nLen&nbsp;=&nbsp;read(&nbsp;STDIN_FILENO,&nbsp;(void*)&nbsp;szBuf,&nbsp;256&nbsp;)&nbsp;)&nbsp;&gt;&nbsp;0<br>
&nbsp;&nbsp;&nbsp;&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;char*&nbsp;pszNxt;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;szBuf[&nbsp;nLen&nbsp;]&nbsp;=&nbsp;'\0';&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;DEBUGOUT(&nbsp;szDbgMarkReceiveRqustBegin&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;char*&nbsp;psz&nbsp;=&nbsp;(char*)&nbsp;szBuf;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;long&nbsp;l&nbsp;=&nbsp;(long)&nbsp;strtol(&nbsp;psz,&nbsp;&amp;pszNxt,&nbsp;10&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;if&nbsp;(&nbsp;psz&nbsp;&lt;&nbsp;pszNxt&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;*pnEchoId&nbsp;=&nbsp;(int)&nbsp;l;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;else&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;nRet&nbsp;=&nbsp;-1;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;if&nbsp;(&nbsp;nRet&nbsp;&gt;=&nbsp;0&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;char*&nbsp;psz&nbsp;=&nbsp;(char*)&nbsp;++pszNxt;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;DEBUGOUT2(&nbsp;szBuf,&nbsp;nLen&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;if&nbsp;(&nbsp;strncmp(&nbsp;psz,&nbsp;&quot;cert_validate&quot;,&nbsp;13&nbsp;)&nbsp;==&nbsp;0&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;long&nbsp;lVal&nbsp;=&nbsp;(long)&nbsp;strtol(&nbsp;psz&nbsp;+&nbsp;14,&nbsp;&amp;pszNxt,&nbsp;10<br>
&nbsp;&nbsp;&nbsp;&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;if&nbsp;(&nbsp;(&nbsp;lVal&nbsp;&gt;&nbsp;0L&nbsp;)&nbsp;&amp;&amp;&nbsp;(&nbsp;lVal&nbsp;&lt;&nbsp;10000L<br>
&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;nSize&nbsp;=&nbsp;(int)&nbsp;lVal;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;else&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;*pnRqustRead&nbsp;=&nbsp;-1;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;if&nbsp;(&nbsp;nSize&nbsp;&gt;&nbsp;0&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;if&nbsp;(&nbsp;pszRqustBuf&nbsp;=&nbsp;(char*)&nbsp;malloc(&nbsp;nSize&nbsp;+&nbsp;4&nbsp;)&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;int&nbsp;n&nbsp;=&nbsp;(int)&nbsp;strlen(&nbsp;++pszNxt&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;strcpy(&nbsp;pszRqustBuf,&nbsp;pszNxt&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;while&nbsp;(&nbsp;(&nbsp;n&nbsp;&lt;&nbsp;nSize&nbsp;)&nbsp;&amp;&amp;&nbsp;(&nbsp;(&nbsp;nLen<br>
&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;read(&nbsp;STDIN_FILENO,&nbsp;(void*)&nbsp;(&nbsp;pszRqustBuf&nbsp;+&nbsp;n&nbsp;),&nbsp;nSize&nbsp;-&nbsp;n&nbsp;)&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&nbsp;0&nbsp;)&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;*(&nbsp;pszRqustBuf&nbsp;+&nbsp;n&nbsp;+&nbsp;nLen&nbsp;)&nbsp;=&nbsp;'\0';&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;DEBUGOUT2(&nbsp;pszRqustBuf&nbsp;+&nbsp;n,&nbsp;nLen&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;nCount++;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;n&nbsp;+=&nbsp;nLen;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;DEBUGOUT2(&nbsp;&amp;chLf,&nbsp;1&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;if&nbsp;(&nbsp;n&nbsp;&gt;=&nbsp;nSize&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;*pnRqustRead&nbsp;=&nbsp;1;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;else&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;nRet&nbsp;=&nbsp;-5;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;else&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;nRet&nbsp;=&nbsp;-2;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;else&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;nRet&nbsp;=&nbsp;-3;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;else&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;nRet&nbsp;=&nbsp;-4;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;DEBUGOUT(&nbsp;szDbgMarkReceiveRqustEnd&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;else&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;nRet&nbsp;=&nbsp;-5;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;DEBUGOUTINT(&nbsp;nRet&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;DEBUGOUTINT(&nbsp;nSize&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;DEBUGOUTINT(&nbsp;nCount&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;return&nbsp;nRet;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;receiveRequest(&nbsp;int*&nbsp;pnEchoId&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;const&nbsp;char&nbsp;chLf&nbsp;=&nbsp;'\n';&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;static&nbsp;char&nbsp;sz[&nbsp;130&nbsp;],&nbsp;szTmp[&nbsp;50&nbsp;];&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;char*&nbsp;pszItemPtr;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;int&nbsp;m,&nbsp;n,&nbsp;nItemLen,&nbsp;nRqustRead&nbsp;=&nbsp;0;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;int&nbsp;nRet&nbsp;=&nbsp;(int)&nbsp;readRqustHlpr(&nbsp;pnEchoId,&nbsp;&amp;nRqustRead&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;DEBUGOUTINT(&nbsp;nRqustRead&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;if&nbsp;(&nbsp;nRet&nbsp;&lt;&nbsp;0&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;return&nbsp;nRet;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;if&nbsp;(&nbsp;nRet&nbsp;==&nbsp;0&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;if&nbsp;(&nbsp;pszItemPtr&nbsp;=&nbsp;strstr(&nbsp;pszRqustBuf,&nbsp;&quot;host=&quot;&nbsp;)&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;nItemLen&nbsp;=&nbsp;strcspn(&nbsp;pszItemPtr&nbsp;+=&nbsp;5,&nbsp;&quot;&nbsp;\r\n&quot;&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;strncpy(&nbsp;szSslHost,&nbsp;pszItemPtr,&nbsp;nItemLen&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;szSslHost[&nbsp;nItemLen&nbsp;]&nbsp;=&nbsp;'\0';&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;else&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;nRet&nbsp;=&nbsp;1;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;DEBUGOUTINT(&nbsp;nRet&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;if&nbsp;(&nbsp;nRet&nbsp;&gt;&nbsp;0&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;return&nbsp;nRet;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;DEBUGOUTSZ(&nbsp;szSslHost&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;if&nbsp;(&nbsp;nRet&nbsp;==&nbsp;0&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;for&nbsp;(&nbsp;n&nbsp;=&nbsp;0;&nbsp;n&nbsp;&lt;&nbsp;8;&nbsp;n++&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;int&nbsp;nCertNmbr&nbsp;=&nbsp;-1;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;sprintf(&nbsp;sz,&nbsp;&quot;error_cert_%d=&quot;,&nbsp;n&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;if&nbsp;(&nbsp;pszItemPtr&nbsp;=&nbsp;strstr(&nbsp;pszRqustBuf,&nbsp;sz&nbsp;)&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;nItemLen&nbsp;=&nbsp;strcspn(&nbsp;pszItemPtr&nbsp;+=&nbsp;13,&nbsp;&quot;&nbsp;\r\n&quot;&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;strncpy(&nbsp;szTmp,&nbsp;(void*)&nbsp;pszItemPtr,&nbsp;nItemLen&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;szTmp[&nbsp;nItemLen&nbsp;]&nbsp;=&nbsp;'\0';&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;for&nbsp;(&nbsp;m&nbsp;=&nbsp;0;&nbsp;m&nbsp;&lt;&nbsp;7;&nbsp;m++&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;sprintf(&nbsp;sz,&nbsp;&quot;cert_%d&quot;,&nbsp;m&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;if&nbsp;(&nbsp;strcmp(&nbsp;sz,&nbsp;szTmp&nbsp;)&nbsp;==&nbsp;0&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;nCertNmbr&nbsp;=&nbsp;m;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;break;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;if&nbsp;(&nbsp;nCertNmbr&nbsp;&gt;=&nbsp;0&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;sprintf(&nbsp;sz,&nbsp;&quot;error_name_%d=&quot;,&nbsp;n&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;if&nbsp;(&nbsp;pszItemPtr&nbsp;=&nbsp;strstr(&nbsp;pszRqustBuf,&nbsp;sz&nbsp;)&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;nItemLen&nbsp;=&nbsp;strcspn(&nbsp;pszItemPtr&nbsp;+=&nbsp;13,&nbsp;&quot;&nbsp;\r\n&quot;&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;strncpy(&nbsp;szTmp,&nbsp;(void*)&nbsp;pszItemPtr,&nbsp;nItemLen&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;szTmp[&nbsp;nItemLen&nbsp;]&nbsp;=&nbsp;'\0';&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;strcpy(&nbsp;stRqustSslMsgs[&nbsp;nRqustSslMsgsCount<br>
&nbsp;&nbsp;&nbsp;&nbsp;].szErrorName,&nbsp;szTmp&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;stRqustSslMsgs[&nbsp;nRqustSslMsgsCount++&nbsp;].nCertNmbr<br>
&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;nCertNmbr;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;else&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;nRet&nbsp;=&nbsp;1;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;DEBUGOUTINT(&nbsp;nRet&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;if&nbsp;(&nbsp;nRet&nbsp;&gt;&nbsp;0&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;return&nbsp;nRet;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;DEBUGOUTINT(&nbsp;nRqustSslMsgsCount&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#ifdef&nbsp;_DEBUG&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;for&nbsp;(&nbsp;n&nbsp;=&nbsp;0;&nbsp;n&nbsp;&lt;&nbsp;nRqustSslMsgsCount;&nbsp;n++&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;DEBUGOUTINT(&nbsp;stRqustSslMsgs[&nbsp;n&nbsp;].nCertNmbr&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;DEBUGOUTSZ(&nbsp;stRqustSslMsgs[&nbsp;n&nbsp;].szErrorName&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#endif&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;if&nbsp;(&nbsp;nRet&nbsp;==&nbsp;0&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;if&nbsp;(&nbsp;(&nbsp;nFileCert&nbsp;=&nbsp;mkstemp(&nbsp;szFnameCert&nbsp;)&nbsp;)&nbsp;&gt;&nbsp;0&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;else&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;nRet&nbsp;=&nbsp;2;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;if&nbsp;(&nbsp;nRet&nbsp;==&nbsp;0&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;if&nbsp;(&nbsp;(&nbsp;nFileChain&nbsp;=&nbsp;mkstemp(&nbsp;szFnameChain&nbsp;)&nbsp;)&nbsp;&gt;&nbsp;0&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;else&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;close(&nbsp;nFileCert&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;unlink(&nbsp;szFnameCert&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;nFileCert&nbsp;=&nbsp;0;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;nRet&nbsp;=&nbsp;2;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;if&nbsp;(&nbsp;nRet&nbsp;==&nbsp;0&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;if&nbsp;(&nbsp;(&nbsp;nFileIssuer&nbsp;=&nbsp;mkstemp(&nbsp;szFnameIssuer&nbsp;)&nbsp;)&nbsp;&gt;&nbsp;0<br>
&nbsp;&nbsp;&nbsp;&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;else&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;close(&nbsp;nFileCert&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;close(&nbsp;nFileChain&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;unlink(&nbsp;szFnameCert&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;unlink(&nbsp;szFnameChain&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;nFileCert&nbsp;=&nbsp;0;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;nFileChain&nbsp;=&nbsp;0;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;nRet&nbsp;=&nbsp;2;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;DEBUGOUTINT(&nbsp;nRet&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;if&nbsp;(&nbsp;nRet&nbsp;&gt;&nbsp;0&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;return&nbsp;nRet;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;DEBUGOUTINT(&nbsp;nFileCert&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;DEBUGOUTINT(&nbsp;nFileChain&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;DEBUGOUTINT(&nbsp;nFileIssuer&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;if&nbsp;(&nbsp;nRet&nbsp;==&nbsp;0&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;for&nbsp;(&nbsp;n&nbsp;=&nbsp;0;&nbsp;n&nbsp;&lt;&nbsp;8;&nbsp;n++&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;sprintf(&nbsp;sz,&nbsp;&quot;cert_%d=-----BEGIN&nbsp;CERTIFICATE-----&quot;,&nbsp;n&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;if&nbsp;(&nbsp;pszItemPtr&nbsp;=&nbsp;strstr(&nbsp;pszRqustBuf,&nbsp;sz&nbsp;)&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;char*&nbsp;pszTag&nbsp;=&nbsp;(char*)&nbsp;strstr(&nbsp;pszItemPtr&nbsp;+=&nbsp;7,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;-----END&nbsp;CERTIFICATE-----&quot;&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;if&nbsp;(&nbsp;pszTag&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;nItemLen&nbsp;=&nbsp;(int)&nbsp;(&nbsp;pszTag&nbsp;-&nbsp;pszItemPtr&nbsp;)&nbsp;+&nbsp;25;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;if&nbsp;(&nbsp;n&nbsp;==&nbsp;0&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;write(&nbsp;nFileCert,&nbsp;(void*)&nbsp;pszItemPtr,<br>
&nbsp;&nbsp;&nbsp;&nbsp;nItemLen&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;write(&nbsp;nFileCert,&nbsp;(void*)&nbsp;&amp;chLf,&nbsp;1&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;if&nbsp;(&nbsp;n&nbsp;==&nbsp;1&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;write(&nbsp;nFileIssuer,&nbsp;(void*)&nbsp;pszItemPtr,<br>
&nbsp;&nbsp;&nbsp;&nbsp;nItemLen&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;write(&nbsp;nFileIssuer,&nbsp;(void*)&nbsp;&amp;chLf,&nbsp;1&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;if&nbsp;(&nbsp;n&nbsp;&gt;=&nbsp;1&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;write(&nbsp;nFileChain,&nbsp;(void*)&nbsp;pszItemPtr,<br>
&nbsp;&nbsp;&nbsp;&nbsp;nItemLen&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;write(&nbsp;nFileChain,&nbsp;(void*)&nbsp;&amp;chLf,&nbsp;1&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;else&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;nRet&nbsp;=&nbsp;3;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;break;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;else&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;if&nbsp;(&nbsp;n&nbsp;==&nbsp;0&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;nRet&nbsp;=&nbsp;3;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;break;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;close(&nbsp;nFileCert&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;close(&nbsp;nFileChain&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;close(&nbsp;nFileIssuer&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;DEBUGOUTINT(&nbsp;nRet&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;DEBUGOUTSZ(&nbsp;szFnameCert&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;DEBUGOUTSZ(&nbsp;szFnameChain&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;DEBUGOUTSZ(&nbsp;szFnameIssuer&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;return&nbsp;nRet;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;returnMsg(&nbsp;int&nbsp;nEchoId,&nbsp;int&nbsp;nMsgType,&nbsp;int&nbsp;nCert,&nbsp;const&nbsp;char*<br>
&nbsp;&nbsp;&nbsp;&nbsp;pszMsg&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;static&nbsp;char&nbsp;sz[&nbsp;260&nbsp;];&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;static&nbsp;char&nbsp;szMsgBuf[&nbsp;260&nbsp;];&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#ifdef&nbsp;_DEBUG&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;const&nbsp;char&nbsp;szEndTerm[&nbsp;]&nbsp;=&nbsp;&quot;\\x01\n&quot;;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#endif&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;if&nbsp;(&nbsp;nMsgType&nbsp;==&nbsp;(int)&nbsp;NOERROR&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;sprintf(&nbsp;szMsgBuf,&nbsp;&quot;%d&nbsp;OK&nbsp;0&nbsp;\1&quot;,&nbsp;nEchoId&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;else&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;if&nbsp;(&nbsp;nMsgType&nbsp;==&nbsp;(int)&nbsp;SSLERROR&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;const&nbsp;char&nbsp;szFmtError[&nbsp;]&nbsp;=&nbsp;&quot;error_name_0=%s\n&quot;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;&quot;error_reason_0=Checked&nbsp;by&nbsp;&quot;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;&quot;Squid&nbsp;SSL&nbsp;Certificate&nbsp;Validator\n&quot;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;&quot;error_cert_0=cert_%d\n&quot;;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;sprintf(&nbsp;sz,&nbsp;szFmtError,&nbsp;pszMsg,&nbsp;nCert&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;sprintf(&nbsp;szMsgBuf,&nbsp;&quot;%d&nbsp;ERR&nbsp;%d&nbsp;%s\1&quot;,&nbsp;nEchoId,&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;strlen(&nbsp;sz&nbsp;),&nbsp;sz&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;else&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;const&nbsp;char&nbsp;szFmtMessage[&nbsp;]&nbsp;=&nbsp;&quot;message=\&quot;%s\&quot;&quot;;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;sprintf(&nbsp;sz,&nbsp;szFmtMessage,&nbsp;pszMsg&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;if&nbsp;(&nbsp;nEchoId&nbsp;&gt;=&nbsp;0&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;sprintf(&nbsp;szMsgBuf,&nbsp;&quot;%d&nbsp;BH&nbsp;%s\1&quot;,&nbsp;nEchoId,&nbsp;sz&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;else&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;sprintf(&nbsp;szMsgBuf,&nbsp;&quot;BH&nbsp;%s\1&quot;,&nbsp;sz&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;write(&nbsp;STDOUT_FILENO,&nbsp;(void*)&nbsp;szMsgBuf,&nbsp;strlen(&nbsp;szMsgBuf&nbsp;)&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;DEBUGOUTINT(&nbsp;nMsgType&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;DEBUGOUTINT(&nbsp;nCert&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;DEBUGOUT(&nbsp;szDbgMarkReturnMsgBegin&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;DEBUGOUT2(&nbsp;szMsgBuf,&nbsp;strlen(&nbsp;szMsgBuf&nbsp;)&nbsp;-&nbsp;1&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;DEBUGOUT2(&nbsp;szEndTerm,&nbsp;strlen(&nbsp;szEndTerm&nbsp;)&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;DEBUGOUT(&nbsp;szDbgMarkReturnMsgEnd&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;verifyCertificate(&nbsp;char*&nbsp;pszSslMsg&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;static&nbsp;char&nbsp;szGrabStdOut[&nbsp;4100&nbsp;];&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;static&nbsp;char&nbsp;szGrabStdErr[&nbsp;4100&nbsp;];&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;int&nbsp;pipefdin[&nbsp;2&nbsp;];&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;int&nbsp;pipefdout[&nbsp;2&nbsp;];&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;int&nbsp;pipefderr[&nbsp;2&nbsp;];&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;pid_t&nbsp;cpid;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;if&nbsp;(&nbsp;pipe(&nbsp;pipefdin&nbsp;)&nbsp;==&nbsp;-1&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;goto&nbsp;failPipeIn;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;DEBUGOUTINT(&nbsp;pipefdin[&nbsp;0&nbsp;]&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;DEBUGOUTINT(&nbsp;pipefdin[&nbsp;1&nbsp;]&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;if&nbsp;(&nbsp;pipe(&nbsp;pipefdout&nbsp;)&nbsp;==&nbsp;-1&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;goto&nbsp;failPipeOut;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;DEBUGOUTINT(&nbsp;pipefdout[&nbsp;0&nbsp;]&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;DEBUGOUTINT(&nbsp;pipefdout[&nbsp;1&nbsp;]&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;if&nbsp;(&nbsp;pipe(&nbsp;pipefderr&nbsp;)&nbsp;==&nbsp;-1&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;goto&nbsp;failPipeErr;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;DEBUGOUTINT(&nbsp;pipefderr[&nbsp;0&nbsp;]&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;DEBUGOUTINT(&nbsp;pipefderr[&nbsp;1&nbsp;]&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;cpid&nbsp;=&nbsp;fork(&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;if&nbsp;(&nbsp;cpid&nbsp;==&nbsp;-1&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;goto&nbsp;failFork;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;DEBUGOUTINT(&nbsp;cpid&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;if&nbsp;(&nbsp;cpid&nbsp;==&nbsp;0&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;{   &nbsp;   &nbsp;   &nbsp;   &nbsp;/*&nbsp;inside&nbsp;child&nbsp;fork&nbsp;*/&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;close(&nbsp;pipefdin[&nbsp;1&nbsp;]&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;close(&nbsp;pipefdout[&nbsp;0&nbsp;]&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;close(&nbsp;pipefderr[&nbsp;0&nbsp;]&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;dup2(&nbsp;pipefdin[&nbsp;0&nbsp;],&nbsp;STDIN_FILENO&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;close(&nbsp;pipefdin[&nbsp;0&nbsp;]&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;dup2(&nbsp;pipefdout[&nbsp;1&nbsp;],&nbsp;STDOUT_FILENO&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;close(&nbsp;pipefdout[&nbsp;1&nbsp;]&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;dup2(&nbsp;pipefderr[&nbsp;1&nbsp;],&nbsp;STDERR_FILENO&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;close(&nbsp;pipefderr[&nbsp;1&nbsp;]&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;if&nbsp;(&nbsp;execl(&nbsp;&quot;/usr/lib64/squid/ssl_crtvalid/verify.sh&quot;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;./verify.sh&quot;,&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;szFnameCert,&nbsp;szFnameIssuer,&nbsp;szFnameChain,&nbsp;szSslHost,&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;(char*)&nbsp;NULL&nbsp;)&nbsp;==&nbsp;-1&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;exit(&nbsp;EXIT_FAILURE&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;else&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;{   &nbsp;   &nbsp;   &nbsp;   &nbsp;/*&nbsp;inside&nbsp;parent&nbsp;fork&nbsp;*/&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;char*&nbsp;psz;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;int&nbsp;n;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;close(&nbsp;pipefdin[&nbsp;0&nbsp;]&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;close(&nbsp;pipefdout[&nbsp;1&nbsp;]&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;close(&nbsp;pipefderr[&nbsp;1&nbsp;]&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;close(&nbsp;pipefdin[&nbsp;1&nbsp;]&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;n&nbsp;=&nbsp;0,&nbsp;psz&nbsp;=&nbsp;szGrabStdOut;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;while&nbsp;(&nbsp;(&nbsp;n++&nbsp;&lt;&nbsp;4096&nbsp;)&nbsp;&amp;&amp;&nbsp;(&nbsp;read(&nbsp;pipefdout[&nbsp;0&nbsp;],<br>
&nbsp;&nbsp;&nbsp;&nbsp;psz++,&nbsp;1&nbsp;)&nbsp;&gt;&nbsp;0&nbsp;)&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;*psz&nbsp;=&nbsp;'\0';&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;n&nbsp;=&nbsp;0,&nbsp;psz&nbsp;=&nbsp;szGrabStdErr;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;while&nbsp;(&nbsp;(&nbsp;n++&nbsp;&lt;&nbsp;4096&nbsp;)&nbsp;&amp;&amp;&nbsp;(&nbsp;read(&nbsp;pipefderr[&nbsp;0&nbsp;],<br>
&nbsp;&nbsp;&nbsp;&nbsp;psz++,&nbsp;1&nbsp;)&nbsp;&gt;&nbsp;0&nbsp;)&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;*psz&nbsp;=&nbsp;'\0';&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;close(&nbsp;pipefdout[&nbsp;0&nbsp;]&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;close(&nbsp;pipefderr[&nbsp;0&nbsp;]&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;wait(&nbsp;NULL&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;/*&nbsp;this&nbsp;is&nbsp;only&nbsp;parent&nbsp;fork&nbsp;*/&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;DEBUGOUTSZ(&nbsp;szGrabStdOut&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;DEBUGOUTSZ(&nbsp;szGrabStdErr&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;static&nbsp;char&nbsp;sz[&nbsp;260&nbsp;];&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;char*&nbsp;psz&nbsp;=&nbsp;(char*)&nbsp;szGrabStdOut;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;sprintf(&nbsp;sz,&nbsp;&quot;%s:&nbsp;OK&quot;,&nbsp;szFnameCert&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;if&nbsp;(&nbsp;strncmp(&nbsp;psz,&nbsp;sz,&nbsp;strlen(&nbsp;sz&nbsp;)&nbsp;)&nbsp;==&nbsp;0&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;psz&nbsp;+=&nbsp;strlen(&nbsp;sz&nbsp;)&nbsp;+&nbsp;1;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;sprintf(&nbsp;sz,&nbsp;&quot;%s:&nbsp;revoked&quot;,&nbsp;szFnameCert&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;if&nbsp;(&nbsp;strncmp(&nbsp;psz,&nbsp;sz,&nbsp;strlen(&nbsp;sz&nbsp;)&nbsp;)&nbsp;==&nbsp;0&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;strcpy(&nbsp;pszSslMsg,&nbsp;szSslMsgCertRevoked&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;return&nbsp;1;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;sprintf(&nbsp;sz,&nbsp;&quot;%s:&nbsp;good&quot;,&nbsp;szFnameCert&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;if&nbsp;(&nbsp;strncmp(&nbsp;psz,&nbsp;sz,&nbsp;strlen(&nbsp;sz&nbsp;)&nbsp;)&nbsp;==&nbsp;0&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;else&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;goto&nbsp;invalidCert;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;else&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;invalidCert:&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;strcpy(&nbsp;pszSslMsg,&nbsp;szSslMsgCertRejected&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;   &nbsp;return&nbsp;1;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;return&nbsp;0;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;failFork:&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;close(&nbsp;pipefderr[&nbsp;0&nbsp;]&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;close(&nbsp;pipefderr[&nbsp;1&nbsp;]&nbsp;);   &nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;failPipeErr:&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;close(&nbsp;pipefdout[&nbsp;0&nbsp;]&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;close(&nbsp;pipefdout[&nbsp;1&nbsp;]&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;failPipeOut:&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;close(&nbsp;pipefdin[&nbsp;0&nbsp;]&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;close(&nbsp;pipefdin[&nbsp;1&nbsp;]&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;failPipeIn:&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;return&nbsp;-1;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;verifyHostName(&nbsp;const&nbsp;char*&nbsp;pszHostName&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;int&nbsp;nLen&nbsp;=&nbsp;(int)&nbsp;strlen(&nbsp;pszHostName&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;char*&nbsp;psz&nbsp;=&nbsp;(char*)&nbsp;(&nbsp;pszHostName&nbsp;+&nbsp;nLen&nbsp;-&nbsp;1&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;if&nbsp;(&nbsp;strspn(&nbsp;pszHostName,&nbsp;&quot;0123456789.&quot;&nbsp;)&nbsp;==&nbsp;nLen&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;return&nbsp;-1;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;if&nbsp;(&nbsp;strspn(&nbsp;pszHostName,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;0123456789abcdefghijklmnopqrstuvwxyz.-&quot;&nbsp;)&nbsp;&lt;&nbsp;nLen&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;return&nbsp;-1;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;if&nbsp;(&nbsp;*psz&nbsp;==&nbsp;']'&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;return&nbsp;-1;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;if&nbsp;(&nbsp;isdigit(&nbsp;(int)&nbsp;*psz&nbsp;)&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;   &nbsp;return&nbsp;-1;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#ifdef&nbsp;_DEBUG&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;debugInit(&nbsp;int&nbsp;nLine&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;static&nbsp;char&nbsp;sz[&nbsp;260&nbsp;];&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;time_t&nbsp;t&nbsp;=&nbsp;time(&nbsp;(time_t*)&nbsp;NULL&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;debugWrite(&nbsp;(const&nbsp;void*)&nbsp;szDbgMarkInit,&nbsp;strlen(&nbsp;szDbgMarkInit&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;strftime(&nbsp;sz,&nbsp;80,&nbsp;&quot;date/time:&nbsp;%a,&nbsp;%d-%b-%Y;&nbsp;%H:%M:%S\n&quot;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;localtime(&nbsp;&amp;t&nbsp;)&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;debugOutputHlpr(&nbsp;nLine,&nbsp;(const&nbsp;void*)&nbsp;sz,&nbsp;strlen(&nbsp;sz&nbsp;)&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;debugOutputHlpr(&nbsp;int&nbsp;nLine,&nbsp;const&nbsp;void*&nbsp;pvdBuf,&nbsp;int&nbsp;nBufLen&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;static&nbsp;char&nbsp;sz[&nbsp;130&nbsp;];&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;pid_t&nbsp;pid&nbsp;=&nbsp;(pid_t)&nbsp;getpid(&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;sprintf(&nbsp;sz,&nbsp;&quot;ssl_crtvalid/helper[pid=%d,line=%d]&nbsp;&quot;,&nbsp;(int)&nbsp;pid,<br>
&nbsp;&nbsp;&nbsp;&nbsp;(int)&nbsp;nLine&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;debugWrite(&nbsp;(const&nbsp;void*)&nbsp;sz,&nbsp;strlen(&nbsp;sz&nbsp;)&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;debugWrite(&nbsp;pvdBuf,&nbsp;nBufLen&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;debugOutputInt(&nbsp;int&nbsp;nLine,&nbsp;const&nbsp;char*&nbsp;pszName,&nbsp;int&nbsp;nVal&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;static&nbsp;char&nbsp;sz[&nbsp;260&nbsp;];&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;sprintf(&nbsp;sz,&nbsp;&quot;%s:&nbsp;%d\n&quot;,&nbsp;pszName,&nbsp;nVal&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;debugOutputHlpr(&nbsp;nLine,&nbsp;(const&nbsp;void*)&nbsp;sz,&nbsp;strlen(&nbsp;sz&nbsp;)&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;debugOutputStr(&nbsp;int&nbsp;nLine,&nbsp;const&nbsp;char*&nbsp;pszName,&nbsp;const&nbsp;char*<br>
&nbsp;&nbsp;&nbsp;&nbsp;pszVal&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;static&nbsp;char&nbsp;sz[&nbsp;260&nbsp;];&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;sprintf(&nbsp;sz,&nbsp;&quot;%s:&nbsp;'%s'\n&quot;,&nbsp;pszName,&nbsp;pszVal&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;debugOutputHlpr(&nbsp;nLine,&nbsp;(const&nbsp;void*)&nbsp;sz,&nbsp;strlen(&nbsp;sz&nbsp;)&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;debugWrite(&nbsp;const&nbsp;void*&nbsp;pvdBuf,&nbsp;int&nbsp;nBufLen&nbsp;)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;write(&nbsp;STDERR_FILENO,&nbsp;pvdBuf,&nbsp;nBufLen&nbsp;);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#endif&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/helper.c&gt;&lt;br&gt;<br>
&nbsp;&nbsp;&lt;/body&gt;<br>
&lt;/html&gt;<br>

</tt>
