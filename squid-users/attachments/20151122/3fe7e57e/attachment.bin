#!/usr/bin/perl -l

use strict;
use warnings;
use IO::Handle;
use URI::Escape;
use DBI;
use 5.010;

$|=1;                   # don't buffer stdout

my ($db_user, $db_name, $db_pass) = (	# set variables for database access
	"jens", "proxy", "test");	# <user> <database> <password>

my $db_host = "127.0.0.1";		# data base host
my $db_port = 3306;			# mysql standard port

my $dbh = DBI->connect(			# connect to data base
	"dbi:mysql:database=$db_name",  # db_name
	$db_user,			# db_user
	$db_pass,			# db_pass
	{RaiseError => 1},		# on error or other access error
	) or die("FATAL: data base can't be open!");	# end script if error

my $string = "";	# forward declaration

open(LOGFILE,">>","/sap/squid/datei.dat")	# open custom log file
or die("FATAL: could not open log file!");	# error, on fail
if (-f LOGFILE) {				# if it exists
  while (my $line = <STDIN>) {			# read line from STDIN (squid input)
    chomp($line);				# get it
    if ($line eq "exit") {			# test if, todo remove it
        last;					# break while loop (if run in shell)
    }

    if (length trim($line) < 1)     # if entry data empty? (only one char: \n)
       {next;}                      # if so, process next loop

    my ($user, $dest) = split / /, $line;  # syntax:  user <space> url  get user,dest seperated by space

    if (not defined $user) { next; }	# if user not defined (no input)
    if (not defined $dest) { next; }	# if dest not defined (no input)

    if (length trim($user) < 1) { next; }	# second check, if user string length < 1 (no input)
    if (length trim($dest) < 1) { next; }	# second check, if dest string length < 1 (no input)

    $dest = uri_unescape($dest);	# remove \n
    $user = uri_unescape($user);	# remove \n

    my $sql = "SELECT name, blocked FROM squid WHERE name = ?";   # setup safe sql query string
    $sql = $dbh->prepare($sql); 				  # prepare a mysql query with query string
    $sql->execute($dest);					  # bind ? in sql string as string (for url)

    my ($name, $blocked) = $sql->fetchrow_array();	# get a row from data base
    if (not defined $name) {				# no row exists, name is not defined
	deny($user,$dest);				# call deny
	next;						# next loop (get next line from squid)
    }

    my  $fields = $sql->{NUM_OF_FIELDS};	# get data base fields
    if ($fields < 1) {				# if they < 1, no fields, no data base item present
	$sql->finish();				# clear sql query
	deny($user,$dest);			# call deny
	next;					# next loop, ...
    }

    $string = $user . " : ";	# format string for custom log (datei)
    if ($name eq $dest) {	# if name (dbfield) equals dest (squid url) - see above
    if ($blocked eq 0)  { grant($user,$dest);		# if blocked (dbfield) equals 0 user can see page
    }  else             { deny ($user,$dest); } 	# else blocked 1,  deny access
    }  else		{ deny ($user,$dest); } 	# if name <> dest, deny access

    $sql->finish();	# clear sql query for next use

    my @newline="";		# clear newline array
    push(@newline,$string);	# push $string to newline array
    print LOGFILE @newline;	# print array ($string) to LOGFILE (datei)
  }
  close(LOGFILE);		# close file, when while loop is break/finish
  $dbh->disconnect();		# close data base connection
}
else {
  die("FATAL: can't be open input device!");  # sanity check
}

sub ltrim { my $s = shift; $s =~ s/^\s+//;       return $s };  # trim <left> white spaces
sub rtrim { my $s = shift; $s =~ s/\s+$//;       return $s };  # trim <right>  "
sub  trim { my $s = shift; $s =~ s/^\s+|\s+$//g; return $s };  # trim <lr>     "

# response grant - squid: OK
sub grant  {
  my $user = shift;			# get 1 parameter
  my $dest = shift;			# get 2 parameter
  $string .= $dest . " T";		# custom log format (datei) - LOGFILE
  print "OK user=" . $user . "\n";	# print OK - squid
}

# response deny - squid: ERR
sub deny {
  my $user = shift;			# get 1 parameter
  my $dest = shift;			# get 2 parameter
  $string .= $dest . " F";		# custom log format (datei) - LOGFILE
  print "ERR\n";			# print ERR - squid
}

