--- PeerOptions.cc.orig	2022-09-05 09:36:48.000000000 +0530
+++ PeerOptions.cc	2022-12-28 12:05:37.782176639 +0530
@@ -443,8 +443,10 @@
 {
     // do not allow repeated parsing when multiple contexts are created
     // NP: we cannot use !parsedOptions because a nil value does have meaning there
-    if (!optsReparse)
+    if (!optsReparse) {
+        debugs(83, 5, "INFO: TLS parsedOptions(1)=" << parsedOptions);
         return;
+    }
     optsReparse = false;
 
     // combination of settings we have to set via parsedOptions.
@@ -525,6 +527,7 @@
 #elif USE_GNUTLS
     if (str.isEmpty()) {
         parsedOptions.reset();
+        debugs(83, 5, "INFO: TLS parsedOptions(2)=" << parsedOptions);
         return;
     }
 
@@ -540,6 +543,7 @@
         gnutls_priority_deinit(p);
     });
 #endif
+    debugs(83, 5, "INFO: TLS parsedOptions(3)=" << parsedOptions);
 }
 
 /**
@@ -635,7 +639,9 @@
 {
     parseOptions();
 #if USE_OPENSSL
+    debugs(83, 5, "set OpenSSL options for context=" << ctx << ", parsedOptions=" << parsedOptions);
     SSL_CTX_set_options(ctx.get(), parsedOptions);
+    debugs(83, 5, "get OpenSSL options for context=" << ctx << ", getOptions=" << SSL_CTX_get_options(ctx.get()));
 #elif USE_GNUTLS
     // NP: GnuTLS uses 'priorities' which are set only per-session instead.
 #endif
@@ -769,6 +775,7 @@
     debugs(83, 5, "set OpenSSL options for session=" << s << ", parsedOptions=" << parsedOptions);
     // XXX: Options already set before (via the context) are not cleared!
     SSL_set_options(s.get(), parsedOptions);
+    debugs(83, 5, "get OpenSSL options for session=" << s << ", getOptions=" << SSL_get_options(s.get()));
 
 #elif USE_GNUTLS
     LibErrorCode x;
