#!/bin/bash
#
#this script will download/install and configure the following packages
#
#squid - proxy server
#squid ssl bump - intercept HTTPS traffic
#clamAV - antivirus engine inc trojans,viruses,malware
#c-icap - icap server
#squidclamav - that integrates all the above in squid
#whitelist URL's
#deny MIME types
#
#disable firewalld and SElinux
#
systemctl stop firewalld
systemctl disable firewalld
sed -i -e 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config
#
#install epel repositry
dnf install -y epel-release
#install libtool-ltdl-devel
dnf --enablerepo=crb install -y libtool-ltdl-devel
#install squid packages
dnf install -y gcc-c++ gcc g++ binutils make sudo wget tar automake autoconf perl libxml2-devel libcap-devel openssl openssl-devel libarchive
#install clamAV packages
dnf install -y clamd clamav clamav-data clamav-devel clamav-lib clamav-update
#
#download and compile from source
#
cd /tmp
wget http://www.squid-cache.org/Versions/v6/squid-6.1.tar.gz
wget http://sourceforge.net/projects/c-icap/files/c-icap/0.5.x/c_icap-0.5.10.tar.gz --no-check-certificate
wget http://sourceforge.net/projects/c-icap/files/c-icap-modules/0.5.x/c_icap_modules-0.5.5.tar.gz --no-check-certificate
wget https://sourceforge.net/projects/squidclamav/files/squidclamav/7.2/squidclamav-7.2.tar.gz --no-check-certificate
#
for f in *.tar.gz; do tar xf "$f"; done
#
cd /tmp/squid-6.1
./configure --with-openssl --enable-ssl --enable-ssl-crtd --enable-icap-client --enable-http-violations && make && make install
#
cd /tmp/c_icap-0.5.10
./configure 'CXXFLAGS=-O2 -m64 -pipe' 'CFLAGS=-O2 -m64 -pipe' --without-bdb --prefix=/usr/local && make && make install
#
cd /tmp/c_icap_modules-0.5.5
./configure 'CFLAGS=-O3 -m64 -pipe' 'CPPFLAGS=-I/usr/local/clamav/include' 'LDFLAGS=-L/usr/local/lib -L/usr/local/clamav/lib/' && make && make install
#
cd /tmp/squidclamav-7.2
./configure 'CXXFLAGS=-O2 -m64 -pipe' 'CFLAGS=-O2 -m64 -pipe' --with-c-icap=/usr/local --with-libarchive && make && make install
#
#creating shortcuts and copying files
#
cp -f /usr/local/squid/etc/squid.conf /usr/local/squid/etc/squid.conf.orig
cp -f /usr/local/etc/c-icap.conf /usr/local/etc/c-icap.conf.orig
cp -f /usr/local/etc/squidclamav.conf /usr/local/etc/squidclamav.conf.orig
cp -f /usr/local/etc/clamav_mod.conf /usr/local/etc/clamav_mod.conf.orig
cp -f /usr/local/etc/virus_scan.conf /usr/local/etc/virus_scan.conf.orig
#
ln -s /usr/local/squid/etc/squid.conf /etc
ln -s /usr/local/etc/c-icap.conf /etc
ln -s /usr/local/etc/squidclamav.conf /etc
ln -s /usr/local/etc/clamav_mod.conf /etc
ln -s /usr/local/etc/virus_scan.conf /etc
#
mkdir -p /usr/local/clamav/share/clamav
ln -s /var/lib/clamav /usr/local/clamav/share/clamav
#
#tmpfiles for run files
#
echo "d /var/run/c-icap 0755 root root -" >> /etc/tmpfiles.d/c-icap.conf
echo "d /var/run/clamav 0755 root root -" >> /etc/tmpfiles.d/clamav.conf
#
#original squid config
#
sed -i '/http_port 3128/d' /usr/local/squid/etc/squid.conf
sed -i -e 's%http_access deny !Safe_ports%#http_access deny !Safe_ports%g' /usr/local/squid/etc/squid.conf
sed -i -e 's%http_access deny CONNECT !SSL_ports%#http_access deny CONNECT !SSL_ports%g' /usr/local/squid/etc/squid.conf
#
#create URL, MIME and public key list
#
echo "
#o365 Activation$
(^|\.)login.windows.net$
(^|\.)cdn.uci.officeapps.live.com$
(^|\.)go.microsoft.com$
(^|\.)licensing.mp.microsoft.com$
(^|\.)login.live.com$
(^|\.)ocps.manage.microsoft.com$
(^|\.)clients.config.office.net$
(^|\.)ocws.officeapps.live.com$
(^|\.)ols.officeapps.live.com$
(^|\.)enterpriseregistration.windows.net$
(^|\.)aadcdn.msauth.net$
(^|\.)aadcdn.msftauth.net$
(^|\.)login.microsoftonline.com$
(^|\.)odc.officeapps.live.com$
(^|\.)officeclient.microsoft.com$
(^|\.)sls.microsoft.com$
#NCSI$
(^|\.)www.msftncsi.com$
(^|\.)www.msftconnecttest.com$
(^|\.)dns.msftncsi.com$
#adobe CC Activation$
(^|\.)adobecces.com$
(^|\.)adobesc.com$
(^|\.).licenses.adobe.com$
(^|\.)adobelogin.com$
(^|\.)ftcdn.net$
(^|\.)behance.net$
(^|\.)adobedtm.com$
(^|\.)demdex.net$
(^|\.)demandbase.com$
(^|\.)adobeoobe.com$
(^|\.)macromedia.com$
(^|\.)adbemdigitalmediarebootprod2.112.2o7.net$
(^|\.)edgefonts.net$
(^|\.)adobejanus.com$
(^|\.)adobeccstatic.com$
(^|\.)adobess.com$
(^|\.)adobecce.com$
(^|\.)adobe.com$
(^|\.)adobe.io$
(^|\.)adobecc.com$
(^|\.).fonts.adobe.com$
(^|\.)typekit.net$
(^|\.)typekit.com$
(^|\.)omtrdc.net$
(^|\.)adobetag.com$
(^|\.)adobe.ly$
(^|\.).account.adobe.com$
#radius60 quickbase$
(^|\.)services.quickbase.com$
(^|\.)pendo-static-5763578087604224.storage.googleapis.com$
(^|\.)api-test.mixfive.com$
(^|\.)by2.uservoice.com$
(^|\.)widget.uservoice.com$
(^|\.)data.analytics.ux.quickbase.com$
(^|\.)content.analytics.ux.quickbase.com$
(^|\.)images.quickbase.com$
(^|\.)radius60.ui.quickbase.com$
(^|\.)assets-cflare.quickbasecdn.net$
(^|\.)ui-features.quickbase.com$
(^|\.)radius60.quickbase.com$
(^|\.)www.ui.quickbase.com$
(^|\.)sso.pixelogicmedia.com$
(^|\.)feedback.us.pendo.io$
(^|\.)app.launchdarkly.com$
(^|\.)events.launchdarkly.com$
(^|\.)clientstream.launchdarkly.com$
#digicert$
(^|\.)crl3.digicert.com$
(^|\.)crl4.digicert.com$
(^|\.)ocsp.digicert.com$
#maxon$
(^|\.)activate.redshift3d.com$
(^|\.)updater.maxon.net$
(^|\.)package-cf.redgiant.com$
(^|\.)link.redgiant.com$
(^|\.)rs-legacy-api.maxon.net$
(^|\.)my.maxon.net$
(^|\.)id.maxon.net$
(^|\.)assets.maxon.net$
(^|\.)d3c7xcsl91i5li.cloudfront.net$
#insydium$
(^|\.)license.insydium.net$
#ilok
(^|\.)activation.paceap.com$
#easydcp
(^|\.)www.easydcp.com$
(^|\.)licensing.easydcp.com$
" >> /usr/local/squid/etc/urlwhite.txt
#
echo "
https://ccmdls.adobe.com/AdobeProducts/
https://sstats.adobe.com/b/ss/
" >> /usr/local/squid/etc/urlspecial.txt
#
echo "
application/octet-stream
application/x-msi
application/zip
application/x-7z-compressed
application/vnd.ms-cab-compressed
application/x-msdownload
application/x-iso9660-image
application/x-tar
application/x-apple-diskimage
" >> /usr/local/squid/etc/mimedeny.txt
#
echo "
#o365$
(^|\.)sls.microsoft.com$
#adobe cc$
(^|\.)adobe.io$
(^|\.)typekit.net$
(^|\.)typekit.com$
(^|\.)adobelogin.com$
(^|\.)cc-api-data.adobe.com$
(^|\.)services.adobe.com$
(^|\.)licenses.adobe.com$
(^|\.)accounts.adobe.com$
(^|\.)activate.adobe.com$
#insydium$
(^|\.)license.insydium.net$
#maxon$
(^|\.)id.maxon.net$
(^|\.)d3c7xcsl91i5li.cloudfront.net$
#ilok
(^|\.)activation.paceap.com$
#radius60 quickbase
(^|\.)radius60.quickbase.com$
(^|\.)sso.pixelogicmedia.com$
#easydcp
(^|\.)www.easydcp.com$
(^|\.)licensing.easydcp.com$
" >> /usr/local/squid/etc/pubkey.txt
#
#ICAP in squid
#
echo "#ICAP" >> /usr/local/squid/etc/squid.conf
echo "icap_enable on" >> /usr/local/squid/etc/squid.conf
echo "adaptation_uses_indirect_client on" >> /usr/local/squid/etc/squid.conf
echo "icap_send_client_ip on" >> /usr/local/squid/etc/squid.conf
echo "icap_send_client_username on" >> /usr/local/squid/etc/squid.conf
echo "icap_client_username_header X-Authenticated-User" >> /usr/local/squid/etc/squid.conf
echo "icap_service service_req reqmod_precache bypass=0 icap://127.0.0.1:1344/squidclamav" >> /usr/local/squid/etc/squid.conf
echo "adaptation_access service_req allow all" >> /usr/local/squid/etc/squid.conf
echo "icap_service service_resp respmod_precache bypass=0 icap://127.0.0.1:1344/squidclamav" >> /usr/local/squid/etc/squid.conf
echo "adaptation_access service_resp allow all" >> /usr/local/squid/etc/squid.conf
#
#creating SSL
#
mkdir -p /usr/local/squid/etc/ssl_cert
cd /usr/local/squid/etc/ssl_cert
adduser squid
chown squid:squid /usr/local/squid/etc/ssl_cert
chmod 700 /usr/local/squid/etc/ssl_cert
openssl req -new -newkey rsa:2048 -sha256 -days 999 -nodes -x509 -extensions v3_ca -keyout myCA.pem  -out myCA.pem -batch
#must import the below cert on hosts in trusted root cert ie the .der file
openssl x509 -in myCA.pem -outform DER -out myCA.der
/usr/local/squid/libexec/security_file_certgen -c -s /var/lib/ssl_db -M 4MB
chown squid:squid -R /var/lib/ssl_db
chmod -R 777 /usr/local/squid/var/logs
#
#squid config
#
sed -i '/INSERT YOUR OWN RULE(S) HERE TO ALLOW ACCESS FROM YOUR CLIENTS/ainclude /usr/local/squid/etc/squidrules.conf' /usr/local/squid/etc/squid.conf
#
echo "
#SSL Interception
acl DiscoverSNIHost at_step SslBump1
acl NoSSLIntercept ssl::server_name_regex '/usr/local/squid/etc/pubkey.txt'
ssl_bump peek DiscoverSNIHost
ssl_bump splice NoSSLIntercept
ssl_bump bump all
#
#SSL Bump
http_port 3128 ssl-bump cert=/usr/local/squid/etc/ssl_cert/myCA.pem generate-host-certificates=on dynamic_cert_mem_cache_size=4MB
sslcrtd_program /usr/local/squid/libexec/security_file_certgen -s /var/lib/ssl_db -M 4MB
#
#deny up MIME types
acl upmime req_mime_type '/usr/local/squid/etc/mimedeny.txt'
#
#deny URL links
acl url_links url_regex '/usr/local/squid/etc/linksurl.txt'
#
#allow special URL paths
acl special_url url_regex '/usr/local/squid/etc/urlspecial.txt'
#
#deny down MIME types
acl downmime rep_mime_type '/usr/local/squid/etc/mimedeny.txt'
#
http_reply_access allow special_url
http_reply_access deny downmime
#http_access deny upmime
#http_access deny url_links
#
#HTTP_HTTPS whitelist websites
acl whitelist ssl::server_name_regex '/usr/local/squid/etc/urlwhite.txt'
#
acl activation port 80 443
#
http_access allow activation whitelist
http_access deny all
" >> /usr/local/squid/etc/squidrules.conf
#
#squidclamav conf
#
sed -i -e 's%redirect http://proxy.domain.dom/cgi-bin/clwarn.cgi%#redirect http://proxy.domain.dom/cgi-bin/clwarn.cgi%g' /etc/squidclamav.conf
sed -i -e 's%enable_libarchive 0%enable_libarchive 1%g' /etc/squidclamav.conf
#
#clamav conf
#
sed -i -e 's%#LocalSocket /run/clamd.scan/clamd.sock%LocalSocket /var/run/clamav/clamd.ctl%g' /etc/clamd.d/scan.conf
sed -i -e 's%Example%#Example%g' /etc/clamd.d/scan.conf
sed -i -e 's%User clamscan%User root%g' /etc/clamd.d/scan.conf
sed -i -e 's%#StreamMaxLength 10M%StreamMaxLength 5M%g' /etc/clamd.d/scan.conf
freshclam
systemctl enable clamd@scan
#
#install swaks
cd /root
wget https://www.jetmore.org/john/code/swaks/files/swaks-20201014.0.tar.gz
for f in swaks*.tar.gz; do tar xf "$f"; done
chmod 755 swaks*/swaks
cp -f swaks*/swaks /usr/bin/
#
#crontab
#
echo "0 08,20 * * * /scripts/virusscan.sh" >> /var/spool/cron/root
echo "@reboot /usr/local/squid/sbin/squid" >> /var/spool/cron/root
echo "*/15 * * * * /usr/local/squid/sbin/squid -k reconfigure" >> /var/spool/cron/root
#
#rotate squid log files via logrotate
echo "
/usr/local/squid/var/logs/*.log {
monthly
rotate 3
compress
delaycompress
missingok
sharedscripts
dateext
dateformat -%d%m%Y
su root root
postrotate
/usr/local/squid/sbin/squid -k reconfigure
endscript
}
" >> /etc/logrotate.d/squid
#
#freshclam and virus scan script
echo "
#!/bin/bash
dnf install -y epel-release
dnf install -y clamd clamav clamav-data clamav-devel clamav-lib clamav-update
/usr/bin/freshclam > /scripts/clamscan/virusscan.txt
/usr/bin/clamscan -r -i --move=/viruses/ --exclude-dir=/sys / >> /scripts/clamscan/virusscan.txt
vs=\$(grep -i 'infected files' /scripts/clamscan/virusscan.txt | awk '{print \$3}')
if [ \$vs -gt 0 ]; then
swaks -t uk.support@pixelogicmedia.com -f smtp@pixelogicmedia.com -s smtp.office365.com -p 587 -tls -a LOGIN -au smtp@pixelogicmedia.com -ap D3faultpassword --header 'Subject: lon-d-squid Virus Scan' --body @/scripts/clamscan/virusscan.txt -S 2
fi
rm -f /scripts/clamscan/virusscan.txt
" >> /scripts/virusscan.sh
#
#c-icap and c-icap modules
#
sed -i -e 's%#.*User wwwrun%User root%g' /etc/c-icap.conf
sed -i -e 's%#.*Group nogroup%Group root%g' /etc/c-icap.conf
sed -i -e 's%#.*Service echo_service srv_echo.so%Service squidclamav squidclamav.so%g' /etc/c-icap.conf
sed -i -e 's%DebugLevel 1%DebugLevel 0%g' /etc/c-icap.conf
sed -i -e 's%StartServers 3%StartServers 1%g' /etc/c-icap.conf
sed -i -e 's%MaxServers 10%MaxServers 20%g' /etc/c-icap.conf
sed -i -e 's%MaxRequestsPerChild  0%MaxRequestsPerChild  100%g' /etc/c-icap.conf
sed -i '520iacl localhost src 127.0.0.1/255.255.255.255' /etc/c-icap.conf
sed -i '521iacl PERMIT_REQUESTS type REQMOD RESPMOD' /etc/c-icap.conf
sed -i '522iicap_access allow localhost PERMIT_REQUESTS' /etc/c-icap.conf
sed -i '523iicap_access deny all' /etc/c-icap.conf
echo "clamav_mod.TmpDir /var/tmp" >> /etc/clamav_mod.conf
echo "clamav_mod.MaxFilesInArchive 1000" >> /etc/clamav_mod.conf
echo "clamav_mod.MaxScanSize 5M" >> /etc/clamav_mod.conf
echo "clamav_mod.HeuristicScanPrecedence on" >> /etc/clamav_mod.conf
echo "clamav_mod.OLE2BlockMacros on" >> /etc/clamav_mod.conf
echo "virus_scan.ScanFileTypes TEXT DATA EXECUTABLE ARCHIVE DOCUMENT" >> /etc/virus_scan.conf
echo "virus_scan.SendPercentData 5" >> /etc/virus_scan.conf
echo "virus_scan.PassOnError on" >> /etc/virus_scan.conf
echo "virus_scan.MaxObjectSize  5M" >> /etc/virus_scan.conf
echo "virus_scan.DefaultEngine clamav" >> /etc/virus_scan.conf
echo "Include clamav_mod.conf" >> /etc/virus_scan.conf
echo "Include virus_scan.conf" >> /etc/c-icap.conf
#
#make c-icap service
#
echo "[Unit]" >> /usr/lib/systemd/system/c-icap.service
echo "Description=c-icap service" >> /usr/lib/systemd/system/c-icap.service
echo "After=network.target" >> /usr/lib/systemd/system/c-icap.service
echo "[Service]" >> /usr/lib/systemd/system/c-icap.service
echo "Type=forking" >> /usr/lib/systemd/system/c-icap.service
echo "PIDFile=/var/run/c-icap/c-icap.pid" >> /usr/lib/systemd/system/c-icap.service
echo "ExecStart=/usr/local/bin/c-icap -f /etc/c-icap.conf" >> /usr/lib/systemd/system/c-icap.service
echo "KillMode=process" >> /usr/lib/systemd/system/c-icap.service
echo "[Install]" >> /usr/lib/systemd/system/c-icap.service
echo "WantedBy=multi-user.target" >> /usr/lib/systemd/system/c-icap.service
systemctl enable c-icap
#
#make/chmod dirs
mkdir -p /scripts/clamscan
mkdir -p /viruses
chmod +x /scripts/*.sh
#
reboot